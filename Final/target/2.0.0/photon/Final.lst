
/Users/anseljohn/Documents/School/Freshman/Fall/ee1301Main/EE1301/Final/target/2.0.0/photon/Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003444  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3460  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a3464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000504  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a34cc  080a34cc  000234cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a34f4  080a34f4  000234f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ef42d  00000000  00000000  000234f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011b38  00000000  00000000  00112925  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000169ef  00000000  00000000  0012445d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001c68  00000000  00000000  0013ae4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004860  00000000  00000000  0013cab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024b13  00000000  00000000  00141314  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002722b  00000000  00000000  00165e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b155a  00000000  00000000  0018d052  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004860  00000000  00000000  0023e5ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
 80a0020:	b508      	push	{r3, lr}
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 f90f 	bl	80a3250 <memcpy>
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 f917 	bl	80a326c <memset>
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3464 	.word	0x080a3464
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	2000056c 	.word	0x2000056c
 80a0058:	2000056c 	.word	0x2000056c

080a005c <module_user_init>:
 80a005c:	b570      	push	{r4, r5, r6, lr}
 80a005e:	f002 f8b5 	bl	80a21cc <module_user_init_hook>
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a3434 	.word	0x080a3434
 80a0080:	080a3458 	.word	0x080a3458

080a0084 <module_user_setup>:
 80a0084:	f000 b814 	b.w	80a00b0 <setup>

080a0088 <module_user_loop>:
 80a0088:	b508      	push	{r3, lr}
 80a008a:	f000 f879 	bl	80a0180 <loop>
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0092:	f002 b85d 	b.w	80a2150 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f001 bbc5 	b.w	80a1824 <malloc>

080a009a <_ZdlPv>:
 80a009a:	f001 bbcb 	b.w	80a1834 <free>

080a009e <__cxa_guard_acquire>:
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:

void updateButtonState(int pCurrent);
void updateSystemState(bool pButtonPressed, SYSTEM_STATUS pCurrentStatus);
void setStatusLED(int pColor);

void setup() {
 80a00b0:	b508      	push	{r3, lr}
    pinMode(BUTTON_PIN, INPUT_PULLDOWN);
 80a00b2:	2103      	movs	r1, #3
 80a00b4:	2002      	movs	r0, #2
 80a00b6:	f002 f909 	bl	80a22cc <pinMode>

    mSystemStatusLED.begin();
 80a00ba:	4807      	ldr	r0, [pc, #28]	; (80a00d8 <setup+0x28>)
 80a00bc:	f000 f8e4 	bl	80a0288 <_ZN17Adafruit_NeoPixel5beginEv>
    mCurrentButtonState = NOT_PRESSED;
 80a00c0:	2301      	movs	r3, #1
 80a00c2:	4a06      	ldr	r2, [pc, #24]	; (80a00dc <setup+0x2c>)
 80a00c4:	7013      	strb	r3, [r2, #0]
    mPreviousButtonState = mCurrentButtonState;
 80a00c6:	4a06      	ldr	r2, [pc, #24]	; (80a00e0 <setup+0x30>)
 80a00c8:	7013      	strb	r3, [r2, #0]
    mCurrentSystemStatus = DISARMED;
 80a00ca:	4a06      	ldr	r2, [pc, #24]	; (80a00e4 <setup+0x34>)
 80a00cc:	7013      	strb	r3, [r2, #0]

    mJustPressed = false;
 80a00ce:	2200      	movs	r2, #0
 80a00d0:	4b05      	ldr	r3, [pc, #20]	; (80a00e8 <setup+0x38>)
 80a00d2:	701a      	strb	r2, [r3, #0]
}
 80a00d4:	bd08      	pop	{r3, pc}
 80a00d6:	bf00      	nop
 80a00d8:	20000078 	.word	0x20000078
 80a00dc:	20000074 	.word	0x20000074
 80a00e0:	20000077 	.word	0x20000077
 80a00e4:	20000075 	.word	0x20000075
 80a00e8:	20000076 	.word	0x20000076

080a00ec <_Z17updateButtonStatei>:
 * Updates the state of the button based on its current reading
 * Checks change in state to determine if it was just pressed
 * Updates previous state
 */
void updateButtonState(int pCurrent) {
    if (pCurrent == HIGH) {
 80a00ec:	2801      	cmp	r0, #1
        mCurrentButtonState = PRESSED;
 80a00ee:	bf14      	ite	ne
 80a00f0:	2101      	movne	r1, #1
 80a00f2:	2100      	moveq	r1, #0
 80a00f4:	4b08      	ldr	r3, [pc, #32]	; (80a0118 <_Z17updateButtonStatei+0x2c>)
 80a00f6:	4a09      	ldr	r2, [pc, #36]	; (80a011c <_Z17updateButtonStatei+0x30>)
 80a00f8:	7019      	strb	r1, [r3, #0]
    } else {
        mCurrentButtonState = NOT_PRESSED;
    }
    
    if (mCurrentButtonState == PRESSED && mPreviousButtonState == NOT_PRESSED) {
 80a00fa:	4b09      	ldr	r3, [pc, #36]	; (80a0120 <_Z17updateButtonStatei+0x34>)
 80a00fc:	d109      	bne.n	80a0112 <_Z17updateButtonStatei+0x26>
 80a00fe:	7810      	ldrb	r0, [r2, #0]
 80a0100:	2801      	cmp	r0, #1
 80a0102:	d106      	bne.n	80a0112 <_Z17updateButtonStatei+0x26>
        mJustPressed = true;
 80a0104:	7018      	strb	r0, [r3, #0]
        timesPressed++;
 80a0106:	4807      	ldr	r0, [pc, #28]	; (80a0124 <_Z17updateButtonStatei+0x38>)
 80a0108:	6803      	ldr	r3, [r0, #0]
 80a010a:	3301      	adds	r3, #1
 80a010c:	6003      	str	r3, [r0, #0]
    } else {
        mJustPressed = false;
    }

    mPreviousButtonState = mCurrentButtonState;
 80a010e:	7011      	strb	r1, [r2, #0]
}
 80a0110:	4770      	bx	lr
        mJustPressed = false;
 80a0112:	2000      	movs	r0, #0
 80a0114:	7018      	strb	r0, [r3, #0]
 80a0116:	e7fa      	b.n	80a010e <_Z17updateButtonStatei+0x22>
 80a0118:	20000074 	.word	0x20000074
 80a011c:	20000077 	.word	0x20000077
 80a0120:	20000076 	.word	0x20000076
 80a0124:	2000008c 	.word	0x2000008c

080a0128 <_Z17updateSystemStateb13SYSTEM_STATUS>:

void updateSystemState(bool pButtonPressed, SYSTEM_STATUS pCurrentStatus) {
    if (pButtonPressed) {
 80a0128:	b130      	cbz	r0, 80a0138 <_Z17updateSystemStateb13SYSTEM_STATUS+0x10>
        if (pCurrentStatus + 1 > 1) {
 80a012a:	4b04      	ldr	r3, [pc, #16]	; (80a013c <_Z17updateSystemStateb13SYSTEM_STATUS+0x14>)
 80a012c:	b111      	cbz	r1, 80a0134 <_Z17updateSystemStateb13SYSTEM_STATUS+0xc>
            mCurrentSystemStatus = (SYSTEM_STATUS) 0;
 80a012e:	2200      	movs	r2, #0
 80a0130:	701a      	strb	r2, [r3, #0]
 80a0132:	4770      	bx	lr
        } else {
            mCurrentSystemStatus = (SYSTEM_STATUS) 1;
 80a0134:	2201      	movs	r2, #1
 80a0136:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80a0138:	4770      	bx	lr
 80a013a:	bf00      	nop
 80a013c:	20000075 	.word	0x20000075

080a0140 <_Z12setStatusLEDi>:


// Setters
void setStatusLED(int pColor) {
 80a0140:	4602      	mov	r2, r0
    mSystemStatusLED.setPixelColor(0, pColor);
 80a0142:	2100      	movs	r1, #0
 80a0144:	4801      	ldr	r0, [pc, #4]	; (80a014c <_Z12setStatusLEDi+0xc>)
 80a0146:	f001 b985 	b.w	80a1454 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a014a:	bf00      	nop
 80a014c:	20000078 	.word	0x20000078

080a0150 <_Z11getDistancev>:
}


// Getters
float getDistance() {
 80a0150:	b508      	push	{r3, lr}
  float echoTime;                   //variable to store the time it takes for a ping to bounce off an object
  float calculatedDistance;         //variable to store the distance calculated from the echo time

  //send out an ultrasonic pulse that's 10ms long
  digitalWrite(TRIG_PIN, HIGH);
 80a0152:	2101      	movs	r1, #1
 80a0154:	200a      	movs	r0, #10
 80a0156:	f002 f8ca 	bl	80a22ee <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a015a:	200a      	movs	r0, #10
 80a015c:	f001 f9e4 	bl	80a1528 <HAL_Delay_Microseconds>
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
 80a0160:	2100      	movs	r1, #0
 80a0162:	200a      	movs	r0, #10
 80a0164:	f002 f8c3 	bl	80a22ee <digitalWrite>

  echoTime = pulseIn(ECHO_PIN, HIGH);      //use the pulsein command to see how long it takes for the
 80a0168:	2101      	movs	r1, #1
 80a016a:	2003      	movs	r0, #3
 80a016c:	f002 f8eb 	bl	80a2346 <pulseIn>
 80a0170:	f002 feb8 	bl	80a2ee4 <__aeabi_ui2f>
                                          //pulse to bounce back to the sensor

  calculatedDistance = echoTime / 148.0;  //calculate the distance of the object that reflected the pulse (half the bounce time multiplied by the speed of sound)
 80a0174:	4901      	ldr	r1, [pc, #4]	; (80a017c <_Z11getDistancev+0x2c>)
 80a0176:	f002 ffc1 	bl	80a30fc <__aeabi_fdiv>

  return calculatedDistance;              //send back the distance that was calculated
 80a017a:	bd08      	pop	{r3, pc}
 80a017c:	43140000 	.word	0x43140000

080a0180 <loop>:
void loop() {
 80a0180:	b510      	push	{r4, lr}
    updateButtonState(digitalRead(BUTTON_PIN));
 80a0182:	2002      	movs	r0, #2
 80a0184:	f002 f8cc 	bl	80a2320 <digitalRead>
 80a0188:	f7ff ffb0 	bl	80a00ec <_Z17updateButtonStatei>
    updateSystemState(mJustPressed, mCurrentSystemStatus);
 80a018c:	4c11      	ldr	r4, [pc, #68]	; (80a01d4 <loop+0x54>)
 80a018e:	4b12      	ldr	r3, [pc, #72]	; (80a01d8 <loop+0x58>)
 80a0190:	7821      	ldrb	r1, [r4, #0]
 80a0192:	7818      	ldrb	r0, [r3, #0]
 80a0194:	f7ff ffc8 	bl	80a0128 <_Z17updateSystemStateb13SYSTEM_STATUS>
    switch (mCurrentSystemStatus) {
 80a0198:	7823      	ldrb	r3, [r4, #0]
 80a019a:	b183      	cbz	r3, 80a01be <loop+0x3e>
 80a019c:	2b01      	cmp	r3, #1
 80a019e:	d013      	beq.n	80a01c8 <loop+0x48>
    Serial.println(getDistance());
 80a01a0:	f001 feda 	bl	80a1f58 <_Z16_fetch_usbserialv>
 80a01a4:	4604      	mov	r4, r0
 80a01a6:	f7ff ffd3 	bl	80a0150 <_Z11getDistancev>
 80a01aa:	2202      	movs	r2, #2
 80a01ac:	4601      	mov	r1, r0
 80a01ae:	4620      	mov	r0, r4
 80a01b0:	f001 fd8a 	bl	80a1cc8 <_ZN5Print7printlnEfi>
}
 80a01b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mSystemStatusLED.show();
 80a01b8:	4808      	ldr	r0, [pc, #32]	; (80a01dc <loop+0x5c>)
 80a01ba:	f000 b89b 	b.w	80a02f4 <_ZN17Adafruit_NeoPixel4showEv>
            setStatusLED(COLOR_ARMED);
 80a01be:	4b08      	ldr	r3, [pc, #32]	; (80a01e0 <loop+0x60>)
 80a01c0:	6818      	ldr	r0, [r3, #0]
 80a01c2:	f7ff ffbd 	bl	80a0140 <_Z12setStatusLEDi>
            break;
 80a01c6:	e7eb      	b.n	80a01a0 <loop+0x20>
            setStatusLED(COLOR_DISARMED);
 80a01c8:	4b06      	ldr	r3, [pc, #24]	; (80a01e4 <loop+0x64>)
 80a01ca:	6818      	ldr	r0, [r3, #0]
 80a01cc:	f7ff ffb8 	bl	80a0140 <_Z12setStatusLEDi>
            break;
 80a01d0:	e7e6      	b.n	80a01a0 <loop+0x20>
 80a01d2:	bf00      	nop
 80a01d4:	20000075 	.word	0x20000075
 80a01d8:	20000076 	.word	0x20000076
 80a01dc:	20000078 	.word	0x20000078
 80a01e0:	2000006c 	.word	0x2000006c
 80a01e4:	20000070 	.word	0x20000070

080a01e8 <_GLOBAL__sub_I_mCurrentButtonState>:
Adafruit_NeoPixel mSystemStatusLED = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a01e8:	2300      	movs	r3, #0
 80a01ea:	b510      	push	{r4, lr}
Adafruit_NeoPixel mSystemStatusLED = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a01ec:	4c0c      	ldr	r4, [pc, #48]	; (80a0220 <_GLOBAL__sub_I_mCurrentButtonState+0x38>)
 80a01ee:	461a      	mov	r2, r3
 80a01f0:	2101      	movs	r1, #1
 80a01f2:	4620      	mov	r0, r4
 80a01f4:	f000 f86d 	bl	80a02d2 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a01f8:	4a0a      	ldr	r2, [pc, #40]	; (80a0224 <_GLOBAL__sub_I_mCurrentButtonState+0x3c>)
 80a01fa:	490b      	ldr	r1, [pc, #44]	; (80a0228 <_GLOBAL__sub_I_mCurrentButtonState+0x40>)
 80a01fc:	4620      	mov	r0, r4
 80a01fe:	f002 f8fd 	bl	80a23fc <__aeabi_atexit>
const int COLOR_ARMED = mSystemStatusLED.Color(40, 0, 0);
 80a0202:	2200      	movs	r2, #0
 80a0204:	2028      	movs	r0, #40	; 0x28
 80a0206:	4611      	mov	r1, r2
 80a0208:	f001 f968 	bl	80a14dc <_ZN17Adafruit_NeoPixel5ColorEhhh>
const int COLOR_DISARMED = mSystemStatusLED.Color(0, 40, 0);
 80a020c:	2200      	movs	r2, #0
const int COLOR_ARMED = mSystemStatusLED.Color(40, 0, 0);
 80a020e:	4b07      	ldr	r3, [pc, #28]	; (80a022c <_GLOBAL__sub_I_mCurrentButtonState+0x44>)
const int COLOR_DISARMED = mSystemStatusLED.Color(0, 40, 0);
 80a0210:	2128      	movs	r1, #40	; 0x28
const int COLOR_ARMED = mSystemStatusLED.Color(40, 0, 0);
 80a0212:	6018      	str	r0, [r3, #0]
const int COLOR_DISARMED = mSystemStatusLED.Color(0, 40, 0);
 80a0214:	4610      	mov	r0, r2
 80a0216:	f001 f961 	bl	80a14dc <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a021a:	4b05      	ldr	r3, [pc, #20]	; (80a0230 <_GLOBAL__sub_I_mCurrentButtonState+0x48>)
 80a021c:	6018      	str	r0, [r3, #0]
 80a021e:	bd10      	pop	{r4, pc}
 80a0220:	20000078 	.word	0x20000078
 80a0224:	20000068 	.word	0x20000068
 80a0228:	080a0235 	.word	0x080a0235
 80a022c:	2000006c 	.word	0x2000006c
 80a0230:	20000070 	.word	0x20000070

080a0234 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0234:	b510      	push	{r4, lr}
 80a0236:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0238:	68c0      	ldr	r0, [r0, #12]
 80a023a:	b108      	cbz	r0, 80a0240 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a023c:	f001 fafa 	bl	80a1834 <free>
  if (begun) pinMode(pin, INPUT);
 80a0240:	7823      	ldrb	r3, [r4, #0]
 80a0242:	b11b      	cbz	r3, 80a024c <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0244:	2100      	movs	r1, #0
 80a0246:	79e0      	ldrb	r0, [r4, #7]
 80a0248:	f002 f840 	bl	80a22cc <pinMode>
}
 80a024c:	4620      	mov	r0, r4
 80a024e:	bd10      	pop	{r4, pc}

080a0250 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0250:	b538      	push	{r3, r4, r5, lr}
 80a0252:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0254:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0256:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0258:	b108      	cbz	r0, 80a025e <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a025a:	f001 faeb 	bl	80a1834 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a025e:	79a3      	ldrb	r3, [r4, #6]
 80a0260:	2b06      	cmp	r3, #6
 80a0262:	bf0c      	ite	eq
 80a0264:	2004      	moveq	r0, #4
 80a0266:	2003      	movne	r0, #3
 80a0268:	4368      	muls	r0, r5
 80a026a:	b280      	uxth	r0, r0
 80a026c:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a026e:	f001 fad9 	bl	80a1824 <malloc>
 80a0272:	60e0      	str	r0, [r4, #12]
 80a0274:	b128      	cbz	r0, 80a0282 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0276:	2100      	movs	r1, #0
 80a0278:	88a2      	ldrh	r2, [r4, #4]
 80a027a:	f002 fff7 	bl	80a326c <memset>
    numLEDs = n;
 80a027e:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 80a0280:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 80a0282:	80a0      	strh	r0, [r4, #4]
 80a0284:	8060      	strh	r0, [r4, #2]
}
 80a0286:	e7fb      	b.n	80a0280 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x30>

080a0288 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
 80a0288:	b510      	push	{r4, lr}
 80a028a:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a028c:	2101      	movs	r1, #1
 80a028e:	79c0      	ldrb	r0, [r0, #7]
 80a0290:	f002 f81c 	bl	80a22cc <pinMode>
  digitalWrite(pin, LOW);
 80a0294:	2100      	movs	r1, #0
 80a0296:	79e0      	ldrb	r0, [r4, #7]
 80a0298:	f002 f829 	bl	80a22ee <digitalWrite>
  begun = true;
 80a029c:	2301      	movs	r3, #1
 80a029e:	7023      	strb	r3, [r4, #0]
}
 80a02a0:	bd10      	pop	{r4, pc}

080a02a2 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a02a2:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a02a4:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a02a6:	4605      	mov	r5, r0
 80a02a8:	460c      	mov	r4, r1
    if (begun) {
 80a02aa:	b11b      	cbz	r3, 80a02b4 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a02ac:	2100      	movs	r1, #0
 80a02ae:	79c0      	ldrb	r0, [r0, #7]
 80a02b0:	f002 f80c 	bl	80a22cc <pinMode>
    }
    pin = p;
    if (begun) {
 80a02b4:	782b      	ldrb	r3, [r5, #0]
    pin = p;
 80a02b6:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a02b8:	b153      	cbz	r3, 80a02d0 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a02ba:	b2a4      	uxth	r4, r4
 80a02bc:	4620      	mov	r0, r4
 80a02be:	2101      	movs	r1, #1
 80a02c0:	f002 f804 	bl	80a22cc <pinMode>
        digitalWrite(p, LOW);
 80a02c4:	4620      	mov	r0, r4
    }
}
 80a02c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(p, LOW);
 80a02ca:	2100      	movs	r1, #0
 80a02cc:	f002 b80f 	b.w	80a22ee <digitalWrite>
}
 80a02d0:	bd38      	pop	{r3, r4, r5, pc}

080a02d2 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a02d2:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a02d4:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a02d6:	4604      	mov	r4, r0
 80a02d8:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a02da:	7183      	strb	r3, [r0, #6]
 80a02dc:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80a02e0:	7005      	strb	r5, [r0, #0]
 80a02e2:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 80a02e4:	f7ff ffb4 	bl	80a0250 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a02e8:	4620      	mov	r0, r4
 80a02ea:	4631      	mov	r1, r6
 80a02ec:	f7ff ffd9 	bl	80a02a2 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a02f0:	4620      	mov	r0, r4
 80a02f2:	bd70      	pop	{r4, r5, r6, pc}

080a02f4 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a02f4:	68c3      	ldr	r3, [r0, #12]
 80a02f6:	2b00      	cmp	r3, #0
 80a02f8:	f000 8441 	beq.w	80a0b7e <_ZN17Adafruit_NeoPixel4showEv+0x88a>
void Adafruit_NeoPixel::show(void) {
 80a02fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a02fe:	7983      	ldrb	r3, [r0, #6]
 80a0300:	4604      	mov	r4, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0302:	3b02      	subs	r3, #2
 80a0304:	b2db      	uxtb	r3, r3
 80a0306:	2b04      	cmp	r3, #4
 80a0308:	bf8c      	ite	hi
 80a030a:	2532      	movhi	r5, #50	; 0x32
 80a030c:	4a28      	ldrls	r2, [pc, #160]	; (80a03b0 <_ZN17Adafruit_NeoPixel4showEv+0xbc>)
void Adafruit_NeoPixel::show(void) {
 80a030e:	b087      	sub	sp, #28
 80a0310:	bf98      	it	ls
 80a0312:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0316:	f001 f90f 	bl	80a1538 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a031a:	6923      	ldr	r3, [r4, #16]
 80a031c:	1ac0      	subs	r0, r0, r3
 80a031e:	42a8      	cmp	r0, r5
 80a0320:	d3f9      	bcc.n	80a0316 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0322:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0324:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0326:	79a5      	ldrb	r5, [r4, #6]
  volatile uint16_t i = numBytes; // Output loop counter
 80a0328:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a032c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0330:	2d02      	cmp	r5, #2
   *ptr = pixels,   // Pointer to next byte
 80a0332:	68e1      	ldr	r1, [r4, #12]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0334:	b29b      	uxth	r3, r3
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0336:	f000 826e 	beq.w	80a0816 <_ZN17Adafruit_NeoPixel4showEv+0x522>
 80a033a:	2d07      	cmp	r5, #7
 80a033c:	f000 826b 	beq.w	80a0816 <_ZN17Adafruit_NeoPixel4showEv+0x522>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0340:	2d06      	cmp	r5, #6
 80a0342:	f000 841d 	beq.w	80a0b80 <_ZN17Adafruit_NeoPixel4showEv+0x88c>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0346:	2d05      	cmp	r5, #5
 80a0348:	f000 83a1 	beq.w	80a0a8e <_ZN17Adafruit_NeoPixel4showEv+0x79a>
 80a034c:	2d08      	cmp	r5, #8
 80a034e:	f000 839e 	beq.w	80a0a8e <_ZN17Adafruit_NeoPixel4showEv+0x79a>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a0352:	2d00      	cmp	r5, #0
 80a0354:	f040 854f 	bne.w	80a0df6 <_ZN17Adafruit_NeoPixel4showEv+0xb02>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0358:	2b00      	cmp	r3, #0
 80a035a:	f000 8392 	beq.w	80a0a82 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a035e:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a0362:	4a14      	ldr	r2, [pc, #80]	; (80a03b4 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
 80a0364:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0366:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a036a:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a036c:	3b03      	subs	r3, #3
 80a036e:	b29b      	uxth	r3, r3
 80a0370:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0374:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0378:	b2db      	uxtb	r3, r3
 80a037a:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a037e:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0382:	b2db      	uxtb	r3, r3
 80a0384:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0388:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a038c:	b2db      	uxtb	r3, r3
 80a038e:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0392:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0396:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a039a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a039e:	021b      	lsls	r3, r3, #8
 80a03a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a03a4:	4303      	orrs	r3, r0
 80a03a6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a03a8:	f88d 5005 	strb.w	r5, [sp, #5]
 80a03ac:	e11b      	b.n	80a05e6 <_ZN17Adafruit_NeoPixel4showEv+0x2f2>
 80a03ae:	bf00      	nop
 80a03b0:	080a32e8 	.word	0x080a32e8
 80a03b4:	20000090 	.word	0x20000090
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a03b8:	4600      	mov	r0, r0
 80a03ba:	bf00      	nop
 80a03bc:	bf00      	nop
 80a03be:	bf00      	nop
 80a03c0:	bf00      	nop
 80a03c2:	bf00      	nop
 80a03c4:	bf00      	nop
 80a03c6:	bf00      	nop
 80a03c8:	bf00      	nop
 80a03ca:	bf00      	nop
 80a03cc:	bf00      	nop
 80a03ce:	bf00      	nop
 80a03d0:	bf00      	nop
 80a03d2:	bf00      	nop
 80a03d4:	bf00      	nop
 80a03d6:	bf00      	nop
 80a03d8:	bf00      	nop
 80a03da:	bf00      	nop
 80a03dc:	bf00      	nop
 80a03de:	bf00      	nop
 80a03e0:	bf00      	nop
 80a03e2:	bf00      	nop
 80a03e4:	bf00      	nop
 80a03e6:	bf00      	nop
 80a03e8:	bf00      	nop
 80a03ea:	bf00      	nop
 80a03ec:	bf00      	nop
 80a03ee:	bf00      	nop
 80a03f0:	bf00      	nop
 80a03f2:	bf00      	nop
 80a03f4:	bf00      	nop
 80a03f6:	bf00      	nop
 80a03f8:	bf00      	nop
 80a03fa:	bf00      	nop
 80a03fc:	bf00      	nop
 80a03fe:	bf00      	nop
 80a0400:	bf00      	nop
 80a0402:	bf00      	nop
 80a0404:	bf00      	nop
 80a0406:	bf00      	nop
 80a0408:	bf00      	nop
 80a040a:	bf00      	nop
 80a040c:	bf00      	nop
 80a040e:	bf00      	nop
 80a0410:	bf00      	nop
 80a0412:	bf00      	nop
 80a0414:	bf00      	nop
 80a0416:	bf00      	nop
 80a0418:	bf00      	nop
 80a041a:	bf00      	nop
 80a041c:	bf00      	nop
 80a041e:	bf00      	nop
 80a0420:	bf00      	nop
 80a0422:	bf00      	nop
 80a0424:	bf00      	nop
 80a0426:	bf00      	nop
 80a0428:	bf00      	nop
 80a042a:	bf00      	nop
 80a042c:	bf00      	nop
 80a042e:	bf00      	nop
 80a0430:	bf00      	nop
 80a0432:	bf00      	nop
 80a0434:	bf00      	nop
 80a0436:	bf00      	nop
 80a0438:	bf00      	nop
 80a043a:	bf00      	nop
 80a043c:	bf00      	nop
 80a043e:	bf00      	nop
 80a0440:	bf00      	nop
 80a0442:	bf00      	nop
 80a0444:	bf00      	nop
 80a0446:	bf00      	nop
 80a0448:	bf00      	nop
 80a044a:	bf00      	nop
 80a044c:	bf00      	nop
 80a044e:	bf00      	nop
 80a0450:	bf00      	nop
 80a0452:	bf00      	nop
 80a0454:	bf00      	nop
 80a0456:	bf00      	nop
 80a0458:	bf00      	nop
 80a045a:	bf00      	nop
 80a045c:	bf00      	nop
 80a045e:	bf00      	nop
 80a0460:	bf00      	nop
 80a0462:	bf00      	nop
 80a0464:	bf00      	nop
 80a0466:	bf00      	nop
 80a0468:	bf00      	nop
 80a046a:	bf00      	nop
 80a046c:	bf00      	nop
 80a046e:	bf00      	nop
 80a0470:	bf00      	nop
 80a0472:	bf00      	nop
 80a0474:	bf00      	nop
 80a0476:	bf00      	nop
 80a0478:	bf00      	nop
 80a047a:	bf00      	nop
 80a047c:	bf00      	nop
 80a047e:	bf00      	nop
 80a0480:	bf00      	nop
 80a0482:	bf00      	nop
 80a0484:	bf00      	nop
 80a0486:	bf00      	nop
 80a0488:	bf00      	nop
 80a048a:	bf00      	nop
 80a048c:	bf00      	nop
 80a048e:	bf00      	nop
 80a0490:	bf00      	nop
 80a0492:	bf00      	nop
 80a0494:	bf00      	nop
 80a0496:	bf00      	nop
 80a0498:	bf00      	nop
 80a049a:	bf00      	nop
 80a049c:	bf00      	nop
 80a049e:	bf00      	nop
 80a04a0:	bf00      	nop
 80a04a2:	bf00      	nop
 80a04a4:	bf00      	nop
 80a04a6:	bf00      	nop
 80a04a8:	bf00      	nop
 80a04aa:	bf00      	nop
 80a04ac:	bf00      	nop
 80a04ae:	bf00      	nop
 80a04b0:	bf00      	nop
 80a04b2:	bf00      	nop
 80a04b4:	bf00      	nop
 80a04b6:	bf00      	nop
 80a04b8:	bf00      	nop
 80a04ba:	bf00      	nop
 80a04bc:	bf00      	nop
 80a04be:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a04c0:	79e3      	ldrb	r3, [r4, #7]
 80a04c2:	6810      	ldr	r0, [r2, #0]
 80a04c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a04c8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a04cc:	88bf      	ldrh	r7, [r7, #4]
 80a04ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a04d2:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a04d4:	4600      	mov	r0, r0
 80a04d6:	bf00      	nop
 80a04d8:	bf00      	nop
 80a04da:	bf00      	nop
 80a04dc:	bf00      	nop
 80a04de:	bf00      	nop
 80a04e0:	bf00      	nop
 80a04e2:	bf00      	nop
 80a04e4:	bf00      	nop
 80a04e6:	bf00      	nop
 80a04e8:	bf00      	nop
 80a04ea:	bf00      	nop
 80a04ec:	bf00      	nop
 80a04ee:	bf00      	nop
 80a04f0:	bf00      	nop
 80a04f2:	bf00      	nop
 80a04f4:	bf00      	nop
 80a04f6:	bf00      	nop
 80a04f8:	bf00      	nop
 80a04fa:	bf00      	nop
 80a04fc:	bf00      	nop
 80a04fe:	bf00      	nop
 80a0500:	bf00      	nop
 80a0502:	bf00      	nop
 80a0504:	bf00      	nop
 80a0506:	bf00      	nop
 80a0508:	bf00      	nop
 80a050a:	bf00      	nop
 80a050c:	bf00      	nop
 80a050e:	bf00      	nop
 80a0510:	bf00      	nop
 80a0512:	bf00      	nop
 80a0514:	bf00      	nop
 80a0516:	bf00      	nop
 80a0518:	bf00      	nop
 80a051a:	bf00      	nop
 80a051c:	bf00      	nop
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
 80a0528:	bf00      	nop
 80a052a:	bf00      	nop
 80a052c:	bf00      	nop
 80a052e:	bf00      	nop
 80a0530:	bf00      	nop
 80a0532:	bf00      	nop
 80a0534:	bf00      	nop
 80a0536:	bf00      	nop
 80a0538:	bf00      	nop
 80a053a:	bf00      	nop
 80a053c:	bf00      	nop
 80a053e:	bf00      	nop
 80a0540:	bf00      	nop
 80a0542:	bf00      	nop
 80a0544:	bf00      	nop
 80a0546:	bf00      	nop
 80a0548:	bf00      	nop
 80a054a:	bf00      	nop
 80a054c:	bf00      	nop
 80a054e:	bf00      	nop
 80a0550:	bf00      	nop
 80a0552:	bf00      	nop
 80a0554:	bf00      	nop
 80a0556:	bf00      	nop
 80a0558:	bf00      	nop
 80a055a:	bf00      	nop
 80a055c:	bf00      	nop
 80a055e:	bf00      	nop
 80a0560:	bf00      	nop
 80a0562:	bf00      	nop
 80a0564:	bf00      	nop
 80a0566:	bf00      	nop
 80a0568:	bf00      	nop
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
 80a056e:	bf00      	nop
 80a0570:	bf00      	nop
 80a0572:	bf00      	nop
 80a0574:	bf00      	nop
 80a0576:	bf00      	nop
 80a0578:	bf00      	nop
 80a057a:	bf00      	nop
 80a057c:	bf00      	nop
 80a057e:	bf00      	nop
 80a0580:	bf00      	nop
 80a0582:	bf00      	nop
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
 80a058a:	bf00      	nop
 80a058c:	bf00      	nop
 80a058e:	bf00      	nop
 80a0590:	bf00      	nop
 80a0592:	bf00      	nop
 80a0594:	bf00      	nop
 80a0596:	bf00      	nop
 80a0598:	bf00      	nop
 80a059a:	bf00      	nop
 80a059c:	bf00      	nop
 80a059e:	bf00      	nop
 80a05a0:	bf00      	nop
 80a05a2:	bf00      	nop
 80a05a4:	bf00      	nop
 80a05a6:	bf00      	nop
 80a05a8:	bf00      	nop
 80a05aa:	bf00      	nop
 80a05ac:	bf00      	nop
 80a05ae:	bf00      	nop
 80a05b0:	bf00      	nop
 80a05b2:	bf00      	nop
 80a05b4:	bf00      	nop
 80a05b6:	bf00      	nop
 80a05b8:	bf00      	nop
 80a05ba:	bf00      	nop
 80a05bc:	bf00      	nop
 80a05be:	bf00      	nop
 80a05c0:	bf00      	nop
 80a05c2:	bf00      	nop
 80a05c4:	bf00      	nop
 80a05c6:	bf00      	nop
 80a05c8:	bf00      	nop
 80a05ca:	bf00      	nop
 80a05cc:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a05ce:	9b04      	ldr	r3, [sp, #16]
 80a05d0:	085b      	lsrs	r3, r3, #1
 80a05d2:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a05d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a05d8:	3301      	adds	r3, #1
 80a05da:	b2db      	uxtb	r3, r3
 80a05dc:	2b17      	cmp	r3, #23
 80a05de:	f88d 3005 	strb.w	r3, [sp, #5]
 80a05e2:	f200 8727 	bhi.w	80a1434 <_ZN17Adafruit_NeoPixel4showEv+0x1140>
        pinSet(pin, HIGH); // HIGH
 80a05e6:	79e3      	ldrb	r3, [r4, #7]
 80a05e8:	6810      	ldr	r0, [r2, #0]
 80a05ea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a05ee:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a05f2:	88bf      	ldrh	r7, [r7, #4]
 80a05f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a05f8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a05fa:	9803      	ldr	r0, [sp, #12]
 80a05fc:	9b04      	ldr	r3, [sp, #16]
 80a05fe:	4218      	tst	r0, r3
 80a0600:	f47f aeda 	bne.w	80a03b8 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
            ::: "r0", "cc", "memory");
 80a0604:	4600      	mov	r0, r0
 80a0606:	bf00      	nop
 80a0608:	bf00      	nop
 80a060a:	bf00      	nop
 80a060c:	bf00      	nop
 80a060e:	bf00      	nop
 80a0610:	bf00      	nop
 80a0612:	bf00      	nop
 80a0614:	bf00      	nop
 80a0616:	bf00      	nop
 80a0618:	bf00      	nop
 80a061a:	bf00      	nop
 80a061c:	bf00      	nop
 80a061e:	bf00      	nop
 80a0620:	bf00      	nop
 80a0622:	bf00      	nop
 80a0624:	bf00      	nop
 80a0626:	bf00      	nop
 80a0628:	bf00      	nop
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
 80a0652:	bf00      	nop
 80a0654:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0656:	79e3      	ldrb	r3, [r4, #7]
 80a0658:	6810      	ldr	r0, [r2, #0]
 80a065a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a065e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0662:	88bf      	ldrh	r7, [r7, #4]
 80a0664:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0668:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a066a:	4600      	mov	r0, r0
 80a066c:	bf00      	nop
 80a066e:	bf00      	nop
 80a0670:	bf00      	nop
 80a0672:	bf00      	nop
 80a0674:	bf00      	nop
 80a0676:	bf00      	nop
 80a0678:	bf00      	nop
 80a067a:	bf00      	nop
 80a067c:	bf00      	nop
 80a067e:	bf00      	nop
 80a0680:	bf00      	nop
 80a0682:	bf00      	nop
 80a0684:	bf00      	nop
 80a0686:	bf00      	nop
 80a0688:	bf00      	nop
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
 80a06da:	bf00      	nop
 80a06dc:	bf00      	nop
 80a06de:	bf00      	nop
 80a06e0:	bf00      	nop
 80a06e2:	bf00      	nop
 80a06e4:	bf00      	nop
 80a06e6:	bf00      	nop
 80a06e8:	bf00      	nop
 80a06ea:	bf00      	nop
 80a06ec:	bf00      	nop
 80a06ee:	bf00      	nop
 80a06f0:	bf00      	nop
 80a06f2:	bf00      	nop
 80a06f4:	bf00      	nop
 80a06f6:	bf00      	nop
 80a06f8:	bf00      	nop
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	bf00      	nop
 80a072e:	bf00      	nop
 80a0730:	bf00      	nop
 80a0732:	bf00      	nop
 80a0734:	bf00      	nop
 80a0736:	bf00      	nop
 80a0738:	bf00      	nop
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
 80a074a:	bf00      	nop
 80a074c:	bf00      	nop
 80a074e:	bf00      	nop
 80a0750:	bf00      	nop
 80a0752:	bf00      	nop
 80a0754:	bf00      	nop
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
 80a0774:	bf00      	nop
 80a0776:	bf00      	nop
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	e6db      	b.n	80a05ce <_ZN17Adafruit_NeoPixel4showEv+0x2da>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0816:	2b00      	cmp	r3, #0
 80a0818:	f000 8133 	beq.w	80a0a82 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a081c:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0820:	2600      	movs	r6, #0
 80a0822:	4a13      	ldr	r2, [pc, #76]	; (80a0870 <_ZN17Adafruit_NeoPixel4showEv+0x57c>)
      mask = 0x800000; // reset the mask
 80a0824:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0826:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a082a:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a082c:	3b03      	subs	r3, #3
 80a082e:	b29b      	uxth	r3, r3
 80a0830:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0834:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0838:	b2db      	uxtb	r3, r3
 80a083a:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a083e:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0842:	b2db      	uxtb	r3, r3
 80a0844:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0848:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a084c:	b2db      	uxtb	r3, r3
 80a084e:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0852:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0856:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a085a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a085e:	021b      	lsls	r3, r3, #8
 80a0860:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0864:	4303      	orrs	r3, r0
 80a0866:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0868:	f88d 6005 	strb.w	r6, [sp, #5]
 80a086c:	e080      	b.n	80a0970 <_ZN17Adafruit_NeoPixel4showEv+0x67c>
 80a086e:	bf00      	nop
 80a0870:	20000090 	.word	0x20000090
            ::: "r0", "cc", "memory");
 80a0874:	4600      	mov	r0, r0
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	bf00      	nop
 80a087e:	bf00      	nop
 80a0880:	bf00      	nop
 80a0882:	bf00      	nop
 80a0884:	bf00      	nop
 80a0886:	bf00      	nop
 80a0888:	bf00      	nop
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
 80a0896:	bf00      	nop
 80a0898:	bf00      	nop
 80a089a:	bf00      	nop
 80a089c:	bf00      	nop
 80a089e:	bf00      	nop
 80a08a0:	bf00      	nop
 80a08a2:	bf00      	nop
 80a08a4:	bf00      	nop
 80a08a6:	bf00      	nop
 80a08a8:	bf00      	nop
 80a08aa:	bf00      	nop
 80a08ac:	bf00      	nop
 80a08ae:	bf00      	nop
 80a08b0:	bf00      	nop
 80a08b2:	bf00      	nop
 80a08b4:	bf00      	nop
 80a08b6:	bf00      	nop
 80a08b8:	bf00      	nop
 80a08ba:	bf00      	nop
 80a08bc:	bf00      	nop
 80a08be:	bf00      	nop
 80a08c0:	bf00      	nop
 80a08c2:	bf00      	nop
 80a08c4:	bf00      	nop
 80a08c6:	bf00      	nop
 80a08c8:	bf00      	nop
 80a08ca:	bf00      	nop
 80a08cc:	bf00      	nop
 80a08ce:	bf00      	nop
 80a08d0:	bf00      	nop
 80a08d2:	bf00      	nop
 80a08d4:	bf00      	nop
 80a08d6:	bf00      	nop
 80a08d8:	bf00      	nop
 80a08da:	bf00      	nop
 80a08dc:	bf00      	nop
 80a08de:	bf00      	nop
 80a08e0:	bf00      	nop
 80a08e2:	bf00      	nop
 80a08e4:	bf00      	nop
 80a08e6:	bf00      	nop
 80a08e8:	bf00      	nop
 80a08ea:	bf00      	nop
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a090e:	79e3      	ldrb	r3, [r4, #7]
 80a0910:	6810      	ldr	r0, [r2, #0]
 80a0912:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0916:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a091a:	88bf      	ldrh	r7, [r7, #4]
 80a091c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0920:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a0922:	4600      	mov	r0, r0
 80a0924:	bf00      	nop
 80a0926:	bf00      	nop
 80a0928:	bf00      	nop
 80a092a:	bf00      	nop
 80a092c:	bf00      	nop
 80a092e:	bf00      	nop
 80a0930:	bf00      	nop
 80a0932:	bf00      	nop
 80a0934:	bf00      	nop
 80a0936:	bf00      	nop
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
 80a0942:	bf00      	nop
 80a0944:	bf00      	nop
 80a0946:	bf00      	nop
 80a0948:	bf00      	nop
 80a094a:	bf00      	nop
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
 80a0956:	bf00      	nop
        mask >>= 1;
 80a0958:	9b04      	ldr	r3, [sp, #16]
 80a095a:	085b      	lsrs	r3, r3, #1
 80a095c:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a095e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0962:	3301      	adds	r3, #1
 80a0964:	b2db      	uxtb	r3, r3
 80a0966:	2b17      	cmp	r3, #23
 80a0968:	f88d 3005 	strb.w	r3, [sp, #5]
 80a096c:	f200 8083 	bhi.w	80a0a76 <_ZN17Adafruit_NeoPixel4showEv+0x782>
        pinSet(pin, HIGH); // HIGH
 80a0970:	79e3      	ldrb	r3, [r4, #7]
 80a0972:	6810      	ldr	r0, [r2, #0]
 80a0974:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0978:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a097c:	88bf      	ldrh	r7, [r7, #4]
 80a097e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0982:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0984:	9803      	ldr	r0, [sp, #12]
 80a0986:	9b04      	ldr	r3, [sp, #16]
 80a0988:	4218      	tst	r0, r3
 80a098a:	f47f af73 	bne.w	80a0874 <_ZN17Adafruit_NeoPixel4showEv+0x580>
            ::: "r0", "cc", "memory");
 80a098e:	4600      	mov	r0, r0
 80a0990:	bf00      	nop
 80a0992:	bf00      	nop
 80a0994:	bf00      	nop
 80a0996:	bf00      	nop
 80a0998:	bf00      	nop
 80a099a:	bf00      	nop
 80a099c:	bf00      	nop
 80a099e:	bf00      	nop
 80a09a0:	bf00      	nop
 80a09a2:	bf00      	nop
 80a09a4:	bf00      	nop
 80a09a6:	bf00      	nop
 80a09a8:	bf00      	nop
 80a09aa:	bf00      	nop
 80a09ac:	bf00      	nop
 80a09ae:	bf00      	nop
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a09b6:	79e3      	ldrb	r3, [r4, #7]
 80a09b8:	6810      	ldr	r0, [r2, #0]
 80a09ba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a09be:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a09c2:	88bf      	ldrh	r7, [r7, #4]
 80a09c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a09c8:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a09ca:	4600      	mov	r0, r0
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	e770      	b.n	80a0958 <_ZN17Adafruit_NeoPixel4showEv+0x664>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0a76:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0a7a:	b29b      	uxth	r3, r3
 80a0a7c:	2b00      	cmp	r3, #0
 80a0a7e:	f47f aed1 	bne.w	80a0824 <_ZN17Adafruit_NeoPixel4showEv+0x530>
  __ASM volatile ("cpsie i");
 80a0a82:	b662      	cpsie	i
 80a0a84:	f000 fd58 	bl	80a1538 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0a88:	6120      	str	r0, [r4, #16]
}
 80a0a8a:	b007      	add	sp, #28
 80a0a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0a8e:	2b00      	cmp	r3, #0
 80a0a90:	d0f7      	beq.n	80a0a82 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0a92:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0a96:	2600      	movs	r6, #0
        pinSet(pin, HIGH); // HIGH
 80a0a98:	4b54      	ldr	r3, [pc, #336]	; (80a0bec <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
 80a0a9a:	6818      	ldr	r0, [r3, #0]
        cyc = DWT->CYCCNT;
 80a0a9c:	4b54      	ldr	r3, [pc, #336]	; (80a0bf0 <_ZN17Adafruit_NeoPixel4showEv+0x8fc>)
      mask = 0x800000; // reset the mask
 80a0a9e:	f8cd e010 	str.w	lr, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0aa2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a0aa6:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a0aa8:	3a03      	subs	r2, #3
 80a0aaa:	b292      	uxth	r2, r2
 80a0aac:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0ab0:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80a0ab4:	b2d2      	uxtb	r2, r2
 80a0ab6:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0aba:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 80a0abe:	b2d2      	uxtb	r2, r2
 80a0ac0:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0ac4:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80a0ac8:	b2d2      	uxtb	r2, r2
 80a0aca:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0ace:	f89d c006 	ldrb.w	ip, [sp, #6]
 80a0ad2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a0ad6:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0ada:	0212      	lsls	r2, r2, #8
 80a0adc:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80a0ae0:	433a      	orrs	r2, r7
 80a0ae2:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0ae4:	f88d 6005 	strb.w	r6, [sp, #5]
        pinSet(pin, HIGH); // HIGH
 80a0ae8:	79e2      	ldrb	r2, [r4, #7]
        cyc = DWT->CYCCNT;
 80a0aea:	685d      	ldr	r5, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0aec:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0af0:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a0af4:	88bf      	ldrh	r7, [r7, #4]
 80a0af6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a0afa:	9505      	str	r5, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0afc:	8317      	strh	r7, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0afe:	9f03      	ldr	r7, [sp, #12]
 80a0b00:	9a04      	ldr	r2, [sp, #16]
 80a0b02:	4217      	tst	r7, r2
 80a0b04:	d025      	beq.n	80a0b52 <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0b06:	685a      	ldr	r2, [r3, #4]
 80a0b08:	9f05      	ldr	r7, [sp, #20]
 80a0b0a:	1bd2      	subs	r2, r2, r7
 80a0b0c:	2a4f      	cmp	r2, #79	; 0x4f
 80a0b0e:	d9fa      	bls.n	80a0b06 <_ZN17Adafruit_NeoPixel4showEv+0x812>
          pinSet(pin, LOW);
 80a0b10:	79e2      	ldrb	r2, [r4, #7]
 80a0b12:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0b16:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a0b1a:	88bf      	ldrh	r7, [r7, #4]
 80a0b1c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a0b20:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0b22:	685a      	ldr	r2, [r3, #4]
 80a0b24:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0b26:	685a      	ldr	r2, [r3, #4]
 80a0b28:	9f05      	ldr	r7, [sp, #20]
 80a0b2a:	1bd2      	subs	r2, r2, r7
 80a0b2c:	2a07      	cmp	r2, #7
 80a0b2e:	d9fa      	bls.n	80a0b26 <_ZN17Adafruit_NeoPixel4showEv+0x832>
        mask >>= 1;
 80a0b30:	9a04      	ldr	r2, [sp, #16]
 80a0b32:	0852      	lsrs	r2, r2, #1
 80a0b34:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0b36:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0b3a:	3201      	adds	r2, #1
 80a0b3c:	b2d2      	uxtb	r2, r2
 80a0b3e:	2a17      	cmp	r2, #23
 80a0b40:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0b44:	d9d0      	bls.n	80a0ae8 <_ZN17Adafruit_NeoPixel4showEv+0x7f4>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b46:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0b4a:	b292      	uxth	r2, r2
 80a0b4c:	2a00      	cmp	r2, #0
 80a0b4e:	d1a6      	bne.n	80a0a9e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0b50:	e797      	b.n	80a0a82 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0b52:	685a      	ldr	r2, [r3, #4]
 80a0b54:	9f05      	ldr	r7, [sp, #20]
 80a0b56:	1bd2      	subs	r2, r2, r7
 80a0b58:	2a18      	cmp	r2, #24
 80a0b5a:	d9fa      	bls.n	80a0b52 <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          pinSet(pin, LOW);
 80a0b5c:	79e2      	ldrb	r2, [r4, #7]
 80a0b5e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0b62:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a0b66:	88bf      	ldrh	r7, [r7, #4]
 80a0b68:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a0b6c:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0b6e:	685a      	ldr	r2, [r3, #4]
 80a0b70:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0b72:	685a      	ldr	r2, [r3, #4]
 80a0b74:	9f05      	ldr	r7, [sp, #20]
 80a0b76:	1bd2      	subs	r2, r2, r7
 80a0b78:	2a45      	cmp	r2, #69	; 0x45
 80a0b7a:	d9fa      	bls.n	80a0b72 <_ZN17Adafruit_NeoPixel4showEv+0x87e>
 80a0b7c:	e7d8      	b.n	80a0b30 <_ZN17Adafruit_NeoPixel4showEv+0x83c>
 80a0b7e:	4770      	bx	lr
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0b80:	2b00      	cmp	r3, #0
 80a0b82:	f43f af7e 	beq.w	80a0a82 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x80000000; // reset the mask
 80a0b86:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      j = 0;        // reset the 32-bit counter
 80a0b8a:	2600      	movs	r6, #0
 80a0b8c:	4a17      	ldr	r2, [pc, #92]	; (80a0bec <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
      mask = 0x80000000; // reset the mask
 80a0b8e:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0b90:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      w = *ptr++;   // Next white byte value
 80a0b94:	3104      	adds	r1, #4
      i = i-4;      // decrement bytes remaining
 80a0b96:	3b04      	subs	r3, #4
 80a0b98:	b29b      	uxth	r3, r3
 80a0b9a:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0b9e:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80a0ba2:	b2db      	uxtb	r3, r3
 80a0ba4:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0ba8:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0bac:	b2db      	uxtb	r3, r3
 80a0bae:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0bb2:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0bb6:	b2db      	uxtb	r3, r3
 80a0bb8:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0bbc:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a0bc0:	b2db      	uxtb	r3, r3
 80a0bc2:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0bc6:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a0bca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0bce:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0bd2:	041b      	lsls	r3, r3, #16
 80a0bd4:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a0bd8:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80a0bdc:	433b      	orrs	r3, r7
 80a0bde:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a0be2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0be4:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0be8:	e07f      	b.n	80a0cea <_ZN17Adafruit_NeoPixel4showEv+0x9f6>
 80a0bea:	bf00      	nop
 80a0bec:	20000090 	.word	0x20000090
 80a0bf0:	e0001000 	.word	0xe0001000
            ::: "r0", "cc", "memory");
 80a0bf4:	4600      	mov	r0, r0
 80a0bf6:	bf00      	nop
 80a0bf8:	bf00      	nop
 80a0bfa:	bf00      	nop
 80a0bfc:	bf00      	nop
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
 80a0c0c:	bf00      	nop
 80a0c0e:	bf00      	nop
 80a0c10:	bf00      	nop
 80a0c12:	bf00      	nop
 80a0c14:	bf00      	nop
 80a0c16:	bf00      	nop
 80a0c18:	bf00      	nop
 80a0c1a:	bf00      	nop
 80a0c1c:	bf00      	nop
 80a0c1e:	bf00      	nop
 80a0c20:	bf00      	nop
 80a0c22:	bf00      	nop
 80a0c24:	bf00      	nop
 80a0c26:	bf00      	nop
 80a0c28:	bf00      	nop
 80a0c2a:	bf00      	nop
 80a0c2c:	bf00      	nop
 80a0c2e:	bf00      	nop
 80a0c30:	bf00      	nop
 80a0c32:	bf00      	nop
 80a0c34:	bf00      	nop
 80a0c36:	bf00      	nop
 80a0c38:	bf00      	nop
 80a0c3a:	bf00      	nop
 80a0c3c:	bf00      	nop
 80a0c3e:	bf00      	nop
 80a0c40:	bf00      	nop
 80a0c42:	bf00      	nop
 80a0c44:	bf00      	nop
 80a0c46:	bf00      	nop
 80a0c48:	bf00      	nop
 80a0c4a:	bf00      	nop
 80a0c4c:	bf00      	nop
 80a0c4e:	bf00      	nop
 80a0c50:	bf00      	nop
 80a0c52:	bf00      	nop
 80a0c54:	bf00      	nop
 80a0c56:	bf00      	nop
 80a0c58:	bf00      	nop
 80a0c5a:	bf00      	nop
 80a0c5c:	bf00      	nop
 80a0c5e:	bf00      	nop
 80a0c60:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0c62:	79e3      	ldrb	r3, [r4, #7]
 80a0c64:	6810      	ldr	r0, [r2, #0]
 80a0c66:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c6a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c6e:	88bf      	ldrh	r7, [r7, #4]
 80a0c70:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c74:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a0c76:	4600      	mov	r0, r0
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
 80a0c96:	bf00      	nop
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
        mask >>= 1;
 80a0cd4:	9b04      	ldr	r3, [sp, #16]
 80a0cd6:	085b      	lsrs	r3, r3, #1
 80a0cd8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0cda:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0cde:	3301      	adds	r3, #1
 80a0ce0:	b2db      	uxtb	r3, r3
 80a0ce2:	2b1f      	cmp	r3, #31
 80a0ce4:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0ce8:	d87e      	bhi.n	80a0de8 <_ZN17Adafruit_NeoPixel4showEv+0xaf4>
        pinSet(pin, HIGH); // HIGH
 80a0cea:	79e3      	ldrb	r3, [r4, #7]
 80a0cec:	6810      	ldr	r0, [r2, #0]
 80a0cee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0cf2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0cf6:	88bf      	ldrh	r7, [r7, #4]
 80a0cf8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0cfc:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0cfe:	9803      	ldr	r0, [sp, #12]
 80a0d00:	9b04      	ldr	r3, [sp, #16]
 80a0d02:	4218      	tst	r0, r3
 80a0d04:	f47f af76 	bne.w	80a0bf4 <_ZN17Adafruit_NeoPixel4showEv+0x900>
            ::: "r0", "cc", "memory");
 80a0d08:	4600      	mov	r0, r0
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0d30:	79e3      	ldrb	r3, [r4, #7]
 80a0d32:	6810      	ldr	r0, [r2, #0]
 80a0d34:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d38:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d3c:	88bf      	ldrh	r7, [r7, #4]
 80a0d3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d42:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a0d44:	4600      	mov	r0, r0
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	e775      	b.n	80a0cd4 <_ZN17Adafruit_NeoPixel4showEv+0x9e0>
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0de8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0dec:	b29b      	uxth	r3, r3
 80a0dee:	2b00      	cmp	r3, #0
 80a0df0:	f47f aecd 	bne.w	80a0b8e <_ZN17Adafruit_NeoPixel4showEv+0x89a>
 80a0df4:	e645      	b.n	80a0a82 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0df6:	2d03      	cmp	r5, #3
 80a0df8:	f000 812b 	beq.w	80a1052 <_ZN17Adafruit_NeoPixel4showEv+0xd5e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0dfc:	2b00      	cmp	r3, #0
 80a0dfe:	f43f ae40 	beq.w	80a0a82 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0e02:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0e06:	2600      	movs	r6, #0
 80a0e08:	4a17      	ldr	r2, [pc, #92]	; (80a0e68 <_ZN17Adafruit_NeoPixel4showEv+0xb74>)
      mask = 0x800000; // reset the mask
 80a0e0a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0e0c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a0e10:	79e0      	ldrb	r0, [r4, #7]
      i = i-3;      // decrement bytes remaining
 80a0e12:	3b03      	subs	r3, #3
 80a0e14:	b29b      	uxth	r3, r3
 80a0e16:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0e1a:	780b      	ldrb	r3, [r1, #0]
      pinSet(pin, LOW); // LOW
 80a0e1c:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a0e1e:	b2db      	uxtb	r3, r3
 80a0e20:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0e24:	784b      	ldrb	r3, [r1, #1]
      pinSet(pin, LOW); // LOW
 80a0e26:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a0e2a:	b2db      	uxtb	r3, r3
 80a0e2c:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0e30:	788b      	ldrb	r3, [r1, #2]
      pinSet(pin, LOW); // LOW
 80a0e32:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      g = *ptr++;   // Next green byte value
 80a0e36:	b2db      	uxtb	r3, r3
 80a0e38:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0e3c:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0e40:	f89d 3008 	ldrb.w	r3, [sp, #8]
      pinSet(pin, LOW); // LOW
 80a0e44:	f8bc c004 	ldrh.w	ip, [ip, #4]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0e48:	021b      	lsls	r3, r3, #8
 80a0e4a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80a0e4e:	f89d e006 	ldrb.w	lr, [sp, #6]
      pinSet(pin, LOW); // LOW
 80a0e52:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0e56:	ea43 030e 	orr.w	r3, r3, lr
 80a0e5a:	9303      	str	r3, [sp, #12]
      g = *ptr++;   // Next green byte value
 80a0e5c:	3103      	adds	r1, #3
      j = 0;        // reset the 24-bit counter
 80a0e5e:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0e62:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a0e66:	e07c      	b.n	80a0f62 <_ZN17Adafruit_NeoPixel4showEv+0xc6e>
 80a0e68:	20000090 	.word	0x20000090
          mask >>= 1; // Do this task during the long delay of this bit
 80a0e6c:	9b04      	ldr	r3, [sp, #16]
 80a0e6e:	085b      	lsrs	r3, r3, #1
 80a0e70:	9304      	str	r3, [sp, #16]
            ::: "r0", "cc", "memory");
 80a0e72:	4600      	mov	r0, r0
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
 80a0eb8:	bf00      	nop
 80a0eba:	bf00      	nop
 80a0ebc:	bf00      	nop
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a0ef8:	79e0      	ldrb	r0, [r4, #7]
 80a0efa:	6817      	ldr	r7, [r2, #0]
          j++;
 80a0efc:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a0f00:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a0f04:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
 80a0f08:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a0f0c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
          j++;
 80a0f10:	3301      	adds	r3, #1
 80a0f12:	b2db      	uxtb	r3, r3
 80a0f14:	f88d 3005 	strb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a0f18:	f8a0 c018 	strh.w	ip, [r0, #24]
            ::: "r0", "cc", "memory");
 80a0f1c:	4600      	mov	r0, r0
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
          if(j==24) break;
 80a0f46:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0f4a:	2b18      	cmp	r3, #24
 80a0f4c:	d07a      	beq.n	80a1044 <_ZN17Adafruit_NeoPixel4showEv+0xd50>
          pinSet(pin, LOW); // LOW
 80a0f4e:	79e3      	ldrb	r3, [r4, #7]
 80a0f50:	6810      	ldr	r0, [r2, #0]
 80a0f52:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f56:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f5a:	88bf      	ldrh	r7, [r7, #4]
 80a0f5c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f60:	835f      	strh	r7, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a0f62:	9803      	ldr	r0, [sp, #12]
 80a0f64:	9b04      	ldr	r3, [sp, #16]
 80a0f66:	4218      	tst	r0, r3
 80a0f68:	d180      	bne.n	80a0e6c <_ZN17Adafruit_NeoPixel4showEv+0xb78>
            ::: "r0", "cc", "memory");
 80a0f6a:	4600      	mov	r0, r0
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a0f8c:	79e3      	ldrb	r3, [r4, #7]
 80a0f8e:	6810      	ldr	r0, [r2, #0]
 80a0f90:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f94:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f98:	88bf      	ldrh	r7, [r7, #4]
 80a0f9a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f9e:	831f      	strh	r7, [r3, #24]
          j++;
 80a0fa0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0fa4:	3301      	adds	r3, #1
 80a0fa6:	b2db      	uxtb	r3, r3
 80a0fa8:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a0fac:	9b04      	ldr	r3, [sp, #16]
 80a0fae:	085b      	lsrs	r3, r3, #1
 80a0fb0:	9304      	str	r3, [sp, #16]
            ::: "r0", "cc", "memory");
 80a0fb2:	4600      	mov	r0, r0
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
          if(j==24) break;
 80a103c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1040:	2b18      	cmp	r3, #24
 80a1042:	d184      	bne.n	80a0f4e <_ZN17Adafruit_NeoPixel4showEv+0xc5a>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1044:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1048:	b29b      	uxth	r3, r3
 80a104a:	2b00      	cmp	r3, #0
 80a104c:	f47f aedd 	bne.w	80a0e0a <_ZN17Adafruit_NeoPixel4showEv+0xb16>
 80a1050:	e517      	b.n	80a0a82 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1052:	2b00      	cmp	r3, #0
 80a1054:	f43f ad15 	beq.w	80a0a82 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a1058:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a105c:	2600      	movs	r6, #0
 80a105e:	4a13      	ldr	r2, [pc, #76]	; (80a10ac <_ZN17Adafruit_NeoPixel4showEv+0xdb8>)
      mask = 0x800000; // reset the mask
 80a1060:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1062:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a1066:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a1068:	3b03      	subs	r3, #3
 80a106a:	b29b      	uxth	r3, r3
 80a106c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1070:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a1074:	b2db      	uxtb	r3, r3
 80a1076:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a107a:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a107e:	b2db      	uxtb	r3, r3
 80a1080:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1084:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a1088:	b2db      	uxtb	r3, r3
 80a108a:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a108e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1092:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1096:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a109a:	021b      	lsls	r3, r3, #8
 80a109c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a10a0:	4303      	orrs	r3, r0
 80a10a2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a10a4:	f88d 6005 	strb.w	r6, [sp, #5]
 80a10a8:	e0e1      	b.n	80a126e <_ZN17Adafruit_NeoPixel4showEv+0xf7a>
 80a10aa:	bf00      	nop
 80a10ac:	20000090 	.word	0x20000090
            ::: "r0", "cc", "memory");
 80a10b0:	4600      	mov	r0, r0
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
 80a10d6:	bf00      	nop
 80a10d8:	bf00      	nop
 80a10da:	bf00      	nop
 80a10dc:	bf00      	nop
 80a10de:	bf00      	nop
 80a10e0:	bf00      	nop
 80a10e2:	bf00      	nop
 80a10e4:	bf00      	nop
 80a10e6:	bf00      	nop
 80a10e8:	bf00      	nop
 80a10ea:	bf00      	nop
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a11d2:	79e3      	ldrb	r3, [r4, #7]
 80a11d4:	6810      	ldr	r0, [r2, #0]
 80a11d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a11da:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a11de:	88bf      	ldrh	r7, [r7, #4]
 80a11e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a11e4:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a11e6:	4600      	mov	r0, r0
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
        mask >>= 1;
 80a1256:	9b04      	ldr	r3, [sp, #16]
 80a1258:	085b      	lsrs	r3, r3, #1
 80a125a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a125c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1260:	3301      	adds	r3, #1
 80a1262:	b2db      	uxtb	r3, r3
 80a1264:	2b17      	cmp	r3, #23
 80a1266:	f88d 3005 	strb.w	r3, [sp, #5]
 80a126a:	f200 80eb 	bhi.w	80a1444 <_ZN17Adafruit_NeoPixel4showEv+0x1150>
        pinSet(pin, HIGH); // HIGH
 80a126e:	79e3      	ldrb	r3, [r4, #7]
 80a1270:	6810      	ldr	r0, [r2, #0]
 80a1272:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1276:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a127a:	88bf      	ldrh	r7, [r7, #4]
 80a127c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1280:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1282:	9803      	ldr	r0, [sp, #12]
 80a1284:	9b04      	ldr	r3, [sp, #16]
 80a1286:	4218      	tst	r0, r3
 80a1288:	f47f af12 	bne.w	80a10b0 <_ZN17Adafruit_NeoPixel4showEv+0xdbc>
            ::: "r0", "cc", "memory");
 80a128c:	4600      	mov	r0, r0
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a130e:	79e3      	ldrb	r3, [r4, #7]
 80a1310:	6810      	ldr	r0, [r2, #0]
 80a1312:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1316:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a131a:	88bf      	ldrh	r7, [r7, #4]
 80a131c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1320:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a1322:	4600      	mov	r0, r0
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	e710      	b.n	80a1256 <_ZN17Adafruit_NeoPixel4showEv+0xf62>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1434:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1438:	b29b      	uxth	r3, r3
 80a143a:	2b00      	cmp	r3, #0
 80a143c:	f47e af92 	bne.w	80a0364 <_ZN17Adafruit_NeoPixel4showEv+0x70>
 80a1440:	f7ff bb1f 	b.w	80a0a82 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1444:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1448:	b29b      	uxth	r3, r3
 80a144a:	2b00      	cmp	r3, #0
 80a144c:	f47f ae08 	bne.w	80a1060 <_ZN17Adafruit_NeoPixel4showEv+0xd6c>
 80a1450:	f7ff bb17 	b.w	80a0a82 <_ZN17Adafruit_NeoPixel4showEv+0x78e>

080a1454 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1454:	8843      	ldrh	r3, [r0, #2]
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a1456:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1458:	428b      	cmp	r3, r1
 80a145a:	d926      	bls.n	80a14aa <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a145c:	7a05      	ldrb	r5, [r0, #8]
 80a145e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1462:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a1466:	b2d6      	uxtb	r6, r2
 80a1468:	b13d      	cbz	r5, 80a147a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
 80a146a:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a146c:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a146e:	436e      	muls	r6, r5
      r = (r * brightness) >> 8;
 80a1470:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1474:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1478:	0a36      	lsrs	r6, r6, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a147a:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a147e:	68c7      	ldr	r7, [r0, #12]
 80a1480:	f1bc 0f06 	cmp.w	ip, #6
 80a1484:	bf0c      	ite	eq
 80a1486:	2504      	moveq	r5, #4
 80a1488:	2503      	movne	r5, #3
 80a148a:	4369      	muls	r1, r5
 80a148c:	f1ac 0c02 	sub.w	ip, ip, #2
 80a1490:	187d      	adds	r5, r7, r1
    switch(type) {
 80a1492:	f1bc 0f06 	cmp.w	ip, #6
 80a1496:	d81d      	bhi.n	80a14d4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
 80a1498:	e8df f00c 	tbb	[pc, ip]
 80a149c:	04081c04 	.word	0x04081c04
 80a14a0:	040f      	.short	0x040f
 80a14a2:	04          	.byte	0x04
 80a14a3:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a14a4:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a14a6:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a14a8:	70ae      	strb	r6, [r5, #2]
          *p++ = g;
          *p = b;
        } break;
    }
  }
}
 80a14aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
 80a14ac:	2bfe      	cmp	r3, #254	; 0xfe
 80a14ae:	bf28      	it	cs
 80a14b0:	23fe      	movcs	r3, #254	; 0xfe
 80a14b2:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a14b4:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a14b6:	70ac      	strb	r4, [r5, #2]
        } break;
 80a14b8:	e7f7      	b.n	80a14aa <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
          *p++ = r;
 80a14ba:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a14bc:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a14be:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a14c0:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
 80a14c2:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a14c4:	b913      	cbnz	r3, 80a14cc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
 80a14c6:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a14c8:	70ea      	strb	r2, [r5, #3]
        } break;
 80a14ca:	e7ee      	b.n	80a14aa <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a14cc:	435a      	muls	r2, r3
 80a14ce:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a14d2:	e7f9      	b.n	80a14c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
 80a14d4:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a14d6:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a14d8:	70ae      	strb	r6, [r5, #2]
}
 80a14da:	e7e6      	b.n	80a14aa <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>

080a14dc <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a14dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a14e0:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a14e4:	4770      	bx	lr
	...

080a14e8 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a14e8:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a14ea:	f000 f835 	bl	80a1558 <HAL_Pin_Map>
 80a14ee:	4b01      	ldr	r3, [pc, #4]	; (80a14f4 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a14f0:	6018      	str	r0, [r3, #0]
}
 80a14f2:	bd08      	pop	{r3, pc}
 80a14f4:	20000090 	.word	0x20000090

080a14f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a14f8:	b508      	push	{r3, lr}
 80a14fa:	4b02      	ldr	r3, [pc, #8]	; (80a1504 <os_mutex_recursive_create+0xc>)
 80a14fc:	681b      	ldr	r3, [r3, #0]
 80a14fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1500:	9301      	str	r3, [sp, #4]
 80a1502:	bd08      	pop	{r3, pc}
 80a1504:	080601d0 	.word	0x080601d0

080a1508 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1508:	b508      	push	{r3, lr}
 80a150a:	4b02      	ldr	r3, [pc, #8]	; (80a1514 <os_mutex_recursive_destroy+0xc>)
 80a150c:	681b      	ldr	r3, [r3, #0]
 80a150e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1510:	9301      	str	r3, [sp, #4]
 80a1512:	bd08      	pop	{r3, pc}
 80a1514:	080601d0 	.word	0x080601d0

080a1518 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1518:	b508      	push	{r3, lr}
 80a151a:	4b02      	ldr	r3, [pc, #8]	; (80a1524 <HAL_RNG_GetRandomNumber+0xc>)
 80a151c:	681b      	ldr	r3, [r3, #0]
 80a151e:	685b      	ldr	r3, [r3, #4]
 80a1520:	9301      	str	r3, [sp, #4]
 80a1522:	bd08      	pop	{r3, pc}
 80a1524:	0806019c 	.word	0x0806019c

080a1528 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1528:	b508      	push	{r3, lr}
 80a152a:	4b02      	ldr	r3, [pc, #8]	; (80a1534 <HAL_Delay_Microseconds+0xc>)
 80a152c:	681b      	ldr	r3, [r3, #0]
 80a152e:	68db      	ldr	r3, [r3, #12]
 80a1530:	9301      	str	r3, [sp, #4]
 80a1532:	bd08      	pop	{r3, pc}
 80a1534:	0806019c 	.word	0x0806019c

080a1538 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1538:	b508      	push	{r3, lr}
 80a153a:	4b02      	ldr	r3, [pc, #8]	; (80a1544 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a153c:	681b      	ldr	r3, [r3, #0]
 80a153e:	691b      	ldr	r3, [r3, #16]
 80a1540:	9301      	str	r3, [sp, #4]
 80a1542:	bd08      	pop	{r3, pc}
 80a1544:	0806019c 	.word	0x0806019c

080a1548 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1548:	b508      	push	{r3, lr}
 80a154a:	4b02      	ldr	r3, [pc, #8]	; (80a1554 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a154c:	681b      	ldr	r3, [r3, #0]
 80a154e:	695b      	ldr	r3, [r3, #20]
 80a1550:	9301      	str	r3, [sp, #4]
 80a1552:	bd08      	pop	{r3, pc}
 80a1554:	0806019c 	.word	0x0806019c

080a1558 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1558:	b508      	push	{r3, lr}
 80a155a:	4b02      	ldr	r3, [pc, #8]	; (80a1564 <HAL_Pin_Map+0xc>)
 80a155c:	681b      	ldr	r3, [r3, #0]
 80a155e:	681b      	ldr	r3, [r3, #0]
 80a1560:	9301      	str	r3, [sp, #4]
 80a1562:	bd08      	pop	{r3, pc}
 80a1564:	080601b0 	.word	0x080601b0

080a1568 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1568:	b508      	push	{r3, lr}
 80a156a:	4b02      	ldr	r3, [pc, #8]	; (80a1574 <HAL_Pin_Mode+0xc>)
 80a156c:	681b      	ldr	r3, [r3, #0]
 80a156e:	689b      	ldr	r3, [r3, #8]
 80a1570:	9301      	str	r3, [sp, #4]
 80a1572:	bd08      	pop	{r3, pc}
 80a1574:	080601b0 	.word	0x080601b0

080a1578 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1578:	b508      	push	{r3, lr}
 80a157a:	4b02      	ldr	r3, [pc, #8]	; (80a1584 <HAL_Get_Pin_Mode+0xc>)
 80a157c:	681b      	ldr	r3, [r3, #0]
 80a157e:	68db      	ldr	r3, [r3, #12]
 80a1580:	9301      	str	r3, [sp, #4]
 80a1582:	bd08      	pop	{r3, pc}
 80a1584:	080601b0 	.word	0x080601b0

080a1588 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1588:	b508      	push	{r3, lr}
 80a158a:	4b02      	ldr	r3, [pc, #8]	; (80a1594 <HAL_GPIO_Write+0xc>)
 80a158c:	681b      	ldr	r3, [r3, #0]
 80a158e:	691b      	ldr	r3, [r3, #16]
 80a1590:	9301      	str	r3, [sp, #4]
 80a1592:	bd08      	pop	{r3, pc}
 80a1594:	080601b0 	.word	0x080601b0

080a1598 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1598:	b508      	push	{r3, lr}
 80a159a:	4b02      	ldr	r3, [pc, #8]	; (80a15a4 <HAL_GPIO_Read+0xc>)
 80a159c:	681b      	ldr	r3, [r3, #0]
 80a159e:	695b      	ldr	r3, [r3, #20]
 80a15a0:	9301      	str	r3, [sp, #4]
 80a15a2:	bd08      	pop	{r3, pc}
 80a15a4:	080601b0 	.word	0x080601b0

080a15a8 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
 80a15a8:	b508      	push	{r3, lr}
 80a15aa:	4b02      	ldr	r3, [pc, #8]	; (80a15b4 <HAL_Pulse_In+0xc>)
 80a15ac:	681b      	ldr	r3, [r3, #0]
 80a15ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a15b0:	9301      	str	r3, [sp, #4]
 80a15b2:	bd08      	pop	{r3, pc}
 80a15b4:	080601b0 	.word	0x080601b0

080a15b8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a15b8:	b508      	push	{r3, lr}
 80a15ba:	4b02      	ldr	r3, [pc, #8]	; (80a15c4 <hal_i2c_write+0xc>)
 80a15bc:	681b      	ldr	r3, [r3, #0]
 80a15be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a15c0:	9301      	str	r3, [sp, #4]
 80a15c2:	bd08      	pop	{r3, pc}
 80a15c4:	080601ac 	.word	0x080601ac

080a15c8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a15c8:	b508      	push	{r3, lr}
 80a15ca:	4b02      	ldr	r3, [pc, #8]	; (80a15d4 <hal_i2c_available+0xc>)
 80a15cc:	681b      	ldr	r3, [r3, #0]
 80a15ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a15d0:	9301      	str	r3, [sp, #4]
 80a15d2:	bd08      	pop	{r3, pc}
 80a15d4:	080601ac 	.word	0x080601ac

080a15d8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a15d8:	b508      	push	{r3, lr}
 80a15da:	4b02      	ldr	r3, [pc, #8]	; (80a15e4 <hal_i2c_read+0xc>)
 80a15dc:	681b      	ldr	r3, [r3, #0]
 80a15de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a15e0:	9301      	str	r3, [sp, #4]
 80a15e2:	bd08      	pop	{r3, pc}
 80a15e4:	080601ac 	.word	0x080601ac

080a15e8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a15e8:	b508      	push	{r3, lr}
 80a15ea:	4b02      	ldr	r3, [pc, #8]	; (80a15f4 <hal_i2c_peek+0xc>)
 80a15ec:	681b      	ldr	r3, [r3, #0]
 80a15ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a15f0:	9301      	str	r3, [sp, #4]
 80a15f2:	bd08      	pop	{r3, pc}
 80a15f4:	080601ac 	.word	0x080601ac

080a15f8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a15f8:	b508      	push	{r3, lr}
 80a15fa:	4b02      	ldr	r3, [pc, #8]	; (80a1604 <hal_i2c_flush+0xc>)
 80a15fc:	681b      	ldr	r3, [r3, #0]
 80a15fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1600:	9301      	str	r3, [sp, #4]
 80a1602:	bd08      	pop	{r3, pc}
 80a1604:	080601ac 	.word	0x080601ac

080a1608 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a1608:	b508      	push	{r3, lr}
 80a160a:	4b02      	ldr	r3, [pc, #8]	; (80a1614 <hal_i2c_is_enabled+0xc>)
 80a160c:	681b      	ldr	r3, [r3, #0]
 80a160e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1610:	9301      	str	r3, [sp, #4]
 80a1612:	bd08      	pop	{r3, pc}
 80a1614:	080601ac 	.word	0x080601ac

080a1618 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a1618:	b508      	push	{r3, lr}
 80a161a:	4b03      	ldr	r3, [pc, #12]	; (80a1628 <hal_i2c_init+0x10>)
 80a161c:	681b      	ldr	r3, [r3, #0]
 80a161e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1622:	9301      	str	r3, [sp, #4]
 80a1624:	bd08      	pop	{r3, pc}
 80a1626:	0000      	.short	0x0000
 80a1628:	080601ac 	.word	0x080601ac

080a162c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a162c:	b508      	push	{r3, lr}
 80a162e:	4b02      	ldr	r3, [pc, #8]	; (80a1638 <hal_spi_init+0xc>)
 80a1630:	681b      	ldr	r3, [r3, #0]
 80a1632:	69db      	ldr	r3, [r3, #28]
 80a1634:	9301      	str	r3, [sp, #4]
 80a1636:	bd08      	pop	{r3, pc}
 80a1638:	080601b4 	.word	0x080601b4

080a163c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a163c:	b508      	push	{r3, lr}
 80a163e:	4b02      	ldr	r3, [pc, #8]	; (80a1648 <hal_spi_is_enabled+0xc>)
 80a1640:	681b      	ldr	r3, [r3, #0]
 80a1642:	6a1b      	ldr	r3, [r3, #32]
 80a1644:	9301      	str	r3, [sp, #4]
 80a1646:	bd08      	pop	{r3, pc}
 80a1648:	080601b4 	.word	0x080601b4

080a164c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a164c:	b508      	push	{r3, lr}
 80a164e:	4b02      	ldr	r3, [pc, #8]	; (80a1658 <hal_usart_init+0xc>)
 80a1650:	681b      	ldr	r3, [r3, #0]
 80a1652:	699b      	ldr	r3, [r3, #24]
 80a1654:	9301      	str	r3, [sp, #4]
 80a1656:	bd08      	pop	{r3, pc}
 80a1658:	080601c4 	.word	0x080601c4

080a165c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a165c:	b508      	push	{r3, lr}
 80a165e:	4b02      	ldr	r3, [pc, #8]	; (80a1668 <hal_usart_write+0xc>)
 80a1660:	681b      	ldr	r3, [r3, #0]
 80a1662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1664:	9301      	str	r3, [sp, #4]
 80a1666:	bd08      	pop	{r3, pc}
 80a1668:	080601c4 	.word	0x080601c4

080a166c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a166c:	b508      	push	{r3, lr}
 80a166e:	4b02      	ldr	r3, [pc, #8]	; (80a1678 <hal_usart_available+0xc>)
 80a1670:	681b      	ldr	r3, [r3, #0]
 80a1672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1674:	9301      	str	r3, [sp, #4]
 80a1676:	bd08      	pop	{r3, pc}
 80a1678:	080601c4 	.word	0x080601c4

080a167c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a167c:	b508      	push	{r3, lr}
 80a167e:	4b02      	ldr	r3, [pc, #8]	; (80a1688 <hal_usart_read+0xc>)
 80a1680:	681b      	ldr	r3, [r3, #0]
 80a1682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1684:	9301      	str	r3, [sp, #4]
 80a1686:	bd08      	pop	{r3, pc}
 80a1688:	080601c4 	.word	0x080601c4

080a168c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a168c:	b508      	push	{r3, lr}
 80a168e:	4b02      	ldr	r3, [pc, #8]	; (80a1698 <hal_usart_peek+0xc>)
 80a1690:	681b      	ldr	r3, [r3, #0]
 80a1692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1694:	9301      	str	r3, [sp, #4]
 80a1696:	bd08      	pop	{r3, pc}
 80a1698:	080601c4 	.word	0x080601c4

080a169c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a169c:	b508      	push	{r3, lr}
 80a169e:	4b02      	ldr	r3, [pc, #8]	; (80a16a8 <hal_usart_flush+0xc>)
 80a16a0:	681b      	ldr	r3, [r3, #0]
 80a16a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a16a4:	9301      	str	r3, [sp, #4]
 80a16a6:	bd08      	pop	{r3, pc}
 80a16a8:	080601c4 	.word	0x080601c4

080a16ac <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a16ac:	b508      	push	{r3, lr}
 80a16ae:	4b02      	ldr	r3, [pc, #8]	; (80a16b8 <hal_usart_is_enabled+0xc>)
 80a16b0:	681b      	ldr	r3, [r3, #0]
 80a16b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a16b4:	9301      	str	r3, [sp, #4]
 80a16b6:	bd08      	pop	{r3, pc}
 80a16b8:	080601c4 	.word	0x080601c4

080a16bc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a16bc:	b508      	push	{r3, lr}
 80a16be:	4b02      	ldr	r3, [pc, #8]	; (80a16c8 <hal_usart_available_data_for_write+0xc>)
 80a16c0:	681b      	ldr	r3, [r3, #0]
 80a16c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a16c4:	9301      	str	r3, [sp, #4]
 80a16c6:	bd08      	pop	{r3, pc}
 80a16c8:	080601c4 	.word	0x080601c4

080a16cc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a16cc:	b508      	push	{r3, lr}
 80a16ce:	4b02      	ldr	r3, [pc, #8]	; (80a16d8 <HAL_USB_USART_Init+0xc>)
 80a16d0:	681b      	ldr	r3, [r3, #0]
 80a16d2:	681b      	ldr	r3, [r3, #0]
 80a16d4:	9301      	str	r3, [sp, #4]
 80a16d6:	bd08      	pop	{r3, pc}
 80a16d8:	080601d8 	.word	0x080601d8

080a16dc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a16dc:	b508      	push	{r3, lr}
 80a16de:	4b02      	ldr	r3, [pc, #8]	; (80a16e8 <HAL_USB_USART_Available_Data+0xc>)
 80a16e0:	681b      	ldr	r3, [r3, #0]
 80a16e2:	691b      	ldr	r3, [r3, #16]
 80a16e4:	9301      	str	r3, [sp, #4]
 80a16e6:	bd08      	pop	{r3, pc}
 80a16e8:	080601d8 	.word	0x080601d8

080a16ec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a16ec:	b508      	push	{r3, lr}
 80a16ee:	4b02      	ldr	r3, [pc, #8]	; (80a16f8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a16f0:	681b      	ldr	r3, [r3, #0]
 80a16f2:	695b      	ldr	r3, [r3, #20]
 80a16f4:	9301      	str	r3, [sp, #4]
 80a16f6:	bd08      	pop	{r3, pc}
 80a16f8:	080601d8 	.word	0x080601d8

080a16fc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a16fc:	b508      	push	{r3, lr}
 80a16fe:	4b02      	ldr	r3, [pc, #8]	; (80a1708 <HAL_USB_USART_Receive_Data+0xc>)
 80a1700:	681b      	ldr	r3, [r3, #0]
 80a1702:	699b      	ldr	r3, [r3, #24]
 80a1704:	9301      	str	r3, [sp, #4]
 80a1706:	bd08      	pop	{r3, pc}
 80a1708:	080601d8 	.word	0x080601d8

080a170c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a170c:	b508      	push	{r3, lr}
 80a170e:	4b02      	ldr	r3, [pc, #8]	; (80a1718 <HAL_USB_USART_Send_Data+0xc>)
 80a1710:	681b      	ldr	r3, [r3, #0]
 80a1712:	69db      	ldr	r3, [r3, #28]
 80a1714:	9301      	str	r3, [sp, #4]
 80a1716:	bd08      	pop	{r3, pc}
 80a1718:	080601d8 	.word	0x080601d8

080a171c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a171c:	b508      	push	{r3, lr}
 80a171e:	4b02      	ldr	r3, [pc, #8]	; (80a1728 <HAL_USB_USART_Flush_Data+0xc>)
 80a1720:	681b      	ldr	r3, [r3, #0]
 80a1722:	6a1b      	ldr	r3, [r3, #32]
 80a1724:	9301      	str	r3, [sp, #4]
 80a1726:	bd08      	pop	{r3, pc}
 80a1728:	080601d8 	.word	0x080601d8

080a172c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a172c:	b508      	push	{r3, lr}
 80a172e:	4b02      	ldr	r3, [pc, #8]	; (80a1738 <inet_gethostbyname+0xc>)
 80a1730:	681b      	ldr	r3, [r3, #0]
 80a1732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1734:	9301      	str	r3, [sp, #4]
 80a1736:	bd08      	pop	{r3, pc}
 80a1738:	080601c0 	.word	0x080601c0

080a173c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a173c:	b508      	push	{r3, lr}
 80a173e:	4b02      	ldr	r3, [pc, #8]	; (80a1748 <set_system_mode+0xc>)
 80a1740:	681b      	ldr	r3, [r3, #0]
 80a1742:	685b      	ldr	r3, [r3, #4]
 80a1744:	9301      	str	r3, [sp, #4]
 80a1746:	bd08      	pop	{r3, pc}
 80a1748:	080601a4 	.word	0x080601a4

080a174c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a174c:	b508      	push	{r3, lr}
 80a174e:	4b03      	ldr	r3, [pc, #12]	; (80a175c <system_ctrl_set_app_request_handler+0x10>)
 80a1750:	681b      	ldr	r3, [r3, #0]
 80a1752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1756:	9301      	str	r3, [sp, #4]
 80a1758:	bd08      	pop	{r3, pc}
 80a175a:	0000      	.short	0x0000
 80a175c:	080601a4 	.word	0x080601a4

080a1760 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1760:	b508      	push	{r3, lr}
 80a1762:	4b03      	ldr	r3, [pc, #12]	; (80a1770 <system_ctrl_set_result+0x10>)
 80a1764:	681b      	ldr	r3, [r3, #0]
 80a1766:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a176a:	9301      	str	r3, [sp, #4]
 80a176c:	bd08      	pop	{r3, pc}
 80a176e:	0000      	.short	0x0000
 80a1770:	080601a4 	.word	0x080601a4

080a1774 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1774:	b508      	push	{r3, lr}
 80a1776:	4b02      	ldr	r3, [pc, #8]	; (80a1780 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1778:	681b      	ldr	r3, [r3, #0]
 80a177a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a177c:	9301      	str	r3, [sp, #4]
 80a177e:	bd08      	pop	{r3, pc}
 80a1780:	080601cc 	.word	0x080601cc

080a1784 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1784:	b508      	push	{r3, lr}
 80a1786:	4b02      	ldr	r3, [pc, #8]	; (80a1790 <network_connect+0xc>)
 80a1788:	681b      	ldr	r3, [r3, #0]
 80a178a:	685b      	ldr	r3, [r3, #4]
 80a178c:	9301      	str	r3, [sp, #4]
 80a178e:	bd08      	pop	{r3, pc}
 80a1790:	080601c8 	.word	0x080601c8

080a1794 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1794:	b508      	push	{r3, lr}
 80a1796:	4b02      	ldr	r3, [pc, #8]	; (80a17a0 <network_connecting+0xc>)
 80a1798:	681b      	ldr	r3, [r3, #0]
 80a179a:	689b      	ldr	r3, [r3, #8]
 80a179c:	9301      	str	r3, [sp, #4]
 80a179e:	bd08      	pop	{r3, pc}
 80a17a0:	080601c8 	.word	0x080601c8

080a17a4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a17a4:	b508      	push	{r3, lr}
 80a17a6:	4b02      	ldr	r3, [pc, #8]	; (80a17b0 <network_disconnect+0xc>)
 80a17a8:	681b      	ldr	r3, [r3, #0]
 80a17aa:	68db      	ldr	r3, [r3, #12]
 80a17ac:	9301      	str	r3, [sp, #4]
 80a17ae:	bd08      	pop	{r3, pc}
 80a17b0:	080601c8 	.word	0x080601c8

080a17b4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a17b4:	b508      	push	{r3, lr}
 80a17b6:	4b02      	ldr	r3, [pc, #8]	; (80a17c0 <network_ready+0xc>)
 80a17b8:	681b      	ldr	r3, [r3, #0]
 80a17ba:	691b      	ldr	r3, [r3, #16]
 80a17bc:	9301      	str	r3, [sp, #4]
 80a17be:	bd08      	pop	{r3, pc}
 80a17c0:	080601c8 	.word	0x080601c8

080a17c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a17c4:	b508      	push	{r3, lr}
 80a17c6:	4b02      	ldr	r3, [pc, #8]	; (80a17d0 <network_on+0xc>)
 80a17c8:	681b      	ldr	r3, [r3, #0]
 80a17ca:	695b      	ldr	r3, [r3, #20]
 80a17cc:	9301      	str	r3, [sp, #4]
 80a17ce:	bd08      	pop	{r3, pc}
 80a17d0:	080601c8 	.word	0x080601c8

080a17d4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a17d4:	b508      	push	{r3, lr}
 80a17d6:	4b02      	ldr	r3, [pc, #8]	; (80a17e0 <network_off+0xc>)
 80a17d8:	681b      	ldr	r3, [r3, #0]
 80a17da:	699b      	ldr	r3, [r3, #24]
 80a17dc:	9301      	str	r3, [sp, #4]
 80a17de:	bd08      	pop	{r3, pc}
 80a17e0:	080601c8 	.word	0x080601c8

080a17e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a17e4:	b508      	push	{r3, lr}
 80a17e6:	4b02      	ldr	r3, [pc, #8]	; (80a17f0 <network_listen+0xc>)
 80a17e8:	681b      	ldr	r3, [r3, #0]
 80a17ea:	69db      	ldr	r3, [r3, #28]
 80a17ec:	9301      	str	r3, [sp, #4]
 80a17ee:	bd08      	pop	{r3, pc}
 80a17f0:	080601c8 	.word	0x080601c8

080a17f4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a17f4:	b508      	push	{r3, lr}
 80a17f6:	4b02      	ldr	r3, [pc, #8]	; (80a1800 <network_listening+0xc>)
 80a17f8:	681b      	ldr	r3, [r3, #0]
 80a17fa:	6a1b      	ldr	r3, [r3, #32]
 80a17fc:	9301      	str	r3, [sp, #4]
 80a17fe:	bd08      	pop	{r3, pc}
 80a1800:	080601c8 	.word	0x080601c8

080a1804 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1804:	b508      	push	{r3, lr}
 80a1806:	4b02      	ldr	r3, [pc, #8]	; (80a1810 <network_set_listen_timeout+0xc>)
 80a1808:	681b      	ldr	r3, [r3, #0]
 80a180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a180c:	9301      	str	r3, [sp, #4]
 80a180e:	bd08      	pop	{r3, pc}
 80a1810:	080601c8 	.word	0x080601c8

080a1814 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1814:	b508      	push	{r3, lr}
 80a1816:	4b02      	ldr	r3, [pc, #8]	; (80a1820 <network_get_listen_timeout+0xc>)
 80a1818:	681b      	ldr	r3, [r3, #0]
 80a181a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a181c:	9301      	str	r3, [sp, #4]
 80a181e:	bd08      	pop	{r3, pc}
 80a1820:	080601c8 	.word	0x080601c8

080a1824 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1824:	b508      	push	{r3, lr}
 80a1826:	4b02      	ldr	r3, [pc, #8]	; (80a1830 <malloc+0xc>)
 80a1828:	681b      	ldr	r3, [r3, #0]
 80a182a:	681b      	ldr	r3, [r3, #0]
 80a182c:	9301      	str	r3, [sp, #4]
 80a182e:	bd08      	pop	{r3, pc}
 80a1830:	080601a0 	.word	0x080601a0

080a1834 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1834:	b508      	push	{r3, lr}
 80a1836:	4b02      	ldr	r3, [pc, #8]	; (80a1840 <free+0xc>)
 80a1838:	681b      	ldr	r3, [r3, #0]
 80a183a:	685b      	ldr	r3, [r3, #4]
 80a183c:	9301      	str	r3, [sp, #4]
 80a183e:	bd08      	pop	{r3, pc}
 80a1840:	080601a0 	.word	0x080601a0

080a1844 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1844:	b508      	push	{r3, lr}
 80a1846:	4b02      	ldr	r3, [pc, #8]	; (80a1850 <newlib_impure_ptr_callback+0xc>)
 80a1848:	681b      	ldr	r3, [r3, #0]
 80a184a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a184c:	9301      	str	r3, [sp, #4]
 80a184e:	bd08      	pop	{r3, pc}
 80a1850:	080601a0 	.word	0x080601a0

080a1854 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1854:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1856:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a1858:	4604      	mov	r4, r0
      if (_M_manager)
 80a185a:	b113      	cbz	r3, 80a1862 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a185c:	2203      	movs	r2, #3
 80a185e:	4601      	mov	r1, r0
 80a1860:	4798      	blx	r3
    }
 80a1862:	4620      	mov	r0, r4
 80a1864:	bd10      	pop	{r4, pc}

080a1866 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1866:	4770      	bx	lr

080a1868 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a186a:	4606      	mov	r6, r0
 80a186c:	4615      	mov	r5, r2
 80a186e:	460c      	mov	r4, r1
 80a1870:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1872:	42bc      	cmp	r4, r7
 80a1874:	d006      	beq.n	80a1884 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1876:	6833      	ldr	r3, [r6, #0]
 80a1878:	4630      	mov	r0, r6
 80a187a:	689b      	ldr	r3, [r3, #8]
 80a187c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1880:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1882:	e7f6      	b.n	80a1872 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1884:	4628      	mov	r0, r5
 80a1886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1888 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1888:	2200      	movs	r2, #0
 80a188a:	7c00      	ldrb	r0, [r0, #16]
 80a188c:	f7ff be94 	b.w	80a15b8 <hal_i2c_write>

080a1890 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1890:	2100      	movs	r1, #0
 80a1892:	7c00      	ldrb	r0, [r0, #16]
 80a1894:	f7ff be98 	b.w	80a15c8 <hal_i2c_available>

080a1898 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1898:	2100      	movs	r1, #0
 80a189a:	7c00      	ldrb	r0, [r0, #16]
 80a189c:	f7ff be9c 	b.w	80a15d8 <hal_i2c_read>

080a18a0 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a18a0:	2100      	movs	r1, #0
 80a18a2:	7c00      	ldrb	r0, [r0, #16]
 80a18a4:	f7ff bea0 	b.w	80a15e8 <hal_i2c_peek>

080a18a8 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a18a8:	2100      	movs	r1, #0
 80a18aa:	7c00      	ldrb	r0, [r0, #16]
 80a18ac:	f7ff bea4 	b.w	80a15f8 <hal_i2c_flush>

080a18b0 <_ZN7TwoWireD0Ev>:
 80a18b0:	b510      	push	{r4, lr}
 80a18b2:	4604      	mov	r4, r0
 80a18b4:	2114      	movs	r1, #20
 80a18b6:	f000 fda6 	bl	80a2406 <_ZdlPvj>
 80a18ba:	4620      	mov	r0, r4
 80a18bc:	bd10      	pop	{r4, pc}
	...

080a18c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a18c0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a18c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a18c6:	4604      	mov	r4, r0
 80a18c8:	4608      	mov	r0, r1
 80a18ca:	2100      	movs	r1, #0
 80a18cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a18d0:	4b03      	ldr	r3, [pc, #12]	; (80a18e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a18d2:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a18d4:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a18d6:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a18d8:	f7ff fe9e 	bl	80a1618 <hal_i2c_init>
}
 80a18dc:	4620      	mov	r0, r4
 80a18de:	bd10      	pop	{r4, pc}
 80a18e0:	080a3304 	.word	0x080a3304

080a18e4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a18e4:	4770      	bx	lr

080a18e6 <_ZN9IPAddressD0Ev>:
 80a18e6:	b510      	push	{r4, lr}
 80a18e8:	4604      	mov	r4, r0
 80a18ea:	2118      	movs	r1, #24
 80a18ec:	f000 fd8b 	bl	80a2406 <_ZdlPvj>
 80a18f0:	4620      	mov	r0, r4
 80a18f2:	bd10      	pop	{r4, pc}

080a18f4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a18f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a18f6:	460e      	mov	r6, r1
 80a18f8:	2400      	movs	r4, #0
 80a18fa:	f100 0708 	add.w	r7, r0, #8
 80a18fe:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1900:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1904:	220a      	movs	r2, #10
 80a1906:	4630      	mov	r0, r6
 80a1908:	f000 f8f3 	bl	80a1af2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a190c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a190e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1910:	d101      	bne.n	80a1916 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a1912:	4620      	mov	r0, r4
 80a1914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a1916:	2c00      	cmp	r4, #0
 80a1918:	d0f2      	beq.n	80a1900 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a191a:	212e      	movs	r1, #46	; 0x2e
 80a191c:	4630      	mov	r0, r6
 80a191e:	f000 f8d9 	bl	80a1ad4 <_ZN5Print5printEc>
 80a1922:	4404      	add	r4, r0
 80a1924:	e7ec      	b.n	80a1900 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a1928 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1928:	b510      	push	{r4, lr}
 80a192a:	4604      	mov	r4, r0
 80a192c:	4b04      	ldr	r3, [pc, #16]	; (80a1940 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a192e:	2211      	movs	r2, #17
 80a1930:	2100      	movs	r1, #0
 80a1932:	f840 3b04 	str.w	r3, [r0], #4
 80a1936:	f001 fc99 	bl	80a326c <memset>
}
 80a193a:	4620      	mov	r0, r4
 80a193c:	bd10      	pop	{r4, pc}
 80a193e:	bf00      	nop
 80a1940:	080a332c 	.word	0x080a332c

080a1944 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1944:	4603      	mov	r3, r0
 80a1946:	4a07      	ldr	r2, [pc, #28]	; (80a1964 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1948:	b510      	push	{r4, lr}
 80a194a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a194e:	f101 0210 	add.w	r2, r1, #16
 80a1952:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1956:	4291      	cmp	r1, r2
 80a1958:	f843 4b04 	str.w	r4, [r3], #4
 80a195c:	d1f9      	bne.n	80a1952 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a195e:	780a      	ldrb	r2, [r1, #0]
 80a1960:	701a      	strb	r2, [r3, #0]
}
 80a1962:	bd10      	pop	{r4, pc}
 80a1964:	080a332c 	.word	0x080a332c

080a1968 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1968:	4a02      	ldr	r2, [pc, #8]	; (80a1974 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a196a:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a196e:	2204      	movs	r2, #4
 80a1970:	7502      	strb	r2, [r0, #20]
}
 80a1972:	4770      	bx	lr
 80a1974:	080a332c 	.word	0x080a332c

080a1978 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1978:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a197a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a197e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1982:	2304      	movs	r3, #4
 80a1984:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1988:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a198c:	6044      	str	r4, [r0, #4]
 80a198e:	7503      	strb	r3, [r0, #20]
}
 80a1990:	bd10      	pop	{r4, pc}
	...

080a1994 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1996:	4d04      	ldr	r5, [pc, #16]	; (80a19a8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1998:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a199a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a199e:	9500      	str	r5, [sp, #0]
 80a19a0:	f7ff ffea 	bl	80a1978 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a19a4:	b003      	add	sp, #12
 80a19a6:	bd30      	pop	{r4, r5, pc}
 80a19a8:	080a332c 	.word	0x080a332c

080a19ac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a19ac:	4b01      	ldr	r3, [pc, #4]	; (80a19b4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a19ae:	4a02      	ldr	r2, [pc, #8]	; (80a19b8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a19b0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a19b2:	4770      	bx	lr
 80a19b4:	20000094 	.word	0x20000094
 80a19b8:	080a3338 	.word	0x080a3338

080a19bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a19bc:	2300      	movs	r3, #0
 80a19be:	6840      	ldr	r0, [r0, #4]
 80a19c0:	461a      	mov	r2, r3
 80a19c2:	f7ff bedf 	b.w	80a1784 <network_connect>

080a19c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a19c6:	2200      	movs	r2, #0
 80a19c8:	2102      	movs	r1, #2
 80a19ca:	6840      	ldr	r0, [r0, #4]
 80a19cc:	f7ff beea 	b.w	80a17a4 <network_disconnect>

080a19d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a19d0:	2200      	movs	r2, #0
 80a19d2:	6840      	ldr	r0, [r0, #4]
 80a19d4:	4611      	mov	r1, r2
 80a19d6:	f7ff bedd 	b.w	80a1794 <network_connecting>

080a19da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a19da:	2200      	movs	r2, #0
 80a19dc:	6840      	ldr	r0, [r0, #4]
 80a19de:	4611      	mov	r1, r2
 80a19e0:	f7ff bee8 	b.w	80a17b4 <network_ready>

080a19e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a19e4:	2300      	movs	r3, #0
 80a19e6:	6840      	ldr	r0, [r0, #4]
 80a19e8:	461a      	mov	r2, r3
 80a19ea:	4619      	mov	r1, r3
 80a19ec:	f7ff beea 	b.w	80a17c4 <network_on>

080a19f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a19f0:	2300      	movs	r3, #0
 80a19f2:	6840      	ldr	r0, [r0, #4]
 80a19f4:	461a      	mov	r2, r3
 80a19f6:	4619      	mov	r1, r3
 80a19f8:	f7ff beec 	b.w	80a17d4 <network_off>

080a19fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a19fc:	2200      	movs	r2, #0
 80a19fe:	6840      	ldr	r0, [r0, #4]
 80a1a00:	f081 0101 	eor.w	r1, r1, #1
 80a1a04:	f7ff beee 	b.w	80a17e4 <network_listen>

080a1a08 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1a08:	2200      	movs	r2, #0
 80a1a0a:	6840      	ldr	r0, [r0, #4]
 80a1a0c:	f7ff befa 	b.w	80a1804 <network_set_listen_timeout>

080a1a10 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1a10:	2200      	movs	r2, #0
 80a1a12:	6840      	ldr	r0, [r0, #4]
 80a1a14:	4611      	mov	r1, r2
 80a1a16:	f7ff befd 	b.w	80a1814 <network_get_listen_timeout>

080a1a1a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1a1a:	2200      	movs	r2, #0
 80a1a1c:	6840      	ldr	r0, [r0, #4]
 80a1a1e:	4611      	mov	r1, r2
 80a1a20:	f7ff bee8 	b.w	80a17f4 <network_listening>

080a1a24 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1a24:	b570      	push	{r4, r5, r6, lr}
 80a1a26:	4615      	mov	r5, r2
 80a1a28:	b08e      	sub	sp, #56	; 0x38
 80a1a2a:	4604      	mov	r4, r0
    IPAddress addr;
 80a1a2c:	a808      	add	r0, sp, #32
 80a1a2e:	f7ff ff7b 	bl	80a1928 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1a32:	2211      	movs	r2, #17
 80a1a34:	2100      	movs	r1, #0
 80a1a36:	a803      	add	r0, sp, #12
 80a1a38:	f001 fc18 	bl	80a326c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1a3c:	2600      	movs	r6, #0
 80a1a3e:	4628      	mov	r0, r5
 80a1a40:	f001 fc40 	bl	80a32c4 <strlen>
 80a1a44:	4b0a      	ldr	r3, [pc, #40]	; (80a1a70 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1a46:	9600      	str	r6, [sp, #0]
 80a1a48:	b281      	uxth	r1, r0
 80a1a4a:	685b      	ldr	r3, [r3, #4]
 80a1a4c:	4628      	mov	r0, r5
 80a1a4e:	aa03      	add	r2, sp, #12
 80a1a50:	f7ff fe6c 	bl	80a172c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1a54:	b130      	cbz	r0, 80a1a64 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1a56:	4631      	mov	r1, r6
 80a1a58:	4620      	mov	r0, r4
 80a1a5a:	f7ff ff85 	bl	80a1968 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1a5e:	4620      	mov	r0, r4
 80a1a60:	b00e      	add	sp, #56	; 0x38
 80a1a62:	bd70      	pop	{r4, r5, r6, pc}
 80a1a64:	4620      	mov	r0, r4
 80a1a66:	a903      	add	r1, sp, #12
 80a1a68:	f7ff ff6c 	bl	80a1944 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1a6c:	e7f7      	b.n	80a1a5e <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1a6e:	bf00      	nop
 80a1a70:	20000518 	.word	0x20000518

080a1a74 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1a74:	4b02      	ldr	r3, [pc, #8]	; (80a1a80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1a76:	4a03      	ldr	r2, [pc, #12]	; (80a1a84 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1a78:	601a      	str	r2, [r3, #0]
 80a1a7a:	2200      	movs	r2, #0
 80a1a7c:	605a      	str	r2, [r3, #4]

} // spark
 80a1a7e:	4770      	bx	lr
 80a1a80:	20000098 	.word	0x20000098
 80a1a84:	080a3344 	.word	0x080a3344

080a1a88 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a8a:	4606      	mov	r6, r0
 80a1a8c:	460d      	mov	r5, r1
  size_t n = 0;
 80a1a8e:	2400      	movs	r4, #0
 80a1a90:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1a92:	42bd      	cmp	r5, r7
 80a1a94:	d00c      	beq.n	80a1ab0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1a96:	6833      	ldr	r3, [r6, #0]
 80a1a98:	4630      	mov	r0, r6
 80a1a9a:	689b      	ldr	r3, [r3, #8]
 80a1a9c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1aa0:	4798      	blx	r3
     if (chunk>=0)
 80a1aa2:	1e03      	subs	r3, r0, #0
 80a1aa4:	db01      	blt.n	80a1aaa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1aa6:	441c      	add	r4, r3
  while (size--) {
 80a1aa8:	e7f3      	b.n	80a1a92 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1aaa:	2c00      	cmp	r4, #0
 80a1aac:	bf08      	it	eq
 80a1aae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1ab0:	4620      	mov	r0, r4
 80a1ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1ab4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a1ab4:	b570      	push	{r4, r5, r6, lr}
 80a1ab6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1ab8:	460c      	mov	r4, r1
    }
 80a1aba:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1abc:	b149      	cbz	r1, 80a1ad2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1abe:	f001 fc01 	bl	80a32c4 <strlen>
 80a1ac2:	682b      	ldr	r3, [r5, #0]
 80a1ac4:	4602      	mov	r2, r0
 80a1ac6:	4621      	mov	r1, r4
 80a1ac8:	4628      	mov	r0, r5
    }
 80a1aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1ace:	68db      	ldr	r3, [r3, #12]
 80a1ad0:	4718      	bx	r3
    }
 80a1ad2:	bd70      	pop	{r4, r5, r6, pc}

080a1ad4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1ad4:	6803      	ldr	r3, [r0, #0]
 80a1ad6:	689b      	ldr	r3, [r3, #8]
 80a1ad8:	4718      	bx	r3

080a1ada <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1ada:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1adc:	210d      	movs	r1, #13
{
 80a1ade:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1ae0:	f7ff fff8 	bl	80a1ad4 <_ZN5Print5printEc>
  n += print('\n');
 80a1ae4:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a1ae6:	4604      	mov	r4, r0
  n += print('\n');
 80a1ae8:	4628      	mov	r0, r5
 80a1aea:	f7ff fff3 	bl	80a1ad4 <_ZN5Print5printEc>
  return n;
}
 80a1aee:	4420      	add	r0, r4
 80a1af0:	bd38      	pop	{r3, r4, r5, pc}

080a1af2 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1af2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1af4:	2a01      	cmp	r2, #1
 80a1af6:	bf98      	it	ls
 80a1af8:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1afa:	b530      	push	{r4, r5, lr}
 80a1afc:	b08b      	sub	sp, #44	; 0x2c
 80a1afe:	460c      	mov	r4, r1
  *str = '\0';
 80a1b00:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1b04:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a1b06:	4625      	mov	r5, r4
 80a1b08:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1b0c:	fb04 5312 	mls	r3, r4, r2, r5
 80a1b10:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1b12:	2b09      	cmp	r3, #9
 80a1b14:	bf94      	ite	ls
 80a1b16:	3330      	addls	r3, #48	; 0x30
 80a1b18:	3337      	addhi	r3, #55	; 0x37
 80a1b1a:	b2db      	uxtb	r3, r3
  } while(n);
 80a1b1c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1b1e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1b22:	d9f0      	bls.n	80a1b06 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1b24:	f7ff ffc6 	bl	80a1ab4 <_ZN5Print5writeEPKc>
}
 80a1b28:	b00b      	add	sp, #44	; 0x2c
 80a1b2a:	bd30      	pop	{r4, r5, pc}

080a1b2c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1b30:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1b32:	4619      	mov	r1, r3
 80a1b34:	4610      	mov	r0, r2
{
 80a1b36:	4692      	mov	sl, r2
 80a1b38:	461f      	mov	r7, r3
 80a1b3a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a1b3e:	f001 f8bd 	bl	80a2cbc <__aeabi_dcmpun>
 80a1b42:	b140      	cbz	r0, 80a1b56 <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a1b44:	4950      	ldr	r1, [pc, #320]	; (80a1c88 <_ZN5Print10printFloatEdh+0x15c>)
 80a1b46:	4628      	mov	r0, r5
 80a1b48:	f7ff ffb4 	bl	80a1ab4 <_ZN5Print5writeEPKc>
 80a1b4c:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a1b4e:	4620      	mov	r0, r4
 80a1b50:	b003      	add	sp, #12
 80a1b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a1b56:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a1b5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a1b5e:	4650      	mov	r0, sl
 80a1b60:	4621      	mov	r1, r4
 80a1b62:	4b4a      	ldr	r3, [pc, #296]	; (80a1c8c <_ZN5Print10printFloatEdh+0x160>)
 80a1b64:	f001 f8aa 	bl	80a2cbc <__aeabi_dcmpun>
 80a1b68:	b948      	cbnz	r0, 80a1b7e <_ZN5Print10printFloatEdh+0x52>
 80a1b6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a1b6e:	4650      	mov	r0, sl
 80a1b70:	4621      	mov	r1, r4
 80a1b72:	4b46      	ldr	r3, [pc, #280]	; (80a1c8c <_ZN5Print10printFloatEdh+0x160>)
 80a1b74:	f001 f884 	bl	80a2c80 <__aeabi_dcmple>
 80a1b78:	b908      	cbnz	r0, 80a1b7e <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a1b7a:	4945      	ldr	r1, [pc, #276]	; (80a1c90 <_ZN5Print10printFloatEdh+0x164>)
 80a1b7c:	e7e3      	b.n	80a1b46 <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a1b7e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1b82:	4650      	mov	r0, sl
 80a1b84:	4639      	mov	r1, r7
 80a1b86:	4b43      	ldr	r3, [pc, #268]	; (80a1c94 <_ZN5Print10printFloatEdh+0x168>)
 80a1b88:	f001 f88e 	bl	80a2ca8 <__aeabi_dcmpgt>
 80a1b8c:	b108      	cbz	r0, 80a1b92 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a1b8e:	4942      	ldr	r1, [pc, #264]	; (80a1c98 <_ZN5Print10printFloatEdh+0x16c>)
 80a1b90:	e7d9      	b.n	80a1b46 <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a1b92:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1b96:	4650      	mov	r0, sl
 80a1b98:	4639      	mov	r1, r7
 80a1b9a:	4b40      	ldr	r3, [pc, #256]	; (80a1c9c <_ZN5Print10printFloatEdh+0x170>)
 80a1b9c:	f001 f866 	bl	80a2c6c <__aeabi_dcmplt>
 80a1ba0:	2800      	cmp	r0, #0
 80a1ba2:	d1f4      	bne.n	80a1b8e <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a1ba4:	2200      	movs	r2, #0
 80a1ba6:	2300      	movs	r3, #0
 80a1ba8:	4650      	mov	r0, sl
 80a1baa:	4639      	mov	r1, r7
 80a1bac:	f001 f85e 	bl	80a2c6c <__aeabi_dcmplt>
 80a1bb0:	4604      	mov	r4, r0
 80a1bb2:	b130      	cbz	r0, 80a1bc2 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a1bb4:	212d      	movs	r1, #45	; 0x2d
 80a1bb6:	4628      	mov	r0, r5
 80a1bb8:	f7ff ff8c 	bl	80a1ad4 <_ZN5Print5printEc>
 80a1bbc:	4604      	mov	r4, r0
     number = -number;
 80a1bbe:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a1bc2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a1bc6:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a1bc8:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a1bcc:	4934      	ldr	r1, [pc, #208]	; (80a1ca0 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80a1bce:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a1ca8 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a1bd2:	fa5f f38b 	uxtb.w	r3, fp
 80a1bd6:	429e      	cmp	r6, r3
 80a1bd8:	d906      	bls.n	80a1be8 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a1bda:	4642      	mov	r2, r8
 80a1bdc:	464b      	mov	r3, r9
 80a1bde:	f000 fefd 	bl	80a29dc <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a1be2:	f10b 0b01 	add.w	fp, fp, #1
 80a1be6:	e7f4      	b.n	80a1bd2 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a1be8:	463b      	mov	r3, r7
 80a1bea:	4652      	mov	r2, sl
 80a1bec:	f000 fc16 	bl	80a241c <__adddf3>
 80a1bf0:	4689      	mov	r9, r1
 80a1bf2:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a1bf4:	f001 f8a0 	bl	80a2d38 <__aeabi_d2uiz>
 80a1bf8:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a1bfa:	f000 fd4b 	bl	80a2694 <__aeabi_ui2d>
 80a1bfe:	4602      	mov	r2, r0
 80a1c00:	460b      	mov	r3, r1
 80a1c02:	4640      	mov	r0, r8
 80a1c04:	4649      	mov	r1, r9
 80a1c06:	f000 fc07 	bl	80a2418 <__aeabi_dsub>
        return printNumber(val, base) + t;
 80a1c0a:	220a      	movs	r2, #10
 80a1c0c:	4680      	mov	r8, r0
 80a1c0e:	4689      	mov	r9, r1
 80a1c10:	4628      	mov	r0, r5
 80a1c12:	4639      	mov	r1, r7
 80a1c14:	f7ff ff6d 	bl	80a1af2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a1c18:	4404      	add	r4, r0
  if (digits > 0) {
 80a1c1a:	b126      	cbz	r6, 80a1c26 <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 80a1c1c:	4628      	mov	r0, r5
 80a1c1e:	4921      	ldr	r1, [pc, #132]	; (80a1ca4 <_ZN5Print10printFloatEdh+0x178>)
 80a1c20:	f7ff ff48 	bl	80a1ab4 <_ZN5Print5writeEPKc>
    n += print(".");
 80a1c24:	4404      	add	r4, r0
    remainder *= 10.0;
 80a1c26:	f04f 0a00 	mov.w	sl, #0
 80a1c2a:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a1ca8 <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 80a1c2e:	3e01      	subs	r6, #1
 80a1c30:	b2f6      	uxtb	r6, r6
 80a1c32:	2eff      	cmp	r6, #255	; 0xff
 80a1c34:	d08b      	beq.n	80a1b4e <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a1c36:	4652      	mov	r2, sl
 80a1c38:	465b      	mov	r3, fp
 80a1c3a:	4640      	mov	r0, r8
 80a1c3c:	4649      	mov	r1, r9
 80a1c3e:	f000 fda3 	bl	80a2788 <__aeabi_dmul>
 80a1c42:	4680      	mov	r8, r0
 80a1c44:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a1c46:	f001 f84f 	bl	80a2ce8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a1c4a:	1e07      	subs	r7, r0, #0
 80a1c4c:	da19      	bge.n	80a1c82 <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 80a1c4e:	212d      	movs	r1, #45	; 0x2d
 80a1c50:	4628      	mov	r0, r5
 80a1c52:	f7ff ff3f 	bl	80a1ad4 <_ZN5Print5printEc>
 80a1c56:	4603      	mov	r3, r0
            val = -n;
 80a1c58:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a1c5a:	220a      	movs	r2, #10
 80a1c5c:	4628      	mov	r0, r5
 80a1c5e:	9301      	str	r3, [sp, #4]
 80a1c60:	f7ff ff47 	bl	80a1af2 <_ZN5Print11printNumberEmh>
 80a1c64:	9b01      	ldr	r3, [sp, #4]
 80a1c66:	4403      	add	r3, r0
    remainder -= toPrint;
 80a1c68:	4638      	mov	r0, r7
    n += print(toPrint);
 80a1c6a:	441c      	add	r4, r3
    remainder -= toPrint;
 80a1c6c:	f000 fd22 	bl	80a26b4 <__aeabi_i2d>
 80a1c70:	4602      	mov	r2, r0
 80a1c72:	460b      	mov	r3, r1
 80a1c74:	4640      	mov	r0, r8
 80a1c76:	4649      	mov	r1, r9
 80a1c78:	f000 fbce 	bl	80a2418 <__aeabi_dsub>
 80a1c7c:	4680      	mov	r8, r0
 80a1c7e:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a1c80:	e7d5      	b.n	80a1c2e <_ZN5Print10printFloatEdh+0x102>
            val = n;
 80a1c82:	4639      	mov	r1, r7
        size_t t = 0;
 80a1c84:	2300      	movs	r3, #0
 80a1c86:	e7e8      	b.n	80a1c5a <_ZN5Print10printFloatEdh+0x12e>
 80a1c88:	080a3370 	.word	0x080a3370
 80a1c8c:	7fefffff 	.word	0x7fefffff
 80a1c90:	080a3374 	.word	0x080a3374
 80a1c94:	41efffff 	.word	0x41efffff
 80a1c98:	080a3378 	.word	0x080a3378
 80a1c9c:	c1efffff 	.word	0xc1efffff
 80a1ca0:	3fe00000 	.word	0x3fe00000
 80a1ca4:	080a337c 	.word	0x080a337c
 80a1ca8:	40240000 	.word	0x40240000

080a1cac <_ZN5Print7printlnEdi>:
{
 80a1cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a1cae:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a1cb2:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a1cb4:	9100      	str	r1, [sp, #0]
 80a1cb6:	f7ff ff39 	bl	80a1b2c <_ZN5Print10printFloatEdh>
 80a1cba:	4604      	mov	r4, r0
  n += println();
 80a1cbc:	4628      	mov	r0, r5
 80a1cbe:	f7ff ff0c 	bl	80a1ada <_ZN5Print7printlnEv>
}
 80a1cc2:	4420      	add	r0, r4
 80a1cc4:	b003      	add	sp, #12
 80a1cc6:	bd30      	pop	{r4, r5, pc}

080a1cc8 <_ZN5Print7printlnEfi>:
{
 80a1cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1cca:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a1ccc:	4608      	mov	r0, r1
{
 80a1cce:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a1cd0:	f000 fd02 	bl	80a26d8 <__aeabi_f2d>
 80a1cd4:	9500      	str	r5, [sp, #0]
 80a1cd6:	4602      	mov	r2, r0
 80a1cd8:	460b      	mov	r3, r1
 80a1cda:	4620      	mov	r0, r4
 80a1cdc:	f7ff ffe6 	bl	80a1cac <_ZN5Print7printlnEdi>
}
 80a1ce0:	b003      	add	sp, #12
 80a1ce2:	bd30      	pop	{r4, r5, pc}

080a1ce4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1ce4:	b510      	push	{r4, lr}
 80a1ce6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1ce8:	f7ff fdb4 	bl	80a1854 <_ZNSt14_Function_baseD1Ev>
 80a1cec:	4620      	mov	r0, r4
 80a1cee:	bd10      	pop	{r4, pc}

080a1cf0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a1cf0:	2300      	movs	r3, #0
 80a1cf2:	4803      	ldr	r0, [pc, #12]	; (80a1d00 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1cf4:	4a03      	ldr	r2, [pc, #12]	; (80a1d04 <_GLOBAL__sub_I_RGB+0x14>)
 80a1cf6:	4904      	ldr	r1, [pc, #16]	; (80a1d08 <_GLOBAL__sub_I_RGB+0x18>)
 80a1cf8:	6083      	str	r3, [r0, #8]
 80a1cfa:	f000 bb7f 	b.w	80a23fc <__aeabi_atexit>
 80a1cfe:	bf00      	nop
 80a1d00:	200000a0 	.word	0x200000a0
 80a1d04:	20000068 	.word	0x20000068
 80a1d08:	080a1ce5 	.word	0x080a1ce5

080a1d0c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1d0c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1d0e:	2600      	movs	r6, #0
 80a1d10:	4604      	mov	r4, r0
 80a1d12:	460d      	mov	r5, r1
 80a1d14:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1d18:	f7ff fbee 	bl	80a14f8 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1d1c:	4628      	mov	r0, r5
    _spi = spi;
 80a1d1e:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1d20:	f7ff fc84 	bl	80a162c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1d24:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1d26:	6066      	str	r6, [r4, #4]
}
 80a1d28:	bd70      	pop	{r4, r5, r6, pc}

080a1d2a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a1d2a:	b510      	push	{r4, lr}
 80a1d2c:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a1d2e:	6800      	ldr	r0, [r0, #0]
 80a1d30:	b118      	cbz	r0, 80a1d3a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a1d32:	f7ff fd7f 	bl	80a1834 <free>
            wakeupSource_ = nullptr;
 80a1d36:	2300      	movs	r3, #0
 80a1d38:	6023      	str	r3, [r4, #0]
        }
    }
 80a1d3a:	bd10      	pop	{r4, pc}

080a1d3c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1d3c:	b510      	push	{r4, lr}
 80a1d3e:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a1d40:	f7ff fff3 	bl	80a1d2a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a1d44:	4620      	mov	r0, r4
 80a1d46:	bd10      	pop	{r4, pc}

080a1d48 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1d48:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a1d4a:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1d4c:	b510      	push	{r4, lr}
 80a1d4e:	4b08      	ldr	r3, [pc, #32]	; (80a1d70 <_GLOBAL__sub_I_System+0x28>)
 80a1d50:	4c08      	ldr	r4, [pc, #32]	; (80a1d74 <_GLOBAL__sub_I_System+0x2c>)
 80a1d52:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a1d54:	4b08      	ldr	r3, [pc, #32]	; (80a1d78 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a1d56:	6020      	str	r0, [r4, #0]
 80a1d58:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a1d5a:	71a0      	strb	r0, [r4, #6]
 80a1d5c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1d5e:	f7ff fced 	bl	80a173c <set_system_mode>
SystemClass System;
 80a1d62:	4620      	mov	r0, r4
 80a1d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a1d68:	4a04      	ldr	r2, [pc, #16]	; (80a1d7c <_GLOBAL__sub_I_System+0x34>)
 80a1d6a:	4905      	ldr	r1, [pc, #20]	; (80a1d80 <_GLOBAL__sub_I_System+0x38>)
 80a1d6c:	f000 bb46 	b.w	80a23fc <__aeabi_atexit>
 80a1d70:	200000bc 	.word	0x200000bc
 80a1d74:	200000b0 	.word	0x200000b0
 80a1d78:	ffff0000 	.word	0xffff0000
 80a1d7c:	20000068 	.word	0x20000068
 80a1d80:	080a1d3d 	.word	0x080a1d3d

080a1d84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1d84:	4b02      	ldr	r3, [pc, #8]	; (80a1d90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1d86:	681a      	ldr	r2, [r3, #0]
 80a1d88:	4b02      	ldr	r3, [pc, #8]	; (80a1d94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1d8a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1d8c:	4770      	bx	lr
 80a1d8e:	bf00      	nop
 80a1d90:	20000000 	.word	0x20000000
 80a1d94:	200000c0 	.word	0x200000c0

080a1d98 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1d98:	4770      	bx	lr

080a1d9a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1d9a:	7441      	strb	r1, [r0, #17]
}
 80a1d9c:	4770      	bx	lr

080a1d9e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a1d9e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1da0:	7c00      	ldrb	r0, [r0, #16]
 80a1da2:	f7ff fc8b 	bl	80a16bc <hal_usart_available_data_for_write>
}
 80a1da6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1daa:	bd08      	pop	{r3, pc}

080a1dac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1dac:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1dae:	7c00      	ldrb	r0, [r0, #16]
 80a1db0:	f7ff fc5c 	bl	80a166c <hal_usart_available>
}
 80a1db4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1db8:	bd08      	pop	{r3, pc}

080a1dba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1dba:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1dbc:	7c00      	ldrb	r0, [r0, #16]
 80a1dbe:	f7ff fc65 	bl	80a168c <hal_usart_peek>
}
 80a1dc2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1dc6:	bd08      	pop	{r3, pc}

080a1dc8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1dc8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1dca:	7c00      	ldrb	r0, [r0, #16]
 80a1dcc:	f7ff fc56 	bl	80a167c <hal_usart_read>
}
 80a1dd0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1dd4:	bd08      	pop	{r3, pc}

080a1dd6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a1dd6:	7c00      	ldrb	r0, [r0, #16]
 80a1dd8:	f7ff bc60 	b.w	80a169c <hal_usart_flush>

080a1ddc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1ddc:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1dde:	7c46      	ldrb	r6, [r0, #17]
{
 80a1de0:	4604      	mov	r4, r0
 80a1de2:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1de4:	b12e      	cbz	r6, 80a1df2 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a1de6:	4629      	mov	r1, r5
 80a1de8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1dea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1dee:	f7ff bc35 	b.w	80a165c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1df2:	7c00      	ldrb	r0, [r0, #16]
 80a1df4:	f7ff fc62 	bl	80a16bc <hal_usart_available_data_for_write>
 80a1df8:	2800      	cmp	r0, #0
 80a1dfa:	dcf4      	bgt.n	80a1de6 <_ZN11USARTSerial5writeEh+0xa>
}
 80a1dfc:	4630      	mov	r0, r6
 80a1dfe:	bd70      	pop	{r4, r5, r6, pc}

080a1e00 <_ZN11USARTSerialD0Ev>:
 80a1e00:	b510      	push	{r4, lr}
 80a1e02:	4604      	mov	r4, r0
 80a1e04:	2114      	movs	r1, #20
 80a1e06:	f000 fafe 	bl	80a2406 <_ZdlPvj>
 80a1e0a:	4620      	mov	r0, r4
 80a1e0c:	bd10      	pop	{r4, pc}
	...

080a1e10 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1e10:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1e14:	b510      	push	{r4, lr}
 80a1e16:	4604      	mov	r4, r0
 80a1e18:	4608      	mov	r0, r1
 80a1e1a:	4611      	mov	r1, r2
 80a1e1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1e20:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1e24:	4a04      	ldr	r2, [pc, #16]	; (80a1e38 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1e26:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1e28:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1e2a:	2201      	movs	r2, #1
 80a1e2c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1e2e:	461a      	mov	r2, r3
 80a1e30:	f7ff fc0c 	bl	80a164c <hal_usart_init>
}
 80a1e34:	4620      	mov	r0, r4
 80a1e36:	bd10      	pop	{r4, pc}
 80a1e38:	080a33a4 	.word	0x080a33a4

080a1e3c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1e3c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1e3e:	4d0d      	ldr	r5, [pc, #52]	; (80a1e74 <_Z22__fetch_global_Serial1v+0x38>)
 80a1e40:	7829      	ldrb	r1, [r5, #0]
 80a1e42:	f3bf 8f5b 	dmb	ish
 80a1e46:	f011 0401 	ands.w	r4, r1, #1
 80a1e4a:	d111      	bne.n	80a1e70 <_Z22__fetch_global_Serial1v+0x34>
 80a1e4c:	4628      	mov	r0, r5
 80a1e4e:	f7fe f926 	bl	80a009e <__cxa_guard_acquire>
 80a1e52:	b168      	cbz	r0, 80a1e70 <_Z22__fetch_global_Serial1v+0x34>
 80a1e54:	4621      	mov	r1, r4
 80a1e56:	4a08      	ldr	r2, [pc, #32]	; (80a1e78 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1e58:	4b08      	ldr	r3, [pc, #32]	; (80a1e7c <_Z22__fetch_global_Serial1v+0x40>)
 80a1e5a:	4809      	ldr	r0, [pc, #36]	; (80a1e80 <_Z22__fetch_global_Serial1v+0x44>)
 80a1e5c:	f7ff ffd8 	bl	80a1e10 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1e60:	4628      	mov	r0, r5
 80a1e62:	f7fe f921 	bl	80a00a8 <__cxa_guard_release>
 80a1e66:	4a07      	ldr	r2, [pc, #28]	; (80a1e84 <_Z22__fetch_global_Serial1v+0x48>)
 80a1e68:	4907      	ldr	r1, [pc, #28]	; (80a1e88 <_Z22__fetch_global_Serial1v+0x4c>)
 80a1e6a:	4805      	ldr	r0, [pc, #20]	; (80a1e80 <_Z22__fetch_global_Serial1v+0x44>)
 80a1e6c:	f000 fac6 	bl	80a23fc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1e70:	4803      	ldr	r0, [pc, #12]	; (80a1e80 <_Z22__fetch_global_Serial1v+0x44>)
 80a1e72:	bd38      	pop	{r3, r4, r5, pc}
 80a1e74:	200000c4 	.word	0x200000c4
 80a1e78:	200000c8 	.word	0x200000c8
 80a1e7c:	2000014c 	.word	0x2000014c
 80a1e80:	200001d0 	.word	0x200001d0
 80a1e84:	20000068 	.word	0x20000068
 80a1e88:	080a1d99 	.word	0x080a1d99

080a1e8c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1e8c:	7441      	strb	r1, [r0, #17]
}
 80a1e8e:	4770      	bx	lr

080a1e90 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1e90:	4770      	bx	lr

080a1e92 <_ZN9USBSerial4readEv>:
{
 80a1e92:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1e94:	2100      	movs	r1, #0
 80a1e96:	7c00      	ldrb	r0, [r0, #16]
 80a1e98:	f7ff fc30 	bl	80a16fc <HAL_USB_USART_Receive_Data>
}
 80a1e9c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1ea0:	bd08      	pop	{r3, pc}

080a1ea2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a1ea2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1ea4:	2101      	movs	r1, #1
 80a1ea6:	7c00      	ldrb	r0, [r0, #16]
 80a1ea8:	f7ff fc28 	bl	80a16fc <HAL_USB_USART_Receive_Data>
}
 80a1eac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1eb0:	bd08      	pop	{r3, pc}

080a1eb2 <_ZN9USBSerial17availableForWriteEv>:
{
 80a1eb2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1eb4:	7c00      	ldrb	r0, [r0, #16]
 80a1eb6:	f7ff fc19 	bl	80a16ec <HAL_USB_USART_Available_Data_For_Write>
}
 80a1eba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1ebe:	bd08      	pop	{r3, pc}

080a1ec0 <_ZN9USBSerial9availableEv>:
{
 80a1ec0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1ec2:	7c00      	ldrb	r0, [r0, #16]
 80a1ec4:	f7ff fc0a 	bl	80a16dc <HAL_USB_USART_Available_Data>
}
 80a1ec8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1ecc:	bd08      	pop	{r3, pc}

080a1ece <_ZN9USBSerial5writeEh>:
{
 80a1ece:	b538      	push	{r3, r4, r5, lr}
 80a1ed0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1ed2:	7c00      	ldrb	r0, [r0, #16]
{
 80a1ed4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1ed6:	f7ff fc09 	bl	80a16ec <HAL_USB_USART_Available_Data_For_Write>
 80a1eda:	2800      	cmp	r0, #0
 80a1edc:	dc01      	bgt.n	80a1ee2 <_ZN9USBSerial5writeEh+0x14>
 80a1ede:	7c60      	ldrb	r0, [r4, #17]
 80a1ee0:	b128      	cbz	r0, 80a1eee <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1ee2:	4629      	mov	r1, r5
 80a1ee4:	7c20      	ldrb	r0, [r4, #16]
 80a1ee6:	f7ff fc11 	bl	80a170c <HAL_USB_USART_Send_Data>
 80a1eea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1eee:	bd38      	pop	{r3, r4, r5, pc}

080a1ef0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1ef0:	7c00      	ldrb	r0, [r0, #16]
 80a1ef2:	f7ff bc13 	b.w	80a171c <HAL_USB_USART_Flush_Data>

080a1ef6 <_ZN9USBSerialD0Ev>:
 80a1ef6:	b510      	push	{r4, lr}
 80a1ef8:	4604      	mov	r4, r0
 80a1efa:	2114      	movs	r1, #20
 80a1efc:	f000 fa83 	bl	80a2406 <_ZdlPvj>
 80a1f00:	4620      	mov	r0, r4
 80a1f02:	bd10      	pop	{r4, pc}

080a1f04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1f04:	b510      	push	{r4, lr}
 80a1f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1f0a:	4604      	mov	r4, r0
 80a1f0c:	4608      	mov	r0, r1
 80a1f0e:	2100      	movs	r1, #0
 80a1f10:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1f14:	4b04      	ldr	r3, [pc, #16]	; (80a1f28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a1f16:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1f18:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1f1a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1f1c:	4611      	mov	r1, r2
  _blocking = true;
 80a1f1e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1f20:	f7ff fbd4 	bl	80a16cc <HAL_USB_USART_Init>
}
 80a1f24:	4620      	mov	r0, r4
 80a1f26:	bd10      	pop	{r4, pc}
 80a1f28:	080a33d4 	.word	0x080a33d4

080a1f2c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1f2c:	b510      	push	{r4, lr}
 80a1f2e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1f30:	2214      	movs	r2, #20
 80a1f32:	2100      	movs	r1, #0
 80a1f34:	f001 f99a 	bl	80a326c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1f38:	4b05      	ldr	r3, [pc, #20]	; (80a1f50 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1f3a:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a1f3c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1f3e:	4b05      	ldr	r3, [pc, #20]	; (80a1f54 <_Z19acquireSerialBufferv+0x28>)
 80a1f40:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1f42:	f240 1301 	movw	r3, #257	; 0x101
 80a1f46:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1f48:	2381      	movs	r3, #129	; 0x81
 80a1f4a:	8223      	strh	r3, [r4, #16]
}
 80a1f4c:	bd10      	pop	{r4, pc}
 80a1f4e:	bf00      	nop
 80a1f50:	20000214 	.word	0x20000214
 80a1f54:	20000315 	.word	0x20000315

080a1f58 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1f58:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1f5a:	4d0f      	ldr	r5, [pc, #60]	; (80a1f98 <_Z16_fetch_usbserialv+0x40>)
{
 80a1f5c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1f5e:	a801      	add	r0, sp, #4
 80a1f60:	f7ff ffe4 	bl	80a1f2c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1f64:	7829      	ldrb	r1, [r5, #0]
 80a1f66:	f3bf 8f5b 	dmb	ish
 80a1f6a:	f011 0401 	ands.w	r4, r1, #1
 80a1f6e:	d110      	bne.n	80a1f92 <_Z16_fetch_usbserialv+0x3a>
 80a1f70:	4628      	mov	r0, r5
 80a1f72:	f7fe f894 	bl	80a009e <__cxa_guard_acquire>
 80a1f76:	b160      	cbz	r0, 80a1f92 <_Z16_fetch_usbserialv+0x3a>
 80a1f78:	4621      	mov	r1, r4
 80a1f7a:	aa01      	add	r2, sp, #4
 80a1f7c:	4807      	ldr	r0, [pc, #28]	; (80a1f9c <_Z16_fetch_usbserialv+0x44>)
 80a1f7e:	f7ff ffc1 	bl	80a1f04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1f82:	4628      	mov	r0, r5
 80a1f84:	f7fe f890 	bl	80a00a8 <__cxa_guard_release>
 80a1f88:	4a05      	ldr	r2, [pc, #20]	; (80a1fa0 <_Z16_fetch_usbserialv+0x48>)
 80a1f8a:	4906      	ldr	r1, [pc, #24]	; (80a1fa4 <_Z16_fetch_usbserialv+0x4c>)
 80a1f8c:	4803      	ldr	r0, [pc, #12]	; (80a1f9c <_Z16_fetch_usbserialv+0x44>)
 80a1f8e:	f000 fa35 	bl	80a23fc <__aeabi_atexit>
	return _usbserial;
}
 80a1f92:	4802      	ldr	r0, [pc, #8]	; (80a1f9c <_Z16_fetch_usbserialv+0x44>)
 80a1f94:	b007      	add	sp, #28
 80a1f96:	bd30      	pop	{r4, r5, pc}
 80a1f98:	200001e4 	.word	0x200001e4
 80a1f9c:	200001ec 	.word	0x200001ec
 80a1fa0:	20000068 	.word	0x20000068
 80a1fa4:	080a1e91 	.word	0x080a1e91

080a1fa8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1fa8:	b510      	push	{r4, lr}
 80a1faa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1fac:	2214      	movs	r2, #20
 80a1fae:	2100      	movs	r1, #0
 80a1fb0:	f001 f95c 	bl	80a326c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1fb4:	4b05      	ldr	r3, [pc, #20]	; (80a1fcc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1fb6:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1fb8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1fba:	4b05      	ldr	r3, [pc, #20]	; (80a1fd0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1fbc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1fbe:	f240 1301 	movw	r3, #257	; 0x101
 80a1fc2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1fc4:	2381      	movs	r3, #129	; 0x81
 80a1fc6:	8223      	strh	r3, [r4, #16]
}
 80a1fc8:	bd10      	pop	{r4, pc}
 80a1fca:	bf00      	nop
 80a1fcc:	20000396 	.word	0x20000396
 80a1fd0:	20000497 	.word	0x20000497

080a1fd4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1fd4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1fd6:	4c0f      	ldr	r4, [pc, #60]	; (80a2014 <_Z17_fetch_usbserial1v+0x40>)
{
 80a1fd8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1fda:	a801      	add	r0, sp, #4
 80a1fdc:	f7ff ffe4 	bl	80a1fa8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1fe0:	7823      	ldrb	r3, [r4, #0]
 80a1fe2:	f3bf 8f5b 	dmb	ish
 80a1fe6:	07db      	lsls	r3, r3, #31
 80a1fe8:	d410      	bmi.n	80a200c <_Z17_fetch_usbserial1v+0x38>
 80a1fea:	4620      	mov	r0, r4
 80a1fec:	f7fe f857 	bl	80a009e <__cxa_guard_acquire>
 80a1ff0:	b160      	cbz	r0, 80a200c <_Z17_fetch_usbserial1v+0x38>
 80a1ff2:	2101      	movs	r1, #1
 80a1ff4:	aa01      	add	r2, sp, #4
 80a1ff6:	4808      	ldr	r0, [pc, #32]	; (80a2018 <_Z17_fetch_usbserial1v+0x44>)
 80a1ff8:	f7ff ff84 	bl	80a1f04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1ffc:	4620      	mov	r0, r4
 80a1ffe:	f7fe f853 	bl	80a00a8 <__cxa_guard_release>
 80a2002:	4a06      	ldr	r2, [pc, #24]	; (80a201c <_Z17_fetch_usbserial1v+0x48>)
 80a2004:	4906      	ldr	r1, [pc, #24]	; (80a2020 <_Z17_fetch_usbserial1v+0x4c>)
 80a2006:	4804      	ldr	r0, [pc, #16]	; (80a2018 <_Z17_fetch_usbserial1v+0x44>)
 80a2008:	f000 f9f8 	bl	80a23fc <__aeabi_atexit>
  return _usbserial1;
}
 80a200c:	4802      	ldr	r0, [pc, #8]	; (80a2018 <_Z17_fetch_usbserial1v+0x44>)
 80a200e:	b006      	add	sp, #24
 80a2010:	bd10      	pop	{r4, pc}
 80a2012:	bf00      	nop
 80a2014:	200001e8 	.word	0x200001e8
 80a2018:	20000200 	.word	0x20000200
 80a201c:	20000068 	.word	0x20000068
 80a2020:	080a1e91 	.word	0x080a1e91

080a2024 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2024:	2200      	movs	r2, #0
 80a2026:	6840      	ldr	r0, [r0, #4]
 80a2028:	4611      	mov	r1, r2
 80a202a:	f7ff bbc3 	b.w	80a17b4 <network_ready>

080a202e <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a202e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2030:	4615      	mov	r5, r2
 80a2032:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a2034:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a2036:	460e      	mov	r6, r1
 80a2038:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a203a:	2100      	movs	r1, #0
 80a203c:	a803      	add	r0, sp, #12
 80a203e:	f001 f915 	bl	80a326c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2042:	4628      	mov	r0, r5
 80a2044:	f001 f93e 	bl	80a32c4 <strlen>
 80a2048:	2700      	movs	r7, #0
 80a204a:	b281      	uxth	r1, r0
 80a204c:	6873      	ldr	r3, [r6, #4]
 80a204e:	4628      	mov	r0, r5
 80a2050:	9700      	str	r7, [sp, #0]
 80a2052:	aa03      	add	r2, sp, #12
 80a2054:	f7ff fb6a 	bl	80a172c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2058:	b130      	cbz	r0, 80a2068 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a205a:	4639      	mov	r1, r7
 80a205c:	4620      	mov	r0, r4
 80a205e:	f7ff fc83 	bl	80a1968 <_ZN9IPAddressC1Em>
    }
 80a2062:	4620      	mov	r0, r4
 80a2064:	b009      	add	sp, #36	; 0x24
 80a2066:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2068:	4620      	mov	r0, r4
 80a206a:	a903      	add	r1, sp, #12
 80a206c:	f7ff fc6a 	bl	80a1944 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2070:	e7f7      	b.n	80a2062 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a2072 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a2072:	2200      	movs	r2, #0
 80a2074:	6840      	ldr	r0, [r0, #4]
 80a2076:	4611      	mov	r1, r2
 80a2078:	f7ff bbbc 	b.w	80a17f4 <network_listening>

080a207c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a207c:	2200      	movs	r2, #0
 80a207e:	6840      	ldr	r0, [r0, #4]
 80a2080:	4611      	mov	r1, r2
 80a2082:	f7ff bbc7 	b.w	80a1814 <network_get_listen_timeout>

080a2086 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a2086:	2200      	movs	r2, #0
 80a2088:	6840      	ldr	r0, [r0, #4]
 80a208a:	f7ff bbbb 	b.w	80a1804 <network_set_listen_timeout>

080a208e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a208e:	2200      	movs	r2, #0
 80a2090:	6840      	ldr	r0, [r0, #4]
 80a2092:	f081 0101 	eor.w	r1, r1, #1
 80a2096:	f7ff bba5 	b.w	80a17e4 <network_listen>

080a209a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a209a:	2300      	movs	r3, #0
 80a209c:	6840      	ldr	r0, [r0, #4]
 80a209e:	461a      	mov	r2, r3
 80a20a0:	4619      	mov	r1, r3
 80a20a2:	f7ff bb97 	b.w	80a17d4 <network_off>

080a20a6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a20a6:	2300      	movs	r3, #0
 80a20a8:	6840      	ldr	r0, [r0, #4]
 80a20aa:	461a      	mov	r2, r3
 80a20ac:	4619      	mov	r1, r3
 80a20ae:	f7ff bb89 	b.w	80a17c4 <network_on>

080a20b2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a20b2:	2200      	movs	r2, #0
 80a20b4:	6840      	ldr	r0, [r0, #4]
 80a20b6:	4611      	mov	r1, r2
 80a20b8:	f7ff bb6c 	b.w	80a1794 <network_connecting>

080a20bc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a20bc:	2200      	movs	r2, #0
 80a20be:	2102      	movs	r1, #2
 80a20c0:	6840      	ldr	r0, [r0, #4]
 80a20c2:	f7ff bb6f 	b.w	80a17a4 <network_disconnect>

080a20c6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a20c6:	2300      	movs	r3, #0
 80a20c8:	6840      	ldr	r0, [r0, #4]
 80a20ca:	461a      	mov	r2, r3
 80a20cc:	f7ff bb5a 	b.w	80a1784 <network_connect>

080a20d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a20d0:	2204      	movs	r2, #4
 80a20d2:	4b02      	ldr	r3, [pc, #8]	; (80a20dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a20d4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a20d6:	4a02      	ldr	r2, [pc, #8]	; (80a20e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a20d8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a20da:	4770      	bx	lr
 80a20dc:	20000518 	.word	0x20000518
 80a20e0:	080a3404 	.word	0x080a3404

080a20e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a20e4:	4b01      	ldr	r3, [pc, #4]	; (80a20ec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a20e6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a20e8:	4770      	bx	lr
 80a20ea:	bf00      	nop
 80a20ec:	20000004 	.word	0x20000004

080a20f0 <serialEventRun>:
{
 80a20f0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a20f2:	4b13      	ldr	r3, [pc, #76]	; (80a2140 <serialEventRun+0x50>)
 80a20f4:	b143      	cbz	r3, 80a2108 <serialEventRun+0x18>
 80a20f6:	f7ff ff2f 	bl	80a1f58 <_Z16_fetch_usbserialv>
 80a20fa:	6803      	ldr	r3, [r0, #0]
 80a20fc:	691b      	ldr	r3, [r3, #16]
 80a20fe:	4798      	blx	r3
 80a2100:	2800      	cmp	r0, #0
 80a2102:	dd01      	ble.n	80a2108 <serialEventRun+0x18>
        serialEvent();
 80a2104:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2108:	4b0e      	ldr	r3, [pc, #56]	; (80a2144 <serialEventRun+0x54>)
 80a210a:	b143      	cbz	r3, 80a211e <serialEventRun+0x2e>
 80a210c:	f7ff fe96 	bl	80a1e3c <_Z22__fetch_global_Serial1v>
 80a2110:	6803      	ldr	r3, [r0, #0]
 80a2112:	691b      	ldr	r3, [r3, #16]
 80a2114:	4798      	blx	r3
 80a2116:	2800      	cmp	r0, #0
 80a2118:	dd01      	ble.n	80a211e <serialEventRun+0x2e>
        serialEvent1();
 80a211a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a211e:	4b0a      	ldr	r3, [pc, #40]	; (80a2148 <serialEventRun+0x58>)
 80a2120:	b10b      	cbz	r3, 80a2126 <serialEventRun+0x36>
 80a2122:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2126:	4b09      	ldr	r3, [pc, #36]	; (80a214c <serialEventRun+0x5c>)
 80a2128:	b143      	cbz	r3, 80a213c <serialEventRun+0x4c>
 80a212a:	f7ff ff53 	bl	80a1fd4 <_Z17_fetch_usbserial1v>
 80a212e:	6803      	ldr	r3, [r0, #0]
 80a2130:	691b      	ldr	r3, [r3, #16]
 80a2132:	4798      	blx	r3
 80a2134:	2800      	cmp	r0, #0
 80a2136:	dd01      	ble.n	80a213c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a2138:	f3af 8000 	nop.w
}
 80a213c:	bd08      	pop	{r3, pc}
 80a213e:	bf00      	nop
	...

080a2150 <_post_loop>:
{
 80a2150:	b508      	push	{r3, lr}
	serialEventRun();
 80a2152:	f7ff ffcd 	bl	80a20f0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2156:	f7ff f9f7 	bl	80a1548 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a215a:	4b01      	ldr	r3, [pc, #4]	; (80a2160 <_post_loop+0x10>)
 80a215c:	6018      	str	r0, [r3, #0]
}
 80a215e:	bd08      	pop	{r3, pc}
 80a2160:	20000538 	.word	0x20000538

080a2164 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2164:	4802      	ldr	r0, [pc, #8]	; (80a2170 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2166:	4a03      	ldr	r2, [pc, #12]	; (80a2174 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2168:	4903      	ldr	r1, [pc, #12]	; (80a2178 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a216a:	1a12      	subs	r2, r2, r0
 80a216c:	f001 b870 	b.w	80a3250 <memcpy>
 80a2170:	40024000 	.word	0x40024000
 80a2174:	40024004 	.word	0x40024004
 80a2178:	080a3460 	.word	0x080a3460

080a217c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a217c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a217e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2180:	461a      	mov	r2, r3
 80a2182:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2186:	9300      	str	r3, [sp, #0]
 80a2188:	f7ff faea 	bl	80a1760 <system_ctrl_set_result>
}
 80a218c:	b003      	add	sp, #12
 80a218e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2194 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2194:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2196:	8843      	ldrh	r3, [r0, #2]
 80a2198:	2b0a      	cmp	r3, #10
 80a219a:	d008      	beq.n	80a21ae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a219c:	2b50      	cmp	r3, #80	; 0x50
 80a219e:	d10b      	bne.n	80a21b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a21a0:	4b09      	ldr	r3, [pc, #36]	; (80a21c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a21a2:	681b      	ldr	r3, [r3, #0]
 80a21a4:	b14b      	cbz	r3, 80a21ba <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a21a6:	b003      	add	sp, #12
 80a21a8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a21ac:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a21ae:	f7ff ffe5 	bl	80a217c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a21b2:	b003      	add	sp, #12
 80a21b4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a21b8:	2300      	movs	r3, #0
 80a21ba:	461a      	mov	r2, r3
 80a21bc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a21c0:	9300      	str	r3, [sp, #0]
 80a21c2:	f7ff facd 	bl	80a1760 <system_ctrl_set_result>
}
 80a21c6:	e7f4      	b.n	80a21b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a21c8:	20000524 	.word	0x20000524

080a21cc <module_user_init_hook>:
{
 80a21cc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a21ce:	4c12      	ldr	r4, [pc, #72]	; (80a2218 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a21d0:	2100      	movs	r1, #0
 80a21d2:	4812      	ldr	r0, [pc, #72]	; (80a221c <module_user_init_hook+0x50>)
 80a21d4:	f7ff fb36 	bl	80a1844 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a21d8:	4d11      	ldr	r5, [pc, #68]	; (80a2220 <module_user_init_hook+0x54>)
 80a21da:	6823      	ldr	r3, [r4, #0]
 80a21dc:	42ab      	cmp	r3, r5
 80a21de:	bf0c      	ite	eq
 80a21e0:	2201      	moveq	r2, #1
 80a21e2:	2200      	movne	r2, #0
 80a21e4:	4b0f      	ldr	r3, [pc, #60]	; (80a2224 <module_user_init_hook+0x58>)
 80a21e6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a21e8:	d002      	beq.n	80a21f0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a21ea:	f7ff ffbb 	bl	80a2164 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a21ee:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a21f0:	f7ff f992 	bl	80a1518 <HAL_RNG_GetRandomNumber>
 80a21f4:	4604      	mov	r4, r0
    srand(seed);
 80a21f6:	f001 f841 	bl	80a327c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a21fa:	4b0b      	ldr	r3, [pc, #44]	; (80a2228 <module_user_init_hook+0x5c>)
 80a21fc:	b113      	cbz	r3, 80a2204 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a21fe:	4620      	mov	r0, r4
 80a2200:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2204:	2100      	movs	r1, #0
 80a2206:	4808      	ldr	r0, [pc, #32]	; (80a2228 <module_user_init_hook+0x5c>)
 80a2208:	f7ff fab4 	bl	80a1774 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a220c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2210:	2100      	movs	r1, #0
 80a2212:	4806      	ldr	r0, [pc, #24]	; (80a222c <module_user_init_hook+0x60>)
 80a2214:	f7ff ba9a 	b.w	80a174c <system_ctrl_set_app_request_handler>
 80a2218:	40024000 	.word	0x40024000
 80a221c:	080a20e5 	.word	0x080a20e5
 80a2220:	9a271c1e 	.word	0x9a271c1e
 80a2224:	20000520 	.word	0x20000520
 80a2228:	00000000 	.word	0x00000000
 80a222c:	080a2195 	.word	0x080a2195

080a2230 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a2230:	b510      	push	{r4, lr}
 80a2232:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2234:	6880      	ldr	r0, [r0, #8]
 80a2236:	b108      	cbz	r0, 80a223c <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a2238:	f7ff f966 	bl	80a1508 <os_mutex_recursive_destroy>
 80a223c:	4620      	mov	r0, r4
 80a223e:	bd10      	pop	{r4, pc}

080a2240 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2240:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a2242:	b570      	push	{r4, r5, r6, lr}
 80a2244:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2246:	d901      	bls.n	80a224c <pinAvailable+0xc>
    return false;
 80a2248:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a224a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a224c:	f1a0 030d 	sub.w	r3, r0, #13
 80a2250:	2b02      	cmp	r3, #2
 80a2252:	d90b      	bls.n	80a226c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2254:	2801      	cmp	r0, #1
 80a2256:	d826      	bhi.n	80a22a6 <pinAvailable+0x66>
 80a2258:	f000 f890 	bl	80a237c <_Z19__fetch_global_Wirev>
 80a225c:	2100      	movs	r1, #0
 80a225e:	7c00      	ldrb	r0, [r0, #16]
 80a2260:	f7ff f9d2 	bl	80a1608 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2264:	f080 0001 	eor.w	r0, r0, #1
 80a2268:	b2c0      	uxtb	r0, r0
 80a226a:	e7ee      	b.n	80a224a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a226c:	4e13      	ldr	r6, [pc, #76]	; (80a22bc <pinAvailable+0x7c>)
 80a226e:	7831      	ldrb	r1, [r6, #0]
 80a2270:	f3bf 8f5b 	dmb	ish
 80a2274:	f011 0501 	ands.w	r5, r1, #1
 80a2278:	d10f      	bne.n	80a229a <pinAvailable+0x5a>
 80a227a:	4630      	mov	r0, r6
 80a227c:	f7fd ff0f 	bl	80a009e <__cxa_guard_acquire>
 80a2280:	b158      	cbz	r0, 80a229a <pinAvailable+0x5a>
 80a2282:	4629      	mov	r1, r5
 80a2284:	480e      	ldr	r0, [pc, #56]	; (80a22c0 <pinAvailable+0x80>)
 80a2286:	f7ff fd41 	bl	80a1d0c <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a228a:	4630      	mov	r0, r6
 80a228c:	f7fd ff0c 	bl	80a00a8 <__cxa_guard_release>
 80a2290:	4a0c      	ldr	r2, [pc, #48]	; (80a22c4 <pinAvailable+0x84>)
 80a2292:	490d      	ldr	r1, [pc, #52]	; (80a22c8 <pinAvailable+0x88>)
 80a2294:	480a      	ldr	r0, [pc, #40]	; (80a22c0 <pinAvailable+0x80>)
 80a2296:	f000 f8b1 	bl	80a23fc <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a229a:	4b09      	ldr	r3, [pc, #36]	; (80a22c0 <pinAvailable+0x80>)
 80a229c:	7818      	ldrb	r0, [r3, #0]
 80a229e:	f7ff f9cd 	bl	80a163c <hal_spi_is_enabled>
 80a22a2:	2800      	cmp	r0, #0
 80a22a4:	d1d0      	bne.n	80a2248 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a22a6:	3c12      	subs	r4, #18
 80a22a8:	2c01      	cmp	r4, #1
 80a22aa:	d805      	bhi.n	80a22b8 <pinAvailable+0x78>
 80a22ac:	f7ff fdc6 	bl	80a1e3c <_Z22__fetch_global_Serial1v>
 80a22b0:	7c00      	ldrb	r0, [r0, #16]
 80a22b2:	f7ff f9fb 	bl	80a16ac <hal_usart_is_enabled>
 80a22b6:	e7d5      	b.n	80a2264 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a22b8:	2001      	movs	r0, #1
 80a22ba:	e7c6      	b.n	80a224a <pinAvailable+0xa>
 80a22bc:	20000528 	.word	0x20000528
 80a22c0:	2000052c 	.word	0x2000052c
 80a22c4:	20000068 	.word	0x20000068
 80a22c8:	080a2231 	.word	0x080a2231

080a22cc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a22cc:	2817      	cmp	r0, #23
{
 80a22ce:	b538      	push	{r3, r4, r5, lr}
 80a22d0:	4604      	mov	r4, r0
 80a22d2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a22d4:	d80a      	bhi.n	80a22ec <pinMode+0x20>
 80a22d6:	29ff      	cmp	r1, #255	; 0xff
 80a22d8:	d008      	beq.n	80a22ec <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a22da:	f7ff ffb1 	bl	80a2240 <pinAvailable>
 80a22de:	b128      	cbz	r0, 80a22ec <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a22e0:	4629      	mov	r1, r5
 80a22e2:	4620      	mov	r0, r4
}
 80a22e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a22e8:	f7ff b93e 	b.w	80a1568 <HAL_Pin_Mode>
}
 80a22ec:	bd38      	pop	{r3, r4, r5, pc}

080a22ee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a22ee:	b538      	push	{r3, r4, r5, lr}
 80a22f0:	4604      	mov	r4, r0
 80a22f2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a22f4:	f7ff f940 	bl	80a1578 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a22f8:	28ff      	cmp	r0, #255	; 0xff
 80a22fa:	d010      	beq.n	80a231e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a22fc:	2806      	cmp	r0, #6
 80a22fe:	d804      	bhi.n	80a230a <digitalWrite+0x1c>
 80a2300:	234d      	movs	r3, #77	; 0x4d
 80a2302:	fa23 f000 	lsr.w	r0, r3, r0
 80a2306:	07c3      	lsls	r3, r0, #31
 80a2308:	d409      	bmi.n	80a231e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a230a:	4620      	mov	r0, r4
 80a230c:	f7ff ff98 	bl	80a2240 <pinAvailable>
 80a2310:	b128      	cbz	r0, 80a231e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2312:	4629      	mov	r1, r5
 80a2314:	4620      	mov	r0, r4
}
 80a2316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a231a:	f7ff b935 	b.w	80a1588 <HAL_GPIO_Write>
}
 80a231e:	bd38      	pop	{r3, r4, r5, pc}

080a2320 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2320:	b510      	push	{r4, lr}
 80a2322:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2324:	f7ff f928 	bl	80a1578 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a2328:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a232a:	b2db      	uxtb	r3, r3
 80a232c:	2b01      	cmp	r3, #1
 80a232e:	d908      	bls.n	80a2342 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2330:	4620      	mov	r0, r4
 80a2332:	f7ff ff85 	bl	80a2240 <pinAvailable>
 80a2336:	b120      	cbz	r0, 80a2342 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2338:	4620      	mov	r0, r4
}
 80a233a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a233e:	f7ff b92b 	b.w	80a1598 <HAL_GPIO_Read>
}
 80a2342:	2000      	movs	r0, #0
 80a2344:	bd10      	pop	{r4, pc}

080a2346 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
 80a2346:	f7ff b92f 	b.w	80a15a8 <HAL_Pulse_In>
	...

080a234c <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a234c:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a234e:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2350:	2520      	movs	r5, #32
 80a2352:	8043      	strh	r3, [r0, #2]
 80a2354:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2356:	4e08      	ldr	r6, [pc, #32]	; (80a2378 <_Z17acquireWireBufferv+0x2c>)
{
 80a2358:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a235a:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a235c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a235e:	6085      	str	r5, [r0, #8]
 80a2360:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2362:	4628      	mov	r0, r5
 80a2364:	f000 f851 	bl	80a240a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2368:	4631      	mov	r1, r6
	};
 80a236a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a236c:	4628      	mov	r0, r5
 80a236e:	f000 f84c 	bl	80a240a <_ZnajRKSt9nothrow_t>
	};
 80a2372:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a2374:	4620      	mov	r0, r4
 80a2376:	bd70      	pop	{r4, r5, r6, pc}
 80a2378:	080a3430 	.word	0x080a3430

080a237c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a237c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a237e:	4d0f      	ldr	r5, [pc, #60]	; (80a23bc <_Z19__fetch_global_Wirev+0x40>)
{
 80a2380:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2382:	7829      	ldrb	r1, [r5, #0]
 80a2384:	f3bf 8f5b 	dmb	ish
 80a2388:	f011 0401 	ands.w	r4, r1, #1
 80a238c:	d113      	bne.n	80a23b6 <_Z19__fetch_global_Wirev+0x3a>
 80a238e:	4628      	mov	r0, r5
 80a2390:	f7fd fe85 	bl	80a009e <__cxa_guard_acquire>
 80a2394:	b178      	cbz	r0, 80a23b6 <_Z19__fetch_global_Wirev+0x3a>
 80a2396:	a801      	add	r0, sp, #4
 80a2398:	f7ff ffd8 	bl	80a234c <_Z17acquireWireBufferv>
 80a239c:	4621      	mov	r1, r4
 80a239e:	aa01      	add	r2, sp, #4
 80a23a0:	4807      	ldr	r0, [pc, #28]	; (80a23c0 <_Z19__fetch_global_Wirev+0x44>)
 80a23a2:	f7ff fa8d 	bl	80a18c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a23a6:	4628      	mov	r0, r5
 80a23a8:	f7fd fe7e 	bl	80a00a8 <__cxa_guard_release>
 80a23ac:	4a05      	ldr	r2, [pc, #20]	; (80a23c4 <_Z19__fetch_global_Wirev+0x48>)
 80a23ae:	4906      	ldr	r1, [pc, #24]	; (80a23c8 <_Z19__fetch_global_Wirev+0x4c>)
 80a23b0:	4803      	ldr	r0, [pc, #12]	; (80a23c0 <_Z19__fetch_global_Wirev+0x44>)
 80a23b2:	f000 f823 	bl	80a23fc <__aeabi_atexit>
	return wire;
}
 80a23b6:	4802      	ldr	r0, [pc, #8]	; (80a23c0 <_Z19__fetch_global_Wirev+0x44>)
 80a23b8:	b007      	add	sp, #28
 80a23ba:	bd30      	pop	{r4, r5, pc}
 80a23bc:	2000053c 	.word	0x2000053c
 80a23c0:	20000540 	.word	0x20000540
 80a23c4:	20000068 	.word	0x20000068
 80a23c8:	080a1867 	.word	0x080a1867

080a23cc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a23cc:	2300      	movs	r3, #0
 80a23ce:	b513      	push	{r0, r1, r4, lr}
 80a23d0:	4c07      	ldr	r4, [pc, #28]	; (80a23f0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a23d2:	461a      	mov	r2, r3
 80a23d4:	4619      	mov	r1, r3
 80a23d6:	4620      	mov	r0, r4
 80a23d8:	9300      	str	r3, [sp, #0]
 80a23da:	f7ff fadb 	bl	80a1994 <_ZN9IPAddressC1Ehhhh>
 80a23de:	4620      	mov	r0, r4
 80a23e0:	4a04      	ldr	r2, [pc, #16]	; (80a23f4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a23e2:	4905      	ldr	r1, [pc, #20]	; (80a23f8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a23e4:	b002      	add	sp, #8
 80a23e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a23ea:	f000 b807 	b.w	80a23fc <__aeabi_atexit>
 80a23ee:	bf00      	nop
 80a23f0:	20000554 	.word	0x20000554
 80a23f4:	20000068 	.word	0x20000068
 80a23f8:	080a18e5 	.word	0x080a18e5

080a23fc <__aeabi_atexit>:
 80a23fc:	460b      	mov	r3, r1
 80a23fe:	4601      	mov	r1, r0
 80a2400:	4618      	mov	r0, r3
 80a2402:	f000 bf17 	b.w	80a3234 <__cxa_atexit>

080a2406 <_ZdlPvj>:
 80a2406:	f7fd be48 	b.w	80a009a <_ZdlPv>

080a240a <_ZnajRKSt9nothrow_t>:
 80a240a:	f7fd be44 	b.w	80a0096 <_Znaj>
	...

080a2410 <__aeabi_drsub>:
 80a2410:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2414:	e002      	b.n	80a241c <__adddf3>
 80a2416:	bf00      	nop

080a2418 <__aeabi_dsub>:
 80a2418:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a241c <__adddf3>:
 80a241c:	b530      	push	{r4, r5, lr}
 80a241e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2422:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2426:	ea94 0f05 	teq	r4, r5
 80a242a:	bf08      	it	eq
 80a242c:	ea90 0f02 	teqeq	r0, r2
 80a2430:	bf1f      	itttt	ne
 80a2432:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2436:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a243a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a243e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2442:	f000 80e2 	beq.w	80a260a <__adddf3+0x1ee>
 80a2446:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a244a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a244e:	bfb8      	it	lt
 80a2450:	426d      	neglt	r5, r5
 80a2452:	dd0c      	ble.n	80a246e <__adddf3+0x52>
 80a2454:	442c      	add	r4, r5
 80a2456:	ea80 0202 	eor.w	r2, r0, r2
 80a245a:	ea81 0303 	eor.w	r3, r1, r3
 80a245e:	ea82 0000 	eor.w	r0, r2, r0
 80a2462:	ea83 0101 	eor.w	r1, r3, r1
 80a2466:	ea80 0202 	eor.w	r2, r0, r2
 80a246a:	ea81 0303 	eor.w	r3, r1, r3
 80a246e:	2d36      	cmp	r5, #54	; 0x36
 80a2470:	bf88      	it	hi
 80a2472:	bd30      	pophi	{r4, r5, pc}
 80a2474:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2478:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a247c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2480:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2484:	d002      	beq.n	80a248c <__adddf3+0x70>
 80a2486:	4240      	negs	r0, r0
 80a2488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a248c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2490:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2494:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2498:	d002      	beq.n	80a24a0 <__adddf3+0x84>
 80a249a:	4252      	negs	r2, r2
 80a249c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a24a0:	ea94 0f05 	teq	r4, r5
 80a24a4:	f000 80a7 	beq.w	80a25f6 <__adddf3+0x1da>
 80a24a8:	f1a4 0401 	sub.w	r4, r4, #1
 80a24ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80a24b0:	db0d      	blt.n	80a24ce <__adddf3+0xb2>
 80a24b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a24b6:	fa22 f205 	lsr.w	r2, r2, r5
 80a24ba:	1880      	adds	r0, r0, r2
 80a24bc:	f141 0100 	adc.w	r1, r1, #0
 80a24c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a24c4:	1880      	adds	r0, r0, r2
 80a24c6:	fa43 f305 	asr.w	r3, r3, r5
 80a24ca:	4159      	adcs	r1, r3
 80a24cc:	e00e      	b.n	80a24ec <__adddf3+0xd0>
 80a24ce:	f1a5 0520 	sub.w	r5, r5, #32
 80a24d2:	f10e 0e20 	add.w	lr, lr, #32
 80a24d6:	2a01      	cmp	r2, #1
 80a24d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a24dc:	bf28      	it	cs
 80a24de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a24e2:	fa43 f305 	asr.w	r3, r3, r5
 80a24e6:	18c0      	adds	r0, r0, r3
 80a24e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a24ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a24f0:	d507      	bpl.n	80a2502 <__adddf3+0xe6>
 80a24f2:	f04f 0e00 	mov.w	lr, #0
 80a24f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a24fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a24fe:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2502:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2506:	d31b      	bcc.n	80a2540 <__adddf3+0x124>
 80a2508:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a250c:	d30c      	bcc.n	80a2528 <__adddf3+0x10c>
 80a250e:	0849      	lsrs	r1, r1, #1
 80a2510:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2514:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2518:	f104 0401 	add.w	r4, r4, #1
 80a251c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2520:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2524:	f080 809a 	bcs.w	80a265c <__adddf3+0x240>
 80a2528:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a252c:	bf08      	it	eq
 80a252e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2532:	f150 0000 	adcs.w	r0, r0, #0
 80a2536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a253a:	ea41 0105 	orr.w	r1, r1, r5
 80a253e:	bd30      	pop	{r4, r5, pc}
 80a2540:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2544:	4140      	adcs	r0, r0
 80a2546:	eb41 0101 	adc.w	r1, r1, r1
 80a254a:	3c01      	subs	r4, #1
 80a254c:	bf28      	it	cs
 80a254e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a2552:	d2e9      	bcs.n	80a2528 <__adddf3+0x10c>
 80a2554:	f091 0f00 	teq	r1, #0
 80a2558:	bf04      	itt	eq
 80a255a:	4601      	moveq	r1, r0
 80a255c:	2000      	moveq	r0, #0
 80a255e:	fab1 f381 	clz	r3, r1
 80a2562:	bf08      	it	eq
 80a2564:	3320      	addeq	r3, #32
 80a2566:	f1a3 030b 	sub.w	r3, r3, #11
 80a256a:	f1b3 0220 	subs.w	r2, r3, #32
 80a256e:	da0c      	bge.n	80a258a <__adddf3+0x16e>
 80a2570:	320c      	adds	r2, #12
 80a2572:	dd08      	ble.n	80a2586 <__adddf3+0x16a>
 80a2574:	f102 0c14 	add.w	ip, r2, #20
 80a2578:	f1c2 020c 	rsb	r2, r2, #12
 80a257c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2580:	fa21 f102 	lsr.w	r1, r1, r2
 80a2584:	e00c      	b.n	80a25a0 <__adddf3+0x184>
 80a2586:	f102 0214 	add.w	r2, r2, #20
 80a258a:	bfd8      	it	le
 80a258c:	f1c2 0c20 	rsble	ip, r2, #32
 80a2590:	fa01 f102 	lsl.w	r1, r1, r2
 80a2594:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2598:	bfdc      	itt	le
 80a259a:	ea41 010c 	orrle.w	r1, r1, ip
 80a259e:	4090      	lslle	r0, r2
 80a25a0:	1ae4      	subs	r4, r4, r3
 80a25a2:	bfa2      	ittt	ge
 80a25a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a25a8:	4329      	orrge	r1, r5
 80a25aa:	bd30      	popge	{r4, r5, pc}
 80a25ac:	ea6f 0404 	mvn.w	r4, r4
 80a25b0:	3c1f      	subs	r4, #31
 80a25b2:	da1c      	bge.n	80a25ee <__adddf3+0x1d2>
 80a25b4:	340c      	adds	r4, #12
 80a25b6:	dc0e      	bgt.n	80a25d6 <__adddf3+0x1ba>
 80a25b8:	f104 0414 	add.w	r4, r4, #20
 80a25bc:	f1c4 0220 	rsb	r2, r4, #32
 80a25c0:	fa20 f004 	lsr.w	r0, r0, r4
 80a25c4:	fa01 f302 	lsl.w	r3, r1, r2
 80a25c8:	ea40 0003 	orr.w	r0, r0, r3
 80a25cc:	fa21 f304 	lsr.w	r3, r1, r4
 80a25d0:	ea45 0103 	orr.w	r1, r5, r3
 80a25d4:	bd30      	pop	{r4, r5, pc}
 80a25d6:	f1c4 040c 	rsb	r4, r4, #12
 80a25da:	f1c4 0220 	rsb	r2, r4, #32
 80a25de:	fa20 f002 	lsr.w	r0, r0, r2
 80a25e2:	fa01 f304 	lsl.w	r3, r1, r4
 80a25e6:	ea40 0003 	orr.w	r0, r0, r3
 80a25ea:	4629      	mov	r1, r5
 80a25ec:	bd30      	pop	{r4, r5, pc}
 80a25ee:	fa21 f004 	lsr.w	r0, r1, r4
 80a25f2:	4629      	mov	r1, r5
 80a25f4:	bd30      	pop	{r4, r5, pc}
 80a25f6:	f094 0f00 	teq	r4, #0
 80a25fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a25fe:	bf06      	itte	eq
 80a2600:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2604:	3401      	addeq	r4, #1
 80a2606:	3d01      	subne	r5, #1
 80a2608:	e74e      	b.n	80a24a8 <__adddf3+0x8c>
 80a260a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a260e:	bf18      	it	ne
 80a2610:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2614:	d029      	beq.n	80a266a <__adddf3+0x24e>
 80a2616:	ea94 0f05 	teq	r4, r5
 80a261a:	bf08      	it	eq
 80a261c:	ea90 0f02 	teqeq	r0, r2
 80a2620:	d005      	beq.n	80a262e <__adddf3+0x212>
 80a2622:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2626:	bf04      	itt	eq
 80a2628:	4619      	moveq	r1, r3
 80a262a:	4610      	moveq	r0, r2
 80a262c:	bd30      	pop	{r4, r5, pc}
 80a262e:	ea91 0f03 	teq	r1, r3
 80a2632:	bf1e      	ittt	ne
 80a2634:	2100      	movne	r1, #0
 80a2636:	2000      	movne	r0, #0
 80a2638:	bd30      	popne	{r4, r5, pc}
 80a263a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a263e:	d105      	bne.n	80a264c <__adddf3+0x230>
 80a2640:	0040      	lsls	r0, r0, #1
 80a2642:	4149      	adcs	r1, r1
 80a2644:	bf28      	it	cs
 80a2646:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a264a:	bd30      	pop	{r4, r5, pc}
 80a264c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2650:	bf3c      	itt	cc
 80a2652:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2656:	bd30      	popcc	{r4, r5, pc}
 80a2658:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a265c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2660:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2664:	f04f 0000 	mov.w	r0, #0
 80a2668:	bd30      	pop	{r4, r5, pc}
 80a266a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a266e:	bf1a      	itte	ne
 80a2670:	4619      	movne	r1, r3
 80a2672:	4610      	movne	r0, r2
 80a2674:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2678:	bf1c      	itt	ne
 80a267a:	460b      	movne	r3, r1
 80a267c:	4602      	movne	r2, r0
 80a267e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2682:	bf06      	itte	eq
 80a2684:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2688:	ea91 0f03 	teqeq	r1, r3
 80a268c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2690:	bd30      	pop	{r4, r5, pc}
 80a2692:	bf00      	nop

080a2694 <__aeabi_ui2d>:
 80a2694:	f090 0f00 	teq	r0, #0
 80a2698:	bf04      	itt	eq
 80a269a:	2100      	moveq	r1, #0
 80a269c:	4770      	bxeq	lr
 80a269e:	b530      	push	{r4, r5, lr}
 80a26a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a26a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a26a8:	f04f 0500 	mov.w	r5, #0
 80a26ac:	f04f 0100 	mov.w	r1, #0
 80a26b0:	e750      	b.n	80a2554 <__adddf3+0x138>
 80a26b2:	bf00      	nop

080a26b4 <__aeabi_i2d>:
 80a26b4:	f090 0f00 	teq	r0, #0
 80a26b8:	bf04      	itt	eq
 80a26ba:	2100      	moveq	r1, #0
 80a26bc:	4770      	bxeq	lr
 80a26be:	b530      	push	{r4, r5, lr}
 80a26c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a26c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a26c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a26cc:	bf48      	it	mi
 80a26ce:	4240      	negmi	r0, r0
 80a26d0:	f04f 0100 	mov.w	r1, #0
 80a26d4:	e73e      	b.n	80a2554 <__adddf3+0x138>
 80a26d6:	bf00      	nop

080a26d8 <__aeabi_f2d>:
 80a26d8:	0042      	lsls	r2, r0, #1
 80a26da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a26de:	ea4f 0131 	mov.w	r1, r1, rrx
 80a26e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a26e6:	bf1f      	itttt	ne
 80a26e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a26ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a26f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a26f4:	4770      	bxne	lr
 80a26f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a26fa:	bf08      	it	eq
 80a26fc:	4770      	bxeq	lr
 80a26fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a2702:	bf04      	itt	eq
 80a2704:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a2708:	4770      	bxeq	lr
 80a270a:	b530      	push	{r4, r5, lr}
 80a270c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2710:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2714:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2718:	e71c      	b.n	80a2554 <__adddf3+0x138>
 80a271a:	bf00      	nop

080a271c <__aeabi_ul2d>:
 80a271c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2720:	bf08      	it	eq
 80a2722:	4770      	bxeq	lr
 80a2724:	b530      	push	{r4, r5, lr}
 80a2726:	f04f 0500 	mov.w	r5, #0
 80a272a:	e00a      	b.n	80a2742 <__aeabi_l2d+0x16>

080a272c <__aeabi_l2d>:
 80a272c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2730:	bf08      	it	eq
 80a2732:	4770      	bxeq	lr
 80a2734:	b530      	push	{r4, r5, lr}
 80a2736:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a273a:	d502      	bpl.n	80a2742 <__aeabi_l2d+0x16>
 80a273c:	4240      	negs	r0, r0
 80a273e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2742:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2746:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a274a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a274e:	f43f aed8 	beq.w	80a2502 <__adddf3+0xe6>
 80a2752:	f04f 0203 	mov.w	r2, #3
 80a2756:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a275a:	bf18      	it	ne
 80a275c:	3203      	addne	r2, #3
 80a275e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2762:	bf18      	it	ne
 80a2764:	3203      	addne	r2, #3
 80a2766:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a276a:	f1c2 0320 	rsb	r3, r2, #32
 80a276e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2772:	fa20 f002 	lsr.w	r0, r0, r2
 80a2776:	fa01 fe03 	lsl.w	lr, r1, r3
 80a277a:	ea40 000e 	orr.w	r0, r0, lr
 80a277e:	fa21 f102 	lsr.w	r1, r1, r2
 80a2782:	4414      	add	r4, r2
 80a2784:	e6bd      	b.n	80a2502 <__adddf3+0xe6>
 80a2786:	bf00      	nop

080a2788 <__aeabi_dmul>:
 80a2788:	b570      	push	{r4, r5, r6, lr}
 80a278a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a278e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2792:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2796:	bf1d      	ittte	ne
 80a2798:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a279c:	ea94 0f0c 	teqne	r4, ip
 80a27a0:	ea95 0f0c 	teqne	r5, ip
 80a27a4:	f000 f8de 	bleq	80a2964 <__aeabi_dmul+0x1dc>
 80a27a8:	442c      	add	r4, r5
 80a27aa:	ea81 0603 	eor.w	r6, r1, r3
 80a27ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a27b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a27b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a27ba:	bf18      	it	ne
 80a27bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a27c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a27c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a27c8:	d038      	beq.n	80a283c <__aeabi_dmul+0xb4>
 80a27ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80a27ce:	f04f 0500 	mov.w	r5, #0
 80a27d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a27d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a27da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a27de:	f04f 0600 	mov.w	r6, #0
 80a27e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a27e6:	f09c 0f00 	teq	ip, #0
 80a27ea:	bf18      	it	ne
 80a27ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80a27f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a27f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a27f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a27fc:	d204      	bcs.n	80a2808 <__aeabi_dmul+0x80>
 80a27fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2802:	416d      	adcs	r5, r5
 80a2804:	eb46 0606 	adc.w	r6, r6, r6
 80a2808:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a280c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2810:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2814:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2818:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a281c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2820:	bf88      	it	hi
 80a2822:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2826:	d81e      	bhi.n	80a2866 <__aeabi_dmul+0xde>
 80a2828:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a282c:	bf08      	it	eq
 80a282e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2832:	f150 0000 	adcs.w	r0, r0, #0
 80a2836:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a283a:	bd70      	pop	{r4, r5, r6, pc}
 80a283c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2840:	ea46 0101 	orr.w	r1, r6, r1
 80a2844:	ea40 0002 	orr.w	r0, r0, r2
 80a2848:	ea81 0103 	eor.w	r1, r1, r3
 80a284c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2850:	bfc2      	ittt	gt
 80a2852:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2856:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a285a:	bd70      	popgt	{r4, r5, r6, pc}
 80a285c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2860:	f04f 0e00 	mov.w	lr, #0
 80a2864:	3c01      	subs	r4, #1
 80a2866:	f300 80ab 	bgt.w	80a29c0 <__aeabi_dmul+0x238>
 80a286a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a286e:	bfde      	ittt	le
 80a2870:	2000      	movle	r0, #0
 80a2872:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2876:	bd70      	pople	{r4, r5, r6, pc}
 80a2878:	f1c4 0400 	rsb	r4, r4, #0
 80a287c:	3c20      	subs	r4, #32
 80a287e:	da35      	bge.n	80a28ec <__aeabi_dmul+0x164>
 80a2880:	340c      	adds	r4, #12
 80a2882:	dc1b      	bgt.n	80a28bc <__aeabi_dmul+0x134>
 80a2884:	f104 0414 	add.w	r4, r4, #20
 80a2888:	f1c4 0520 	rsb	r5, r4, #32
 80a288c:	fa00 f305 	lsl.w	r3, r0, r5
 80a2890:	fa20 f004 	lsr.w	r0, r0, r4
 80a2894:	fa01 f205 	lsl.w	r2, r1, r5
 80a2898:	ea40 0002 	orr.w	r0, r0, r2
 80a289c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a28a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a28a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a28a8:	fa21 f604 	lsr.w	r6, r1, r4
 80a28ac:	eb42 0106 	adc.w	r1, r2, r6
 80a28b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a28b4:	bf08      	it	eq
 80a28b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a28ba:	bd70      	pop	{r4, r5, r6, pc}
 80a28bc:	f1c4 040c 	rsb	r4, r4, #12
 80a28c0:	f1c4 0520 	rsb	r5, r4, #32
 80a28c4:	fa00 f304 	lsl.w	r3, r0, r4
 80a28c8:	fa20 f005 	lsr.w	r0, r0, r5
 80a28cc:	fa01 f204 	lsl.w	r2, r1, r4
 80a28d0:	ea40 0002 	orr.w	r0, r0, r2
 80a28d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a28d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a28dc:	f141 0100 	adc.w	r1, r1, #0
 80a28e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a28e4:	bf08      	it	eq
 80a28e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a28ea:	bd70      	pop	{r4, r5, r6, pc}
 80a28ec:	f1c4 0520 	rsb	r5, r4, #32
 80a28f0:	fa00 f205 	lsl.w	r2, r0, r5
 80a28f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a28f8:	fa20 f304 	lsr.w	r3, r0, r4
 80a28fc:	fa01 f205 	lsl.w	r2, r1, r5
 80a2900:	ea43 0302 	orr.w	r3, r3, r2
 80a2904:	fa21 f004 	lsr.w	r0, r1, r4
 80a2908:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a290c:	fa21 f204 	lsr.w	r2, r1, r4
 80a2910:	ea20 0002 	bic.w	r0, r0, r2
 80a2914:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2918:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a291c:	bf08      	it	eq
 80a291e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2922:	bd70      	pop	{r4, r5, r6, pc}
 80a2924:	f094 0f00 	teq	r4, #0
 80a2928:	d10f      	bne.n	80a294a <__aeabi_dmul+0x1c2>
 80a292a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a292e:	0040      	lsls	r0, r0, #1
 80a2930:	eb41 0101 	adc.w	r1, r1, r1
 80a2934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2938:	bf08      	it	eq
 80a293a:	3c01      	subeq	r4, #1
 80a293c:	d0f7      	beq.n	80a292e <__aeabi_dmul+0x1a6>
 80a293e:	ea41 0106 	orr.w	r1, r1, r6
 80a2942:	f095 0f00 	teq	r5, #0
 80a2946:	bf18      	it	ne
 80a2948:	4770      	bxne	lr
 80a294a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a294e:	0052      	lsls	r2, r2, #1
 80a2950:	eb43 0303 	adc.w	r3, r3, r3
 80a2954:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2958:	bf08      	it	eq
 80a295a:	3d01      	subeq	r5, #1
 80a295c:	d0f7      	beq.n	80a294e <__aeabi_dmul+0x1c6>
 80a295e:	ea43 0306 	orr.w	r3, r3, r6
 80a2962:	4770      	bx	lr
 80a2964:	ea94 0f0c 	teq	r4, ip
 80a2968:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a296c:	bf18      	it	ne
 80a296e:	ea95 0f0c 	teqne	r5, ip
 80a2972:	d00c      	beq.n	80a298e <__aeabi_dmul+0x206>
 80a2974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2978:	bf18      	it	ne
 80a297a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a297e:	d1d1      	bne.n	80a2924 <__aeabi_dmul+0x19c>
 80a2980:	ea81 0103 	eor.w	r1, r1, r3
 80a2984:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2988:	f04f 0000 	mov.w	r0, #0
 80a298c:	bd70      	pop	{r4, r5, r6, pc}
 80a298e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2992:	bf06      	itte	eq
 80a2994:	4610      	moveq	r0, r2
 80a2996:	4619      	moveq	r1, r3
 80a2998:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a299c:	d019      	beq.n	80a29d2 <__aeabi_dmul+0x24a>
 80a299e:	ea94 0f0c 	teq	r4, ip
 80a29a2:	d102      	bne.n	80a29aa <__aeabi_dmul+0x222>
 80a29a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a29a8:	d113      	bne.n	80a29d2 <__aeabi_dmul+0x24a>
 80a29aa:	ea95 0f0c 	teq	r5, ip
 80a29ae:	d105      	bne.n	80a29bc <__aeabi_dmul+0x234>
 80a29b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a29b4:	bf1c      	itt	ne
 80a29b6:	4610      	movne	r0, r2
 80a29b8:	4619      	movne	r1, r3
 80a29ba:	d10a      	bne.n	80a29d2 <__aeabi_dmul+0x24a>
 80a29bc:	ea81 0103 	eor.w	r1, r1, r3
 80a29c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a29c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a29c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a29cc:	f04f 0000 	mov.w	r0, #0
 80a29d0:	bd70      	pop	{r4, r5, r6, pc}
 80a29d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a29d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a29da:	bd70      	pop	{r4, r5, r6, pc}

080a29dc <__aeabi_ddiv>:
 80a29dc:	b570      	push	{r4, r5, r6, lr}
 80a29de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a29e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a29e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a29ea:	bf1d      	ittte	ne
 80a29ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a29f0:	ea94 0f0c 	teqne	r4, ip
 80a29f4:	ea95 0f0c 	teqne	r5, ip
 80a29f8:	f000 f8a7 	bleq	80a2b4a <__aeabi_ddiv+0x16e>
 80a29fc:	eba4 0405 	sub.w	r4, r4, r5
 80a2a00:	ea81 0e03 	eor.w	lr, r1, r3
 80a2a04:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2a08:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2a0c:	f000 8088 	beq.w	80a2b20 <__aeabi_ddiv+0x144>
 80a2a10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2a14:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2a18:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2a1c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2a20:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2a24:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2a28:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2a2c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2a30:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2a34:	429d      	cmp	r5, r3
 80a2a36:	bf08      	it	eq
 80a2a38:	4296      	cmpeq	r6, r2
 80a2a3a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2a3e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2a42:	d202      	bcs.n	80a2a4a <__aeabi_ddiv+0x6e>
 80a2a44:	085b      	lsrs	r3, r3, #1
 80a2a46:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2a4a:	1ab6      	subs	r6, r6, r2
 80a2a4c:	eb65 0503 	sbc.w	r5, r5, r3
 80a2a50:	085b      	lsrs	r3, r3, #1
 80a2a52:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2a56:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2a5a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2a5e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2a62:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2a66:	bf22      	ittt	cs
 80a2a68:	1ab6      	subcs	r6, r6, r2
 80a2a6a:	4675      	movcs	r5, lr
 80a2a6c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2a70:	085b      	lsrs	r3, r3, #1
 80a2a72:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2a76:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2a7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2a7e:	bf22      	ittt	cs
 80a2a80:	1ab6      	subcs	r6, r6, r2
 80a2a82:	4675      	movcs	r5, lr
 80a2a84:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2a88:	085b      	lsrs	r3, r3, #1
 80a2a8a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2a8e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2a92:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2a96:	bf22      	ittt	cs
 80a2a98:	1ab6      	subcs	r6, r6, r2
 80a2a9a:	4675      	movcs	r5, lr
 80a2a9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2aa0:	085b      	lsrs	r3, r3, #1
 80a2aa2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2aa6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2aaa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2aae:	bf22      	ittt	cs
 80a2ab0:	1ab6      	subcs	r6, r6, r2
 80a2ab2:	4675      	movcs	r5, lr
 80a2ab4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2ab8:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2abc:	d018      	beq.n	80a2af0 <__aeabi_ddiv+0x114>
 80a2abe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2ac2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2ac6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2aca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2ace:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2ad2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2ad6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2ada:	d1c0      	bne.n	80a2a5e <__aeabi_ddiv+0x82>
 80a2adc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2ae0:	d10b      	bne.n	80a2afa <__aeabi_ddiv+0x11e>
 80a2ae2:	ea41 0100 	orr.w	r1, r1, r0
 80a2ae6:	f04f 0000 	mov.w	r0, #0
 80a2aea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2aee:	e7b6      	b.n	80a2a5e <__aeabi_ddiv+0x82>
 80a2af0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2af4:	bf04      	itt	eq
 80a2af6:	4301      	orreq	r1, r0
 80a2af8:	2000      	moveq	r0, #0
 80a2afa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2afe:	bf88      	it	hi
 80a2b00:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2b04:	f63f aeaf 	bhi.w	80a2866 <__aeabi_dmul+0xde>
 80a2b08:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2b0c:	bf04      	itt	eq
 80a2b0e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2b12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2b16:	f150 0000 	adcs.w	r0, r0, #0
 80a2b1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2b1e:	bd70      	pop	{r4, r5, r6, pc}
 80a2b20:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2b24:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2b28:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2b2c:	bfc2      	ittt	gt
 80a2b2e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2b32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2b36:	bd70      	popgt	{r4, r5, r6, pc}
 80a2b38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2b3c:	f04f 0e00 	mov.w	lr, #0
 80a2b40:	3c01      	subs	r4, #1
 80a2b42:	e690      	b.n	80a2866 <__aeabi_dmul+0xde>
 80a2b44:	ea45 0e06 	orr.w	lr, r5, r6
 80a2b48:	e68d      	b.n	80a2866 <__aeabi_dmul+0xde>
 80a2b4a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2b4e:	ea94 0f0c 	teq	r4, ip
 80a2b52:	bf08      	it	eq
 80a2b54:	ea95 0f0c 	teqeq	r5, ip
 80a2b58:	f43f af3b 	beq.w	80a29d2 <__aeabi_dmul+0x24a>
 80a2b5c:	ea94 0f0c 	teq	r4, ip
 80a2b60:	d10a      	bne.n	80a2b78 <__aeabi_ddiv+0x19c>
 80a2b62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2b66:	f47f af34 	bne.w	80a29d2 <__aeabi_dmul+0x24a>
 80a2b6a:	ea95 0f0c 	teq	r5, ip
 80a2b6e:	f47f af25 	bne.w	80a29bc <__aeabi_dmul+0x234>
 80a2b72:	4610      	mov	r0, r2
 80a2b74:	4619      	mov	r1, r3
 80a2b76:	e72c      	b.n	80a29d2 <__aeabi_dmul+0x24a>
 80a2b78:	ea95 0f0c 	teq	r5, ip
 80a2b7c:	d106      	bne.n	80a2b8c <__aeabi_ddiv+0x1b0>
 80a2b7e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2b82:	f43f aefd 	beq.w	80a2980 <__aeabi_dmul+0x1f8>
 80a2b86:	4610      	mov	r0, r2
 80a2b88:	4619      	mov	r1, r3
 80a2b8a:	e722      	b.n	80a29d2 <__aeabi_dmul+0x24a>
 80a2b8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2b90:	bf18      	it	ne
 80a2b92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2b96:	f47f aec5 	bne.w	80a2924 <__aeabi_dmul+0x19c>
 80a2b9a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2b9e:	f47f af0d 	bne.w	80a29bc <__aeabi_dmul+0x234>
 80a2ba2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2ba6:	f47f aeeb 	bne.w	80a2980 <__aeabi_dmul+0x1f8>
 80a2baa:	e712      	b.n	80a29d2 <__aeabi_dmul+0x24a>

080a2bac <__gedf2>:
 80a2bac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2bb0:	e006      	b.n	80a2bc0 <__cmpdf2+0x4>
 80a2bb2:	bf00      	nop

080a2bb4 <__ledf2>:
 80a2bb4:	f04f 0c01 	mov.w	ip, #1
 80a2bb8:	e002      	b.n	80a2bc0 <__cmpdf2+0x4>
 80a2bba:	bf00      	nop

080a2bbc <__cmpdf2>:
 80a2bbc:	f04f 0c01 	mov.w	ip, #1
 80a2bc0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2bc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2bc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2bcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2bd0:	bf18      	it	ne
 80a2bd2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2bd6:	d01b      	beq.n	80a2c10 <__cmpdf2+0x54>
 80a2bd8:	b001      	add	sp, #4
 80a2bda:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2bde:	bf0c      	ite	eq
 80a2be0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2be4:	ea91 0f03 	teqne	r1, r3
 80a2be8:	bf02      	ittt	eq
 80a2bea:	ea90 0f02 	teqeq	r0, r2
 80a2bee:	2000      	moveq	r0, #0
 80a2bf0:	4770      	bxeq	lr
 80a2bf2:	f110 0f00 	cmn.w	r0, #0
 80a2bf6:	ea91 0f03 	teq	r1, r3
 80a2bfa:	bf58      	it	pl
 80a2bfc:	4299      	cmppl	r1, r3
 80a2bfe:	bf08      	it	eq
 80a2c00:	4290      	cmpeq	r0, r2
 80a2c02:	bf2c      	ite	cs
 80a2c04:	17d8      	asrcs	r0, r3, #31
 80a2c06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2c0a:	f040 0001 	orr.w	r0, r0, #1
 80a2c0e:	4770      	bx	lr
 80a2c10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2c14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2c18:	d102      	bne.n	80a2c20 <__cmpdf2+0x64>
 80a2c1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2c1e:	d107      	bne.n	80a2c30 <__cmpdf2+0x74>
 80a2c20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2c24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2c28:	d1d6      	bne.n	80a2bd8 <__cmpdf2+0x1c>
 80a2c2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2c2e:	d0d3      	beq.n	80a2bd8 <__cmpdf2+0x1c>
 80a2c30:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2c34:	4770      	bx	lr
 80a2c36:	bf00      	nop

080a2c38 <__aeabi_cdrcmple>:
 80a2c38:	4684      	mov	ip, r0
 80a2c3a:	4610      	mov	r0, r2
 80a2c3c:	4662      	mov	r2, ip
 80a2c3e:	468c      	mov	ip, r1
 80a2c40:	4619      	mov	r1, r3
 80a2c42:	4663      	mov	r3, ip
 80a2c44:	e000      	b.n	80a2c48 <__aeabi_cdcmpeq>
 80a2c46:	bf00      	nop

080a2c48 <__aeabi_cdcmpeq>:
 80a2c48:	b501      	push	{r0, lr}
 80a2c4a:	f7ff ffb7 	bl	80a2bbc <__cmpdf2>
 80a2c4e:	2800      	cmp	r0, #0
 80a2c50:	bf48      	it	mi
 80a2c52:	f110 0f00 	cmnmi.w	r0, #0
 80a2c56:	bd01      	pop	{r0, pc}

080a2c58 <__aeabi_dcmpeq>:
 80a2c58:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c5c:	f7ff fff4 	bl	80a2c48 <__aeabi_cdcmpeq>
 80a2c60:	bf0c      	ite	eq
 80a2c62:	2001      	moveq	r0, #1
 80a2c64:	2000      	movne	r0, #0
 80a2c66:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c6a:	bf00      	nop

080a2c6c <__aeabi_dcmplt>:
 80a2c6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c70:	f7ff ffea 	bl	80a2c48 <__aeabi_cdcmpeq>
 80a2c74:	bf34      	ite	cc
 80a2c76:	2001      	movcc	r0, #1
 80a2c78:	2000      	movcs	r0, #0
 80a2c7a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c7e:	bf00      	nop

080a2c80 <__aeabi_dcmple>:
 80a2c80:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c84:	f7ff ffe0 	bl	80a2c48 <__aeabi_cdcmpeq>
 80a2c88:	bf94      	ite	ls
 80a2c8a:	2001      	movls	r0, #1
 80a2c8c:	2000      	movhi	r0, #0
 80a2c8e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c92:	bf00      	nop

080a2c94 <__aeabi_dcmpge>:
 80a2c94:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c98:	f7ff ffce 	bl	80a2c38 <__aeabi_cdrcmple>
 80a2c9c:	bf94      	ite	ls
 80a2c9e:	2001      	movls	r0, #1
 80a2ca0:	2000      	movhi	r0, #0
 80a2ca2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2ca6:	bf00      	nop

080a2ca8 <__aeabi_dcmpgt>:
 80a2ca8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2cac:	f7ff ffc4 	bl	80a2c38 <__aeabi_cdrcmple>
 80a2cb0:	bf34      	ite	cc
 80a2cb2:	2001      	movcc	r0, #1
 80a2cb4:	2000      	movcs	r0, #0
 80a2cb6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2cba:	bf00      	nop

080a2cbc <__aeabi_dcmpun>:
 80a2cbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2cc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2cc4:	d102      	bne.n	80a2ccc <__aeabi_dcmpun+0x10>
 80a2cc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2cca:	d10a      	bne.n	80a2ce2 <__aeabi_dcmpun+0x26>
 80a2ccc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2cd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2cd4:	d102      	bne.n	80a2cdc <__aeabi_dcmpun+0x20>
 80a2cd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2cda:	d102      	bne.n	80a2ce2 <__aeabi_dcmpun+0x26>
 80a2cdc:	f04f 0000 	mov.w	r0, #0
 80a2ce0:	4770      	bx	lr
 80a2ce2:	f04f 0001 	mov.w	r0, #1
 80a2ce6:	4770      	bx	lr

080a2ce8 <__aeabi_d2iz>:
 80a2ce8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2cec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2cf0:	d215      	bcs.n	80a2d1e <__aeabi_d2iz+0x36>
 80a2cf2:	d511      	bpl.n	80a2d18 <__aeabi_d2iz+0x30>
 80a2cf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2cf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2cfc:	d912      	bls.n	80a2d24 <__aeabi_d2iz+0x3c>
 80a2cfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2d02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2d06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2d0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2d0e:	fa23 f002 	lsr.w	r0, r3, r2
 80a2d12:	bf18      	it	ne
 80a2d14:	4240      	negne	r0, r0
 80a2d16:	4770      	bx	lr
 80a2d18:	f04f 0000 	mov.w	r0, #0
 80a2d1c:	4770      	bx	lr
 80a2d1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2d22:	d105      	bne.n	80a2d30 <__aeabi_d2iz+0x48>
 80a2d24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a2d28:	bf08      	it	eq
 80a2d2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a2d2e:	4770      	bx	lr
 80a2d30:	f04f 0000 	mov.w	r0, #0
 80a2d34:	4770      	bx	lr
 80a2d36:	bf00      	nop

080a2d38 <__aeabi_d2uiz>:
 80a2d38:	004a      	lsls	r2, r1, #1
 80a2d3a:	d211      	bcs.n	80a2d60 <__aeabi_d2uiz+0x28>
 80a2d3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2d40:	d211      	bcs.n	80a2d66 <__aeabi_d2uiz+0x2e>
 80a2d42:	d50d      	bpl.n	80a2d60 <__aeabi_d2uiz+0x28>
 80a2d44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2d48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2d4c:	d40e      	bmi.n	80a2d6c <__aeabi_d2uiz+0x34>
 80a2d4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2d52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2d56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2d5a:	fa23 f002 	lsr.w	r0, r3, r2
 80a2d5e:	4770      	bx	lr
 80a2d60:	f04f 0000 	mov.w	r0, #0
 80a2d64:	4770      	bx	lr
 80a2d66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2d6a:	d102      	bne.n	80a2d72 <__aeabi_d2uiz+0x3a>
 80a2d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2d70:	4770      	bx	lr
 80a2d72:	f04f 0000 	mov.w	r0, #0
 80a2d76:	4770      	bx	lr

080a2d78 <__aeabi_frsub>:
 80a2d78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a2d7c:	e002      	b.n	80a2d84 <__addsf3>
 80a2d7e:	bf00      	nop

080a2d80 <__aeabi_fsub>:
 80a2d80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a2d84 <__addsf3>:
 80a2d84:	0042      	lsls	r2, r0, #1
 80a2d86:	bf1f      	itttt	ne
 80a2d88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a2d8c:	ea92 0f03 	teqne	r2, r3
 80a2d90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a2d94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2d98:	d06a      	beq.n	80a2e70 <__addsf3+0xec>
 80a2d9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a2d9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a2da2:	bfc1      	itttt	gt
 80a2da4:	18d2      	addgt	r2, r2, r3
 80a2da6:	4041      	eorgt	r1, r0
 80a2da8:	4048      	eorgt	r0, r1
 80a2daa:	4041      	eorgt	r1, r0
 80a2dac:	bfb8      	it	lt
 80a2dae:	425b      	neglt	r3, r3
 80a2db0:	2b19      	cmp	r3, #25
 80a2db2:	bf88      	it	hi
 80a2db4:	4770      	bxhi	lr
 80a2db6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a2dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2dbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a2dc2:	bf18      	it	ne
 80a2dc4:	4240      	negne	r0, r0
 80a2dc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2dca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a2dce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a2dd2:	bf18      	it	ne
 80a2dd4:	4249      	negne	r1, r1
 80a2dd6:	ea92 0f03 	teq	r2, r3
 80a2dda:	d03f      	beq.n	80a2e5c <__addsf3+0xd8>
 80a2ddc:	f1a2 0201 	sub.w	r2, r2, #1
 80a2de0:	fa41 fc03 	asr.w	ip, r1, r3
 80a2de4:	eb10 000c 	adds.w	r0, r0, ip
 80a2de8:	f1c3 0320 	rsb	r3, r3, #32
 80a2dec:	fa01 f103 	lsl.w	r1, r1, r3
 80a2df0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2df4:	d502      	bpl.n	80a2dfc <__addsf3+0x78>
 80a2df6:	4249      	negs	r1, r1
 80a2df8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2dfc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2e00:	d313      	bcc.n	80a2e2a <__addsf3+0xa6>
 80a2e02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a2e06:	d306      	bcc.n	80a2e16 <__addsf3+0x92>
 80a2e08:	0840      	lsrs	r0, r0, #1
 80a2e0a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2e0e:	f102 0201 	add.w	r2, r2, #1
 80a2e12:	2afe      	cmp	r2, #254	; 0xfe
 80a2e14:	d251      	bcs.n	80a2eba <__addsf3+0x136>
 80a2e16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a2e1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2e1e:	bf08      	it	eq
 80a2e20:	f020 0001 	biceq.w	r0, r0, #1
 80a2e24:	ea40 0003 	orr.w	r0, r0, r3
 80a2e28:	4770      	bx	lr
 80a2e2a:	0049      	lsls	r1, r1, #1
 80a2e2c:	eb40 0000 	adc.w	r0, r0, r0
 80a2e30:	3a01      	subs	r2, #1
 80a2e32:	bf28      	it	cs
 80a2e34:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a2e38:	d2ed      	bcs.n	80a2e16 <__addsf3+0x92>
 80a2e3a:	fab0 fc80 	clz	ip, r0
 80a2e3e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2e42:	ebb2 020c 	subs.w	r2, r2, ip
 80a2e46:	fa00 f00c 	lsl.w	r0, r0, ip
 80a2e4a:	bfaa      	itet	ge
 80a2e4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2e50:	4252      	neglt	r2, r2
 80a2e52:	4318      	orrge	r0, r3
 80a2e54:	bfbc      	itt	lt
 80a2e56:	40d0      	lsrlt	r0, r2
 80a2e58:	4318      	orrlt	r0, r3
 80a2e5a:	4770      	bx	lr
 80a2e5c:	f092 0f00 	teq	r2, #0
 80a2e60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2e64:	bf06      	itte	eq
 80a2e66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a2e6a:	3201      	addeq	r2, #1
 80a2e6c:	3b01      	subne	r3, #1
 80a2e6e:	e7b5      	b.n	80a2ddc <__addsf3+0x58>
 80a2e70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2e74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2e78:	bf18      	it	ne
 80a2e7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2e7e:	d021      	beq.n	80a2ec4 <__addsf3+0x140>
 80a2e80:	ea92 0f03 	teq	r2, r3
 80a2e84:	d004      	beq.n	80a2e90 <__addsf3+0x10c>
 80a2e86:	f092 0f00 	teq	r2, #0
 80a2e8a:	bf08      	it	eq
 80a2e8c:	4608      	moveq	r0, r1
 80a2e8e:	4770      	bx	lr
 80a2e90:	ea90 0f01 	teq	r0, r1
 80a2e94:	bf1c      	itt	ne
 80a2e96:	2000      	movne	r0, #0
 80a2e98:	4770      	bxne	lr
 80a2e9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a2e9e:	d104      	bne.n	80a2eaa <__addsf3+0x126>
 80a2ea0:	0040      	lsls	r0, r0, #1
 80a2ea2:	bf28      	it	cs
 80a2ea4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a2ea8:	4770      	bx	lr
 80a2eaa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a2eae:	bf3c      	itt	cc
 80a2eb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a2eb4:	4770      	bxcc	lr
 80a2eb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2eba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a2ebe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2ec2:	4770      	bx	lr
 80a2ec4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a2ec8:	bf16      	itet	ne
 80a2eca:	4608      	movne	r0, r1
 80a2ecc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2ed0:	4601      	movne	r1, r0
 80a2ed2:	0242      	lsls	r2, r0, #9
 80a2ed4:	bf06      	itte	eq
 80a2ed6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a2eda:	ea90 0f01 	teqeq	r0, r1
 80a2ede:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2ee2:	4770      	bx	lr

080a2ee4 <__aeabi_ui2f>:
 80a2ee4:	f04f 0300 	mov.w	r3, #0
 80a2ee8:	e004      	b.n	80a2ef4 <__aeabi_i2f+0x8>
 80a2eea:	bf00      	nop

080a2eec <__aeabi_i2f>:
 80a2eec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2ef0:	bf48      	it	mi
 80a2ef2:	4240      	negmi	r0, r0
 80a2ef4:	ea5f 0c00 	movs.w	ip, r0
 80a2ef8:	bf08      	it	eq
 80a2efa:	4770      	bxeq	lr
 80a2efc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2f00:	4601      	mov	r1, r0
 80a2f02:	f04f 0000 	mov.w	r0, #0
 80a2f06:	e01c      	b.n	80a2f42 <__aeabi_l2f+0x2a>

080a2f08 <__aeabi_ul2f>:
 80a2f08:	ea50 0201 	orrs.w	r2, r0, r1
 80a2f0c:	bf08      	it	eq
 80a2f0e:	4770      	bxeq	lr
 80a2f10:	f04f 0300 	mov.w	r3, #0
 80a2f14:	e00a      	b.n	80a2f2c <__aeabi_l2f+0x14>
 80a2f16:	bf00      	nop

080a2f18 <__aeabi_l2f>:
 80a2f18:	ea50 0201 	orrs.w	r2, r0, r1
 80a2f1c:	bf08      	it	eq
 80a2f1e:	4770      	bxeq	lr
 80a2f20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2f24:	d502      	bpl.n	80a2f2c <__aeabi_l2f+0x14>
 80a2f26:	4240      	negs	r0, r0
 80a2f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2f2c:	ea5f 0c01 	movs.w	ip, r1
 80a2f30:	bf02      	ittt	eq
 80a2f32:	4684      	moveq	ip, r0
 80a2f34:	4601      	moveq	r1, r0
 80a2f36:	2000      	moveq	r0, #0
 80a2f38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2f3c:	bf08      	it	eq
 80a2f3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2f42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a2f46:	fabc f28c 	clz	r2, ip
 80a2f4a:	3a08      	subs	r2, #8
 80a2f4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2f50:	db10      	blt.n	80a2f74 <__aeabi_l2f+0x5c>
 80a2f52:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2f56:	4463      	add	r3, ip
 80a2f58:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2f5c:	f1c2 0220 	rsb	r2, r2, #32
 80a2f60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2f64:	fa20 f202 	lsr.w	r2, r0, r2
 80a2f68:	eb43 0002 	adc.w	r0, r3, r2
 80a2f6c:	bf08      	it	eq
 80a2f6e:	f020 0001 	biceq.w	r0, r0, #1
 80a2f72:	4770      	bx	lr
 80a2f74:	f102 0220 	add.w	r2, r2, #32
 80a2f78:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2f7c:	f1c2 0220 	rsb	r2, r2, #32
 80a2f80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a2f84:	fa21 f202 	lsr.w	r2, r1, r2
 80a2f88:	eb43 0002 	adc.w	r0, r3, r2
 80a2f8c:	bf08      	it	eq
 80a2f8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2f92:	4770      	bx	lr

080a2f94 <__aeabi_fmul>:
 80a2f94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2f98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2f9c:	bf1e      	ittt	ne
 80a2f9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2fa2:	ea92 0f0c 	teqne	r2, ip
 80a2fa6:	ea93 0f0c 	teqne	r3, ip
 80a2faa:	d06f      	beq.n	80a308c <__aeabi_fmul+0xf8>
 80a2fac:	441a      	add	r2, r3
 80a2fae:	ea80 0c01 	eor.w	ip, r0, r1
 80a2fb2:	0240      	lsls	r0, r0, #9
 80a2fb4:	bf18      	it	ne
 80a2fb6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2fba:	d01e      	beq.n	80a2ffa <__aeabi_fmul+0x66>
 80a2fbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2fc0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2fc4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2fc8:	fba0 3101 	umull	r3, r1, r0, r1
 80a2fcc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2fd0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2fd4:	bf3e      	ittt	cc
 80a2fd6:	0049      	lslcc	r1, r1, #1
 80a2fd8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2fdc:	005b      	lslcc	r3, r3, #1
 80a2fde:	ea40 0001 	orr.w	r0, r0, r1
 80a2fe2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a2fe6:	2afd      	cmp	r2, #253	; 0xfd
 80a2fe8:	d81d      	bhi.n	80a3026 <__aeabi_fmul+0x92>
 80a2fea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2fee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2ff2:	bf08      	it	eq
 80a2ff4:	f020 0001 	biceq.w	r0, r0, #1
 80a2ff8:	4770      	bx	lr
 80a2ffa:	f090 0f00 	teq	r0, #0
 80a2ffe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3002:	bf08      	it	eq
 80a3004:	0249      	lsleq	r1, r1, #9
 80a3006:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a300a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a300e:	3a7f      	subs	r2, #127	; 0x7f
 80a3010:	bfc2      	ittt	gt
 80a3012:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3016:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a301a:	4770      	bxgt	lr
 80a301c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3020:	f04f 0300 	mov.w	r3, #0
 80a3024:	3a01      	subs	r2, #1
 80a3026:	dc5d      	bgt.n	80a30e4 <__aeabi_fmul+0x150>
 80a3028:	f112 0f19 	cmn.w	r2, #25
 80a302c:	bfdc      	itt	le
 80a302e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a3032:	4770      	bxle	lr
 80a3034:	f1c2 0200 	rsb	r2, r2, #0
 80a3038:	0041      	lsls	r1, r0, #1
 80a303a:	fa21 f102 	lsr.w	r1, r1, r2
 80a303e:	f1c2 0220 	rsb	r2, r2, #32
 80a3042:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3046:	ea5f 0031 	movs.w	r0, r1, rrx
 80a304a:	f140 0000 	adc.w	r0, r0, #0
 80a304e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a3052:	bf08      	it	eq
 80a3054:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3058:	4770      	bx	lr
 80a305a:	f092 0f00 	teq	r2, #0
 80a305e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3062:	bf02      	ittt	eq
 80a3064:	0040      	lsleq	r0, r0, #1
 80a3066:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a306a:	3a01      	subeq	r2, #1
 80a306c:	d0f9      	beq.n	80a3062 <__aeabi_fmul+0xce>
 80a306e:	ea40 000c 	orr.w	r0, r0, ip
 80a3072:	f093 0f00 	teq	r3, #0
 80a3076:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a307a:	bf02      	ittt	eq
 80a307c:	0049      	lsleq	r1, r1, #1
 80a307e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3082:	3b01      	subeq	r3, #1
 80a3084:	d0f9      	beq.n	80a307a <__aeabi_fmul+0xe6>
 80a3086:	ea41 010c 	orr.w	r1, r1, ip
 80a308a:	e78f      	b.n	80a2fac <__aeabi_fmul+0x18>
 80a308c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3090:	ea92 0f0c 	teq	r2, ip
 80a3094:	bf18      	it	ne
 80a3096:	ea93 0f0c 	teqne	r3, ip
 80a309a:	d00a      	beq.n	80a30b2 <__aeabi_fmul+0x11e>
 80a309c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a30a0:	bf18      	it	ne
 80a30a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a30a6:	d1d8      	bne.n	80a305a <__aeabi_fmul+0xc6>
 80a30a8:	ea80 0001 	eor.w	r0, r0, r1
 80a30ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a30b0:	4770      	bx	lr
 80a30b2:	f090 0f00 	teq	r0, #0
 80a30b6:	bf17      	itett	ne
 80a30b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a30bc:	4608      	moveq	r0, r1
 80a30be:	f091 0f00 	teqne	r1, #0
 80a30c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a30c6:	d014      	beq.n	80a30f2 <__aeabi_fmul+0x15e>
 80a30c8:	ea92 0f0c 	teq	r2, ip
 80a30cc:	d101      	bne.n	80a30d2 <__aeabi_fmul+0x13e>
 80a30ce:	0242      	lsls	r2, r0, #9
 80a30d0:	d10f      	bne.n	80a30f2 <__aeabi_fmul+0x15e>
 80a30d2:	ea93 0f0c 	teq	r3, ip
 80a30d6:	d103      	bne.n	80a30e0 <__aeabi_fmul+0x14c>
 80a30d8:	024b      	lsls	r3, r1, #9
 80a30da:	bf18      	it	ne
 80a30dc:	4608      	movne	r0, r1
 80a30de:	d108      	bne.n	80a30f2 <__aeabi_fmul+0x15e>
 80a30e0:	ea80 0001 	eor.w	r0, r0, r1
 80a30e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a30e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a30ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a30f0:	4770      	bx	lr
 80a30f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a30f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a30fa:	4770      	bx	lr

080a30fc <__aeabi_fdiv>:
 80a30fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3100:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3104:	bf1e      	ittt	ne
 80a3106:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a310a:	ea92 0f0c 	teqne	r2, ip
 80a310e:	ea93 0f0c 	teqne	r3, ip
 80a3112:	d069      	beq.n	80a31e8 <__aeabi_fdiv+0xec>
 80a3114:	eba2 0203 	sub.w	r2, r2, r3
 80a3118:	ea80 0c01 	eor.w	ip, r0, r1
 80a311c:	0249      	lsls	r1, r1, #9
 80a311e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a3122:	d037      	beq.n	80a3194 <__aeabi_fdiv+0x98>
 80a3124:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a3128:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a312c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a3130:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3134:	428b      	cmp	r3, r1
 80a3136:	bf38      	it	cc
 80a3138:	005b      	lslcc	r3, r3, #1
 80a313a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a313e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a3142:	428b      	cmp	r3, r1
 80a3144:	bf24      	itt	cs
 80a3146:	1a5b      	subcs	r3, r3, r1
 80a3148:	ea40 000c 	orrcs.w	r0, r0, ip
 80a314c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a3150:	bf24      	itt	cs
 80a3152:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a3156:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a315a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a315e:	bf24      	itt	cs
 80a3160:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3164:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3168:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a316c:	bf24      	itt	cs
 80a316e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a3172:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3176:	011b      	lsls	r3, r3, #4
 80a3178:	bf18      	it	ne
 80a317a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a317e:	d1e0      	bne.n	80a3142 <__aeabi_fdiv+0x46>
 80a3180:	2afd      	cmp	r2, #253	; 0xfd
 80a3182:	f63f af50 	bhi.w	80a3026 <__aeabi_fmul+0x92>
 80a3186:	428b      	cmp	r3, r1
 80a3188:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a318c:	bf08      	it	eq
 80a318e:	f020 0001 	biceq.w	r0, r0, #1
 80a3192:	4770      	bx	lr
 80a3194:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3198:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a319c:	327f      	adds	r2, #127	; 0x7f
 80a319e:	bfc2      	ittt	gt
 80a31a0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a31a4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a31a8:	4770      	bxgt	lr
 80a31aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a31ae:	f04f 0300 	mov.w	r3, #0
 80a31b2:	3a01      	subs	r2, #1
 80a31b4:	e737      	b.n	80a3026 <__aeabi_fmul+0x92>
 80a31b6:	f092 0f00 	teq	r2, #0
 80a31ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a31be:	bf02      	ittt	eq
 80a31c0:	0040      	lsleq	r0, r0, #1
 80a31c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a31c6:	3a01      	subeq	r2, #1
 80a31c8:	d0f9      	beq.n	80a31be <__aeabi_fdiv+0xc2>
 80a31ca:	ea40 000c 	orr.w	r0, r0, ip
 80a31ce:	f093 0f00 	teq	r3, #0
 80a31d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a31d6:	bf02      	ittt	eq
 80a31d8:	0049      	lsleq	r1, r1, #1
 80a31da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a31de:	3b01      	subeq	r3, #1
 80a31e0:	d0f9      	beq.n	80a31d6 <__aeabi_fdiv+0xda>
 80a31e2:	ea41 010c 	orr.w	r1, r1, ip
 80a31e6:	e795      	b.n	80a3114 <__aeabi_fdiv+0x18>
 80a31e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a31ec:	ea92 0f0c 	teq	r2, ip
 80a31f0:	d108      	bne.n	80a3204 <__aeabi_fdiv+0x108>
 80a31f2:	0242      	lsls	r2, r0, #9
 80a31f4:	f47f af7d 	bne.w	80a30f2 <__aeabi_fmul+0x15e>
 80a31f8:	ea93 0f0c 	teq	r3, ip
 80a31fc:	f47f af70 	bne.w	80a30e0 <__aeabi_fmul+0x14c>
 80a3200:	4608      	mov	r0, r1
 80a3202:	e776      	b.n	80a30f2 <__aeabi_fmul+0x15e>
 80a3204:	ea93 0f0c 	teq	r3, ip
 80a3208:	d104      	bne.n	80a3214 <__aeabi_fdiv+0x118>
 80a320a:	024b      	lsls	r3, r1, #9
 80a320c:	f43f af4c 	beq.w	80a30a8 <__aeabi_fmul+0x114>
 80a3210:	4608      	mov	r0, r1
 80a3212:	e76e      	b.n	80a30f2 <__aeabi_fmul+0x15e>
 80a3214:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3218:	bf18      	it	ne
 80a321a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a321e:	d1ca      	bne.n	80a31b6 <__aeabi_fdiv+0xba>
 80a3220:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3224:	f47f af5c 	bne.w	80a30e0 <__aeabi_fmul+0x14c>
 80a3228:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a322c:	f47f af3c 	bne.w	80a30a8 <__aeabi_fmul+0x114>
 80a3230:	e75f      	b.n	80a30f2 <__aeabi_fmul+0x15e>
 80a3232:	bf00      	nop

080a3234 <__cxa_atexit>:
 80a3234:	b510      	push	{r4, lr}
 80a3236:	4604      	mov	r4, r0
 80a3238:	4804      	ldr	r0, [pc, #16]	; (80a324c <__cxa_atexit+0x18>)
 80a323a:	4613      	mov	r3, r2
 80a323c:	b120      	cbz	r0, 80a3248 <__cxa_atexit+0x14>
 80a323e:	460a      	mov	r2, r1
 80a3240:	2002      	movs	r0, #2
 80a3242:	4621      	mov	r1, r4
 80a3244:	f3af 8000 	nop.w
 80a3248:	bd10      	pop	{r4, pc}
 80a324a:	bf00      	nop
 80a324c:	00000000 	.word	0x00000000

080a3250 <memcpy>:
 80a3250:	440a      	add	r2, r1
 80a3252:	4291      	cmp	r1, r2
 80a3254:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a3258:	d100      	bne.n	80a325c <memcpy+0xc>
 80a325a:	4770      	bx	lr
 80a325c:	b510      	push	{r4, lr}
 80a325e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3262:	4291      	cmp	r1, r2
 80a3264:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3268:	d1f9      	bne.n	80a325e <memcpy+0xe>
 80a326a:	bd10      	pop	{r4, pc}

080a326c <memset>:
 80a326c:	4603      	mov	r3, r0
 80a326e:	4402      	add	r2, r0
 80a3270:	4293      	cmp	r3, r2
 80a3272:	d100      	bne.n	80a3276 <memset+0xa>
 80a3274:	4770      	bx	lr
 80a3276:	f803 1b01 	strb.w	r1, [r3], #1
 80a327a:	e7f9      	b.n	80a3270 <memset+0x4>

080a327c <srand>:
 80a327c:	b538      	push	{r3, r4, r5, lr}
 80a327e:	4b0d      	ldr	r3, [pc, #52]	; (80a32b4 <srand+0x38>)
 80a3280:	4604      	mov	r4, r0
 80a3282:	681d      	ldr	r5, [r3, #0]
 80a3284:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3286:	b97b      	cbnz	r3, 80a32a8 <srand+0x2c>
 80a3288:	2018      	movs	r0, #24
 80a328a:	f7fe facb 	bl	80a1824 <malloc>
 80a328e:	4a0a      	ldr	r2, [pc, #40]	; (80a32b8 <srand+0x3c>)
 80a3290:	4b0a      	ldr	r3, [pc, #40]	; (80a32bc <srand+0x40>)
 80a3292:	63a8      	str	r0, [r5, #56]	; 0x38
 80a3294:	e9c0 2300 	strd	r2, r3, [r0]
 80a3298:	4b09      	ldr	r3, [pc, #36]	; (80a32c0 <srand+0x44>)
 80a329a:	2201      	movs	r2, #1
 80a329c:	6083      	str	r3, [r0, #8]
 80a329e:	230b      	movs	r3, #11
 80a32a0:	8183      	strh	r3, [r0, #12]
 80a32a2:	2300      	movs	r3, #0
 80a32a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a32a8:	2200      	movs	r2, #0
 80a32aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a32ac:	611c      	str	r4, [r3, #16]
 80a32ae:	615a      	str	r2, [r3, #20]
 80a32b0:	bd38      	pop	{r3, r4, r5, pc}
 80a32b2:	bf00      	nop
 80a32b4:	20000004 	.word	0x20000004
 80a32b8:	abcd330e 	.word	0xabcd330e
 80a32bc:	e66d1234 	.word	0xe66d1234
 80a32c0:	0005deec 	.word	0x0005deec

080a32c4 <strlen>:
 80a32c4:	4603      	mov	r3, r0
 80a32c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a32ca:	2a00      	cmp	r2, #0
 80a32cc:	d1fb      	bne.n	80a32c6 <strlen+0x2>
 80a32ce:	1a18      	subs	r0, r3, r0
 80a32d0:	3801      	subs	r0, #1
 80a32d2:	4770      	bx	lr

080a32d4 <dynalib_user>:
 80a32d4:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a32e4:	0000 0000                                   ....

080a32e8 <CSWTCH.189>:
 80a32e8:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a32f8:	0050 0000                                   P...

080a32fc <_ZTV7TwoWire>:
	...
 80a3304:	1867 080a 18b1 080a 1889 080a 1869 080a     g...........i...
 80a3314:	1891 080a 1899 080a 18a1 080a 18a9 080a     ................

080a3324 <_ZTV9IPAddress>:
	...
 80a332c:	18f5 080a 18e5 080a 18e7 080a 7061 0070     ............app.

080a333c <_ZTVN5spark12NetworkClassE>:
	...
 80a3344:	19bd 080a 19c7 080a 19d1 080a 19db 080a     ................
 80a3354:	19e5 080a 19f1 080a 19fd 080a 1a09 080a     ................
 80a3364:	1a11 080a 1a1b 080a 1a25 080a 616e 006e     ........%...nan.
 80a3374:	6e69 0066 766f 0066 002e 5925 252d 2d6d     inf.ovf...%Y-%m-
 80a3384:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
 80a3394:	7463 6d69 0065 0000                         ctime...

080a339c <_ZTV11USARTSerial>:
	...
 80a33a4:	1d99 080a 1e01 080a 1ddd 080a 1a89 080a     ................
 80a33b4:	1dad 080a 1dc9 080a 1dbb 080a 1dd7 080a     ................
 80a33c4:	1d9b 080a 1d9f 080a                         ........

080a33cc <_ZTV9USBSerial>:
	...
 80a33d4:	1e91 080a 1ef7 080a 1ecf 080a 1a89 080a     ................
 80a33e4:	1ec1 080a 1e93 080a 1ea3 080a 1ef1 080a     ................
 80a33f4:	1eb3 080a 1e8d 080a                         ........

080a33fc <_ZTVN5spark9WiFiClassE>:
	...
 80a3404:	20c7 080a 20bd 080a 20b3 080a 2025 080a     . ... ... ..% ..
 80a3414:	20a7 080a 209b 080a 208f 080a 2087 080a     . ... ... ... ..
 80a3424:	207d 080a 2073 080a 202f 080a               } ..s ../ ..

080a3430 <_ZSt7nothrow>:
	...

080a3431 <link_const_variable_data_end>:
 80a3431:	00          	.byte	0x00
	...

080a3434 <link_constructors_location>:
 80a3434:	080a01e9 	.word	0x080a01e9
 80a3438:	080a14e9 	.word	0x080a14e9
 80a343c:	080a19ad 	.word	0x080a19ad
 80a3440:	080a1a75 	.word	0x080a1a75
 80a3444:	080a1cf1 	.word	0x080a1cf1
 80a3448:	080a1d49 	.word	0x080a1d49
 80a344c:	080a1d85 	.word	0x080a1d85
 80a3450:	080a20d1 	.word	0x080a20d1
 80a3454:	080a23cd 	.word	0x080a23cd

080a3458 <link_constructors_end>:
	...
