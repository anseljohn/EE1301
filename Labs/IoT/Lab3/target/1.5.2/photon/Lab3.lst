
/Users/owner/Documents/School/ee1301Main/EE1301/Labs/IoT/Lab3/target/1.5.2/photon/Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005360  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a5380  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000ac  20000000  080a5384  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005b0  200000b0  200000b0  000400b0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a5430  080a5430  00035430  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a5458  080a5458  00035458  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a970e  00000000  00000000  0003545c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f062  00000000  00000000  000deb6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013f22  00000000  00000000  000edbcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ee0  00000000  00000000  00101aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003320  00000000  00000000  001039ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023ec8  00000000  00000000  00106cee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000227c4  00000000  00000000  0012abb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a926c  00000000  00000000  0014d37a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bc38  00000000  00000000  001f65e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 f9c3 	bl	80a33bc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 f9c8 	bl	80a33d2 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a5384 	.word	0x080a5384
 80a0050:	200000ac 	.word	0x200000ac
 80a0054:	200000b0 	.word	0x200000b0
 80a0058:	20000660 	.word	0x20000660
 80a005c:	20000660 	.word	0x20000660

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fa1f 	bl	80a24a4 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a5344 	.word	0x080a5344
 80a0088:	080a5378 	.word	0x080a5378

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b878 	b.w	80a0180 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f8ad 	bl	80a01f0 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 b9c5 	b.w	80a2428 <_post_loop>

080a009e <_ZdlPv>:
 80a009e:	f001 bc6b 	b.w	80a1978 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z7setMode6String>:
  led.show();

  delay(500);
}

int setMode(String modeStr) {
 80a00b4:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a00b6:	4915      	ldr	r1, [pc, #84]	; (80a010c <_Z7setMode6String+0x58>)
 80a00b8:	4605      	mov	r5, r0
 80a00ba:	f001 ff7f 	bl	80a1fbc <_ZNK6String6equalsEPKc>
 80a00be:	4c14      	ldr	r4, [pc, #80]	; (80a0110 <_Z7setMode6String+0x5c>)
  if (modeStr == "Cool") {
 80a00c0:	b118      	cbz	r0, 80a00ca <_Z7setMode6String+0x16>
    mode = COOLING;
 80a00c2:	2300      	movs	r3, #0
 80a00c4:	7023      	strb	r3, [r4, #0]
    Serial.print("Invalid mode: ");
    Serial.println(modeStr);
    mode = OFF;
    return -1;
  }
  return 1;
 80a00c6:	2001      	movs	r0, #1
 80a00c8:	bd38      	pop	{r3, r4, r5, pc}
 80a00ca:	4912      	ldr	r1, [pc, #72]	; (80a0114 <_Z7setMode6String+0x60>)
 80a00cc:	4628      	mov	r0, r5
 80a00ce:	f001 ff75 	bl	80a1fbc <_ZNK6String6equalsEPKc>
}

int setMode(String modeStr) {
  if (modeStr == "Cool") {
    mode = COOLING;
  } else if (modeStr == "Off") {
 80a00d2:	b110      	cbz	r0, 80a00da <_Z7setMode6String+0x26>
    mode = OFF;
 80a00d4:	2001      	movs	r0, #1
 80a00d6:	7020      	strb	r0, [r4, #0]
 80a00d8:	bd38      	pop	{r3, r4, r5, pc}
 80a00da:	490f      	ldr	r1, [pc, #60]	; (80a0118 <_Z7setMode6String+0x64>)
 80a00dc:	4628      	mov	r0, r5
 80a00de:	f001 ff6d 	bl	80a1fbc <_ZNK6String6equalsEPKc>
  } else if (modeStr == "Heat") {
 80a00e2:	b118      	cbz	r0, 80a00ec <_Z7setMode6String+0x38>
    mode = HEATING;
 80a00e4:	2302      	movs	r3, #2
 80a00e6:	7023      	strb	r3, [r4, #0]
    Serial.print("Invalid mode: ");
    Serial.println(modeStr);
    mode = OFF;
    return -1;
  }
  return 1;
 80a00e8:	2001      	movs	r0, #1
 80a00ea:	bd38      	pop	{r3, r4, r5, pc}
  } else if (modeStr == "Off") {
    mode = OFF;
  } else if (modeStr == "Heat") {
    mode = HEATING;
  } else {
    Serial.print("Invalid mode: ");
 80a00ec:	f002 f8a8 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a00f0:	490a      	ldr	r1, [pc, #40]	; (80a011c <_Z7setMode6String+0x68>)
 80a00f2:	f001 fdcd 	bl	80a1c90 <_ZN5Print5printEPKc>
    Serial.println(modeStr);
 80a00f6:	f002 f8a3 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a00fa:	6829      	ldr	r1, [r5, #0]
 80a00fc:	f001 fddb 	bl	80a1cb6 <_ZN5Print7printlnEPKc>
    mode = OFF;
 80a0100:	2301      	movs	r3, #1
 80a0102:	7023      	strb	r3, [r4, #0]
 80a0104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return -1;
  }
  return 1;
}
 80a0108:	bd38      	pop	{r3, r4, r5, pc}
 80a010a:	bf00      	nop
 80a010c:	080a4f14 	.word	0x080a4f14
 80a0110:	20000000 	.word	0x20000000
 80a0114:	080a4f19 	.word	0x080a4f19
 80a0118:	080a4f1d 	.word	0x080a4f1d
 80a011c:	080a4f22 	.word	0x080a4f22

080a0120 <_Z7setTemp6String>:

int setTemp(String desiredTempStr) {
 80a0120:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0122:	b085      	sub	sp, #20
  double desiredTemp = desiredTempStr.toFloat();
 80a0124:	f001 ff5c 	bl	80a1fe0 <_ZNK6String7toFloatEv>
 80a0128:	f002 fd96 	bl	80a2c58 <__aeabi_f2d>
  if (desiredTemp > temp) {
 80a012c:	4b10      	ldr	r3, [pc, #64]	; (80a0170 <_Z7setTemp6String+0x50>)
  }
  return 1;
}

int setTemp(String desiredTempStr) {
  double desiredTemp = desiredTempStr.toFloat();
 80a012e:	4606      	mov	r6, r0
  if (desiredTemp > temp) {
 80a0130:	e9d3 4500 	ldrd	r4, r5, [r3]
 80a0134:	4622      	mov	r2, r4
 80a0136:	462b      	mov	r3, r5
  }
  return 1;
}

int setTemp(String desiredTempStr) {
  double desiredTemp = desiredTempStr.toFloat();
 80a0138:	460f      	mov	r7, r1
  if (desiredTemp > temp) {
 80a013a:	f003 f871 	bl	80a3220 <__aeabi_dcmpgt>
 80a013e:	b108      	cbz	r0, 80a0144 <_Z7setTemp6String+0x24>
    setMode("Heat");
 80a0140:	490c      	ldr	r1, [pc, #48]	; (80a0174 <_Z7setTemp6String+0x54>)
 80a0142:	e009      	b.n	80a0158 <_Z7setTemp6String+0x38>
  } else if (desiredTemp < temp) {
 80a0144:	4622      	mov	r2, r4
 80a0146:	462b      	mov	r3, r5
 80a0148:	4630      	mov	r0, r6
 80a014a:	4639      	mov	r1, r7
 80a014c:	f003 f84a 	bl	80a31e4 <__aeabi_dcmplt>
 80a0150:	b108      	cbz	r0, 80a0156 <_Z7setTemp6String+0x36>
    setMode("Cool");
 80a0152:	4909      	ldr	r1, [pc, #36]	; (80a0178 <_Z7setTemp6String+0x58>)
 80a0154:	e000      	b.n	80a0158 <_Z7setTemp6String+0x38>
  } else {
    setMode("Off");
 80a0156:	4909      	ldr	r1, [pc, #36]	; (80a017c <_Z7setTemp6String+0x5c>)
 80a0158:	4668      	mov	r0, sp
 80a015a:	f001 ff02 	bl	80a1f62 <_ZN6StringC1EPK19__FlashStringHelper>
 80a015e:	4668      	mov	r0, sp
 80a0160:	f7ff ffa8 	bl	80a00b4 <_Z7setMode6String>
 80a0164:	4668      	mov	r0, sp
 80a0166:	f001 feb5 	bl	80a1ed4 <_ZN6StringD1Ev>
  }
  return 1;
 80a016a:	2001      	movs	r0, #1
 80a016c:	b005      	add	sp, #20
 80a016e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0170:	200000d0 	.word	0x200000d0
 80a0174:	080a4f1d 	.word	0x080a4f1d
 80a0178:	080a4f14 	.word	0x080a4f14
 80a017c:	080a4f19 	.word	0x080a4f19

080a0180 <setup>:

int coolingColor = led.Color(0, 0, 100);
int heatingColor = led.Color(255,165,0);
int offColor = led.Color(100, 100, 100);

void setup() {
 80a0180:	b510      	push	{r4, lr}
  Serial.begin(9600);
 80a0182:	f002 f85d 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a0186:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a018a:	f002 f83f 	bl	80a220c <_ZN9USBSerial5beginEl>
  pinMode(TEMP_PIN, OUTPUT);
 80a018e:	4b0f      	ldr	r3, [pc, #60]	; (80a01cc <setup+0x4c>)
 80a0190:	2101      	movs	r1, #1
 80a0192:	8818      	ldrh	r0, [r3, #0]
 80a0194:	f002 f9f8 	bl	80a2588 <pinMode>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a0198:	4c0d      	ldr	r4, [pc, #52]	; (80a01d0 <setup+0x50>)
  pinMode(A0, INPUT);
 80a019a:	2100      	movs	r1, #0
 80a019c:	200a      	movs	r0, #10
 80a019e:	f002 f9f3 	bl	80a2588 <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a01a2:	2300      	movs	r3, #0
 80a01a4:	2209      	movs	r2, #9
 80a01a6:	490b      	ldr	r1, [pc, #44]	; (80a01d4 <setup+0x54>)
 80a01a8:	480b      	ldr	r0, [pc, #44]	; (80a01d8 <setup+0x58>)
 80a01aa:	f001 fb75 	bl	80a1898 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a01ae:	4a0b      	ldr	r2, [pc, #44]	; (80a01dc <setup+0x5c>)
 80a01b0:	490b      	ldr	r1, [pc, #44]	; (80a01e0 <setup+0x60>)
 80a01b2:	4620      	mov	r0, r4
 80a01b4:	f001 fc1a 	bl	80a19ec <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a01b8:	4620      	mov	r0, r4
 80a01ba:	4a0a      	ldr	r2, [pc, #40]	; (80a01e4 <setup+0x64>)
 80a01bc:	490a      	ldr	r1, [pc, #40]	; (80a01e8 <setup+0x68>)
 80a01be:	f001 fc15 	bl	80a19ec <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.variable("temperature", temp);
  Particle.function("setMode", setMode);
  Particle.function("setTemp", setTemp);

  led.begin();
}
 80a01c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  Particle.variable("temperature", temp);
  Particle.function("setMode", setMode);
  Particle.function("setTemp", setTemp);

  led.begin();
 80a01c6:	4809      	ldr	r0, [pc, #36]	; (80a01ec <setup+0x6c>)
 80a01c8:	f000 b8d6 	b.w	80a0378 <_ZN17Adafruit_NeoPixel5beginEv>
 80a01cc:	20000004 	.word	0x20000004
 80a01d0:	080a19c1 	.word	0x080a19c1
 80a01d4:	200000d0 	.word	0x200000d0
 80a01d8:	080a4f31 	.word	0x080a4f31
 80a01dc:	080a4f3d 	.word	0x080a4f3d
 80a01e0:	080a00b5 	.word	0x080a00b5
 80a01e4:	080a4f45 	.word	0x080a4f45
 80a01e8:	080a0121 	.word	0x080a0121
 80a01ec:	200000b8 	.word	0x200000b8

080a01f0 <loop>:
}

void loop() {
 80a01f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  digitalWrite(TEMP_PIN, HIGH);
 80a01f2:	4d29      	ldr	r5, [pc, #164]	; (80a0298 <loop+0xa8>)
 80a01f4:	2101      	movs	r1, #1
 80a01f6:	8828      	ldrh	r0, [r5, #0]
 80a01f8:	f002 f9d7 	bl	80a25aa <digitalWrite>
  delay(10);
 80a01fc:	200a      	movs	r0, #10
 80a01fe:	f001 fbd3 	bl	80a19a8 <delay>
  temp = (analogRead(A0) - 620) / 12.4;
 80a0202:	200a      	movs	r0, #10
 80a0204:	f002 f9ea 	bl	80a25dc <analogRead>
 80a0208:	f5a0 701b 	sub.w	r0, r0, #620	; 0x26c
 80a020c:	f002 fd12 	bl	80a2c34 <__aeabi_i2d>
 80a0210:	a31f      	add	r3, pc, #124	; (adr r3, 80a0290 <loop+0xa0>)
 80a0212:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0216:	f002 fe9d 	bl	80a2f54 <__aeabi_ddiv>
 80a021a:	4c20      	ldr	r4, [pc, #128]	; (80a029c <loop+0xac>)
 80a021c:	e9c4 0100 	strd	r0, r1, [r4]
  digitalWrite(TEMP_PIN, LOW);
 80a0220:	2100      	movs	r1, #0
 80a0222:	8828      	ldrh	r0, [r5, #0]
 80a0224:	f002 f9c1 	bl	80a25aa <digitalWrite>
  Serial.print(temp);
 80a0228:	f002 f80a 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a022c:	2302      	movs	r3, #2
 80a022e:	9300      	str	r3, [sp, #0]
 80a0230:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a0234:	f001 fe22 	bl	80a1e7c <_ZN5Print5printEdi>
  Serial.println(";");
 80a0238:	f002 f802 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a023c:	4918      	ldr	r1, [pc, #96]	; (80a02a0 <loop+0xb0>)
 80a023e:	f001 fd3a 	bl	80a1cb6 <_ZN5Print7printlnEPKc>

  switch (mode) {
 80a0242:	4b18      	ldr	r3, [pc, #96]	; (80a02a4 <loop+0xb4>)
 80a0244:	781b      	ldrb	r3, [r3, #0]
 80a0246:	2b01      	cmp	r3, #1
 80a0248:	d010      	beq.n	80a026c <loop+0x7c>
 80a024a:	d308      	bcc.n	80a025e <loop+0x6e>
 80a024c:	2b02      	cmp	r3, #2
 80a024e:	d113      	bne.n	80a0278 <loop+0x88>
      break;
    case OFF: 
      led.setPixelColor(0, offColor);
      break;
    case HEATING: 
      led.setPixelColor(0, heatingColor);
 80a0250:	4b15      	ldr	r3, [pc, #84]	; (80a02a8 <loop+0xb8>)
 80a0252:	2100      	movs	r1, #0
 80a0254:	681a      	ldr	r2, [r3, #0]
 80a0256:	4815      	ldr	r0, [pc, #84]	; (80a02ac <loop+0xbc>)
 80a0258:	f001 f97e 	bl	80a1558 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      break;
 80a025c:	e00c      	b.n	80a0278 <loop+0x88>
  Serial.print(temp);
  Serial.println(";");

  switch (mode) {
    case COOLING: 
      led.setPixelColor(0, coolingColor);
 80a025e:	4b14      	ldr	r3, [pc, #80]	; (80a02b0 <loop+0xc0>)
 80a0260:	2100      	movs	r1, #0
 80a0262:	681a      	ldr	r2, [r3, #0]
 80a0264:	4811      	ldr	r0, [pc, #68]	; (80a02ac <loop+0xbc>)
 80a0266:	f001 f977 	bl	80a1558 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      break;
 80a026a:	e005      	b.n	80a0278 <loop+0x88>
    case OFF: 
      led.setPixelColor(0, offColor);
 80a026c:	4b11      	ldr	r3, [pc, #68]	; (80a02b4 <loop+0xc4>)
 80a026e:	2100      	movs	r1, #0
 80a0270:	681a      	ldr	r2, [r3, #0]
 80a0272:	480e      	ldr	r0, [pc, #56]	; (80a02ac <loop+0xbc>)
 80a0274:	f001 f970 	bl	80a1558 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    case HEATING: 
      led.setPixelColor(0, heatingColor);
      break;
  }

  led.show();
 80a0278:	480c      	ldr	r0, [pc, #48]	; (80a02ac <loop+0xbc>)
 80a027a:	f000 f8b3 	bl	80a03e4 <_ZN17Adafruit_NeoPixel4showEv>

  delay(500);
 80a027e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 80a0282:	b003      	add	sp, #12
 80a0284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      break;
  }

  led.show();

  delay(500);
 80a0288:	f001 bb8e 	b.w	80a19a8 <delay>
 80a028c:	f3af 8000 	nop.w
 80a0290:	cccccccd 	.word	0xcccccccd
 80a0294:	4028cccc 	.word	0x4028cccc
 80a0298:	20000004 	.word	0x20000004
 80a029c:	200000d0 	.word	0x200000d0
 80a02a0:	080a4f4d 	.word	0x080a4f4d
 80a02a4:	20000000 	.word	0x20000000
 80a02a8:	200000d8 	.word	0x200000d8
 80a02ac:	200000b8 	.word	0x200000b8
 80a02b0:	200000b4 	.word	0x200000b4
 80a02b4:	200000cc 	.word	0x200000cc

080a02b8 <_GLOBAL__sub_I_temp>:
    setMode("Cool");
  } else {
    setMode("Off");
  }
  return 1;
 80a02b8:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a02ba:	f001 f9cf 	bl	80a165c <HAL_Pin_Map>

// Global vars
double temp = 0;
int TEMP_PIN = D7;
int LED_PIN = D4;
Adafruit_NeoPixel led = Adafruit_NeoPixel(1, LED_PIN, WS2811);
 80a02be:	4c11      	ldr	r4, [pc, #68]	; (80a0304 <_GLOBAL__sub_I_temp+0x4c>)
 80a02c0:	4a11      	ldr	r2, [pc, #68]	; (80a0308 <_GLOBAL__sub_I_temp+0x50>)
 80a02c2:	2300      	movs	r3, #0
 80a02c4:	7812      	ldrb	r2, [r2, #0]
 80a02c6:	2101      	movs	r1, #1
 80a02c8:	4620      	mov	r0, r4
 80a02ca:	f000 f87a 	bl	80a03c2 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a02ce:	4a0f      	ldr	r2, [pc, #60]	; (80a030c <_GLOBAL__sub_I_temp+0x54>)
 80a02d0:	490f      	ldr	r1, [pc, #60]	; (80a0310 <_GLOBAL__sub_I_temp+0x58>)
 80a02d2:	4620      	mov	r0, r4
 80a02d4:	f002 f9f2 	bl	80a26bc <__aeabi_atexit>
enum thermode {COOLING, OFF, HEATING};
thermode mode = OFF;

int coolingColor = led.Color(0, 0, 100);
 80a02d8:	2100      	movs	r1, #0
 80a02da:	2264      	movs	r2, #100	; 0x64
 80a02dc:	4608      	mov	r0, r1
 80a02de:	f001 f986 	bl	80a15ee <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a02e2:	4b0c      	ldr	r3, [pc, #48]	; (80a0314 <_GLOBAL__sub_I_temp+0x5c>)
int heatingColor = led.Color(255,165,0);
 80a02e4:	2200      	movs	r2, #0
int LED_PIN = D4;
Adafruit_NeoPixel led = Adafruit_NeoPixel(1, LED_PIN, WS2811);
enum thermode {COOLING, OFF, HEATING};
thermode mode = OFF;

int coolingColor = led.Color(0, 0, 100);
 80a02e6:	6018      	str	r0, [r3, #0]
int heatingColor = led.Color(255,165,0);
 80a02e8:	21a5      	movs	r1, #165	; 0xa5
 80a02ea:	20ff      	movs	r0, #255	; 0xff
 80a02ec:	f001 f97f 	bl	80a15ee <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a02f0:	4b09      	ldr	r3, [pc, #36]	; (80a0318 <_GLOBAL__sub_I_temp+0x60>)
int offColor = led.Color(100, 100, 100);
 80a02f2:	2264      	movs	r2, #100	; 0x64
Adafruit_NeoPixel led = Adafruit_NeoPixel(1, LED_PIN, WS2811);
enum thermode {COOLING, OFF, HEATING};
thermode mode = OFF;

int coolingColor = led.Color(0, 0, 100);
int heatingColor = led.Color(255,165,0);
 80a02f4:	6018      	str	r0, [r3, #0]
int offColor = led.Color(100, 100, 100);
 80a02f6:	4611      	mov	r1, r2
 80a02f8:	4610      	mov	r0, r2
 80a02fa:	f001 f978 	bl	80a15ee <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a02fe:	4b07      	ldr	r3, [pc, #28]	; (80a031c <_GLOBAL__sub_I_temp+0x64>)
 80a0300:	6018      	str	r0, [r3, #0]
 80a0302:	bd10      	pop	{r4, pc}
 80a0304:	200000b8 	.word	0x200000b8
 80a0308:	20000008 	.word	0x20000008
 80a030c:	200000b0 	.word	0x200000b0
 80a0310:	080a0325 	.word	0x080a0325
 80a0314:	200000b4 	.word	0x200000b4
 80a0318:	200000d8 	.word	0x200000d8
 80a031c:	200000cc 	.word	0x200000cc

080a0320 <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0320:	f001 b98c 	b.w	80a163c <HAL_Timer_Get_Micro_Seconds>

080a0324 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0324:	b510      	push	{r4, lr}
 80a0326:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0328:	68c0      	ldr	r0, [r0, #12]
 80a032a:	b108      	cbz	r0, 80a0330 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a032c:	f001 fb24 	bl	80a1978 <free>
  if (begun) pinMode(pin, INPUT);
 80a0330:	7823      	ldrb	r3, [r4, #0]
 80a0332:	b11b      	cbz	r3, 80a033c <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0334:	2100      	movs	r1, #0
 80a0336:	79e0      	ldrb	r0, [r4, #7]
 80a0338:	f002 f926 	bl	80a2588 <pinMode>
}
 80a033c:	4620      	mov	r0, r4
 80a033e:	bd10      	pop	{r4, pc}

080a0340 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0340:	b538      	push	{r3, r4, r5, lr}
 80a0342:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0344:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0346:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0348:	b108      	cbz	r0, 80a034e <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a034a:	f001 fb15 	bl	80a1978 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a034e:	79a3      	ldrb	r3, [r4, #6]
 80a0350:	2b06      	cmp	r3, #6
 80a0352:	bf0c      	ite	eq
 80a0354:	2004      	moveq	r0, #4
 80a0356:	2003      	movne	r0, #3
 80a0358:	4368      	muls	r0, r5
 80a035a:	b280      	uxth	r0, r0
 80a035c:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a035e:	f001 fb03 	bl	80a1968 <malloc>
 80a0362:	60e0      	str	r0, [r4, #12]
 80a0364:	b128      	cbz	r0, 80a0372 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0366:	88a2      	ldrh	r2, [r4, #4]
 80a0368:	2100      	movs	r1, #0
 80a036a:	f003 f832 	bl	80a33d2 <memset>
    numLEDs = n;
 80a036e:	8065      	strh	r5, [r4, #2]
 80a0370:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a0372:	80a0      	strh	r0, [r4, #4]
 80a0374:	8060      	strh	r0, [r4, #2]
 80a0376:	bd38      	pop	{r3, r4, r5, pc}

080a0378 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a0378:	b510      	push	{r4, lr}
 80a037a:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a037c:	2101      	movs	r1, #1
 80a037e:	79c0      	ldrb	r0, [r0, #7]
 80a0380:	f002 f902 	bl	80a2588 <pinMode>
  digitalWrite(pin, LOW);
 80a0384:	2100      	movs	r1, #0
 80a0386:	79e0      	ldrb	r0, [r4, #7]
 80a0388:	f002 f90f 	bl	80a25aa <digitalWrite>
  begun = true;
 80a038c:	2301      	movs	r3, #1
 80a038e:	7023      	strb	r3, [r4, #0]
 80a0390:	bd10      	pop	{r4, pc}

080a0392 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0392:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0394:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0396:	4605      	mov	r5, r0
 80a0398:	460c      	mov	r4, r1
    if (begun) {
 80a039a:	b11b      	cbz	r3, 80a03a4 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a039c:	2100      	movs	r1, #0
 80a039e:	79c0      	ldrb	r0, [r0, #7]
 80a03a0:	f002 f8f2 	bl	80a2588 <pinMode>
    }
    pin = p;
    if (begun) {
 80a03a4:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a03a6:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a03a8:	b153      	cbz	r3, 80a03c0 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a03aa:	b2a4      	uxth	r4, r4
 80a03ac:	4620      	mov	r0, r4
 80a03ae:	2101      	movs	r1, #1
 80a03b0:	f002 f8ea 	bl	80a2588 <pinMode>
        digitalWrite(p, LOW);
 80a03b4:	4620      	mov	r0, r4
    }
}
 80a03b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a03ba:	2100      	movs	r1, #0
 80a03bc:	f002 b8f5 	b.w	80a25aa <digitalWrite>
 80a03c0:	bd38      	pop	{r3, r4, r5, pc}

080a03c2 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a03c2:	b570      	push	{r4, r5, r6, lr}
 80a03c4:	4604      	mov	r4, r0
 80a03c6:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a03c8:	2500      	movs	r5, #0
 80a03ca:	7183      	strb	r3, [r0, #6]
 80a03cc:	7005      	strb	r5, [r0, #0]
 80a03ce:	7205      	strb	r5, [r0, #8]
 80a03d0:	60c5      	str	r5, [r0, #12]
 80a03d2:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a03d4:	f7ff ffb4 	bl	80a0340 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a03d8:	4620      	mov	r0, r4
 80a03da:	4631      	mov	r1, r6
 80a03dc:	f7ff ffd9 	bl	80a0392 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a03e0:	4620      	mov	r0, r4
 80a03e2:	bd70      	pop	{r4, r5, r6, pc}

080a03e4 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a03e4:	68c3      	ldr	r3, [r0, #12]
 80a03e6:	2b00      	cmp	r3, #0
 80a03e8:	f000 858e 	beq.w	80a0f08 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a03ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a03f0:	4604      	mov	r4, r0
 80a03f2:	7983      	ldrb	r3, [r0, #6]
 80a03f4:	b086      	sub	sp, #24
 80a03f6:	3b02      	subs	r3, #2
 80a03f8:	b2db      	uxtb	r3, r3
 80a03fa:	2b04      	cmp	r3, #4
 80a03fc:	bf96      	itet	ls
 80a03fe:	4a29      	ldrls	r2, [pc, #164]	; (80a04a4 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0400:	2532      	movhi	r5, #50	; 0x32
 80a0402:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0406:	f7ff ff8b 	bl	80a0320 <micros>
 80a040a:	6923      	ldr	r3, [r4, #16]
 80a040c:	1ac0      	subs	r0, r0, r3
 80a040e:	42a8      	cmp	r0, r5
 80a0410:	d3f9      	bcc.n	80a0406 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0412:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0414:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0416:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0418:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a041a:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a041e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0422:	f000 8272 	beq.w	80a090a <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a0426:	2907      	cmp	r1, #7
 80a0428:	f000 826f 	beq.w	80a090a <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a042c:	2906      	cmp	r1, #6
 80a042e:	f000 8432 	beq.w	80a0c96 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0432:	2905      	cmp	r1, #5
 80a0434:	f000 83ab 	beq.w	80a0b8e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0438:	2908      	cmp	r1, #8
 80a043a:	f000 83a8 	beq.w	80a0b8e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a043e:	2900      	cmp	r1, #0
 80a0440:	f040 8563 	bne.w	80a0f0a <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a0444:	4a18      	ldr	r2, [pc, #96]	; (80a04a8 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0446:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a044a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a044e:	b29b      	uxth	r3, r3
 80a0450:	2b00      	cmp	r3, #0
 80a0452:	f000 8395 	beq.w	80a0b80 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0456:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0458:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a045c:	f10e 0503 	add.w	r5, lr, #3
 80a0460:	3b03      	subs	r3, #3
 80a0462:	b29b      	uxth	r3, r3
 80a0464:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0468:	f89e 3000 	ldrb.w	r3, [lr]
 80a046c:	b2db      	uxtb	r3, r3
 80a046e:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0472:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0476:	b2db      	uxtb	r3, r3
 80a0478:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a047c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0480:	b2db      	uxtb	r3, r3
 80a0482:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0486:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a048a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a048e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0492:	021b      	lsls	r3, r3, #8
 80a0494:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0498:	4303      	orrs	r3, r0
 80a049a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a049c:	f88d 1005 	strb.w	r1, [sp, #5]
 80a04a0:	e11b      	b.n	80a06da <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a04a2:	bf00      	nop
 80a04a4:	080a4f50 	.word	0x080a4f50
 80a04a8:	200000dc 	.word	0x200000dc
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a04ac:	4600      	mov	r0, r0
 80a04ae:	bf00      	nop
 80a04b0:	bf00      	nop
 80a04b2:	bf00      	nop
 80a04b4:	bf00      	nop
 80a04b6:	bf00      	nop
 80a04b8:	bf00      	nop
 80a04ba:	bf00      	nop
 80a04bc:	bf00      	nop
 80a04be:	bf00      	nop
 80a04c0:	bf00      	nop
 80a04c2:	bf00      	nop
 80a04c4:	bf00      	nop
 80a04c6:	bf00      	nop
 80a04c8:	bf00      	nop
 80a04ca:	bf00      	nop
 80a04cc:	bf00      	nop
 80a04ce:	bf00      	nop
 80a04d0:	bf00      	nop
 80a04d2:	bf00      	nop
 80a04d4:	bf00      	nop
 80a04d6:	bf00      	nop
 80a04d8:	bf00      	nop
 80a04da:	bf00      	nop
 80a04dc:	bf00      	nop
 80a04de:	bf00      	nop
 80a04e0:	bf00      	nop
 80a04e2:	bf00      	nop
 80a04e4:	bf00      	nop
 80a04e6:	bf00      	nop
 80a04e8:	bf00      	nop
 80a04ea:	bf00      	nop
 80a04ec:	bf00      	nop
 80a04ee:	bf00      	nop
 80a04f0:	bf00      	nop
 80a04f2:	bf00      	nop
 80a04f4:	bf00      	nop
 80a04f6:	bf00      	nop
 80a04f8:	bf00      	nop
 80a04fa:	bf00      	nop
 80a04fc:	bf00      	nop
 80a04fe:	bf00      	nop
 80a0500:	bf00      	nop
 80a0502:	bf00      	nop
 80a0504:	bf00      	nop
 80a0506:	bf00      	nop
 80a0508:	bf00      	nop
 80a050a:	bf00      	nop
 80a050c:	bf00      	nop
 80a050e:	bf00      	nop
 80a0510:	bf00      	nop
 80a0512:	bf00      	nop
 80a0514:	bf00      	nop
 80a0516:	bf00      	nop
 80a0518:	bf00      	nop
 80a051a:	bf00      	nop
 80a051c:	bf00      	nop
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
 80a0528:	bf00      	nop
 80a052a:	bf00      	nop
 80a052c:	bf00      	nop
 80a052e:	bf00      	nop
 80a0530:	bf00      	nop
 80a0532:	bf00      	nop
 80a0534:	bf00      	nop
 80a0536:	bf00      	nop
 80a0538:	bf00      	nop
 80a053a:	bf00      	nop
 80a053c:	bf00      	nop
 80a053e:	bf00      	nop
 80a0540:	bf00      	nop
 80a0542:	bf00      	nop
 80a0544:	bf00      	nop
 80a0546:	bf00      	nop
 80a0548:	bf00      	nop
 80a054a:	bf00      	nop
 80a054c:	bf00      	nop
 80a054e:	bf00      	nop
 80a0550:	bf00      	nop
 80a0552:	bf00      	nop
 80a0554:	bf00      	nop
 80a0556:	bf00      	nop
 80a0558:	bf00      	nop
 80a055a:	bf00      	nop
 80a055c:	bf00      	nop
 80a055e:	bf00      	nop
 80a0560:	bf00      	nop
 80a0562:	bf00      	nop
 80a0564:	bf00      	nop
 80a0566:	bf00      	nop
 80a0568:	bf00      	nop
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
 80a056e:	bf00      	nop
 80a0570:	bf00      	nop
 80a0572:	bf00      	nop
 80a0574:	bf00      	nop
 80a0576:	bf00      	nop
 80a0578:	bf00      	nop
 80a057a:	bf00      	nop
 80a057c:	bf00      	nop
 80a057e:	bf00      	nop
 80a0580:	bf00      	nop
 80a0582:	bf00      	nop
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
 80a058a:	bf00      	nop
 80a058c:	bf00      	nop
 80a058e:	bf00      	nop
 80a0590:	bf00      	nop
 80a0592:	bf00      	nop
 80a0594:	bf00      	nop
 80a0596:	bf00      	nop
 80a0598:	bf00      	nop
 80a059a:	bf00      	nop
 80a059c:	bf00      	nop
 80a059e:	bf00      	nop
 80a05a0:	bf00      	nop
 80a05a2:	bf00      	nop
 80a05a4:	bf00      	nop
 80a05a6:	bf00      	nop
 80a05a8:	bf00      	nop
 80a05aa:	bf00      	nop
 80a05ac:	bf00      	nop
 80a05ae:	bf00      	nop
 80a05b0:	bf00      	nop
 80a05b2:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a05b4:	79e3      	ldrb	r3, [r4, #7]
 80a05b6:	6810      	ldr	r0, [r2, #0]
 80a05b8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a05bc:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a05c0:	88bf      	ldrh	r7, [r7, #4]
 80a05c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a05c6:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a05c8:	4600      	mov	r0, r0
 80a05ca:	bf00      	nop
 80a05cc:	bf00      	nop
 80a05ce:	bf00      	nop
 80a05d0:	bf00      	nop
 80a05d2:	bf00      	nop
 80a05d4:	bf00      	nop
 80a05d6:	bf00      	nop
 80a05d8:	bf00      	nop
 80a05da:	bf00      	nop
 80a05dc:	bf00      	nop
 80a05de:	bf00      	nop
 80a05e0:	bf00      	nop
 80a05e2:	bf00      	nop
 80a05e4:	bf00      	nop
 80a05e6:	bf00      	nop
 80a05e8:	bf00      	nop
 80a05ea:	bf00      	nop
 80a05ec:	bf00      	nop
 80a05ee:	bf00      	nop
 80a05f0:	bf00      	nop
 80a05f2:	bf00      	nop
 80a05f4:	bf00      	nop
 80a05f6:	bf00      	nop
 80a05f8:	bf00      	nop
 80a05fa:	bf00      	nop
 80a05fc:	bf00      	nop
 80a05fe:	bf00      	nop
 80a0600:	bf00      	nop
 80a0602:	bf00      	nop
 80a0604:	bf00      	nop
 80a0606:	bf00      	nop
 80a0608:	bf00      	nop
 80a060a:	bf00      	nop
 80a060c:	bf00      	nop
 80a060e:	bf00      	nop
 80a0610:	bf00      	nop
 80a0612:	bf00      	nop
 80a0614:	bf00      	nop
 80a0616:	bf00      	nop
 80a0618:	bf00      	nop
 80a061a:	bf00      	nop
 80a061c:	bf00      	nop
 80a061e:	bf00      	nop
 80a0620:	bf00      	nop
 80a0622:	bf00      	nop
 80a0624:	bf00      	nop
 80a0626:	bf00      	nop
 80a0628:	bf00      	nop
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
 80a0652:	bf00      	nop
 80a0654:	bf00      	nop
 80a0656:	bf00      	nop
 80a0658:	bf00      	nop
 80a065a:	bf00      	nop
 80a065c:	bf00      	nop
 80a065e:	bf00      	nop
 80a0660:	bf00      	nop
 80a0662:	bf00      	nop
 80a0664:	bf00      	nop
 80a0666:	bf00      	nop
 80a0668:	bf00      	nop
 80a066a:	bf00      	nop
 80a066c:	bf00      	nop
 80a066e:	bf00      	nop
 80a0670:	bf00      	nop
 80a0672:	bf00      	nop
 80a0674:	bf00      	nop
 80a0676:	bf00      	nop
 80a0678:	bf00      	nop
 80a067a:	bf00      	nop
 80a067c:	bf00      	nop
 80a067e:	bf00      	nop
 80a0680:	bf00      	nop
 80a0682:	bf00      	nop
 80a0684:	bf00      	nop
 80a0686:	bf00      	nop
 80a0688:	bf00      	nop
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a06c2:	9b04      	ldr	r3, [sp, #16]
 80a06c4:	085b      	lsrs	r3, r3, #1
 80a06c6:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a06c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a06cc:	3301      	adds	r3, #1
 80a06ce:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a06d0:	2b17      	cmp	r3, #23
 80a06d2:	f88d 3005 	strb.w	r3, [sp, #5]
 80a06d6:	f200 82db 	bhi.w	80a0c90 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a06da:	79e3      	ldrb	r3, [r4, #7]
 80a06dc:	6810      	ldr	r0, [r2, #0]
 80a06de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a06e2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a06e6:	88bf      	ldrh	r7, [r7, #4]
 80a06e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a06ec:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a06ee:	9803      	ldr	r0, [sp, #12]
 80a06f0:	9b04      	ldr	r3, [sp, #16]
 80a06f2:	4218      	tst	r0, r3
 80a06f4:	f47f aeda 	bne.w	80a04ac <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a06f8:	4600      	mov	r0, r0
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	bf00      	nop
 80a072e:	bf00      	nop
 80a0730:	bf00      	nop
 80a0732:	bf00      	nop
 80a0734:	bf00      	nop
 80a0736:	bf00      	nop
 80a0738:	bf00      	nop
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a074a:	79e3      	ldrb	r3, [r4, #7]
 80a074c:	6810      	ldr	r0, [r2, #0]
 80a074e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0752:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0756:	88bf      	ldrh	r7, [r7, #4]
 80a0758:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a075c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a075e:	4600      	mov	r0, r0
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
 80a0774:	bf00      	nop
 80a0776:	bf00      	nop
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
 80a0870:	bf00      	nop
 80a0872:	bf00      	nop
 80a0874:	bf00      	nop
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	bf00      	nop
 80a087e:	bf00      	nop
 80a0880:	bf00      	nop
 80a0882:	bf00      	nop
 80a0884:	bf00      	nop
 80a0886:	bf00      	nop
 80a0888:	bf00      	nop
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
 80a0896:	bf00      	nop
 80a0898:	bf00      	nop
 80a089a:	bf00      	nop
 80a089c:	bf00      	nop
 80a089e:	bf00      	nop
 80a08a0:	bf00      	nop
 80a08a2:	bf00      	nop
 80a08a4:	bf00      	nop
 80a08a6:	bf00      	nop
 80a08a8:	bf00      	nop
 80a08aa:	bf00      	nop
 80a08ac:	bf00      	nop
 80a08ae:	bf00      	nop
 80a08b0:	bf00      	nop
 80a08b2:	bf00      	nop
 80a08b4:	bf00      	nop
 80a08b6:	bf00      	nop
 80a08b8:	bf00      	nop
 80a08ba:	bf00      	nop
 80a08bc:	bf00      	nop
 80a08be:	bf00      	nop
 80a08c0:	bf00      	nop
 80a08c2:	bf00      	nop
 80a08c4:	bf00      	nop
 80a08c6:	bf00      	nop
 80a08c8:	bf00      	nop
 80a08ca:	bf00      	nop
 80a08cc:	bf00      	nop
 80a08ce:	bf00      	nop
 80a08d0:	bf00      	nop
 80a08d2:	bf00      	nop
 80a08d4:	bf00      	nop
 80a08d6:	bf00      	nop
 80a08d8:	bf00      	nop
 80a08da:	bf00      	nop
 80a08dc:	bf00      	nop
 80a08de:	bf00      	nop
 80a08e0:	bf00      	nop
 80a08e2:	bf00      	nop
 80a08e4:	bf00      	nop
 80a08e6:	bf00      	nop
 80a08e8:	bf00      	nop
 80a08ea:	bf00      	nop
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	e6db      	b.n	80a06c2 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a090a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a090e:	4a17      	ldr	r2, [pc, #92]	; (80a096c <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a0910:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a0912:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0916:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0918:	2b00      	cmp	r3, #0
 80a091a:	f000 8131 	beq.w	80a0b80 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a091e:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0920:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0924:	f10e 0103 	add.w	r1, lr, #3
 80a0928:	3b03      	subs	r3, #3
 80a092a:	b29b      	uxth	r3, r3
 80a092c:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0930:	f89e 3000 	ldrb.w	r3, [lr]
 80a0934:	b2db      	uxtb	r3, r3
 80a0936:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a093a:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a093e:	b2db      	uxtb	r3, r3
 80a0940:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0944:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0948:	b2db      	uxtb	r3, r3
 80a094a:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a094e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0952:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0956:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a095a:	0200      	lsls	r0, r0, #8
 80a095c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a0960:	433b      	orrs	r3, r7
 80a0962:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0964:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0968:	e080      	b.n	80a0a6c <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a096a:	bf00      	nop
 80a096c:	200000dc 	.word	0x200000dc
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0970:	4600      	mov	r0, r0
 80a0972:	bf00      	nop
 80a0974:	bf00      	nop
 80a0976:	bf00      	nop
 80a0978:	bf00      	nop
 80a097a:	bf00      	nop
 80a097c:	bf00      	nop
 80a097e:	bf00      	nop
 80a0980:	bf00      	nop
 80a0982:	bf00      	nop
 80a0984:	bf00      	nop
 80a0986:	bf00      	nop
 80a0988:	bf00      	nop
 80a098a:	bf00      	nop
 80a098c:	bf00      	nop
 80a098e:	bf00      	nop
 80a0990:	bf00      	nop
 80a0992:	bf00      	nop
 80a0994:	bf00      	nop
 80a0996:	bf00      	nop
 80a0998:	bf00      	nop
 80a099a:	bf00      	nop
 80a099c:	bf00      	nop
 80a099e:	bf00      	nop
 80a09a0:	bf00      	nop
 80a09a2:	bf00      	nop
 80a09a4:	bf00      	nop
 80a09a6:	bf00      	nop
 80a09a8:	bf00      	nop
 80a09aa:	bf00      	nop
 80a09ac:	bf00      	nop
 80a09ae:	bf00      	nop
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a0a0a:	79e3      	ldrb	r3, [r4, #7]
 80a0a0c:	6810      	ldr	r0, [r2, #0]
 80a0a0e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a12:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a16:	88bf      	ldrh	r7, [r7, #4]
 80a0a18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a1c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a1e:	4600      	mov	r0, r0
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0a54:	9b04      	ldr	r3, [sp, #16]
 80a0a56:	085b      	lsrs	r3, r3, #1
 80a0a58:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0a5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0a5e:	3301      	adds	r3, #1
 80a0a60:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0a62:	2b17      	cmp	r3, #23
 80a0a64:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0a68:	f200 8083 	bhi.w	80a0b72 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a0a6c:	79e3      	ldrb	r3, [r4, #7]
 80a0a6e:	6810      	ldr	r0, [r2, #0]
 80a0a70:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a74:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a78:	88bf      	ldrh	r7, [r7, #4]
 80a0a7a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a7e:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0a80:	9803      	ldr	r0, [sp, #12]
 80a0a82:	9b04      	ldr	r3, [sp, #16]
 80a0a84:	4218      	tst	r0, r3
 80a0a86:	f47f af73 	bne.w	80a0970 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a8a:	4600      	mov	r0, r0
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0ab2:	79e3      	ldrb	r3, [r4, #7]
 80a0ab4:	6810      	ldr	r0, [r2, #0]
 80a0ab6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0aba:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0abe:	88bf      	ldrh	r7, [r7, #4]
 80a0ac0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ac4:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ac6:	4600      	mov	r0, r0
 80a0ac8:	bf00      	nop
 80a0aca:	bf00      	nop
 80a0acc:	bf00      	nop
 80a0ace:	bf00      	nop
 80a0ad0:	bf00      	nop
 80a0ad2:	bf00      	nop
 80a0ad4:	bf00      	nop
 80a0ad6:	bf00      	nop
 80a0ad8:	bf00      	nop
 80a0ada:	bf00      	nop
 80a0adc:	bf00      	nop
 80a0ade:	bf00      	nop
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
 80a0b0e:	bf00      	nop
 80a0b10:	bf00      	nop
 80a0b12:	bf00      	nop
 80a0b14:	bf00      	nop
 80a0b16:	bf00      	nop
 80a0b18:	bf00      	nop
 80a0b1a:	bf00      	nop
 80a0b1c:	bf00      	nop
 80a0b1e:	bf00      	nop
 80a0b20:	bf00      	nop
 80a0b22:	bf00      	nop
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
 80a0b30:	bf00      	nop
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	e770      	b.n	80a0a54 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b72:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0b76:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b78:	b29b      	uxth	r3, r3
 80a0b7a:	2b00      	cmp	r3, #0
 80a0b7c:	f47f aecf 	bne.w	80a091e <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0b80:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0b82:	f7ff fbcd 	bl	80a0320 <micros>
 80a0b86:	6120      	str	r0, [r4, #16]
}
 80a0b88:	b006      	add	sp, #24
 80a0b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b8e:	4b5e      	ldr	r3, [pc, #376]	; (80a0d08 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0b90:	4a5e      	ldr	r2, [pc, #376]	; (80a0d0c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0b92:	4618      	mov	r0, r3
 80a0b94:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0b96:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0b9a:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b9c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0ba0:	b292      	uxth	r2, r2
 80a0ba2:	2a00      	cmp	r2, #0
 80a0ba4:	d0ec      	beq.n	80a0b80 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0ba6:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0baa:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0bae:	f10e 0503 	add.w	r5, lr, #3
 80a0bb2:	3a03      	subs	r2, #3
 80a0bb4:	b292      	uxth	r2, r2
 80a0bb6:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0bba:	f89e 2000 	ldrb.w	r2, [lr]
 80a0bbe:	b2d2      	uxtb	r2, r2
 80a0bc0:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0bc4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a0bc8:	b2d2      	uxtb	r2, r2
 80a0bca:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0bce:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a0bd2:	b2d2      	uxtb	r2, r2
 80a0bd4:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0bd8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0bdc:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0be0:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a0be4:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a0be8:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a0bec:	ea42 020c 	orr.w	r2, r2, ip
 80a0bf0:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0bf2:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a0bf6:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0bf8:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0bfa:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0bfe:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c02:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0c0a:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0c0c:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0c10:	9e03      	ldr	r6, [sp, #12]
 80a0c12:	9a04      	ldr	r2, [sp, #16]
 80a0c14:	4216      	tst	r6, r2
 80a0c16:	d023      	beq.n	80a0c60 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0c18:	685a      	ldr	r2, [r3, #4]
 80a0c1a:	9e05      	ldr	r6, [sp, #20]
 80a0c1c:	1b92      	subs	r2, r2, r6
 80a0c1e:	2a4f      	cmp	r2, #79	; 0x4f
 80a0c20:	d9fa      	bls.n	80a0c18 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a0c22:	79e2      	ldrb	r2, [r4, #7]
 80a0c24:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c28:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c2c:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c30:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0c34:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0c38:	6842      	ldr	r2, [r0, #4]
 80a0c3a:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0c3c:	685a      	ldr	r2, [r3, #4]
 80a0c3e:	9e05      	ldr	r6, [sp, #20]
 80a0c40:	1b92      	subs	r2, r2, r6
 80a0c42:	2a07      	cmp	r2, #7
 80a0c44:	d9fa      	bls.n	80a0c3c <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a0c46:	9a04      	ldr	r2, [sp, #16]
 80a0c48:	0852      	lsrs	r2, r2, #1
 80a0c4a:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0c4c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0c50:	3201      	adds	r2, #1
 80a0c52:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0c54:	2a17      	cmp	r2, #23
 80a0c56:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0c5a:	d9cc      	bls.n	80a0bf6 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0c5c:	46ae      	mov	lr, r5
 80a0c5e:	e79d      	b.n	80a0b9c <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0c60:	685a      	ldr	r2, [r3, #4]
 80a0c62:	9e05      	ldr	r6, [sp, #20]
 80a0c64:	1b92      	subs	r2, r2, r6
 80a0c66:	2a18      	cmp	r2, #24
 80a0c68:	d9fa      	bls.n	80a0c60 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a0c6a:	79e2      	ldrb	r2, [r4, #7]
 80a0c6c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c70:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c74:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c78:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0c7c:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0c80:	6842      	ldr	r2, [r0, #4]
 80a0c82:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0c84:	685a      	ldr	r2, [r3, #4]
 80a0c86:	9e05      	ldr	r6, [sp, #20]
 80a0c88:	1b92      	subs	r2, r2, r6
 80a0c8a:	2a45      	cmp	r2, #69	; 0x45
 80a0c8c:	d9fa      	bls.n	80a0c84 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a0c8e:	e7da      	b.n	80a0c46 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0c90:	46ae      	mov	lr, r5
 80a0c92:	f7ff bbda 	b.w	80a044a <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a0c96:	4a1d      	ldr	r2, [pc, #116]	; (80a0d0c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a0c98:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a0c9c:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0c9e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0ca2:	b29b      	uxth	r3, r3
 80a0ca4:	2b00      	cmp	r3, #0
 80a0ca6:	f43f af6b 	beq.w	80a0b80 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a0caa:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0cac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0cb0:	f10e 0104 	add.w	r1, lr, #4
 80a0cb4:	3b04      	subs	r3, #4
 80a0cb6:	b29b      	uxth	r3, r3
 80a0cb8:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0cbc:	f89e 3000 	ldrb.w	r3, [lr]
 80a0cc0:	b2db      	uxtb	r3, r3
 80a0cc2:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0cc6:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0cca:	b2db      	uxtb	r3, r3
 80a0ccc:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0cd0:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0cd4:	b2db      	uxtb	r3, r3
 80a0cd6:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0cda:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a0cde:	b2db      	uxtb	r3, r3
 80a0ce0:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0ce4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0ce8:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0cec:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a0cf0:	043f      	lsls	r7, r7, #16
 80a0cf2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a0cf6:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a0cfa:	4303      	orrs	r3, r0
 80a0cfc:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a0d00:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0d02:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0d06:	e07e      	b.n	80a0e06 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a0d08:	e0001000 	.word	0xe0001000
 80a0d0c:	200000dc 	.word	0x200000dc
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d10:	4600      	mov	r0, r0
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a0d7e:	79e3      	ldrb	r3, [r4, #7]
 80a0d80:	6810      	ldr	r0, [r2, #0]
 80a0d82:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d86:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d8a:	88bf      	ldrh	r7, [r7, #4]
 80a0d8c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d90:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d92:	4600      	mov	r0, r0
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0df0:	9b04      	ldr	r3, [sp, #16]
 80a0df2:	085b      	lsrs	r3, r3, #1
 80a0df4:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0df6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0dfa:	3301      	adds	r3, #1
 80a0dfc:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a0dfe:	2b1f      	cmp	r3, #31
 80a0e00:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0e04:	d87e      	bhi.n	80a0f04 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a0e06:	79e3      	ldrb	r3, [r4, #7]
 80a0e08:	6810      	ldr	r0, [r2, #0]
 80a0e0a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0e0e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0e12:	88bf      	ldrh	r7, [r7, #4]
 80a0e14:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0e18:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0e1a:	9803      	ldr	r0, [sp, #12]
 80a0e1c:	9b04      	ldr	r3, [sp, #16]
 80a0e1e:	4218      	tst	r0, r3
 80a0e20:	f47f af76 	bne.w	80a0d10 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0e24:	4600      	mov	r0, r0
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a0e4c:	79e3      	ldrb	r3, [r4, #7]
 80a0e4e:	6810      	ldr	r0, [r2, #0]
 80a0e50:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0e54:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0e58:	88bf      	ldrh	r7, [r7, #4]
 80a0e5a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0e5e:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0e60:	4600      	mov	r0, r0
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
 80a0e68:	bf00      	nop
 80a0e6a:	bf00      	nop
 80a0e6c:	bf00      	nop
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
 80a0eb8:	bf00      	nop
 80a0eba:	bf00      	nop
 80a0ebc:	bf00      	nop
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	e775      	b.n	80a0df0 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a0f04:	468e      	mov	lr, r1
 80a0f06:	e6ca      	b.n	80a0c9e <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a0f08:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0f0a:	2903      	cmp	r1, #3
 80a0f0c:	f000 812e 	beq.w	80a116c <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f10:	4a1e      	ldr	r2, [pc, #120]	; (80a0f8c <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0f12:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0f16:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f18:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0f1c:	b29b      	uxth	r3, r3
 80a0f1e:	2b00      	cmp	r3, #0
 80a0f20:	f43f ae2e 	beq.w	80a0b80 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0f24:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0f26:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f2a:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a0f2c:	3b03      	subs	r3, #3
 80a0f2e:	b29b      	uxth	r3, r3
 80a0f30:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0f34:	f89e 3000 	ldrb.w	r3, [lr]
 80a0f38:	f10e 0103 	add.w	r1, lr, #3
 80a0f3c:	b2db      	uxtb	r3, r3
 80a0f3e:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0f42:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f46:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0f4a:	b2db      	uxtb	r3, r3
 80a0f4c:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0f50:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f54:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a0f58:	b2db      	uxtb	r3, r3
 80a0f5a:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f5e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0f62:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f66:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f6a:	021b      	lsls	r3, r3, #8
 80a0f6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0f70:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f74:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a0f78:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f7c:	433b      	orrs	r3, r7
 80a0f7e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0f80:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0f84:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a0f88:	e07d      	b.n	80a1086 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a0f8a:	bf00      	nop
 80a0f8c:	200000dc 	.word	0x200000dc
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a0f90:	9b04      	ldr	r3, [sp, #16]
 80a0f92:	085b      	lsrs	r3, r3, #1
 80a0f94:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f96:	4600      	mov	r0, r0
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a101c:	79e0      	ldrb	r0, [r4, #7]
 80a101e:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1020:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1024:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1028:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a102c:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1030:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1034:	3301      	adds	r3, #1
 80a1036:	b2db      	uxtb	r3, r3
 80a1038:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a103c:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1040:	4600      	mov	r0, r0
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
          if(j==24) break;
 80a106a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a106e:	2b18      	cmp	r3, #24
 80a1070:	d07a      	beq.n	80a1168 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a1072:	79e3      	ldrb	r3, [r4, #7]
 80a1074:	6810      	ldr	r0, [r2, #0]
 80a1076:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a107a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a107e:	88bf      	ldrh	r7, [r7, #4]
 80a1080:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1084:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a1086:	9803      	ldr	r0, [sp, #12]
 80a1088:	9b04      	ldr	r3, [sp, #16]
 80a108a:	4218      	tst	r0, r3
 80a108c:	d180      	bne.n	80a0f90 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a108e:	4600      	mov	r0, r0
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a10b0:	79e3      	ldrb	r3, [r4, #7]
 80a10b2:	6810      	ldr	r0, [r2, #0]
 80a10b4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a10b8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a10bc:	88bf      	ldrh	r7, [r7, #4]
 80a10be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a10c2:	831f      	strh	r7, [r3, #24]
          j++;
 80a10c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a10c8:	3301      	adds	r3, #1
 80a10ca:	b2db      	uxtb	r3, r3
 80a10cc:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a10d0:	9b04      	ldr	r3, [sp, #16]
 80a10d2:	085b      	lsrs	r3, r3, #1
 80a10d4:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a10d6:	4600      	mov	r0, r0
 80a10d8:	bf00      	nop
 80a10da:	bf00      	nop
 80a10dc:	bf00      	nop
 80a10de:	bf00      	nop
 80a10e0:	bf00      	nop
 80a10e2:	bf00      	nop
 80a10e4:	bf00      	nop
 80a10e6:	bf00      	nop
 80a10e8:	bf00      	nop
 80a10ea:	bf00      	nop
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
          if(j==24) break;
 80a1160:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1164:	2b18      	cmp	r3, #24
 80a1166:	d184      	bne.n	80a1072 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1168:	468e      	mov	lr, r1
 80a116a:	e6d5      	b.n	80a0f18 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a116c:	4a17      	ldr	r2, [pc, #92]	; (80a11cc <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a116e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1172:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1174:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1178:	b29b      	uxth	r3, r3
 80a117a:	2b00      	cmp	r3, #0
 80a117c:	f43f ad00 	beq.w	80a0b80 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1180:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1182:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1186:	f10e 0103 	add.w	r1, lr, #3
 80a118a:	3b03      	subs	r3, #3
 80a118c:	b29b      	uxth	r3, r3
 80a118e:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1192:	f89e 3000 	ldrb.w	r3, [lr]
 80a1196:	b2db      	uxtb	r3, r3
 80a1198:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a119c:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a11a0:	b2db      	uxtb	r3, r3
 80a11a2:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a11a6:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a11aa:	b2db      	uxtb	r3, r3
 80a11ac:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a11b0:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a11b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a11b8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a11bc:	021b      	lsls	r3, r3, #8
 80a11be:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a11c2:	4303      	orrs	r3, r0
 80a11c4:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a11c6:	f88d 6005 	strb.w	r6, [sp, #5]
 80a11ca:	e0e0      	b.n	80a138e <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a11cc:	200000dc 	.word	0x200000dc
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a11d0:	4600      	mov	r0, r0
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
 80a11dc:	bf00      	nop
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a12f2:	79e3      	ldrb	r3, [r4, #7]
 80a12f4:	6810      	ldr	r0, [r2, #0]
 80a12f6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a12fa:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a12fe:	88bf      	ldrh	r7, [r7, #4]
 80a1300:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1304:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1306:	4600      	mov	r0, r0
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1376:	9b04      	ldr	r3, [sp, #16]
 80a1378:	085b      	lsrs	r3, r3, #1
 80a137a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a137c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1380:	3301      	adds	r3, #1
 80a1382:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1384:	2b17      	cmp	r3, #23
 80a1386:	f88d 3005 	strb.w	r3, [sp, #5]
 80a138a:	f200 80e3 	bhi.w	80a1554 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a138e:	79e3      	ldrb	r3, [r4, #7]
 80a1390:	6810      	ldr	r0, [r2, #0]
 80a1392:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1396:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a139a:	88bf      	ldrh	r7, [r7, #4]
 80a139c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13a0:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a13a2:	9803      	ldr	r0, [sp, #12]
 80a13a4:	9b04      	ldr	r3, [sp, #16]
 80a13a6:	4218      	tst	r0, r3
 80a13a8:	f47f af12 	bne.w	80a11d0 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13ac:	4600      	mov	r0, r0
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a142e:	79e3      	ldrb	r3, [r4, #7]
 80a1430:	6810      	ldr	r0, [r2, #0]
 80a1432:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1436:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a143a:	88bf      	ldrh	r7, [r7, #4]
 80a143c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1440:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1442:	4600      	mov	r0, r0
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	e710      	b.n	80a1376 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1554:	468e      	mov	lr, r1
 80a1556:	e60d      	b.n	80a1174 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1558 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1558:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a155a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a155c:	428b      	cmp	r3, r1
 80a155e:	d945      	bls.n	80a15ec <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a1560:	7a05      	ldrb	r5, [r0, #8]
 80a1562:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1566:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a156a:	b2d6      	uxtb	r6, r2
 80a156c:	b145      	cbz	r5, 80a1580 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a156e:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a1570:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a1572:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1574:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1578:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a157c:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1580:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1584:	68c7      	ldr	r7, [r0, #12]
 80a1586:	f1bc 0f06 	cmp.w	ip, #6
 80a158a:	bf0c      	ite	eq
 80a158c:	2504      	moveq	r5, #4
 80a158e:	2503      	movne	r5, #3
 80a1590:	4369      	muls	r1, r5
 80a1592:	f1bc 0f08 	cmp.w	ip, #8
 80a1596:	eb07 0501 	add.w	r5, r7, r1
 80a159a:	d824      	bhi.n	80a15e6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a159c:	f04f 0e01 	mov.w	lr, #1
 80a15a0:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a15a4:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a15a8:	d10c      	bne.n	80a15c4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a15aa:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a15ae:	d10d      	bne.n	80a15cc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a15b0:	f01e 0f10 	tst.w	lr, #16
 80a15b4:	d017      	beq.n	80a15e6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a15b6:	2bff      	cmp	r3, #255	; 0xff
 80a15b8:	bf08      	it	eq
 80a15ba:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a15bc:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a15be:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a15c0:	70ac      	strb	r4, [r5, #2]
        } break;
 80a15c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a15c4:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a15c6:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a15c8:	70ae      	strb	r6, [r5, #2]
        } break;
 80a15ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a15cc:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a15ce:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a15d0:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a15d2:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a15d4:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a15d6:	b90b      	cbnz	r3, 80a15dc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a15d8:	b2d2      	uxtb	r2, r2
 80a15da:	e002      	b.n	80a15e2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a15dc:	435a      	muls	r2, r3
 80a15de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a15e2:	70ea      	strb	r2, [r5, #3]
        } break;
 80a15e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a15e6:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a15e8:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a15ea:	70ae      	strb	r6, [r5, #2]
 80a15ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a15ee <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a15ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a15f2:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a15f6:	4770      	bx	lr

080a15f8 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a15f8:	b508      	push	{r3, lr}
 80a15fa:	f000 f82f 	bl	80a165c <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a15fe:	f000 f82d 	bl	80a165c <HAL_Pin_Map>
 80a1602:	4b01      	ldr	r3, [pc, #4]	; (80a1608 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1604:	6018      	str	r0, [r3, #0]
 80a1606:	bd08      	pop	{r3, pc}
 80a1608:	200000dc 	.word	0x200000dc

080a160c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a160c:	b508      	push	{r3, lr}
 80a160e:	4b02      	ldr	r3, [pc, #8]	; (80a1618 <os_mutex_recursive_create+0xc>)
 80a1610:	681b      	ldr	r3, [r3, #0]
 80a1612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1614:	9301      	str	r3, [sp, #4]
 80a1616:	bd08      	pop	{r3, pc}
 80a1618:	080601d0 	.word	0x080601d0

080a161c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a161c:	b508      	push	{r3, lr}
 80a161e:	4b02      	ldr	r3, [pc, #8]	; (80a1628 <os_mutex_recursive_destroy+0xc>)
 80a1620:	681b      	ldr	r3, [r3, #0]
 80a1622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1624:	9301      	str	r3, [sp, #4]
 80a1626:	bd08      	pop	{r3, pc}
 80a1628:	080601d0 	.word	0x080601d0

080a162c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a162c:	b508      	push	{r3, lr}
 80a162e:	4b02      	ldr	r3, [pc, #8]	; (80a1638 <HAL_RNG_GetRandomNumber+0xc>)
 80a1630:	681b      	ldr	r3, [r3, #0]
 80a1632:	685b      	ldr	r3, [r3, #4]
 80a1634:	9301      	str	r3, [sp, #4]
 80a1636:	bd08      	pop	{r3, pc}
 80a1638:	0806019c 	.word	0x0806019c

080a163c <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a163c:	b508      	push	{r3, lr}
 80a163e:	4b02      	ldr	r3, [pc, #8]	; (80a1648 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1640:	681b      	ldr	r3, [r3, #0]
 80a1642:	691b      	ldr	r3, [r3, #16]
 80a1644:	9301      	str	r3, [sp, #4]
 80a1646:	bd08      	pop	{r3, pc}
 80a1648:	0806019c 	.word	0x0806019c

080a164c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a164c:	b508      	push	{r3, lr}
 80a164e:	4b02      	ldr	r3, [pc, #8]	; (80a1658 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1650:	681b      	ldr	r3, [r3, #0]
 80a1652:	695b      	ldr	r3, [r3, #20]
 80a1654:	9301      	str	r3, [sp, #4]
 80a1656:	bd08      	pop	{r3, pc}
 80a1658:	0806019c 	.word	0x0806019c

080a165c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a165c:	b508      	push	{r3, lr}
 80a165e:	4b02      	ldr	r3, [pc, #8]	; (80a1668 <HAL_Pin_Map+0xc>)
 80a1660:	681b      	ldr	r3, [r3, #0]
 80a1662:	681b      	ldr	r3, [r3, #0]
 80a1664:	9301      	str	r3, [sp, #4]
 80a1666:	bd08      	pop	{r3, pc}
 80a1668:	080601b0 	.word	0x080601b0

080a166c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a166c:	b508      	push	{r3, lr}
 80a166e:	4b02      	ldr	r3, [pc, #8]	; (80a1678 <HAL_Validate_Pin_Function+0xc>)
 80a1670:	681b      	ldr	r3, [r3, #0]
 80a1672:	685b      	ldr	r3, [r3, #4]
 80a1674:	9301      	str	r3, [sp, #4]
 80a1676:	bd08      	pop	{r3, pc}
 80a1678:	080601b0 	.word	0x080601b0

080a167c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a167c:	b508      	push	{r3, lr}
 80a167e:	4b02      	ldr	r3, [pc, #8]	; (80a1688 <HAL_Pin_Mode+0xc>)
 80a1680:	681b      	ldr	r3, [r3, #0]
 80a1682:	689b      	ldr	r3, [r3, #8]
 80a1684:	9301      	str	r3, [sp, #4]
 80a1686:	bd08      	pop	{r3, pc}
 80a1688:	080601b0 	.word	0x080601b0

080a168c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a168c:	b508      	push	{r3, lr}
 80a168e:	4b02      	ldr	r3, [pc, #8]	; (80a1698 <HAL_Get_Pin_Mode+0xc>)
 80a1690:	681b      	ldr	r3, [r3, #0]
 80a1692:	68db      	ldr	r3, [r3, #12]
 80a1694:	9301      	str	r3, [sp, #4]
 80a1696:	bd08      	pop	{r3, pc}
 80a1698:	080601b0 	.word	0x080601b0

080a169c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a169c:	b508      	push	{r3, lr}
 80a169e:	4b02      	ldr	r3, [pc, #8]	; (80a16a8 <HAL_GPIO_Write+0xc>)
 80a16a0:	681b      	ldr	r3, [r3, #0]
 80a16a2:	691b      	ldr	r3, [r3, #16]
 80a16a4:	9301      	str	r3, [sp, #4]
 80a16a6:	bd08      	pop	{r3, pc}
 80a16a8:	080601b0 	.word	0x080601b0

080a16ac <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a16ac:	b508      	push	{r3, lr}
 80a16ae:	4b02      	ldr	r3, [pc, #8]	; (80a16b8 <HAL_ADC_Read+0xc>)
 80a16b0:	681b      	ldr	r3, [r3, #0]
 80a16b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a16b4:	9301      	str	r3, [sp, #4]
 80a16b6:	bd08      	pop	{r3, pc}
 80a16b8:	080601b0 	.word	0x080601b0

080a16bc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a16bc:	b508      	push	{r3, lr}
 80a16be:	4b02      	ldr	r3, [pc, #8]	; (80a16c8 <HAL_I2C_Write_Data+0xc>)
 80a16c0:	681b      	ldr	r3, [r3, #0]
 80a16c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a16c4:	9301      	str	r3, [sp, #4]
 80a16c6:	bd08      	pop	{r3, pc}
 80a16c8:	080601ac 	.word	0x080601ac

080a16cc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a16cc:	b508      	push	{r3, lr}
 80a16ce:	4b02      	ldr	r3, [pc, #8]	; (80a16d8 <HAL_I2C_Available_Data+0xc>)
 80a16d0:	681b      	ldr	r3, [r3, #0]
 80a16d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a16d4:	9301      	str	r3, [sp, #4]
 80a16d6:	bd08      	pop	{r3, pc}
 80a16d8:	080601ac 	.word	0x080601ac

080a16dc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a16dc:	b508      	push	{r3, lr}
 80a16de:	4b02      	ldr	r3, [pc, #8]	; (80a16e8 <HAL_I2C_Read_Data+0xc>)
 80a16e0:	681b      	ldr	r3, [r3, #0]
 80a16e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a16e4:	9301      	str	r3, [sp, #4]
 80a16e6:	bd08      	pop	{r3, pc}
 80a16e8:	080601ac 	.word	0x080601ac

080a16ec <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a16ec:	b508      	push	{r3, lr}
 80a16ee:	4b02      	ldr	r3, [pc, #8]	; (80a16f8 <HAL_I2C_Peek_Data+0xc>)
 80a16f0:	681b      	ldr	r3, [r3, #0]
 80a16f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a16f4:	9301      	str	r3, [sp, #4]
 80a16f6:	bd08      	pop	{r3, pc}
 80a16f8:	080601ac 	.word	0x080601ac

080a16fc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a16fc:	b508      	push	{r3, lr}
 80a16fe:	4b02      	ldr	r3, [pc, #8]	; (80a1708 <HAL_I2C_Flush_Data+0xc>)
 80a1700:	681b      	ldr	r3, [r3, #0]
 80a1702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1704:	9301      	str	r3, [sp, #4]
 80a1706:	bd08      	pop	{r3, pc}
 80a1708:	080601ac 	.word	0x080601ac

080a170c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a170c:	b508      	push	{r3, lr}
 80a170e:	4b02      	ldr	r3, [pc, #8]	; (80a1718 <HAL_I2C_Is_Enabled+0xc>)
 80a1710:	681b      	ldr	r3, [r3, #0]
 80a1712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1714:	9301      	str	r3, [sp, #4]
 80a1716:	bd08      	pop	{r3, pc}
 80a1718:	080601ac 	.word	0x080601ac

080a171c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a171c:	b508      	push	{r3, lr}
 80a171e:	4b03      	ldr	r3, [pc, #12]	; (80a172c <HAL_I2C_Init+0x10>)
 80a1720:	681b      	ldr	r3, [r3, #0]
 80a1722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1726:	9301      	str	r3, [sp, #4]
 80a1728:	bd08      	pop	{r3, pc}
 80a172a:	0000      	.short	0x0000
 80a172c:	080601ac 	.word	0x080601ac

080a1730 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1730:	b508      	push	{r3, lr}
 80a1732:	4b02      	ldr	r3, [pc, #8]	; (80a173c <HAL_SPI_Init+0xc>)
 80a1734:	681b      	ldr	r3, [r3, #0]
 80a1736:	69db      	ldr	r3, [r3, #28]
 80a1738:	9301      	str	r3, [sp, #4]
 80a173a:	bd08      	pop	{r3, pc}
 80a173c:	080601b4 	.word	0x080601b4

080a1740 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1740:	b508      	push	{r3, lr}
 80a1742:	4b02      	ldr	r3, [pc, #8]	; (80a174c <HAL_SPI_Is_Enabled+0xc>)
 80a1744:	681b      	ldr	r3, [r3, #0]
 80a1746:	6a1b      	ldr	r3, [r3, #32]
 80a1748:	9301      	str	r3, [sp, #4]
 80a174a:	bd08      	pop	{r3, pc}
 80a174c:	080601b4 	.word	0x080601b4

080a1750 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1750:	b508      	push	{r3, lr}
 80a1752:	4b02      	ldr	r3, [pc, #8]	; (80a175c <HAL_USART_Init+0xc>)
 80a1754:	681b      	ldr	r3, [r3, #0]
 80a1756:	699b      	ldr	r3, [r3, #24]
 80a1758:	9301      	str	r3, [sp, #4]
 80a175a:	bd08      	pop	{r3, pc}
 80a175c:	080601c4 	.word	0x080601c4

080a1760 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1760:	b508      	push	{r3, lr}
 80a1762:	4b02      	ldr	r3, [pc, #8]	; (80a176c <HAL_USART_Write_Data+0xc>)
 80a1764:	681b      	ldr	r3, [r3, #0]
 80a1766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1768:	9301      	str	r3, [sp, #4]
 80a176a:	bd08      	pop	{r3, pc}
 80a176c:	080601c4 	.word	0x080601c4

080a1770 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1770:	b508      	push	{r3, lr}
 80a1772:	4b02      	ldr	r3, [pc, #8]	; (80a177c <HAL_USART_Available_Data+0xc>)
 80a1774:	681b      	ldr	r3, [r3, #0]
 80a1776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1778:	9301      	str	r3, [sp, #4]
 80a177a:	bd08      	pop	{r3, pc}
 80a177c:	080601c4 	.word	0x080601c4

080a1780 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1780:	b508      	push	{r3, lr}
 80a1782:	4b02      	ldr	r3, [pc, #8]	; (80a178c <HAL_USART_Read_Data+0xc>)
 80a1784:	681b      	ldr	r3, [r3, #0]
 80a1786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1788:	9301      	str	r3, [sp, #4]
 80a178a:	bd08      	pop	{r3, pc}
 80a178c:	080601c4 	.word	0x080601c4

080a1790 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1790:	b508      	push	{r3, lr}
 80a1792:	4b02      	ldr	r3, [pc, #8]	; (80a179c <HAL_USART_Peek_Data+0xc>)
 80a1794:	681b      	ldr	r3, [r3, #0]
 80a1796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1798:	9301      	str	r3, [sp, #4]
 80a179a:	bd08      	pop	{r3, pc}
 80a179c:	080601c4 	.word	0x080601c4

080a17a0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a17a0:	b508      	push	{r3, lr}
 80a17a2:	4b02      	ldr	r3, [pc, #8]	; (80a17ac <HAL_USART_Flush_Data+0xc>)
 80a17a4:	681b      	ldr	r3, [r3, #0]
 80a17a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a17a8:	9301      	str	r3, [sp, #4]
 80a17aa:	bd08      	pop	{r3, pc}
 80a17ac:	080601c4 	.word	0x080601c4

080a17b0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a17b0:	b508      	push	{r3, lr}
 80a17b2:	4b02      	ldr	r3, [pc, #8]	; (80a17bc <HAL_USART_Is_Enabled+0xc>)
 80a17b4:	681b      	ldr	r3, [r3, #0]
 80a17b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a17b8:	9301      	str	r3, [sp, #4]
 80a17ba:	bd08      	pop	{r3, pc}
 80a17bc:	080601c4 	.word	0x080601c4

080a17c0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a17c0:	b508      	push	{r3, lr}
 80a17c2:	4b02      	ldr	r3, [pc, #8]	; (80a17cc <HAL_USART_Available_Data_For_Write+0xc>)
 80a17c4:	681b      	ldr	r3, [r3, #0]
 80a17c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a17c8:	9301      	str	r3, [sp, #4]
 80a17ca:	bd08      	pop	{r3, pc}
 80a17cc:	080601c4 	.word	0x080601c4

080a17d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a17d0:	b508      	push	{r3, lr}
 80a17d2:	4b02      	ldr	r3, [pc, #8]	; (80a17dc <HAL_USB_USART_Init+0xc>)
 80a17d4:	681b      	ldr	r3, [r3, #0]
 80a17d6:	681b      	ldr	r3, [r3, #0]
 80a17d8:	9301      	str	r3, [sp, #4]
 80a17da:	bd08      	pop	{r3, pc}
 80a17dc:	080601d8 	.word	0x080601d8

080a17e0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a17e0:	b508      	push	{r3, lr}
 80a17e2:	4b02      	ldr	r3, [pc, #8]	; (80a17ec <HAL_USB_USART_Begin+0xc>)
 80a17e4:	681b      	ldr	r3, [r3, #0]
 80a17e6:	685b      	ldr	r3, [r3, #4]
 80a17e8:	9301      	str	r3, [sp, #4]
 80a17ea:	bd08      	pop	{r3, pc}
 80a17ec:	080601d8 	.word	0x080601d8

080a17f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a17f0:	b508      	push	{r3, lr}
 80a17f2:	4b02      	ldr	r3, [pc, #8]	; (80a17fc <HAL_USB_USART_Available_Data+0xc>)
 80a17f4:	681b      	ldr	r3, [r3, #0]
 80a17f6:	691b      	ldr	r3, [r3, #16]
 80a17f8:	9301      	str	r3, [sp, #4]
 80a17fa:	bd08      	pop	{r3, pc}
 80a17fc:	080601d8 	.word	0x080601d8

080a1800 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1800:	b508      	push	{r3, lr}
 80a1802:	4b02      	ldr	r3, [pc, #8]	; (80a180c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1804:	681b      	ldr	r3, [r3, #0]
 80a1806:	695b      	ldr	r3, [r3, #20]
 80a1808:	9301      	str	r3, [sp, #4]
 80a180a:	bd08      	pop	{r3, pc}
 80a180c:	080601d8 	.word	0x080601d8

080a1810 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1810:	b508      	push	{r3, lr}
 80a1812:	4b02      	ldr	r3, [pc, #8]	; (80a181c <HAL_USB_USART_Receive_Data+0xc>)
 80a1814:	681b      	ldr	r3, [r3, #0]
 80a1816:	699b      	ldr	r3, [r3, #24]
 80a1818:	9301      	str	r3, [sp, #4]
 80a181a:	bd08      	pop	{r3, pc}
 80a181c:	080601d8 	.word	0x080601d8

080a1820 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1820:	b508      	push	{r3, lr}
 80a1822:	4b02      	ldr	r3, [pc, #8]	; (80a182c <HAL_USB_USART_Send_Data+0xc>)
 80a1824:	681b      	ldr	r3, [r3, #0]
 80a1826:	69db      	ldr	r3, [r3, #28]
 80a1828:	9301      	str	r3, [sp, #4]
 80a182a:	bd08      	pop	{r3, pc}
 80a182c:	080601d8 	.word	0x080601d8

080a1830 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1830:	b508      	push	{r3, lr}
 80a1832:	4b02      	ldr	r3, [pc, #8]	; (80a183c <HAL_USB_USART_Flush_Data+0xc>)
 80a1834:	681b      	ldr	r3, [r3, #0]
 80a1836:	6a1b      	ldr	r3, [r3, #32]
 80a1838:	9301      	str	r3, [sp, #4]
 80a183a:	bd08      	pop	{r3, pc}
 80a183c:	080601d8 	.word	0x080601d8

080a1840 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1840:	b508      	push	{r3, lr}
 80a1842:	4b02      	ldr	r3, [pc, #8]	; (80a184c <inet_gethostbyname+0xc>)
 80a1844:	681b      	ldr	r3, [r3, #0]
 80a1846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1848:	9301      	str	r3, [sp, #4]
 80a184a:	bd08      	pop	{r3, pc}
 80a184c:	080601c0 	.word	0x080601c0

080a1850 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1850:	b508      	push	{r3, lr}
 80a1852:	4b02      	ldr	r3, [pc, #8]	; (80a185c <set_system_mode+0xc>)
 80a1854:	681b      	ldr	r3, [r3, #0]
 80a1856:	685b      	ldr	r3, [r3, #4]
 80a1858:	9301      	str	r3, [sp, #4]
 80a185a:	bd08      	pop	{r3, pc}
 80a185c:	080601a4 	.word	0x080601a4

080a1860 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1860:	b508      	push	{r3, lr}
 80a1862:	4b02      	ldr	r3, [pc, #8]	; (80a186c <system_delay_ms+0xc>)
 80a1864:	681b      	ldr	r3, [r3, #0]
 80a1866:	695b      	ldr	r3, [r3, #20]
 80a1868:	9301      	str	r3, [sp, #4]
 80a186a:	bd08      	pop	{r3, pc}
 80a186c:	080601a4 	.word	0x080601a4

080a1870 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1870:	b508      	push	{r3, lr}
 80a1872:	4b03      	ldr	r3, [pc, #12]	; (80a1880 <system_ctrl_set_app_request_handler+0x10>)
 80a1874:	681b      	ldr	r3, [r3, #0]
 80a1876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a187a:	9301      	str	r3, [sp, #4]
 80a187c:	bd08      	pop	{r3, pc}
 80a187e:	0000      	.short	0x0000
 80a1880:	080601a4 	.word	0x080601a4

080a1884 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1884:	b508      	push	{r3, lr}
 80a1886:	4b03      	ldr	r3, [pc, #12]	; (80a1894 <system_ctrl_set_result+0x10>)
 80a1888:	681b      	ldr	r3, [r3, #0]
 80a188a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a188e:	9301      	str	r3, [sp, #4]
 80a1890:	bd08      	pop	{r3, pc}
 80a1892:	0000      	.short	0x0000
 80a1894:	080601a4 	.word	0x080601a4

080a1898 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a1898:	b508      	push	{r3, lr}
 80a189a:	4b02      	ldr	r3, [pc, #8]	; (80a18a4 <spark_variable+0xc>)
 80a189c:	681b      	ldr	r3, [r3, #0]
 80a189e:	681b      	ldr	r3, [r3, #0]
 80a18a0:	9301      	str	r3, [sp, #4]
 80a18a2:	bd08      	pop	{r3, pc}
 80a18a4:	080601cc 	.word	0x080601cc

080a18a8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a18a8:	b508      	push	{r3, lr}
 80a18aa:	4b02      	ldr	r3, [pc, #8]	; (80a18b4 <spark_function+0xc>)
 80a18ac:	681b      	ldr	r3, [r3, #0]
 80a18ae:	685b      	ldr	r3, [r3, #4]
 80a18b0:	9301      	str	r3, [sp, #4]
 80a18b2:	bd08      	pop	{r3, pc}
 80a18b4:	080601cc 	.word	0x080601cc

080a18b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a18b8:	b508      	push	{r3, lr}
 80a18ba:	4b02      	ldr	r3, [pc, #8]	; (80a18c4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a18bc:	681b      	ldr	r3, [r3, #0]
 80a18be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a18c0:	9301      	str	r3, [sp, #4]
 80a18c2:	bd08      	pop	{r3, pc}
 80a18c4:	080601cc 	.word	0x080601cc

080a18c8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a18c8:	b508      	push	{r3, lr}
 80a18ca:	4b02      	ldr	r3, [pc, #8]	; (80a18d4 <network_connect+0xc>)
 80a18cc:	681b      	ldr	r3, [r3, #0]
 80a18ce:	685b      	ldr	r3, [r3, #4]
 80a18d0:	9301      	str	r3, [sp, #4]
 80a18d2:	bd08      	pop	{r3, pc}
 80a18d4:	080601c8 	.word	0x080601c8

080a18d8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a18d8:	b508      	push	{r3, lr}
 80a18da:	4b02      	ldr	r3, [pc, #8]	; (80a18e4 <network_connecting+0xc>)
 80a18dc:	681b      	ldr	r3, [r3, #0]
 80a18de:	689b      	ldr	r3, [r3, #8]
 80a18e0:	9301      	str	r3, [sp, #4]
 80a18e2:	bd08      	pop	{r3, pc}
 80a18e4:	080601c8 	.word	0x080601c8

080a18e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a18e8:	b508      	push	{r3, lr}
 80a18ea:	4b02      	ldr	r3, [pc, #8]	; (80a18f4 <network_disconnect+0xc>)
 80a18ec:	681b      	ldr	r3, [r3, #0]
 80a18ee:	68db      	ldr	r3, [r3, #12]
 80a18f0:	9301      	str	r3, [sp, #4]
 80a18f2:	bd08      	pop	{r3, pc}
 80a18f4:	080601c8 	.word	0x080601c8

080a18f8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a18f8:	b508      	push	{r3, lr}
 80a18fa:	4b02      	ldr	r3, [pc, #8]	; (80a1904 <network_ready+0xc>)
 80a18fc:	681b      	ldr	r3, [r3, #0]
 80a18fe:	691b      	ldr	r3, [r3, #16]
 80a1900:	9301      	str	r3, [sp, #4]
 80a1902:	bd08      	pop	{r3, pc}
 80a1904:	080601c8 	.word	0x080601c8

080a1908 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1908:	b508      	push	{r3, lr}
 80a190a:	4b02      	ldr	r3, [pc, #8]	; (80a1914 <network_on+0xc>)
 80a190c:	681b      	ldr	r3, [r3, #0]
 80a190e:	695b      	ldr	r3, [r3, #20]
 80a1910:	9301      	str	r3, [sp, #4]
 80a1912:	bd08      	pop	{r3, pc}
 80a1914:	080601c8 	.word	0x080601c8

080a1918 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1918:	b508      	push	{r3, lr}
 80a191a:	4b02      	ldr	r3, [pc, #8]	; (80a1924 <network_off+0xc>)
 80a191c:	681b      	ldr	r3, [r3, #0]
 80a191e:	699b      	ldr	r3, [r3, #24]
 80a1920:	9301      	str	r3, [sp, #4]
 80a1922:	bd08      	pop	{r3, pc}
 80a1924:	080601c8 	.word	0x080601c8

080a1928 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1928:	b508      	push	{r3, lr}
 80a192a:	4b02      	ldr	r3, [pc, #8]	; (80a1934 <network_listen+0xc>)
 80a192c:	681b      	ldr	r3, [r3, #0]
 80a192e:	69db      	ldr	r3, [r3, #28]
 80a1930:	9301      	str	r3, [sp, #4]
 80a1932:	bd08      	pop	{r3, pc}
 80a1934:	080601c8 	.word	0x080601c8

080a1938 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1938:	b508      	push	{r3, lr}
 80a193a:	4b02      	ldr	r3, [pc, #8]	; (80a1944 <network_listening+0xc>)
 80a193c:	681b      	ldr	r3, [r3, #0]
 80a193e:	6a1b      	ldr	r3, [r3, #32]
 80a1940:	9301      	str	r3, [sp, #4]
 80a1942:	bd08      	pop	{r3, pc}
 80a1944:	080601c8 	.word	0x080601c8

080a1948 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1948:	b508      	push	{r3, lr}
 80a194a:	4b02      	ldr	r3, [pc, #8]	; (80a1954 <network_set_listen_timeout+0xc>)
 80a194c:	681b      	ldr	r3, [r3, #0]
 80a194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1950:	9301      	str	r3, [sp, #4]
 80a1952:	bd08      	pop	{r3, pc}
 80a1954:	080601c8 	.word	0x080601c8

080a1958 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1958:	b508      	push	{r3, lr}
 80a195a:	4b02      	ldr	r3, [pc, #8]	; (80a1964 <network_get_listen_timeout+0xc>)
 80a195c:	681b      	ldr	r3, [r3, #0]
 80a195e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1960:	9301      	str	r3, [sp, #4]
 80a1962:	bd08      	pop	{r3, pc}
 80a1964:	080601c8 	.word	0x080601c8

080a1968 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1968:	b508      	push	{r3, lr}
 80a196a:	4b02      	ldr	r3, [pc, #8]	; (80a1974 <malloc+0xc>)
 80a196c:	681b      	ldr	r3, [r3, #0]
 80a196e:	681b      	ldr	r3, [r3, #0]
 80a1970:	9301      	str	r3, [sp, #4]
 80a1972:	bd08      	pop	{r3, pc}
 80a1974:	080601a0 	.word	0x080601a0

080a1978 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1978:	b508      	push	{r3, lr}
 80a197a:	4b02      	ldr	r3, [pc, #8]	; (80a1984 <free+0xc>)
 80a197c:	681b      	ldr	r3, [r3, #0]
 80a197e:	685b      	ldr	r3, [r3, #4]
 80a1980:	9301      	str	r3, [sp, #4]
 80a1982:	bd08      	pop	{r3, pc}
 80a1984:	080601a0 	.word	0x080601a0

080a1988 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1988:	b508      	push	{r3, lr}
 80a198a:	4b02      	ldr	r3, [pc, #8]	; (80a1994 <realloc+0xc>)
 80a198c:	681b      	ldr	r3, [r3, #0]
 80a198e:	689b      	ldr	r3, [r3, #8]
 80a1990:	9301      	str	r3, [sp, #4]
 80a1992:	bd08      	pop	{r3, pc}
 80a1994:	080601a0 	.word	0x080601a0

080a1998 <_malloc_r>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1998:	b508      	push	{r3, lr}
 80a199a:	4b02      	ldr	r3, [pc, #8]	; (80a19a4 <_malloc_r+0xc>)
 80a199c:	681b      	ldr	r3, [r3, #0]
 80a199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a19a0:	9301      	str	r3, [sp, #4]
 80a19a2:	bd08      	pop	{r3, pc}
 80a19a4:	080601a0 	.word	0x080601a0

080a19a8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a19a8:	2100      	movs	r1, #0
 80a19aa:	f7ff bf59 	b.w	80a1860 <system_delay_ms>

080a19ae <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a19ae:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a19b0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a19b2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a19b4:	b113      	cbz	r3, 80a19bc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a19b6:	2203      	movs	r2, #3
 80a19b8:	4601      	mov	r1, r0
 80a19ba:	4798      	blx	r3
    }
 80a19bc:	4620      	mov	r0, r4
 80a19be:	bd10      	pop	{r4, pc}

080a19c0 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a19c0:	b510      	push	{r4, lr}
 80a19c2:	b088      	sub	sp, #32
 80a19c4:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a19c6:	4668      	mov	r0, sp
 80a19c8:	f000 facb 	bl	80a1f62 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a19cc:	4669      	mov	r1, sp
 80a19ce:	a804      	add	r0, sp, #16
 80a19d0:	f000 fae9 	bl	80a1fa6 <_ZN6StringC1ERKS_>
 80a19d4:	a804      	add	r0, sp, #16
 80a19d6:	47a0      	blx	r4
 80a19d8:	4604      	mov	r4, r0
 80a19da:	a804      	add	r0, sp, #16
 80a19dc:	f000 fa7a 	bl	80a1ed4 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a19e0:	4668      	mov	r0, sp
 80a19e2:	f000 fa77 	bl	80a1ed4 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a19e6:	4620      	mov	r0, r4
 80a19e8:	b008      	add	sp, #32
 80a19ea:	bd10      	pop	{r4, pc}

080a19ec <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a19ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a19ee:	4607      	mov	r7, r0
 80a19f0:	460e      	mov	r6, r1
 80a19f2:	4615      	mov	r5, r2
 80a19f4:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a19f6:	2410      	movs	r4, #16
 80a19f8:	4622      	mov	r2, r4
 80a19fa:	2100      	movs	r1, #0
 80a19fc:	4668      	mov	r0, sp
 80a19fe:	f001 fce8 	bl	80a33d2 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1a02:	2200      	movs	r2, #0
 80a1a04:	4669      	mov	r1, sp
 80a1a06:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a1a08:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a1a0c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a1a0e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a1a10:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1a12:	f7ff ff49 	bl	80a18a8 <spark_function>
}
 80a1a16:	b005      	add	sp, #20
 80a1a18:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1a1a <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a1a1a:	4770      	bx	lr

080a1a1c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a1e:	4606      	mov	r6, r0
 80a1a20:	4615      	mov	r5, r2
 80a1a22:	460c      	mov	r4, r1
 80a1a24:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1a26:	42bc      	cmp	r4, r7
 80a1a28:	d006      	beq.n	80a1a38 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1a2a:	6833      	ldr	r3, [r6, #0]
 80a1a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1a30:	689b      	ldr	r3, [r3, #8]
 80a1a32:	4630      	mov	r0, r6
 80a1a34:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1a36:	e7f6      	b.n	80a1a26 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1a38:	4628      	mov	r0, r5
 80a1a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1a3c <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1a3c:	2200      	movs	r2, #0
 80a1a3e:	7c00      	ldrb	r0, [r0, #16]
 80a1a40:	f7ff be3c 	b.w	80a16bc <HAL_I2C_Write_Data>

080a1a44 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1a44:	2100      	movs	r1, #0
 80a1a46:	7c00      	ldrb	r0, [r0, #16]
 80a1a48:	f7ff be40 	b.w	80a16cc <HAL_I2C_Available_Data>

080a1a4c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1a4c:	2100      	movs	r1, #0
 80a1a4e:	7c00      	ldrb	r0, [r0, #16]
 80a1a50:	f7ff be44 	b.w	80a16dc <HAL_I2C_Read_Data>

080a1a54 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1a54:	2100      	movs	r1, #0
 80a1a56:	7c00      	ldrb	r0, [r0, #16]
 80a1a58:	f7ff be48 	b.w	80a16ec <HAL_I2C_Peek_Data>

080a1a5c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1a5c:	2100      	movs	r1, #0
 80a1a5e:	7c00      	ldrb	r0, [r0, #16]
 80a1a60:	f7ff be4c 	b.w	80a16fc <HAL_I2C_Flush_Data>

080a1a64 <_ZN7TwoWireD0Ev>:
 80a1a64:	b510      	push	{r4, lr}
 80a1a66:	4604      	mov	r4, r0
 80a1a68:	2114      	movs	r1, #20
 80a1a6a:	f000 fe2c 	bl	80a26c6 <_ZdlPvj>
 80a1a6e:	4620      	mov	r0, r4
 80a1a70:	bd10      	pop	{r4, pc}
	...

080a1a74 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a1a74:	b510      	push	{r4, lr}
 80a1a76:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1a78:	2300      	movs	r3, #0
 80a1a7a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1a7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1a80:	60a3      	str	r3, [r4, #8]
 80a1a82:	4b04      	ldr	r3, [pc, #16]	; (80a1a94 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a1a84:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a1a86:	4608      	mov	r0, r1
 80a1a88:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a1a8a:	4611      	mov	r1, r2
 80a1a8c:	f7ff fe46 	bl	80a171c <HAL_I2C_Init>
}
 80a1a90:	4620      	mov	r0, r4
 80a1a92:	bd10      	pop	{r4, pc}
 80a1a94:	080a4f6c 	.word	0x080a4f6c

080a1a98 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1a98:	2100      	movs	r1, #0
 80a1a9a:	7c00      	ldrb	r0, [r0, #16]
 80a1a9c:	f7ff be36 	b.w	80a170c <HAL_I2C_Is_Enabled>

080a1aa0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1aa0:	4770      	bx	lr

080a1aa2 <_ZN9IPAddressD0Ev>:
 80a1aa2:	b510      	push	{r4, lr}
 80a1aa4:	4604      	mov	r4, r0
 80a1aa6:	2118      	movs	r1, #24
 80a1aa8:	f000 fe0d 	bl	80a26c6 <_ZdlPvj>
 80a1aac:	4620      	mov	r0, r4
 80a1aae:	bd10      	pop	{r4, pc}

080a1ab0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1ab2:	460f      	mov	r7, r1
 80a1ab4:	f100 0608 	add.w	r6, r0, #8
 80a1ab8:	1d05      	adds	r5, r0, #4
 80a1aba:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1abc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1ac0:	220a      	movs	r2, #10
 80a1ac2:	4638      	mov	r0, r7
 80a1ac4:	f000 f901 	bl	80a1cca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1ac8:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1aca:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1acc:	d007      	beq.n	80a1ade <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1ace:	2c00      	cmp	r4, #0
 80a1ad0:	d0f4      	beq.n	80a1abc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1ad2:	212e      	movs	r1, #46	; 0x2e
 80a1ad4:	4638      	mov	r0, r7
 80a1ad6:	f000 f8df 	bl	80a1c98 <_ZN5Print5printEc>
 80a1ada:	4404      	add	r4, r0
 80a1adc:	e7ee      	b.n	80a1abc <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1ade:	4620      	mov	r0, r4
 80a1ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1ae4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1ae4:	b510      	push	{r4, lr}
 80a1ae6:	4604      	mov	r4, r0
 80a1ae8:	4b04      	ldr	r3, [pc, #16]	; (80a1afc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1aea:	2211      	movs	r2, #17
 80a1aec:	f840 3b04 	str.w	r3, [r0], #4
 80a1af0:	2100      	movs	r1, #0
 80a1af2:	f001 fc6e 	bl	80a33d2 <memset>
{
    clear();
}
 80a1af6:	4620      	mov	r0, r4
 80a1af8:	bd10      	pop	{r4, pc}
 80a1afa:	bf00      	nop
 80a1afc:	080a4f94 	.word	0x080a4f94

080a1b00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1b00:	4603      	mov	r3, r0
 80a1b02:	4a07      	ldr	r2, [pc, #28]	; (80a1b20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1b04:	b510      	push	{r4, lr}
 80a1b06:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1b0a:	f101 0210 	add.w	r2, r1, #16
 80a1b0e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1b12:	4291      	cmp	r1, r2
 80a1b14:	f843 4b04 	str.w	r4, [r3], #4
 80a1b18:	d1f9      	bne.n	80a1b0e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1b1a:	780a      	ldrb	r2, [r1, #0]
 80a1b1c:	701a      	strb	r2, [r3, #0]
}
 80a1b1e:	bd10      	pop	{r4, pc}
 80a1b20:	080a4f94 	.word	0x080a4f94

080a1b24 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1b24:	4a02      	ldr	r2, [pc, #8]	; (80a1b30 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1b26:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1b28:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1b2a:	2204      	movs	r2, #4
 80a1b2c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1b2e:	4770      	bx	lr
 80a1b30:	080a4f94 	.word	0x080a4f94

080a1b34 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1b34:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1b36:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1b3a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1b3e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1b42:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1b46:	2304      	movs	r3, #4
 80a1b48:	6041      	str	r1, [r0, #4]
 80a1b4a:	7503      	strb	r3, [r0, #20]
 80a1b4c:	bd10      	pop	{r4, pc}
	...

080a1b50 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1b52:	4d04      	ldr	r5, [pc, #16]	; (80a1b64 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1b54:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1b56:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1b5a:	9500      	str	r5, [sp, #0]
 80a1b5c:	f7ff ffea 	bl	80a1b34 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1b60:	b003      	add	sp, #12
 80a1b62:	bd30      	pop	{r4, r5, pc}
 80a1b64:	080a4f94 	.word	0x080a4f94

080a1b68 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1b68:	4a01      	ldr	r2, [pc, #4]	; (80a1b70 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1b6a:	4b02      	ldr	r3, [pc, #8]	; (80a1b74 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1b6c:	601a      	str	r2, [r3, #0]
 80a1b6e:	4770      	bx	lr
 80a1b70:	080a5016 	.word	0x080a5016
 80a1b74:	200000e0 	.word	0x200000e0

080a1b78 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1b78:	2300      	movs	r3, #0
 80a1b7a:	461a      	mov	r2, r3
 80a1b7c:	6840      	ldr	r0, [r0, #4]
 80a1b7e:	f7ff bea3 	b.w	80a18c8 <network_connect>

080a1b82 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1b82:	2200      	movs	r2, #0
 80a1b84:	2102      	movs	r1, #2
 80a1b86:	6840      	ldr	r0, [r0, #4]
 80a1b88:	f7ff beae 	b.w	80a18e8 <network_disconnect>

080a1b8c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1b8c:	2200      	movs	r2, #0
 80a1b8e:	4611      	mov	r1, r2
 80a1b90:	6840      	ldr	r0, [r0, #4]
 80a1b92:	f7ff bea1 	b.w	80a18d8 <network_connecting>

080a1b96 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1b96:	2200      	movs	r2, #0
 80a1b98:	4611      	mov	r1, r2
 80a1b9a:	6840      	ldr	r0, [r0, #4]
 80a1b9c:	f7ff beac 	b.w	80a18f8 <network_ready>

080a1ba0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1ba0:	2300      	movs	r3, #0
 80a1ba2:	461a      	mov	r2, r3
 80a1ba4:	4619      	mov	r1, r3
 80a1ba6:	6840      	ldr	r0, [r0, #4]
 80a1ba8:	f7ff beae 	b.w	80a1908 <network_on>

080a1bac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1bac:	2300      	movs	r3, #0
 80a1bae:	461a      	mov	r2, r3
 80a1bb0:	4619      	mov	r1, r3
 80a1bb2:	6840      	ldr	r0, [r0, #4]
 80a1bb4:	f7ff beb0 	b.w	80a1918 <network_off>

080a1bb8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1bb8:	2200      	movs	r2, #0
 80a1bba:	f081 0101 	eor.w	r1, r1, #1
 80a1bbe:	6840      	ldr	r0, [r0, #4]
 80a1bc0:	f7ff beb2 	b.w	80a1928 <network_listen>

080a1bc4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1bc4:	2200      	movs	r2, #0
 80a1bc6:	6840      	ldr	r0, [r0, #4]
 80a1bc8:	f7ff bebe 	b.w	80a1948 <network_set_listen_timeout>

080a1bcc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1bcc:	2200      	movs	r2, #0
 80a1bce:	4611      	mov	r1, r2
 80a1bd0:	6840      	ldr	r0, [r0, #4]
 80a1bd2:	f7ff bec1 	b.w	80a1958 <network_get_listen_timeout>

080a1bd6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1bd6:	2200      	movs	r2, #0
 80a1bd8:	4611      	mov	r1, r2
 80a1bda:	6840      	ldr	r0, [r0, #4]
 80a1bdc:	f7ff beac 	b.w	80a1938 <network_listening>

080a1be0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1be0:	b570      	push	{r4, r5, r6, lr}
 80a1be2:	4616      	mov	r6, r2
 80a1be4:	b08e      	sub	sp, #56	; 0x38
 80a1be6:	4604      	mov	r4, r0
    IPAddress addr;
 80a1be8:	a808      	add	r0, sp, #32
 80a1bea:	f7ff ff7b 	bl	80a1ae4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1bee:	2211      	movs	r2, #17
 80a1bf0:	2100      	movs	r1, #0
 80a1bf2:	a803      	add	r0, sp, #12
 80a1bf4:	f001 fbed 	bl	80a33d2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1bf8:	4630      	mov	r0, r6
 80a1bfa:	f001 fc25 	bl	80a3448 <strlen>
 80a1bfe:	2500      	movs	r5, #0
 80a1c00:	4b0a      	ldr	r3, [pc, #40]	; (80a1c2c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1c02:	9500      	str	r5, [sp, #0]
 80a1c04:	b281      	uxth	r1, r0
 80a1c06:	685b      	ldr	r3, [r3, #4]
 80a1c08:	aa03      	add	r2, sp, #12
 80a1c0a:	4630      	mov	r0, r6
 80a1c0c:	f7ff fe18 	bl	80a1840 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1c10:	b120      	cbz	r0, 80a1c1c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1c12:	4629      	mov	r1, r5
 80a1c14:	4620      	mov	r0, r4
 80a1c16:	f7ff ff85 	bl	80a1b24 <_ZN9IPAddressC1Em>
 80a1c1a:	e003      	b.n	80a1c24 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1c1c:	a903      	add	r1, sp, #12
 80a1c1e:	4620      	mov	r0, r4
 80a1c20:	f7ff ff6e 	bl	80a1b00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1c24:	4620      	mov	r0, r4
 80a1c26:	b00e      	add	sp, #56	; 0x38
 80a1c28:	bd70      	pop	{r4, r5, r6, pc}
 80a1c2a:	bf00      	nop
 80a1c2c:	20000568 	.word	0x20000568

080a1c30 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1c30:	4b02      	ldr	r3, [pc, #8]	; (80a1c3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1c32:	4a03      	ldr	r2, [pc, #12]	; (80a1c40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1c34:	601a      	str	r2, [r3, #0]
 80a1c36:	2200      	movs	r2, #0
 80a1c38:	605a      	str	r2, [r3, #4]
 80a1c3a:	4770      	bx	lr
 80a1c3c:	200000e4 	.word	0x200000e4
 80a1c40:	080a508c 	.word	0x080a508c

080a1c44 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c46:	4606      	mov	r6, r0
 80a1c48:	460d      	mov	r5, r1
 80a1c4a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1c4c:	2400      	movs	r4, #0
  while (size--) {
 80a1c4e:	42bd      	cmp	r5, r7
 80a1c50:	d00c      	beq.n	80a1c6c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1c52:	6833      	ldr	r3, [r6, #0]
 80a1c54:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1c58:	689b      	ldr	r3, [r3, #8]
 80a1c5a:	4630      	mov	r0, r6
 80a1c5c:	4798      	blx	r3
     if (chunk>=0)
 80a1c5e:	2800      	cmp	r0, #0
 80a1c60:	db01      	blt.n	80a1c66 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1c62:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1c64:	e7f3      	b.n	80a1c4e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1c66:	2c00      	cmp	r4, #0
 80a1c68:	bf08      	it	eq
 80a1c6a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1c6c:	4620      	mov	r0, r4
 80a1c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c70 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1c70:	b570      	push	{r4, r5, r6, lr}
 80a1c72:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1c74:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1c76:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1c78:	b149      	cbz	r1, 80a1c8e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1c7a:	f001 fbe5 	bl	80a3448 <strlen>
 80a1c7e:	682b      	ldr	r3, [r5, #0]
 80a1c80:	4602      	mov	r2, r0
 80a1c82:	4621      	mov	r1, r4
 80a1c84:	4628      	mov	r0, r5
    }
 80a1c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1c8a:	68db      	ldr	r3, [r3, #12]
 80a1c8c:	4718      	bx	r3
    }
 80a1c8e:	bd70      	pop	{r4, r5, r6, pc}

080a1c90 <_ZN5Print5printEPKc>:
 80a1c90:	b508      	push	{r3, lr}
 80a1c92:	f7ff ffed 	bl	80a1c70 <_ZN5Print5writeEPKc>
 80a1c96:	bd08      	pop	{r3, pc}

080a1c98 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1c98:	6803      	ldr	r3, [r0, #0]
 80a1c9a:	689b      	ldr	r3, [r3, #8]
 80a1c9c:	4718      	bx	r3

080a1c9e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1c9e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1ca0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1ca2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1ca4:	f7ff fff8 	bl	80a1c98 <_ZN5Print5printEc>
  n += print('\n');
 80a1ca8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1caa:	4604      	mov	r4, r0
  n += print('\n');
 80a1cac:	4628      	mov	r0, r5
 80a1cae:	f7ff fff3 	bl	80a1c98 <_ZN5Print5printEc>
  return n;
}
 80a1cb2:	4420      	add	r0, r4
 80a1cb4:	bd38      	pop	{r3, r4, r5, pc}

080a1cb6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1cb6:	b538      	push	{r3, r4, r5, lr}
 80a1cb8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1cba:	f7ff ffd9 	bl	80a1c70 <_ZN5Print5writeEPKc>
 80a1cbe:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1cc0:	4628      	mov	r0, r5
 80a1cc2:	f7ff ffec 	bl	80a1c9e <_ZN5Print7printlnEv>
  return n;
}
 80a1cc6:	4420      	add	r0, r4
 80a1cc8:	bd38      	pop	{r3, r4, r5, pc}

080a1cca <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1cca:	2a01      	cmp	r2, #1
 80a1ccc:	bf98      	it	ls
 80a1cce:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1cd0:	b530      	push	{r4, r5, lr}
 80a1cd2:	460b      	mov	r3, r1
 80a1cd4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1cd6:	2100      	movs	r1, #0
 80a1cd8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1cdc:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a1ce0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a1ce4:	fb05 3312 	mls	r3, r5, r2, r3
 80a1ce8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1cea:	2b09      	cmp	r3, #9
 80a1cec:	bf94      	ite	ls
 80a1cee:	3330      	addls	r3, #48	; 0x30
 80a1cf0:	3337      	addhi	r3, #55	; 0x37
 80a1cf2:	b2db      	uxtb	r3, r3
 80a1cf4:	4621      	mov	r1, r4
 80a1cf6:	f804 3901 	strb.w	r3, [r4], #-1
 80a1cfa:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1cfc:	2d00      	cmp	r5, #0
 80a1cfe:	d1ef      	bne.n	80a1ce0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1d00:	f7ff ffb6 	bl	80a1c70 <_ZN5Print5writeEPKc>
}
 80a1d04:	b00b      	add	sp, #44	; 0x2c
 80a1d06:	bd30      	pop	{r4, r5, pc}

080a1d08 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1d0c:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1d0e:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1d10:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1d12:	4617      	mov	r7, r2
 80a1d14:	461e      	mov	r6, r3
 80a1d16:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1d1a:	f001 fa8b 	bl	80a3234 <__aeabi_dcmpun>
 80a1d1e:	b108      	cbz	r0, 80a1d24 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1d20:	494d      	ldr	r1, [pc, #308]	; (80a1e58 <_ZN5Print10printFloatEdh+0x150>)
 80a1d22:	e012      	b.n	80a1d4a <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1d24:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a1d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a1d2c:	4b4b      	ldr	r3, [pc, #300]	; (80a1e5c <_ZN5Print10printFloatEdh+0x154>)
 80a1d2e:	4638      	mov	r0, r7
 80a1d30:	4621      	mov	r1, r4
 80a1d32:	f001 fa7f 	bl	80a3234 <__aeabi_dcmpun>
 80a1d36:	b968      	cbnz	r0, 80a1d54 <_ZN5Print10printFloatEdh+0x4c>
 80a1d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a1d3c:	4b47      	ldr	r3, [pc, #284]	; (80a1e5c <_ZN5Print10printFloatEdh+0x154>)
 80a1d3e:	4638      	mov	r0, r7
 80a1d40:	4621      	mov	r1, r4
 80a1d42:	f001 fa59 	bl	80a31f8 <__aeabi_dcmple>
 80a1d46:	b928      	cbnz	r0, 80a1d54 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1d48:	4945      	ldr	r1, [pc, #276]	; (80a1e60 <_ZN5Print10printFloatEdh+0x158>)
 80a1d4a:	4640      	mov	r0, r8
 80a1d4c:	f7ff ff90 	bl	80a1c70 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a1d54:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1d58:	4b42      	ldr	r3, [pc, #264]	; (80a1e64 <_ZN5Print10printFloatEdh+0x15c>)
 80a1d5a:	4638      	mov	r0, r7
 80a1d5c:	4631      	mov	r1, r6
 80a1d5e:	f001 fa5f 	bl	80a3220 <__aeabi_dcmpgt>
 80a1d62:	b108      	cbz	r0, 80a1d68 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1d64:	4940      	ldr	r1, [pc, #256]	; (80a1e68 <_ZN5Print10printFloatEdh+0x160>)
 80a1d66:	e7f0      	b.n	80a1d4a <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a1d68:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1d6c:	4b3f      	ldr	r3, [pc, #252]	; (80a1e6c <_ZN5Print10printFloatEdh+0x164>)
 80a1d6e:	4638      	mov	r0, r7
 80a1d70:	4631      	mov	r1, r6
 80a1d72:	f001 fa37 	bl	80a31e4 <__aeabi_dcmplt>
 80a1d76:	2800      	cmp	r0, #0
 80a1d78:	d1f4      	bne.n	80a1d64 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a1d7a:	2200      	movs	r2, #0
 80a1d7c:	2300      	movs	r3, #0
 80a1d7e:	4638      	mov	r0, r7
 80a1d80:	4631      	mov	r1, r6
 80a1d82:	f001 fa2f 	bl	80a31e4 <__aeabi_dcmplt>
 80a1d86:	b138      	cbz	r0, 80a1d98 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a1d88:	212d      	movs	r1, #45	; 0x2d
 80a1d8a:	4640      	mov	r0, r8
 80a1d8c:	f7ff ff84 	bl	80a1c98 <_ZN5Print5printEc>
     number = -number;
 80a1d90:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a1d94:	4604      	mov	r4, r0
 80a1d96:	e000      	b.n	80a1d9a <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1d98:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1d9a:	4935      	ldr	r1, [pc, #212]	; (80a1e70 <_ZN5Print10printFloatEdh+0x168>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1d9c:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1da0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a1da2:	fa5f f389 	uxtb.w	r3, r9
 80a1da6:	429d      	cmp	r5, r3
 80a1da8:	d906      	bls.n	80a1db8 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a1daa:	2200      	movs	r2, #0
 80a1dac:	4b31      	ldr	r3, [pc, #196]	; (80a1e74 <_ZN5Print10printFloatEdh+0x16c>)
 80a1dae:	f001 f8d1 	bl	80a2f54 <__aeabi_ddiv>
 80a1db2:	f109 0901 	add.w	r9, r9, #1
 80a1db6:	e7f4      	b.n	80a1da2 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a1db8:	463a      	mov	r2, r7
 80a1dba:	4633      	mov	r3, r6
 80a1dbc:	f000 fdee 	bl	80a299c <__adddf3>
 80a1dc0:	460f      	mov	r7, r1
 80a1dc2:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1dc4:	f001 fa74 	bl	80a32b0 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1dc8:	220a      	movs	r2, #10
 80a1dca:	4601      	mov	r1, r0
 80a1dcc:	4681      	mov	r9, r0
 80a1dce:	4640      	mov	r0, r8
 80a1dd0:	f7ff ff7b 	bl	80a1cca <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1dd4:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a1dd6:	b3e5      	cbz	r5, 80a1e52 <_ZN5Print10printFloatEdh+0x14a>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a1dd8:	4648      	mov	r0, r9
 80a1dda:	f000 ff1b 	bl	80a2c14 <__aeabi_ui2d>
 80a1dde:	4602      	mov	r2, r0
 80a1de0:	460b      	mov	r3, r1
 80a1de2:	4630      	mov	r0, r6
 80a1de4:	4639      	mov	r1, r7
 80a1de6:	f000 fdd7 	bl	80a2998 <__aeabi_dsub>
 80a1dea:	4606      	mov	r6, r0
 80a1dec:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1dee:	4640      	mov	r0, r8
 80a1df0:	4921      	ldr	r1, [pc, #132]	; (80a1e78 <_ZN5Print10printFloatEdh+0x170>)
 80a1df2:	f7ff ff3d 	bl	80a1c70 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a1df6:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a1df8:	2200      	movs	r2, #0
 80a1dfa:	4b1e      	ldr	r3, [pc, #120]	; (80a1e74 <_ZN5Print10printFloatEdh+0x16c>)
 80a1dfc:	4630      	mov	r0, r6
 80a1dfe:	4639      	mov	r1, r7
 80a1e00:	f000 ff7e 	bl	80a2d00 <__aeabi_dmul>
 80a1e04:	4606      	mov	r6, r0
 80a1e06:	460f      	mov	r7, r1
    int toPrint = int(remainder);
 80a1e08:	f001 fa2a 	bl	80a3260 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a1e0c:	f1b0 0a00 	subs.w	sl, r0, #0
 80a1e10:	da07      	bge.n	80a1e22 <_ZN5Print10printFloatEdh+0x11a>
            t = print('-');
 80a1e12:	212d      	movs	r1, #45	; 0x2d
 80a1e14:	4640      	mov	r0, r8
 80a1e16:	f7ff ff3f 	bl	80a1c98 <_ZN5Print5printEc>
            val = -n;
 80a1e1a:	f1ca 0100 	rsb	r1, sl, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 80a1e1e:	4681      	mov	r9, r0
 80a1e20:	e002      	b.n	80a1e28 <_ZN5Print10printFloatEdh+0x120>
            val = -n;
        } else {
            val = n;
 80a1e22:	4651      	mov	r1, sl
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 80a1e24:	f04f 0900 	mov.w	r9, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1e28:	220a      	movs	r2, #10
 80a1e2a:	4640      	mov	r0, r8
 80a1e2c:	f7ff ff4d 	bl	80a1cca <_ZN5Print11printNumberEmh>
    n += print(toPrint);
 80a1e30:	4448      	add	r0, r9
 80a1e32:	4404      	add	r4, r0
    remainder -= toPrint;
 80a1e34:	4650      	mov	r0, sl
 80a1e36:	f000 fefd 	bl	80a2c34 <__aeabi_i2d>
 80a1e3a:	4602      	mov	r2, r0
 80a1e3c:	460b      	mov	r3, r1
 80a1e3e:	4630      	mov	r0, r6
 80a1e40:	4639      	mov	r1, r7
 80a1e42:	f000 fda9 	bl	80a2998 <__aeabi_dsub>
 80a1e46:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1e48:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a1e4c:	4606      	mov	r6, r0
 80a1e4e:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1e50:	d1d2      	bne.n	80a1df8 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1e52:	4620      	mov	r0, r4
 80a1e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1e58:	080a50b8 	.word	0x080a50b8
 80a1e5c:	7fefffff 	.word	0x7fefffff
 80a1e60:	080a50c2 	.word	0x080a50c2
 80a1e64:	41efffff 	.word	0x41efffff
 80a1e68:	080a50bc 	.word	0x080a50bc
 80a1e6c:	c1efffff 	.word	0xc1efffff
 80a1e70:	3fe00000 	.word	0x3fe00000
 80a1e74:	40240000 	.word	0x40240000
 80a1e78:	080a50c0 	.word	0x080a50c0

080a1e7c <_ZN5Print5printEdi>:
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a1e7c:	f89d 1000 	ldrb.w	r1, [sp]
 80a1e80:	9100      	str	r1, [sp, #0]
 80a1e82:	f7ff bf41 	b.w	80a1d08 <_ZN5Print10printFloatEdh>

080a1e86 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1e86:	b510      	push	{r4, lr}
 80a1e88:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1e8a:	f7ff fd90 	bl	80a19ae <_ZNSt14_Function_baseD1Ev>
 80a1e8e:	4620      	mov	r0, r4
 80a1e90:	bd10      	pop	{r4, pc}
	...

080a1e94 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1e94:	4803      	ldr	r0, [pc, #12]	; (80a1ea4 <_GLOBAL__sub_I_RGB+0x10>)
 80a1e96:	2300      	movs	r3, #0
 80a1e98:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1e9a:	4a03      	ldr	r2, [pc, #12]	; (80a1ea8 <_GLOBAL__sub_I_RGB+0x14>)
 80a1e9c:	4903      	ldr	r1, [pc, #12]	; (80a1eac <_GLOBAL__sub_I_RGB+0x18>)
 80a1e9e:	f000 bc0d 	b.w	80a26bc <__aeabi_atexit>
 80a1ea2:	bf00      	nop
 80a1ea4:	200000ec 	.word	0x200000ec
 80a1ea8:	200000b0 	.word	0x200000b0
 80a1eac:	080a1e87 	.word	0x080a1e87

080a1eb0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1eb0:	b570      	push	{r4, r5, r6, lr}
 80a1eb2:	4604      	mov	r4, r0
 80a1eb4:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1eb6:	2500      	movs	r5, #0
 80a1eb8:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1ebc:	f7ff fba6 	bl	80a160c <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a1ec0:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a1ec2:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a1ec4:	f7ff fc34 	bl	80a1730 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1ec8:	6065      	str	r5, [r4, #4]
}
 80a1eca:	4620      	mov	r0, r4
 80a1ecc:	bd70      	pop	{r4, r5, r6, pc}

080a1ece <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a1ece:	7800      	ldrb	r0, [r0, #0]
 80a1ed0:	f7ff bc36 	b.w	80a1740 <HAL_SPI_Is_Enabled>

080a1ed4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1ed4:	b510      	push	{r4, lr}
 80a1ed6:	4604      	mov	r4, r0
{
	free(buffer);
 80a1ed8:	6800      	ldr	r0, [r0, #0]
 80a1eda:	f7ff fd4d 	bl	80a1978 <free>
}
 80a1ede:	4620      	mov	r0, r4
 80a1ee0:	bd10      	pop	{r4, pc}

080a1ee2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1ee2:	b510      	push	{r4, lr}
 80a1ee4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1ee6:	6800      	ldr	r0, [r0, #0]
 80a1ee8:	b108      	cbz	r0, 80a1eee <_ZN6String10invalidateEv+0xc>
 80a1eea:	f7ff fd45 	bl	80a1978 <free>
	buffer = NULL;
 80a1eee:	2300      	movs	r3, #0
 80a1ef0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1ef2:	60a3      	str	r3, [r4, #8]
 80a1ef4:	6063      	str	r3, [r4, #4]
 80a1ef6:	bd10      	pop	{r4, pc}

080a1ef8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1ef8:	b538      	push	{r3, r4, r5, lr}
 80a1efa:	4604      	mov	r4, r0
 80a1efc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1efe:	6800      	ldr	r0, [r0, #0]
 80a1f00:	3101      	adds	r1, #1
 80a1f02:	f7ff fd41 	bl	80a1988 <realloc>
	if (newbuffer) {
 80a1f06:	b110      	cbz	r0, 80a1f0e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1f08:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1f0c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1f0e:	bd38      	pop	{r3, r4, r5, pc}

080a1f10 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1f10:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1f12:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1f14:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1f16:	b113      	cbz	r3, 80a1f1e <_ZN6String7reserveEj+0xe>
 80a1f18:	6843      	ldr	r3, [r0, #4]
 80a1f1a:	428b      	cmp	r3, r1
 80a1f1c:	d207      	bcs.n	80a1f2e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1f1e:	4620      	mov	r0, r4
 80a1f20:	f7ff ffea 	bl	80a1ef8 <_ZN6String12changeBufferEj>
 80a1f24:	b120      	cbz	r0, 80a1f30 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1f26:	68a3      	ldr	r3, [r4, #8]
 80a1f28:	b90b      	cbnz	r3, 80a1f2e <_ZN6String7reserveEj+0x1e>
 80a1f2a:	6822      	ldr	r2, [r4, #0]
 80a1f2c:	7013      	strb	r3, [r2, #0]
 80a1f2e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1f30:	bd10      	pop	{r4, pc}

080a1f32 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1f32:	b570      	push	{r4, r5, r6, lr}
 80a1f34:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1f36:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1f38:	4604      	mov	r4, r0
 80a1f3a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1f3c:	f7ff ffe8 	bl	80a1f10 <_ZN6String7reserveEj>
 80a1f40:	b918      	cbnz	r0, 80a1f4a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1f42:	4620      	mov	r0, r4
 80a1f44:	f7ff ffcd 	bl	80a1ee2 <_ZN6String10invalidateEv>
		return *this;
 80a1f48:	e009      	b.n	80a1f5e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1f4a:	462a      	mov	r2, r5
 80a1f4c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1f4e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1f50:	6820      	ldr	r0, [r4, #0]
 80a1f52:	f001 fa33 	bl	80a33bc <memcpy>
	buffer[len] = 0;
 80a1f56:	6822      	ldr	r2, [r4, #0]
 80a1f58:	68a3      	ldr	r3, [r4, #8]
 80a1f5a:	2100      	movs	r1, #0
 80a1f5c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1f5e:	4620      	mov	r0, r4
 80a1f60:	bd70      	pop	{r4, r5, r6, pc}

080a1f62 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1f62:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1f64:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1f66:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1f68:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1f6a:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1f6c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1f6e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1f70:	460d      	mov	r5, r1
 80a1f72:	b139      	cbz	r1, 80a1f84 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1f74:	4608      	mov	r0, r1
 80a1f76:	f001 fa67 	bl	80a3448 <strlen>
 80a1f7a:	4629      	mov	r1, r5
 80a1f7c:	4602      	mov	r2, r0
 80a1f7e:	4620      	mov	r0, r4
 80a1f80:	f7ff ffd7 	bl	80a1f32 <_ZN6String4copyEPKcj>
}
 80a1f84:	4620      	mov	r0, r4
 80a1f86:	bd38      	pop	{r3, r4, r5, pc}

080a1f88 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1f88:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a1f8a:	b510      	push	{r4, lr}
 80a1f8c:	460b      	mov	r3, r1
 80a1f8e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1f90:	d007      	beq.n	80a1fa2 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1f92:	6809      	ldr	r1, [r1, #0]
 80a1f94:	b119      	cbz	r1, 80a1f9e <_ZN6StringaSERKS_+0x16>
 80a1f96:	689a      	ldr	r2, [r3, #8]
 80a1f98:	f7ff ffcb 	bl	80a1f32 <_ZN6String4copyEPKcj>
 80a1f9c:	e001      	b.n	80a1fa2 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a1f9e:	f7ff ffa0 	bl	80a1ee2 <_ZN6String10invalidateEv>

	return *this;
}
 80a1fa2:	4620      	mov	r0, r4
 80a1fa4:	bd10      	pop	{r4, pc}

080a1fa6 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a1fa6:	b510      	push	{r4, lr}
 80a1fa8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1faa:	2300      	movs	r3, #0
 80a1fac:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1fae:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1fb0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1fb2:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1fb4:	f7ff ffe8 	bl	80a1f88 <_ZN6StringaSERKS_>
}
 80a1fb8:	4620      	mov	r0, r4
 80a1fba:	bd10      	pop	{r4, pc}

080a1fbc <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1fbc:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1fbe:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1fc0:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1fc2:	b912      	cbnz	r2, 80a1fca <_ZNK6String6equalsEPKc+0xe>
 80a1fc4:	b919      	cbnz	r1, 80a1fce <_ZNK6String6equalsEPKc+0x12>
 80a1fc6:	2001      	movs	r0, #1
 80a1fc8:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a1fca:	b911      	cbnz	r1, 80a1fd2 <_ZNK6String6equalsEPKc+0x16>
 80a1fcc:	6803      	ldr	r3, [r0, #0]
 80a1fce:	7818      	ldrb	r0, [r3, #0]
 80a1fd0:	e002      	b.n	80a1fd8 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a1fd2:	6800      	ldr	r0, [r0, #0]
 80a1fd4:	f001 fa2e 	bl	80a3434 <strcmp>
 80a1fd8:	fab0 f080 	clz	r0, r0
 80a1fdc:	0940      	lsrs	r0, r0, #5
}
 80a1fde:	bd08      	pop	{r3, pc}

080a1fe0 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
 80a1fe0:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 80a1fe2:	6800      	ldr	r0, [r0, #0]
 80a1fe4:	b120      	cbz	r0, 80a1ff0 <_ZNK6String7toFloatEv+0x10>
 80a1fe6:	f001 f9d3 	bl	80a3390 <atof>
 80a1fea:	f001 f981 	bl	80a32f0 <__aeabi_d2f>
 80a1fee:	bd08      	pop	{r3, pc}
	return 0;
 80a1ff0:	2000      	movs	r0, #0
}
 80a1ff2:	bd08      	pop	{r3, pc}

080a1ff4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a1ff4:	b510      	push	{r4, lr}
 80a1ff6:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a1ff8:	6800      	ldr	r0, [r0, #0]
 80a1ffa:	b118      	cbz	r0, 80a2004 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a1ffc:	f7ff fcbc 	bl	80a1978 <free>
            wakeupSource_ = nullptr;
 80a2000:	2300      	movs	r3, #0
 80a2002:	6023      	str	r3, [r4, #0]
 80a2004:	bd10      	pop	{r4, pc}

080a2006 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a2006:	b510      	push	{r4, lr}
 80a2008:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a200a:	f7ff fff3 	bl	80a1ff4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a200e:	4620      	mov	r0, r4
 80a2010:	bd10      	pop	{r4, pc}
	...

080a2014 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a2014:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a2018:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a201a:	4c08      	ldr	r4, [pc, #32]	; (80a203c <_GLOBAL__sub_I_System+0x28>)
 80a201c:	2000      	movs	r0, #0
 80a201e:	6020      	str	r0, [r4, #0]
 80a2020:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a2022:	71a0      	strb	r0, [r4, #6]
 80a2024:	8120      	strh	r0, [r4, #8]
 80a2026:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2028:	f7ff fc12 	bl	80a1850 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a202c:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a202e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a2032:	4a03      	ldr	r2, [pc, #12]	; (80a2040 <_GLOBAL__sub_I_System+0x2c>)
 80a2034:	4903      	ldr	r1, [pc, #12]	; (80a2044 <_GLOBAL__sub_I_System+0x30>)
 80a2036:	f000 bb41 	b.w	80a26bc <__aeabi_atexit>
 80a203a:	bf00      	nop
 80a203c:	200000fc 	.word	0x200000fc
 80a2040:	200000b0 	.word	0x200000b0
 80a2044:	080a2007 	.word	0x080a2007

080a2048 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2048:	4b02      	ldr	r3, [pc, #8]	; (80a2054 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a204a:	681a      	ldr	r2, [r3, #0]
 80a204c:	4b02      	ldr	r3, [pc, #8]	; (80a2058 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a204e:	601a      	str	r2, [r3, #0]
 80a2050:	4770      	bx	lr
 80a2052:	bf00      	nop
 80a2054:	2000000c 	.word	0x2000000c
 80a2058:	20000108 	.word	0x20000108

080a205c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a205c:	4770      	bx	lr

080a205e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a205e:	7441      	strb	r1, [r0, #17]
 80a2060:	4770      	bx	lr

080a2062 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2062:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2064:	7c00      	ldrb	r0, [r0, #16]
 80a2066:	f7ff fbab 	bl	80a17c0 <HAL_USART_Available_Data_For_Write>
}
 80a206a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a206e:	bd08      	pop	{r3, pc}

080a2070 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2070:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2072:	7c00      	ldrb	r0, [r0, #16]
 80a2074:	f7ff fb7c 	bl	80a1770 <HAL_USART_Available_Data>
}
 80a2078:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a207c:	bd08      	pop	{r3, pc}

080a207e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a207e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2080:	7c00      	ldrb	r0, [r0, #16]
 80a2082:	f7ff fb85 	bl	80a1790 <HAL_USART_Peek_Data>
}
 80a2086:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a208a:	bf28      	it	cs
 80a208c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2090:	bd08      	pop	{r3, pc}

080a2092 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2092:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2094:	7c00      	ldrb	r0, [r0, #16]
 80a2096:	f7ff fb73 	bl	80a1780 <HAL_USART_Read_Data>
}
 80a209a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a209e:	bf28      	it	cs
 80a20a0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a20a4:	bd08      	pop	{r3, pc}

080a20a6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a20a6:	7c00      	ldrb	r0, [r0, #16]
 80a20a8:	f7ff bb7a 	b.w	80a17a0 <HAL_USART_Flush_Data>

080a20ac <_ZN11USARTSerialD0Ev>:
 80a20ac:	b510      	push	{r4, lr}
 80a20ae:	4604      	mov	r4, r0
 80a20b0:	2114      	movs	r1, #20
 80a20b2:	f000 fb08 	bl	80a26c6 <_ZdlPvj>
 80a20b6:	4620      	mov	r0, r4
 80a20b8:	bd10      	pop	{r4, pc}

080a20ba <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a20ba:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a20bc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a20be:	4604      	mov	r4, r0
 80a20c0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a20c2:	b925      	cbnz	r5, 80a20ce <_ZN11USARTSerial5writeEh+0x14>
 80a20c4:	7c00      	ldrb	r0, [r0, #16]
 80a20c6:	f7ff fb7b 	bl	80a17c0 <HAL_USART_Available_Data_For_Write>
 80a20ca:	2800      	cmp	r0, #0
 80a20cc:	dd05      	ble.n	80a20da <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a20ce:	4631      	mov	r1, r6
 80a20d0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a20d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a20d6:	f7ff bb43 	b.w	80a1760 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a20da:	4628      	mov	r0, r5
 80a20dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080a20e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a20e0:	b510      	push	{r4, lr}
 80a20e2:	4604      	mov	r4, r0
 80a20e4:	4608      	mov	r0, r1
 80a20e6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a20e8:	2200      	movs	r2, #0
 80a20ea:	6062      	str	r2, [r4, #4]
 80a20ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a20f0:	60a2      	str	r2, [r4, #8]
 80a20f2:	4a05      	ldr	r2, [pc, #20]	; (80a2108 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a20f4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a20f6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a20f8:	2201      	movs	r2, #1
 80a20fa:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a20fc:	461a      	mov	r2, r3
 80a20fe:	f7ff fb27 	bl	80a1750 <HAL_USART_Init>
}
 80a2102:	4620      	mov	r0, r4
 80a2104:	bd10      	pop	{r4, pc}
 80a2106:	bf00      	nop
 80a2108:	080a50f8 	.word	0x080a50f8

080a210c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a210c:	7c00      	ldrb	r0, [r0, #16]
 80a210e:	f7ff bb4f 	b.w	80a17b0 <HAL_USART_Is_Enabled>
	...

080a2114 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2114:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2116:	4d0c      	ldr	r5, [pc, #48]	; (80a2148 <_Z22__fetch_global_Serial1v+0x34>)
 80a2118:	6829      	ldr	r1, [r5, #0]
 80a211a:	f011 0401 	ands.w	r4, r1, #1
 80a211e:	d111      	bne.n	80a2144 <_Z22__fetch_global_Serial1v+0x30>
 80a2120:	4628      	mov	r0, r5
 80a2122:	f7fd ffbe 	bl	80a00a2 <__cxa_guard_acquire>
 80a2126:	b168      	cbz	r0, 80a2144 <_Z22__fetch_global_Serial1v+0x30>
 80a2128:	4a08      	ldr	r2, [pc, #32]	; (80a214c <_Z22__fetch_global_Serial1v+0x38>)
 80a212a:	4621      	mov	r1, r4
 80a212c:	4b08      	ldr	r3, [pc, #32]	; (80a2150 <_Z22__fetch_global_Serial1v+0x3c>)
 80a212e:	4809      	ldr	r0, [pc, #36]	; (80a2154 <_Z22__fetch_global_Serial1v+0x40>)
 80a2130:	f7ff ffd6 	bl	80a20e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2134:	4628      	mov	r0, r5
 80a2136:	f7fd ffb9 	bl	80a00ac <__cxa_guard_release>
 80a213a:	4a07      	ldr	r2, [pc, #28]	; (80a2158 <_Z22__fetch_global_Serial1v+0x44>)
 80a213c:	4907      	ldr	r1, [pc, #28]	; (80a215c <_Z22__fetch_global_Serial1v+0x48>)
 80a213e:	4805      	ldr	r0, [pc, #20]	; (80a2154 <_Z22__fetch_global_Serial1v+0x40>)
 80a2140:	f000 fabc 	bl	80a26bc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2144:	4803      	ldr	r0, [pc, #12]	; (80a2154 <_Z22__fetch_global_Serial1v+0x40>)
 80a2146:	bd38      	pop	{r3, r4, r5, pc}
 80a2148:	200001a4 	.word	0x200001a4
 80a214c:	200001a8 	.word	0x200001a8
 80a2150:	20000120 	.word	0x20000120
 80a2154:	2000010c 	.word	0x2000010c
 80a2158:	200000b0 	.word	0x200000b0
 80a215c:	080a205d 	.word	0x080a205d

080a2160 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2160:	7441      	strb	r1, [r0, #17]
 80a2162:	4770      	bx	lr

080a2164 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2164:	4770      	bx	lr

080a2166 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2166:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2168:	2100      	movs	r1, #0
 80a216a:	7c00      	ldrb	r0, [r0, #16]
 80a216c:	f7ff fb50 	bl	80a1810 <HAL_USB_USART_Receive_Data>
}
 80a2170:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2174:	bf28      	it	cs
 80a2176:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a217a:	bd08      	pop	{r3, pc}

080a217c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a217c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a217e:	2101      	movs	r1, #1
 80a2180:	7c00      	ldrb	r0, [r0, #16]
 80a2182:	f7ff fb45 	bl	80a1810 <HAL_USB_USART_Receive_Data>
}
 80a2186:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a218a:	bf28      	it	cs
 80a218c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2190:	bd08      	pop	{r3, pc}

080a2192 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2192:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2194:	7c00      	ldrb	r0, [r0, #16]
 80a2196:	f7ff fb33 	bl	80a1800 <HAL_USB_USART_Available_Data_For_Write>
}
 80a219a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a219e:	bd08      	pop	{r3, pc}

080a21a0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a21a0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a21a2:	7c00      	ldrb	r0, [r0, #16]
 80a21a4:	f7ff fb24 	bl	80a17f0 <HAL_USB_USART_Available_Data>
}
 80a21a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a21ac:	bd08      	pop	{r3, pc}

080a21ae <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a21ae:	7c00      	ldrb	r0, [r0, #16]
 80a21b0:	f7ff bb3e 	b.w	80a1830 <HAL_USB_USART_Flush_Data>

080a21b4 <_ZN9USBSerialD0Ev>:
 80a21b4:	b510      	push	{r4, lr}
 80a21b6:	4604      	mov	r4, r0
 80a21b8:	2114      	movs	r1, #20
 80a21ba:	f000 fa84 	bl	80a26c6 <_ZdlPvj>
 80a21be:	4620      	mov	r0, r4
 80a21c0:	bd10      	pop	{r4, pc}

080a21c2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a21c2:	b538      	push	{r3, r4, r5, lr}
 80a21c4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a21c6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a21c8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a21ca:	f7ff fb19 	bl	80a1800 <HAL_USB_USART_Available_Data_For_Write>
 80a21ce:	2800      	cmp	r0, #0
 80a21d0:	dc01      	bgt.n	80a21d6 <_ZN9USBSerial5writeEh+0x14>
 80a21d2:	7c60      	ldrb	r0, [r4, #17]
 80a21d4:	b128      	cbz	r0, 80a21e2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a21d6:	4629      	mov	r1, r5
 80a21d8:	7c20      	ldrb	r0, [r4, #16]
 80a21da:	f7ff fb21 	bl	80a1820 <HAL_USB_USART_Send_Data>
 80a21de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a21e2:	bd38      	pop	{r3, r4, r5, pc}

080a21e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a21e4:	b510      	push	{r4, lr}
 80a21e6:	4604      	mov	r4, r0
 80a21e8:	2300      	movs	r3, #0
 80a21ea:	6063      	str	r3, [r4, #4]
 80a21ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a21f0:	60a3      	str	r3, [r4, #8]
 80a21f2:	4b05      	ldr	r3, [pc, #20]	; (80a2208 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a21f4:	4608      	mov	r0, r1
 80a21f6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a21f8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a21fa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a21fc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a21fe:	4611      	mov	r1, r2
 80a2200:	f7ff fae6 	bl	80a17d0 <HAL_USB_USART_Init>
}
 80a2204:	4620      	mov	r0, r4
 80a2206:	bd10      	pop	{r4, pc}
 80a2208:	080a5128 	.word	0x080a5128

080a220c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a220c:	2200      	movs	r2, #0
 80a220e:	7c00      	ldrb	r0, [r0, #16]
 80a2210:	f7ff bae6 	b.w	80a17e0 <HAL_USB_USART_Begin>

080a2214 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2214:	b510      	push	{r4, lr}
 80a2216:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2218:	2214      	movs	r2, #20
 80a221a:	2100      	movs	r1, #0
 80a221c:	f001 f8d9 	bl	80a33d2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2220:	4b05      	ldr	r3, [pc, #20]	; (80a2238 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2222:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2224:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2226:	4b05      	ldr	r3, [pc, #20]	; (80a223c <_Z19acquireSerialBufferv+0x28>)
 80a2228:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a222a:	f240 1301 	movw	r3, #257	; 0x101
 80a222e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2230:	2381      	movs	r3, #129	; 0x81
 80a2232:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2234:	bd10      	pop	{r4, pc}
 80a2236:	bf00      	nop
 80a2238:	200002b1 	.word	0x200002b1
 80a223c:	20000230 	.word	0x20000230

080a2240 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2240:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2242:	4d0e      	ldr	r5, [pc, #56]	; (80a227c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2244:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2246:	a801      	add	r0, sp, #4
 80a2248:	f7ff ffe4 	bl	80a2214 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a224c:	6829      	ldr	r1, [r5, #0]
 80a224e:	f011 0401 	ands.w	r4, r1, #1
 80a2252:	d110      	bne.n	80a2276 <_Z16_fetch_usbserialv+0x36>
 80a2254:	4628      	mov	r0, r5
 80a2256:	f7fd ff24 	bl	80a00a2 <__cxa_guard_acquire>
 80a225a:	b160      	cbz	r0, 80a2276 <_Z16_fetch_usbserialv+0x36>
 80a225c:	aa01      	add	r2, sp, #4
 80a225e:	4621      	mov	r1, r4
 80a2260:	4807      	ldr	r0, [pc, #28]	; (80a2280 <_Z16_fetch_usbserialv+0x40>)
 80a2262:	f7ff ffbf 	bl	80a21e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2266:	4628      	mov	r0, r5
 80a2268:	f7fd ff20 	bl	80a00ac <__cxa_guard_release>
 80a226c:	4a05      	ldr	r2, [pc, #20]	; (80a2284 <_Z16_fetch_usbserialv+0x44>)
 80a226e:	4906      	ldr	r1, [pc, #24]	; (80a2288 <_Z16_fetch_usbserialv+0x48>)
 80a2270:	4803      	ldr	r0, [pc, #12]	; (80a2280 <_Z16_fetch_usbserialv+0x40>)
 80a2272:	f000 fa23 	bl	80a26bc <__aeabi_atexit>
	return _usbserial;
}
 80a2276:	4802      	ldr	r0, [pc, #8]	; (80a2280 <_Z16_fetch_usbserialv+0x40>)
 80a2278:	b007      	add	sp, #28
 80a227a:	bd30      	pop	{r4, r5, pc}
 80a227c:	2000022c 	.word	0x2000022c
 80a2280:	200003b4 	.word	0x200003b4
 80a2284:	200000b0 	.word	0x200000b0
 80a2288:	080a2165 	.word	0x080a2165

080a228c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a228c:	b510      	push	{r4, lr}
 80a228e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2290:	2214      	movs	r2, #20
 80a2292:	2100      	movs	r1, #0
 80a2294:	f001 f89d 	bl	80a33d2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2298:	4b05      	ldr	r3, [pc, #20]	; (80a22b0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a229a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a229c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a229e:	4b05      	ldr	r3, [pc, #20]	; (80a22b4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a22a0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a22a2:	f240 1301 	movw	r3, #257	; 0x101
 80a22a6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a22a8:	2381      	movs	r3, #129	; 0x81
 80a22aa:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a22ac:	bd10      	pop	{r4, pc}
 80a22ae:	bf00      	nop
 80a22b0:	20000464 	.word	0x20000464
 80a22b4:	200003cc 	.word	0x200003cc

080a22b8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a22b8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a22ba:	4c0e      	ldr	r4, [pc, #56]	; (80a22f4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a22bc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a22be:	a801      	add	r0, sp, #4
 80a22c0:	f7ff ffe4 	bl	80a228c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a22c4:	6823      	ldr	r3, [r4, #0]
 80a22c6:	07db      	lsls	r3, r3, #31
 80a22c8:	d410      	bmi.n	80a22ec <_Z17_fetch_usbserial1v+0x34>
 80a22ca:	4620      	mov	r0, r4
 80a22cc:	f7fd fee9 	bl	80a00a2 <__cxa_guard_acquire>
 80a22d0:	b160      	cbz	r0, 80a22ec <_Z17_fetch_usbserial1v+0x34>
 80a22d2:	aa01      	add	r2, sp, #4
 80a22d4:	2101      	movs	r1, #1
 80a22d6:	4808      	ldr	r0, [pc, #32]	; (80a22f8 <_Z17_fetch_usbserial1v+0x40>)
 80a22d8:	f7ff ff84 	bl	80a21e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a22dc:	4620      	mov	r0, r4
 80a22de:	f7fd fee5 	bl	80a00ac <__cxa_guard_release>
 80a22e2:	4a06      	ldr	r2, [pc, #24]	; (80a22fc <_Z17_fetch_usbserial1v+0x44>)
 80a22e4:	4906      	ldr	r1, [pc, #24]	; (80a2300 <_Z17_fetch_usbserial1v+0x48>)
 80a22e6:	4804      	ldr	r0, [pc, #16]	; (80a22f8 <_Z17_fetch_usbserial1v+0x40>)
 80a22e8:	f000 f9e8 	bl	80a26bc <__aeabi_atexit>
  return _usbserial1;
}
 80a22ec:	4802      	ldr	r0, [pc, #8]	; (80a22f8 <_Z17_fetch_usbserial1v+0x40>)
 80a22ee:	b006      	add	sp, #24
 80a22f0:	bd10      	pop	{r4, pc}
 80a22f2:	bf00      	nop
 80a22f4:	200003c8 	.word	0x200003c8
 80a22f8:	20000450 	.word	0x20000450
 80a22fc:	200000b0 	.word	0x200000b0
 80a2300:	080a2165 	.word	0x080a2165

080a2304 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2304:	2200      	movs	r2, #0
 80a2306:	4611      	mov	r1, r2
 80a2308:	6840      	ldr	r0, [r0, #4]
 80a230a:	f7ff baf5 	b.w	80a18f8 <network_ready>

080a230e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a230e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2310:	4616      	mov	r6, r2
 80a2312:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2314:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2316:	460f      	mov	r7, r1
 80a2318:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a231a:	2100      	movs	r1, #0
 80a231c:	a803      	add	r0, sp, #12
 80a231e:	f001 f858 	bl	80a33d2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2322:	4630      	mov	r0, r6
 80a2324:	f001 f890 	bl	80a3448 <strlen>
 80a2328:	2500      	movs	r5, #0
 80a232a:	9500      	str	r5, [sp, #0]
 80a232c:	b281      	uxth	r1, r0
 80a232e:	687b      	ldr	r3, [r7, #4]
 80a2330:	aa03      	add	r2, sp, #12
 80a2332:	4630      	mov	r0, r6
 80a2334:	f7ff fa84 	bl	80a1840 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2338:	b120      	cbz	r0, 80a2344 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a233a:	4629      	mov	r1, r5
 80a233c:	4620      	mov	r0, r4
 80a233e:	f7ff fbf1 	bl	80a1b24 <_ZN9IPAddressC1Em>
 80a2342:	e003      	b.n	80a234c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2344:	a903      	add	r1, sp, #12
 80a2346:	4620      	mov	r0, r4
 80a2348:	f7ff fbda 	bl	80a1b00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a234c:	4620      	mov	r0, r4
 80a234e:	b009      	add	sp, #36	; 0x24
 80a2350:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2352 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2352:	2200      	movs	r2, #0
 80a2354:	4611      	mov	r1, r2
 80a2356:	6840      	ldr	r0, [r0, #4]
 80a2358:	f7ff baee 	b.w	80a1938 <network_listening>

080a235c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a235c:	2200      	movs	r2, #0
 80a235e:	4611      	mov	r1, r2
 80a2360:	6840      	ldr	r0, [r0, #4]
 80a2362:	f7ff baf9 	b.w	80a1958 <network_get_listen_timeout>

080a2366 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2366:	2200      	movs	r2, #0
 80a2368:	6840      	ldr	r0, [r0, #4]
 80a236a:	f7ff baed 	b.w	80a1948 <network_set_listen_timeout>

080a236e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a236e:	2200      	movs	r2, #0
 80a2370:	f081 0101 	eor.w	r1, r1, #1
 80a2374:	6840      	ldr	r0, [r0, #4]
 80a2376:	f7ff bad7 	b.w	80a1928 <network_listen>

080a237a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a237a:	2300      	movs	r3, #0
 80a237c:	461a      	mov	r2, r3
 80a237e:	4619      	mov	r1, r3
 80a2380:	6840      	ldr	r0, [r0, #4]
 80a2382:	f7ff bac9 	b.w	80a1918 <network_off>

080a2386 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2386:	2300      	movs	r3, #0
 80a2388:	461a      	mov	r2, r3
 80a238a:	4619      	mov	r1, r3
 80a238c:	6840      	ldr	r0, [r0, #4]
 80a238e:	f7ff babb 	b.w	80a1908 <network_on>

080a2392 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2392:	2200      	movs	r2, #0
 80a2394:	4611      	mov	r1, r2
 80a2396:	6840      	ldr	r0, [r0, #4]
 80a2398:	f7ff ba9e 	b.w	80a18d8 <network_connecting>

080a239c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a239c:	2200      	movs	r2, #0
 80a239e:	2102      	movs	r1, #2
 80a23a0:	6840      	ldr	r0, [r0, #4]
 80a23a2:	f7ff baa1 	b.w	80a18e8 <network_disconnect>

080a23a6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a23a6:	2300      	movs	r3, #0
 80a23a8:	461a      	mov	r2, r3
 80a23aa:	6840      	ldr	r0, [r0, #4]
 80a23ac:	f7ff ba8c 	b.w	80a18c8 <network_connect>

080a23b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a23b0:	4b02      	ldr	r3, [pc, #8]	; (80a23bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a23b2:	2204      	movs	r2, #4
 80a23b4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a23b6:	4a02      	ldr	r2, [pc, #8]	; (80a23c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a23b8:	601a      	str	r2, [r3, #0]
 80a23ba:	4770      	bx	lr
 80a23bc:	20000568 	.word	0x20000568
 80a23c0:	080a5158 	.word	0x080a5158

080a23c4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a23c4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a23c6:	4b14      	ldr	r3, [pc, #80]	; (80a2418 <serialEventRun+0x54>)
 80a23c8:	b133      	cbz	r3, 80a23d8 <serialEventRun+0x14>
 80a23ca:	f7ff ff39 	bl	80a2240 <_Z16_fetch_usbserialv>
 80a23ce:	6803      	ldr	r3, [r0, #0]
 80a23d0:	691b      	ldr	r3, [r3, #16]
 80a23d2:	4798      	blx	r3
 80a23d4:	2800      	cmp	r0, #0
 80a23d6:	dc16      	bgt.n	80a2406 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a23d8:	4b10      	ldr	r3, [pc, #64]	; (80a241c <serialEventRun+0x58>)
 80a23da:	b133      	cbz	r3, 80a23ea <serialEventRun+0x26>
 80a23dc:	f7ff fe9a 	bl	80a2114 <_Z22__fetch_global_Serial1v>
 80a23e0:	6803      	ldr	r3, [r0, #0]
 80a23e2:	691b      	ldr	r3, [r3, #16]
 80a23e4:	4798      	blx	r3
 80a23e6:	2800      	cmp	r0, #0
 80a23e8:	dc10      	bgt.n	80a240c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a23ea:	4b0d      	ldr	r3, [pc, #52]	; (80a2420 <serialEventRun+0x5c>)
 80a23ec:	b10b      	cbz	r3, 80a23f2 <serialEventRun+0x2e>
 80a23ee:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a23f2:	4b0c      	ldr	r3, [pc, #48]	; (80a2424 <serialEventRun+0x60>)
 80a23f4:	b17b      	cbz	r3, 80a2416 <serialEventRun+0x52>
 80a23f6:	f7ff ff5f 	bl	80a22b8 <_Z17_fetch_usbserial1v>
 80a23fa:	6803      	ldr	r3, [r0, #0]
 80a23fc:	691b      	ldr	r3, [r3, #16]
 80a23fe:	4798      	blx	r3
 80a2400:	2800      	cmp	r0, #0
 80a2402:	dc06      	bgt.n	80a2412 <serialEventRun+0x4e>
 80a2404:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2406:	f3af 8000 	nop.w
 80a240a:	e7e5      	b.n	80a23d8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a240c:	f3af 8000 	nop.w
 80a2410:	e7eb      	b.n	80a23ea <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2412:	f3af 8000 	nop.w
 80a2416:	bd08      	pop	{r3, pc}
	...

080a2428 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2428:	b508      	push	{r3, lr}
	serialEventRun();
 80a242a:	f7ff ffcb 	bl	80a23c4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a242e:	f7ff f90d 	bl	80a164c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2432:	4b01      	ldr	r3, [pc, #4]	; (80a2438 <_post_loop+0x10>)
 80a2434:	6018      	str	r0, [r3, #0]
 80a2436:	bd08      	pop	{r3, pc}
 80a2438:	20000588 	.word	0x20000588

080a243c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a243c:	4802      	ldr	r0, [pc, #8]	; (80a2448 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a243e:	4a03      	ldr	r2, [pc, #12]	; (80a244c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2440:	4903      	ldr	r1, [pc, #12]	; (80a2450 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2442:	1a12      	subs	r2, r2, r0
 80a2444:	f000 bfba 	b.w	80a33bc <memcpy>
 80a2448:	40024000 	.word	0x40024000
 80a244c:	40024004 	.word	0x40024004
 80a2450:	080a5380 	.word	0x080a5380

080a2454 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2454:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2456:	2300      	movs	r3, #0
 80a2458:	9300      	str	r3, [sp, #0]
 80a245a:	461a      	mov	r2, r3
 80a245c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2460:	f7ff fa10 	bl	80a1884 <system_ctrl_set_result>
}
 80a2464:	b003      	add	sp, #12
 80a2466:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a246c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a246c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a246e:	8843      	ldrh	r3, [r0, #2]
 80a2470:	2b0a      	cmp	r3, #10
 80a2472:	d008      	beq.n	80a2486 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2474:	2b50      	cmp	r3, #80	; 0x50
 80a2476:	d109      	bne.n	80a248c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2478:	4b09      	ldr	r3, [pc, #36]	; (80a24a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a247a:	681b      	ldr	r3, [r3, #0]
 80a247c:	b13b      	cbz	r3, 80a248e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a247e:	b003      	add	sp, #12
 80a2480:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2484:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2486:	f7ff ffe5 	bl	80a2454 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a248a:	e006      	b.n	80a249a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a248c:	2300      	movs	r3, #0
 80a248e:	9300      	str	r3, [sp, #0]
 80a2490:	461a      	mov	r2, r3
 80a2492:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2496:	f7ff f9f5 	bl	80a1884 <system_ctrl_set_result>
        break;
    }
}
 80a249a:	b003      	add	sp, #12
 80a249c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a24a0:	20000570 	.word	0x20000570

080a24a4 <module_user_init_hook>:

void module_user_init_hook()
{
 80a24a4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a24a6:	4c10      	ldr	r4, [pc, #64]	; (80a24e8 <module_user_init_hook+0x44>)
 80a24a8:	4d10      	ldr	r5, [pc, #64]	; (80a24ec <module_user_init_hook+0x48>)
 80a24aa:	6823      	ldr	r3, [r4, #0]
 80a24ac:	42ab      	cmp	r3, r5
 80a24ae:	4b10      	ldr	r3, [pc, #64]	; (80a24f0 <module_user_init_hook+0x4c>)
 80a24b0:	bf0c      	ite	eq
 80a24b2:	2201      	moveq	r2, #1
 80a24b4:	2200      	movne	r2, #0
 80a24b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a24b8:	d002      	beq.n	80a24c0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a24ba:	f7ff ffbf 	bl	80a243c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a24be:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a24c0:	f7ff f8b4 	bl	80a162c <HAL_RNG_GetRandomNumber>
 80a24c4:	4604      	mov	r4, r0
    srand(seed);
 80a24c6:	f000 ff8d 	bl	80a33e4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a24ca:	4b0a      	ldr	r3, [pc, #40]	; (80a24f4 <module_user_init_hook+0x50>)
 80a24cc:	b113      	cbz	r3, 80a24d4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a24ce:	4620      	mov	r0, r4
 80a24d0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a24d4:	2100      	movs	r1, #0
 80a24d6:	4807      	ldr	r0, [pc, #28]	; (80a24f4 <module_user_init_hook+0x50>)
 80a24d8:	f7ff f9ee 	bl	80a18b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a24dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a24e0:	2100      	movs	r1, #0
 80a24e2:	4805      	ldr	r0, [pc, #20]	; (80a24f8 <module_user_init_hook+0x54>)
 80a24e4:	f7ff b9c4 	b.w	80a1870 <system_ctrl_set_app_request_handler>
 80a24e8:	40024000 	.word	0x40024000
 80a24ec:	9a271c1e 	.word	0x9a271c1e
 80a24f0:	20000574 	.word	0x20000574
 80a24f4:	00000000 	.word	0x00000000
 80a24f8:	080a246d 	.word	0x080a246d

080a24fc <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a24fc:	b510      	push	{r4, lr}
 80a24fe:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2500:	6880      	ldr	r0, [r0, #8]
 80a2502:	b108      	cbz	r0, 80a2508 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a2504:	f7ff f88a 	bl	80a161c <os_mutex_recursive_destroy>
 80a2508:	4620      	mov	r0, r4
 80a250a:	bd10      	pop	{r4, pc}

080a250c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a250c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a250e:	4e1a      	ldr	r6, [pc, #104]	; (80a2578 <pinAvailable+0x6c>)
 80a2510:	4604      	mov	r4, r0
 80a2512:	6831      	ldr	r1, [r6, #0]
 80a2514:	f011 0501 	ands.w	r5, r1, #1
 80a2518:	d10f      	bne.n	80a253a <pinAvailable+0x2e>
 80a251a:	4630      	mov	r0, r6
 80a251c:	f7fd fdc1 	bl	80a00a2 <__cxa_guard_acquire>
 80a2520:	b158      	cbz	r0, 80a253a <pinAvailable+0x2e>
 80a2522:	4629      	mov	r1, r5
 80a2524:	4815      	ldr	r0, [pc, #84]	; (80a257c <pinAvailable+0x70>)
 80a2526:	f7ff fcc3 	bl	80a1eb0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a252a:	4630      	mov	r0, r6
 80a252c:	f7fd fdbe 	bl	80a00ac <__cxa_guard_release>
 80a2530:	4a13      	ldr	r2, [pc, #76]	; (80a2580 <pinAvailable+0x74>)
 80a2532:	4914      	ldr	r1, [pc, #80]	; (80a2584 <pinAvailable+0x78>)
 80a2534:	4811      	ldr	r0, [pc, #68]	; (80a257c <pinAvailable+0x70>)
 80a2536:	f000 f8c1 	bl	80a26bc <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a253a:	4810      	ldr	r0, [pc, #64]	; (80a257c <pinAvailable+0x70>)
 80a253c:	f7ff fcc7 	bl	80a1ece <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2540:	b128      	cbz	r0, 80a254e <pinAvailable+0x42>
 80a2542:	f1a4 030d 	sub.w	r3, r4, #13
 80a2546:	2b02      	cmp	r3, #2
 80a2548:	d801      	bhi.n	80a254e <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a254a:	2000      	movs	r0, #0
 80a254c:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a254e:	f000 f877 	bl	80a2640 <_Z19__fetch_global_Wirev>
 80a2552:	f7ff faa1 	bl	80a1a98 <_ZN7TwoWire9isEnabledEv>
 80a2556:	b108      	cbz	r0, 80a255c <pinAvailable+0x50>
 80a2558:	2c01      	cmp	r4, #1
 80a255a:	d9f6      	bls.n	80a254a <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a255c:	f7ff fdda 	bl	80a2114 <_Z22__fetch_global_Serial1v>
 80a2560:	f7ff fdd4 	bl	80a210c <_ZN11USARTSerial9isEnabledEv>
 80a2564:	b118      	cbz	r0, 80a256e <pinAvailable+0x62>
 80a2566:	f1a4 0312 	sub.w	r3, r4, #18
 80a256a:	2b01      	cmp	r3, #1
 80a256c:	d9ed      	bls.n	80a254a <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a256e:	2c17      	cmp	r4, #23
 80a2570:	bf8c      	ite	hi
 80a2572:	2000      	movhi	r0, #0
 80a2574:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2576:	bd70      	pop	{r4, r5, r6, pc}
 80a2578:	20000578 	.word	0x20000578
 80a257c:	2000057c 	.word	0x2000057c
 80a2580:	200000b0 	.word	0x200000b0
 80a2584:	080a24fd 	.word	0x080a24fd

080a2588 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2588:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a258a:	b538      	push	{r3, r4, r5, lr}
 80a258c:	4604      	mov	r4, r0
 80a258e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2590:	d80a      	bhi.n	80a25a8 <pinMode+0x20>
 80a2592:	29ff      	cmp	r1, #255	; 0xff
 80a2594:	d008      	beq.n	80a25a8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2596:	f7ff ffb9 	bl	80a250c <pinAvailable>
 80a259a:	b128      	cbz	r0, 80a25a8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a259c:	4629      	mov	r1, r5
 80a259e:	4620      	mov	r0, r4
}
 80a25a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a25a4:	f7ff b86a 	b.w	80a167c <HAL_Pin_Mode>
 80a25a8:	bd38      	pop	{r3, r4, r5, pc}

080a25aa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a25aa:	b538      	push	{r3, r4, r5, lr}
 80a25ac:	4604      	mov	r4, r0
 80a25ae:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a25b0:	f7ff f86c 	bl	80a168c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a25b4:	28ff      	cmp	r0, #255	; 0xff
 80a25b6:	d010      	beq.n	80a25da <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a25b8:	2806      	cmp	r0, #6
 80a25ba:	d804      	bhi.n	80a25c6 <digitalWrite+0x1c>
 80a25bc:	234d      	movs	r3, #77	; 0x4d
 80a25be:	fa23 f000 	lsr.w	r0, r3, r0
 80a25c2:	07c3      	lsls	r3, r0, #31
 80a25c4:	d409      	bmi.n	80a25da <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a25c6:	4620      	mov	r0, r4
 80a25c8:	f7ff ffa0 	bl	80a250c <pinAvailable>
 80a25cc:	b128      	cbz	r0, 80a25da <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a25ce:	4629      	mov	r1, r5
 80a25d0:	4620      	mov	r0, r4
}
 80a25d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a25d6:	f7ff b861 	b.w	80a169c <HAL_GPIO_Write>
 80a25da:	bd38      	pop	{r3, r4, r5, pc}

080a25dc <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a25dc:	b510      	push	{r4, lr}
 80a25de:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a25e0:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a25e2:	bf9c      	itt	ls
 80a25e4:	340a      	addls	r4, #10
 80a25e6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a25e8:	4620      	mov	r0, r4
 80a25ea:	f7ff ff8f 	bl	80a250c <pinAvailable>
 80a25ee:	b150      	cbz	r0, 80a2606 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a25f0:	2103      	movs	r1, #3
 80a25f2:	4620      	mov	r0, r4
 80a25f4:	f7ff f83a 	bl	80a166c <HAL_Validate_Pin_Function>
 80a25f8:	2803      	cmp	r0, #3
 80a25fa:	d104      	bne.n	80a2606 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a25fc:	4620      	mov	r0, r4
}
 80a25fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2602:	f7ff b853 	b.w	80a16ac <HAL_ADC_Read>
}
 80a2606:	2000      	movs	r0, #0
 80a2608:	bd10      	pop	{r4, pc}
	...

080a260c <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a260c:	b570      	push	{r4, r5, r6, lr}
 80a260e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2610:	2514      	movs	r5, #20
 80a2612:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2614:	4e09      	ldr	r6, [pc, #36]	; (80a263c <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2616:	2100      	movs	r1, #0
 80a2618:	f000 fedb 	bl	80a33d2 <memset>
 80a261c:	8025      	strh	r5, [r4, #0]
 80a261e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2620:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2622:	60a5      	str	r5, [r4, #8]
 80a2624:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2626:	4628      	mov	r0, r5
 80a2628:	f000 f867 	bl	80a26fa <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a262c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a262e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2630:	4628      	mov	r0, r5
 80a2632:	f000 f862 	bl	80a26fa <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2636:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a2638:	4620      	mov	r0, r4
 80a263a:	bd70      	pop	{r4, r5, r6, pc}
 80a263c:	080a5184 	.word	0x080a5184

080a2640 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2640:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2642:	4d0e      	ldr	r5, [pc, #56]	; (80a267c <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2644:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2646:	6829      	ldr	r1, [r5, #0]
 80a2648:	f011 0401 	ands.w	r4, r1, #1
 80a264c:	d113      	bne.n	80a2676 <_Z19__fetch_global_Wirev+0x36>
 80a264e:	4628      	mov	r0, r5
 80a2650:	f7fd fd27 	bl	80a00a2 <__cxa_guard_acquire>
 80a2654:	b178      	cbz	r0, 80a2676 <_Z19__fetch_global_Wirev+0x36>
 80a2656:	a801      	add	r0, sp, #4
 80a2658:	f7ff ffd8 	bl	80a260c <_Z17acquireWireBufferv>
 80a265c:	aa01      	add	r2, sp, #4
 80a265e:	4621      	mov	r1, r4
 80a2660:	4807      	ldr	r0, [pc, #28]	; (80a2680 <_Z19__fetch_global_Wirev+0x40>)
 80a2662:	f7ff fa07 	bl	80a1a74 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a2666:	4628      	mov	r0, r5
 80a2668:	f7fd fd20 	bl	80a00ac <__cxa_guard_release>
 80a266c:	4a05      	ldr	r2, [pc, #20]	; (80a2684 <_Z19__fetch_global_Wirev+0x44>)
 80a266e:	4906      	ldr	r1, [pc, #24]	; (80a2688 <_Z19__fetch_global_Wirev+0x48>)
 80a2670:	4803      	ldr	r0, [pc, #12]	; (80a2680 <_Z19__fetch_global_Wirev+0x40>)
 80a2672:	f000 f823 	bl	80a26bc <__aeabi_atexit>
	return wire;
}
 80a2676:	4802      	ldr	r0, [pc, #8]	; (80a2680 <_Z19__fetch_global_Wirev+0x40>)
 80a2678:	b007      	add	sp, #28
 80a267a:	bd30      	pop	{r4, r5, pc}
 80a267c:	2000058c 	.word	0x2000058c
 80a2680:	20000590 	.word	0x20000590
 80a2684:	200000b0 	.word	0x200000b0
 80a2688:	080a1a1b 	.word	0x080a1a1b

080a268c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a268c:	b513      	push	{r0, r1, r4, lr}
 80a268e:	4c08      	ldr	r4, [pc, #32]	; (80a26b0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2690:	2300      	movs	r3, #0
 80a2692:	461a      	mov	r2, r3
 80a2694:	4619      	mov	r1, r3
 80a2696:	9300      	str	r3, [sp, #0]
 80a2698:	4620      	mov	r0, r4
 80a269a:	f7ff fa59 	bl	80a1b50 <_ZN9IPAddressC1Ehhhh>
 80a269e:	4620      	mov	r0, r4
 80a26a0:	4a04      	ldr	r2, [pc, #16]	; (80a26b4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a26a2:	4905      	ldr	r1, [pc, #20]	; (80a26b8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a26a4:	b002      	add	sp, #8
 80a26a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a26aa:	f000 b807 	b.w	80a26bc <__aeabi_atexit>
 80a26ae:	bf00      	nop
 80a26b0:	200005a4 	.word	0x200005a4
 80a26b4:	200000b0 	.word	0x200000b0
 80a26b8:	080a1aa1 	.word	0x080a1aa1

080a26bc <__aeabi_atexit>:
 80a26bc:	460b      	mov	r3, r1
 80a26be:	4601      	mov	r1, r0
 80a26c0:	4618      	mov	r0, r3
 80a26c2:	f000 be69 	b.w	80a3398 <__cxa_atexit>

080a26c6 <_ZdlPvj>:
 80a26c6:	f7fd bcea 	b.w	80a009e <_ZdlPv>
	...

080a26cc <_ZSt15get_new_handlerv>:
 80a26cc:	4b02      	ldr	r3, [pc, #8]	; (80a26d8 <_ZSt15get_new_handlerv+0xc>)
 80a26ce:	6818      	ldr	r0, [r3, #0]
 80a26d0:	f3bf 8f5f 	dmb	sy
 80a26d4:	4770      	bx	lr
 80a26d6:	bf00      	nop
 80a26d8:	200005bc 	.word	0x200005bc

080a26dc <_ZnwjRKSt9nothrow_t>:
 80a26dc:	b510      	push	{r4, lr}
 80a26de:	2800      	cmp	r0, #0
 80a26e0:	bf14      	ite	ne
 80a26e2:	4604      	movne	r4, r0
 80a26e4:	2401      	moveq	r4, #1
 80a26e6:	4620      	mov	r0, r4
 80a26e8:	f7ff f93e 	bl	80a1968 <malloc>
 80a26ec:	b920      	cbnz	r0, 80a26f8 <_ZnwjRKSt9nothrow_t+0x1c>
 80a26ee:	f7ff ffed 	bl	80a26cc <_ZSt15get_new_handlerv>
 80a26f2:	b108      	cbz	r0, 80a26f8 <_ZnwjRKSt9nothrow_t+0x1c>
 80a26f4:	4780      	blx	r0
 80a26f6:	e7f6      	b.n	80a26e6 <_ZnwjRKSt9nothrow_t+0xa>
 80a26f8:	bd10      	pop	{r4, pc}

080a26fa <_ZnajRKSt9nothrow_t>:
 80a26fa:	f7ff bfef 	b.w	80a26dc <_ZnwjRKSt9nothrow_t>
	...

080a2700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2700:	4b24      	ldr	r3, [pc, #144]	; (80a2794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2702:	681a      	ldr	r2, [r3, #0]
 80a2704:	07d0      	lsls	r0, r2, #31
 80a2706:	bf5c      	itt	pl
 80a2708:	2201      	movpl	r2, #1
 80a270a:	601a      	strpl	r2, [r3, #0]
 80a270c:	4b22      	ldr	r3, [pc, #136]	; (80a2798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a270e:	681a      	ldr	r2, [r3, #0]
 80a2710:	07d1      	lsls	r1, r2, #31
 80a2712:	bf5c      	itt	pl
 80a2714:	2201      	movpl	r2, #1
 80a2716:	601a      	strpl	r2, [r3, #0]
 80a2718:	4b20      	ldr	r3, [pc, #128]	; (80a279c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a271a:	681a      	ldr	r2, [r3, #0]
 80a271c:	07d2      	lsls	r2, r2, #31
 80a271e:	bf5c      	itt	pl
 80a2720:	2201      	movpl	r2, #1
 80a2722:	601a      	strpl	r2, [r3, #0]
 80a2724:	4b1e      	ldr	r3, [pc, #120]	; (80a27a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2726:	681a      	ldr	r2, [r3, #0]
 80a2728:	07d0      	lsls	r0, r2, #31
 80a272a:	bf5c      	itt	pl
 80a272c:	2201      	movpl	r2, #1
 80a272e:	601a      	strpl	r2, [r3, #0]
 80a2730:	4b1c      	ldr	r3, [pc, #112]	; (80a27a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2732:	681a      	ldr	r2, [r3, #0]
 80a2734:	07d1      	lsls	r1, r2, #31
 80a2736:	bf5c      	itt	pl
 80a2738:	2201      	movpl	r2, #1
 80a273a:	601a      	strpl	r2, [r3, #0]
 80a273c:	4b1a      	ldr	r3, [pc, #104]	; (80a27a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a273e:	681a      	ldr	r2, [r3, #0]
 80a2740:	07d2      	lsls	r2, r2, #31
 80a2742:	bf5c      	itt	pl
 80a2744:	2201      	movpl	r2, #1
 80a2746:	601a      	strpl	r2, [r3, #0]
 80a2748:	4b18      	ldr	r3, [pc, #96]	; (80a27ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a274a:	681a      	ldr	r2, [r3, #0]
 80a274c:	07d0      	lsls	r0, r2, #31
 80a274e:	bf5c      	itt	pl
 80a2750:	2201      	movpl	r2, #1
 80a2752:	601a      	strpl	r2, [r3, #0]
 80a2754:	4b16      	ldr	r3, [pc, #88]	; (80a27b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2756:	681a      	ldr	r2, [r3, #0]
 80a2758:	07d1      	lsls	r1, r2, #31
 80a275a:	bf5c      	itt	pl
 80a275c:	2201      	movpl	r2, #1
 80a275e:	601a      	strpl	r2, [r3, #0]
 80a2760:	4b14      	ldr	r3, [pc, #80]	; (80a27b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2762:	681a      	ldr	r2, [r3, #0]
 80a2764:	07d2      	lsls	r2, r2, #31
 80a2766:	bf5c      	itt	pl
 80a2768:	2201      	movpl	r2, #1
 80a276a:	601a      	strpl	r2, [r3, #0]
 80a276c:	4b12      	ldr	r3, [pc, #72]	; (80a27b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a276e:	681a      	ldr	r2, [r3, #0]
 80a2770:	07d0      	lsls	r0, r2, #31
 80a2772:	bf5c      	itt	pl
 80a2774:	2201      	movpl	r2, #1
 80a2776:	601a      	strpl	r2, [r3, #0]
 80a2778:	4b10      	ldr	r3, [pc, #64]	; (80a27bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a277a:	681a      	ldr	r2, [r3, #0]
 80a277c:	07d1      	lsls	r1, r2, #31
 80a277e:	bf5c      	itt	pl
 80a2780:	2201      	movpl	r2, #1
 80a2782:	601a      	strpl	r2, [r3, #0]
 80a2784:	4b0e      	ldr	r3, [pc, #56]	; (80a27c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2786:	681a      	ldr	r2, [r3, #0]
 80a2788:	07d2      	lsls	r2, r2, #31
 80a278a:	bf5c      	itt	pl
 80a278c:	2201      	movpl	r2, #1
 80a278e:	601a      	strpl	r2, [r3, #0]
 80a2790:	4770      	bx	lr
 80a2792:	bf00      	nop
 80a2794:	200005ec 	.word	0x200005ec
 80a2798:	200005e8 	.word	0x200005e8
 80a279c:	200005e4 	.word	0x200005e4
 80a27a0:	200005e0 	.word	0x200005e0
 80a27a4:	200005dc 	.word	0x200005dc
 80a27a8:	200005d8 	.word	0x200005d8
 80a27ac:	200005d4 	.word	0x200005d4
 80a27b0:	200005d0 	.word	0x200005d0
 80a27b4:	200005cc 	.word	0x200005cc
 80a27b8:	200005c8 	.word	0x200005c8
 80a27bc:	200005c4 	.word	0x200005c4
 80a27c0:	200005c0 	.word	0x200005c0

080a27c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a27c4:	4b18      	ldr	r3, [pc, #96]	; (80a2828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a27c6:	681a      	ldr	r2, [r3, #0]
 80a27c8:	07d1      	lsls	r1, r2, #31
 80a27ca:	bf5c      	itt	pl
 80a27cc:	2201      	movpl	r2, #1
 80a27ce:	601a      	strpl	r2, [r3, #0]
 80a27d0:	4b16      	ldr	r3, [pc, #88]	; (80a282c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a27d2:	681a      	ldr	r2, [r3, #0]
 80a27d4:	07d2      	lsls	r2, r2, #31
 80a27d6:	bf5c      	itt	pl
 80a27d8:	2201      	movpl	r2, #1
 80a27da:	601a      	strpl	r2, [r3, #0]
 80a27dc:	4b14      	ldr	r3, [pc, #80]	; (80a2830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a27de:	681a      	ldr	r2, [r3, #0]
 80a27e0:	07d0      	lsls	r0, r2, #31
 80a27e2:	bf5c      	itt	pl
 80a27e4:	2201      	movpl	r2, #1
 80a27e6:	601a      	strpl	r2, [r3, #0]
 80a27e8:	4b12      	ldr	r3, [pc, #72]	; (80a2834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a27ea:	681a      	ldr	r2, [r3, #0]
 80a27ec:	07d1      	lsls	r1, r2, #31
 80a27ee:	bf5c      	itt	pl
 80a27f0:	2201      	movpl	r2, #1
 80a27f2:	601a      	strpl	r2, [r3, #0]
 80a27f4:	4b10      	ldr	r3, [pc, #64]	; (80a2838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a27f6:	681a      	ldr	r2, [r3, #0]
 80a27f8:	07d2      	lsls	r2, r2, #31
 80a27fa:	bf5c      	itt	pl
 80a27fc:	2201      	movpl	r2, #1
 80a27fe:	601a      	strpl	r2, [r3, #0]
 80a2800:	4b0e      	ldr	r3, [pc, #56]	; (80a283c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2802:	681a      	ldr	r2, [r3, #0]
 80a2804:	07d0      	lsls	r0, r2, #31
 80a2806:	bf5c      	itt	pl
 80a2808:	2201      	movpl	r2, #1
 80a280a:	601a      	strpl	r2, [r3, #0]
 80a280c:	4b0c      	ldr	r3, [pc, #48]	; (80a2840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a280e:	681a      	ldr	r2, [r3, #0]
 80a2810:	07d1      	lsls	r1, r2, #31
 80a2812:	bf5c      	itt	pl
 80a2814:	2201      	movpl	r2, #1
 80a2816:	601a      	strpl	r2, [r3, #0]
 80a2818:	4b0a      	ldr	r3, [pc, #40]	; (80a2844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a281a:	681a      	ldr	r2, [r3, #0]
 80a281c:	07d2      	lsls	r2, r2, #31
 80a281e:	bf5c      	itt	pl
 80a2820:	2201      	movpl	r2, #1
 80a2822:	601a      	strpl	r2, [r3, #0]
 80a2824:	4770      	bx	lr
 80a2826:	bf00      	nop
 80a2828:	2000060c 	.word	0x2000060c
 80a282c:	20000608 	.word	0x20000608
 80a2830:	20000604 	.word	0x20000604
 80a2834:	20000600 	.word	0x20000600
 80a2838:	200005fc 	.word	0x200005fc
 80a283c:	200005f8 	.word	0x200005f8
 80a2840:	200005f4 	.word	0x200005f4
 80a2844:	200005f0 	.word	0x200005f0

080a2848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2848:	4b18      	ldr	r3, [pc, #96]	; (80a28ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a284a:	681a      	ldr	r2, [r3, #0]
 80a284c:	07d1      	lsls	r1, r2, #31
 80a284e:	bf5c      	itt	pl
 80a2850:	2201      	movpl	r2, #1
 80a2852:	601a      	strpl	r2, [r3, #0]
 80a2854:	4b16      	ldr	r3, [pc, #88]	; (80a28b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2856:	681a      	ldr	r2, [r3, #0]
 80a2858:	07d2      	lsls	r2, r2, #31
 80a285a:	bf5c      	itt	pl
 80a285c:	2201      	movpl	r2, #1
 80a285e:	601a      	strpl	r2, [r3, #0]
 80a2860:	4b14      	ldr	r3, [pc, #80]	; (80a28b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2862:	681a      	ldr	r2, [r3, #0]
 80a2864:	07d0      	lsls	r0, r2, #31
 80a2866:	bf5c      	itt	pl
 80a2868:	2201      	movpl	r2, #1
 80a286a:	601a      	strpl	r2, [r3, #0]
 80a286c:	4b12      	ldr	r3, [pc, #72]	; (80a28b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a286e:	681a      	ldr	r2, [r3, #0]
 80a2870:	07d1      	lsls	r1, r2, #31
 80a2872:	bf5c      	itt	pl
 80a2874:	2201      	movpl	r2, #1
 80a2876:	601a      	strpl	r2, [r3, #0]
 80a2878:	4b10      	ldr	r3, [pc, #64]	; (80a28bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a287a:	681a      	ldr	r2, [r3, #0]
 80a287c:	07d2      	lsls	r2, r2, #31
 80a287e:	bf5c      	itt	pl
 80a2880:	2201      	movpl	r2, #1
 80a2882:	601a      	strpl	r2, [r3, #0]
 80a2884:	4b0e      	ldr	r3, [pc, #56]	; (80a28c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2886:	681a      	ldr	r2, [r3, #0]
 80a2888:	07d0      	lsls	r0, r2, #31
 80a288a:	bf5c      	itt	pl
 80a288c:	2201      	movpl	r2, #1
 80a288e:	601a      	strpl	r2, [r3, #0]
 80a2890:	4b0c      	ldr	r3, [pc, #48]	; (80a28c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2892:	681a      	ldr	r2, [r3, #0]
 80a2894:	07d1      	lsls	r1, r2, #31
 80a2896:	bf5c      	itt	pl
 80a2898:	2201      	movpl	r2, #1
 80a289a:	601a      	strpl	r2, [r3, #0]
 80a289c:	4b0a      	ldr	r3, [pc, #40]	; (80a28c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a289e:	681a      	ldr	r2, [r3, #0]
 80a28a0:	07d2      	lsls	r2, r2, #31
 80a28a2:	bf5c      	itt	pl
 80a28a4:	2201      	movpl	r2, #1
 80a28a6:	601a      	strpl	r2, [r3, #0]
 80a28a8:	4770      	bx	lr
 80a28aa:	bf00      	nop
 80a28ac:	2000062c 	.word	0x2000062c
 80a28b0:	20000628 	.word	0x20000628
 80a28b4:	20000624 	.word	0x20000624
 80a28b8:	20000620 	.word	0x20000620
 80a28bc:	2000061c 	.word	0x2000061c
 80a28c0:	20000618 	.word	0x20000618
 80a28c4:	20000614 	.word	0x20000614
 80a28c8:	20000610 	.word	0x20000610

080a28cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a28cc:	4b24      	ldr	r3, [pc, #144]	; (80a2960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a28ce:	681a      	ldr	r2, [r3, #0]
 80a28d0:	07d0      	lsls	r0, r2, #31
 80a28d2:	bf5c      	itt	pl
 80a28d4:	2201      	movpl	r2, #1
 80a28d6:	601a      	strpl	r2, [r3, #0]
 80a28d8:	4b22      	ldr	r3, [pc, #136]	; (80a2964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a28da:	681a      	ldr	r2, [r3, #0]
 80a28dc:	07d1      	lsls	r1, r2, #31
 80a28de:	bf5c      	itt	pl
 80a28e0:	2201      	movpl	r2, #1
 80a28e2:	601a      	strpl	r2, [r3, #0]
 80a28e4:	4b20      	ldr	r3, [pc, #128]	; (80a2968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a28e6:	681a      	ldr	r2, [r3, #0]
 80a28e8:	07d2      	lsls	r2, r2, #31
 80a28ea:	bf5c      	itt	pl
 80a28ec:	2201      	movpl	r2, #1
 80a28ee:	601a      	strpl	r2, [r3, #0]
 80a28f0:	4b1e      	ldr	r3, [pc, #120]	; (80a296c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a28f2:	681a      	ldr	r2, [r3, #0]
 80a28f4:	07d0      	lsls	r0, r2, #31
 80a28f6:	bf5c      	itt	pl
 80a28f8:	2201      	movpl	r2, #1
 80a28fa:	601a      	strpl	r2, [r3, #0]
 80a28fc:	4b1c      	ldr	r3, [pc, #112]	; (80a2970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a28fe:	681a      	ldr	r2, [r3, #0]
 80a2900:	07d1      	lsls	r1, r2, #31
 80a2902:	bf5c      	itt	pl
 80a2904:	2201      	movpl	r2, #1
 80a2906:	601a      	strpl	r2, [r3, #0]
 80a2908:	4b1a      	ldr	r3, [pc, #104]	; (80a2974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a290a:	681a      	ldr	r2, [r3, #0]
 80a290c:	07d2      	lsls	r2, r2, #31
 80a290e:	bf5c      	itt	pl
 80a2910:	2201      	movpl	r2, #1
 80a2912:	601a      	strpl	r2, [r3, #0]
 80a2914:	4b18      	ldr	r3, [pc, #96]	; (80a2978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2916:	681a      	ldr	r2, [r3, #0]
 80a2918:	07d0      	lsls	r0, r2, #31
 80a291a:	bf5c      	itt	pl
 80a291c:	2201      	movpl	r2, #1
 80a291e:	601a      	strpl	r2, [r3, #0]
 80a2920:	4b16      	ldr	r3, [pc, #88]	; (80a297c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2922:	681a      	ldr	r2, [r3, #0]
 80a2924:	07d1      	lsls	r1, r2, #31
 80a2926:	bf5c      	itt	pl
 80a2928:	2201      	movpl	r2, #1
 80a292a:	601a      	strpl	r2, [r3, #0]
 80a292c:	4b14      	ldr	r3, [pc, #80]	; (80a2980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a292e:	681a      	ldr	r2, [r3, #0]
 80a2930:	07d2      	lsls	r2, r2, #31
 80a2932:	bf5c      	itt	pl
 80a2934:	2201      	movpl	r2, #1
 80a2936:	601a      	strpl	r2, [r3, #0]
 80a2938:	4b12      	ldr	r3, [pc, #72]	; (80a2984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a293a:	681a      	ldr	r2, [r3, #0]
 80a293c:	07d0      	lsls	r0, r2, #31
 80a293e:	bf5c      	itt	pl
 80a2940:	2201      	movpl	r2, #1
 80a2942:	601a      	strpl	r2, [r3, #0]
 80a2944:	4b10      	ldr	r3, [pc, #64]	; (80a2988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2946:	681a      	ldr	r2, [r3, #0]
 80a2948:	07d1      	lsls	r1, r2, #31
 80a294a:	bf5c      	itt	pl
 80a294c:	2201      	movpl	r2, #1
 80a294e:	601a      	strpl	r2, [r3, #0]
 80a2950:	4b0e      	ldr	r3, [pc, #56]	; (80a298c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2952:	681a      	ldr	r2, [r3, #0]
 80a2954:	07d2      	lsls	r2, r2, #31
 80a2956:	bf5c      	itt	pl
 80a2958:	2201      	movpl	r2, #1
 80a295a:	601a      	strpl	r2, [r3, #0]
 80a295c:	4770      	bx	lr
 80a295e:	bf00      	nop
 80a2960:	2000065c 	.word	0x2000065c
 80a2964:	20000658 	.word	0x20000658
 80a2968:	20000654 	.word	0x20000654
 80a296c:	20000650 	.word	0x20000650
 80a2970:	2000064c 	.word	0x2000064c
 80a2974:	20000648 	.word	0x20000648
 80a2978:	20000644 	.word	0x20000644
 80a297c:	20000640 	.word	0x20000640
 80a2980:	2000063c 	.word	0x2000063c
 80a2984:	20000638 	.word	0x20000638
 80a2988:	20000634 	.word	0x20000634
 80a298c:	20000630 	.word	0x20000630

080a2990 <__aeabi_drsub>:
 80a2990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2994:	e002      	b.n	80a299c <__adddf3>
 80a2996:	bf00      	nop

080a2998 <__aeabi_dsub>:
 80a2998:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a299c <__adddf3>:
 80a299c:	b530      	push	{r4, r5, lr}
 80a299e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a29a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a29a6:	ea94 0f05 	teq	r4, r5
 80a29aa:	bf08      	it	eq
 80a29ac:	ea90 0f02 	teqeq	r0, r2
 80a29b0:	bf1f      	itttt	ne
 80a29b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a29b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a29ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a29be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a29c2:	f000 80e2 	beq.w	80a2b8a <__adddf3+0x1ee>
 80a29c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a29ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a29ce:	bfb8      	it	lt
 80a29d0:	426d      	neglt	r5, r5
 80a29d2:	dd0c      	ble.n	80a29ee <__adddf3+0x52>
 80a29d4:	442c      	add	r4, r5
 80a29d6:	ea80 0202 	eor.w	r2, r0, r2
 80a29da:	ea81 0303 	eor.w	r3, r1, r3
 80a29de:	ea82 0000 	eor.w	r0, r2, r0
 80a29e2:	ea83 0101 	eor.w	r1, r3, r1
 80a29e6:	ea80 0202 	eor.w	r2, r0, r2
 80a29ea:	ea81 0303 	eor.w	r3, r1, r3
 80a29ee:	2d36      	cmp	r5, #54	; 0x36
 80a29f0:	bf88      	it	hi
 80a29f2:	bd30      	pophi	{r4, r5, pc}
 80a29f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a29f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a29fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2a00:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2a04:	d002      	beq.n	80a2a0c <__adddf3+0x70>
 80a2a06:	4240      	negs	r0, r0
 80a2a08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2a0c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2a10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2a14:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2a18:	d002      	beq.n	80a2a20 <__adddf3+0x84>
 80a2a1a:	4252      	negs	r2, r2
 80a2a1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2a20:	ea94 0f05 	teq	r4, r5
 80a2a24:	f000 80a7 	beq.w	80a2b76 <__adddf3+0x1da>
 80a2a28:	f1a4 0401 	sub.w	r4, r4, #1
 80a2a2c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2a30:	db0d      	blt.n	80a2a4e <__adddf3+0xb2>
 80a2a32:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2a36:	fa22 f205 	lsr.w	r2, r2, r5
 80a2a3a:	1880      	adds	r0, r0, r2
 80a2a3c:	f141 0100 	adc.w	r1, r1, #0
 80a2a40:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2a44:	1880      	adds	r0, r0, r2
 80a2a46:	fa43 f305 	asr.w	r3, r3, r5
 80a2a4a:	4159      	adcs	r1, r3
 80a2a4c:	e00e      	b.n	80a2a6c <__adddf3+0xd0>
 80a2a4e:	f1a5 0520 	sub.w	r5, r5, #32
 80a2a52:	f10e 0e20 	add.w	lr, lr, #32
 80a2a56:	2a01      	cmp	r2, #1
 80a2a58:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2a5c:	bf28      	it	cs
 80a2a5e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2a62:	fa43 f305 	asr.w	r3, r3, r5
 80a2a66:	18c0      	adds	r0, r0, r3
 80a2a68:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2a6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2a70:	d507      	bpl.n	80a2a82 <__adddf3+0xe6>
 80a2a72:	f04f 0e00 	mov.w	lr, #0
 80a2a76:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2a7a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2a7e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2a82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2a86:	d31b      	bcc.n	80a2ac0 <__adddf3+0x124>
 80a2a88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2a8c:	d30c      	bcc.n	80a2aa8 <__adddf3+0x10c>
 80a2a8e:	0849      	lsrs	r1, r1, #1
 80a2a90:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2a94:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2a98:	f104 0401 	add.w	r4, r4, #1
 80a2a9c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2aa0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2aa4:	f080 809a 	bcs.w	80a2bdc <__adddf3+0x240>
 80a2aa8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2aac:	bf08      	it	eq
 80a2aae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2ab2:	f150 0000 	adcs.w	r0, r0, #0
 80a2ab6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2aba:	ea41 0105 	orr.w	r1, r1, r5
 80a2abe:	bd30      	pop	{r4, r5, pc}
 80a2ac0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2ac4:	4140      	adcs	r0, r0
 80a2ac6:	eb41 0101 	adc.w	r1, r1, r1
 80a2aca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2ace:	f1a4 0401 	sub.w	r4, r4, #1
 80a2ad2:	d1e9      	bne.n	80a2aa8 <__adddf3+0x10c>
 80a2ad4:	f091 0f00 	teq	r1, #0
 80a2ad8:	bf04      	itt	eq
 80a2ada:	4601      	moveq	r1, r0
 80a2adc:	2000      	moveq	r0, #0
 80a2ade:	fab1 f381 	clz	r3, r1
 80a2ae2:	bf08      	it	eq
 80a2ae4:	3320      	addeq	r3, #32
 80a2ae6:	f1a3 030b 	sub.w	r3, r3, #11
 80a2aea:	f1b3 0220 	subs.w	r2, r3, #32
 80a2aee:	da0c      	bge.n	80a2b0a <__adddf3+0x16e>
 80a2af0:	320c      	adds	r2, #12
 80a2af2:	dd08      	ble.n	80a2b06 <__adddf3+0x16a>
 80a2af4:	f102 0c14 	add.w	ip, r2, #20
 80a2af8:	f1c2 020c 	rsb	r2, r2, #12
 80a2afc:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2b00:	fa21 f102 	lsr.w	r1, r1, r2
 80a2b04:	e00c      	b.n	80a2b20 <__adddf3+0x184>
 80a2b06:	f102 0214 	add.w	r2, r2, #20
 80a2b0a:	bfd8      	it	le
 80a2b0c:	f1c2 0c20 	rsble	ip, r2, #32
 80a2b10:	fa01 f102 	lsl.w	r1, r1, r2
 80a2b14:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2b18:	bfdc      	itt	le
 80a2b1a:	ea41 010c 	orrle.w	r1, r1, ip
 80a2b1e:	4090      	lslle	r0, r2
 80a2b20:	1ae4      	subs	r4, r4, r3
 80a2b22:	bfa2      	ittt	ge
 80a2b24:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2b28:	4329      	orrge	r1, r5
 80a2b2a:	bd30      	popge	{r4, r5, pc}
 80a2b2c:	ea6f 0404 	mvn.w	r4, r4
 80a2b30:	3c1f      	subs	r4, #31
 80a2b32:	da1c      	bge.n	80a2b6e <__adddf3+0x1d2>
 80a2b34:	340c      	adds	r4, #12
 80a2b36:	dc0e      	bgt.n	80a2b56 <__adddf3+0x1ba>
 80a2b38:	f104 0414 	add.w	r4, r4, #20
 80a2b3c:	f1c4 0220 	rsb	r2, r4, #32
 80a2b40:	fa20 f004 	lsr.w	r0, r0, r4
 80a2b44:	fa01 f302 	lsl.w	r3, r1, r2
 80a2b48:	ea40 0003 	orr.w	r0, r0, r3
 80a2b4c:	fa21 f304 	lsr.w	r3, r1, r4
 80a2b50:	ea45 0103 	orr.w	r1, r5, r3
 80a2b54:	bd30      	pop	{r4, r5, pc}
 80a2b56:	f1c4 040c 	rsb	r4, r4, #12
 80a2b5a:	f1c4 0220 	rsb	r2, r4, #32
 80a2b5e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2b62:	fa01 f304 	lsl.w	r3, r1, r4
 80a2b66:	ea40 0003 	orr.w	r0, r0, r3
 80a2b6a:	4629      	mov	r1, r5
 80a2b6c:	bd30      	pop	{r4, r5, pc}
 80a2b6e:	fa21 f004 	lsr.w	r0, r1, r4
 80a2b72:	4629      	mov	r1, r5
 80a2b74:	bd30      	pop	{r4, r5, pc}
 80a2b76:	f094 0f00 	teq	r4, #0
 80a2b7a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2b7e:	bf06      	itte	eq
 80a2b80:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2b84:	3401      	addeq	r4, #1
 80a2b86:	3d01      	subne	r5, #1
 80a2b88:	e74e      	b.n	80a2a28 <__adddf3+0x8c>
 80a2b8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2b8e:	bf18      	it	ne
 80a2b90:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2b94:	d029      	beq.n	80a2bea <__adddf3+0x24e>
 80a2b96:	ea94 0f05 	teq	r4, r5
 80a2b9a:	bf08      	it	eq
 80a2b9c:	ea90 0f02 	teqeq	r0, r2
 80a2ba0:	d005      	beq.n	80a2bae <__adddf3+0x212>
 80a2ba2:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2ba6:	bf04      	itt	eq
 80a2ba8:	4619      	moveq	r1, r3
 80a2baa:	4610      	moveq	r0, r2
 80a2bac:	bd30      	pop	{r4, r5, pc}
 80a2bae:	ea91 0f03 	teq	r1, r3
 80a2bb2:	bf1e      	ittt	ne
 80a2bb4:	2100      	movne	r1, #0
 80a2bb6:	2000      	movne	r0, #0
 80a2bb8:	bd30      	popne	{r4, r5, pc}
 80a2bba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2bbe:	d105      	bne.n	80a2bcc <__adddf3+0x230>
 80a2bc0:	0040      	lsls	r0, r0, #1
 80a2bc2:	4149      	adcs	r1, r1
 80a2bc4:	bf28      	it	cs
 80a2bc6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2bca:	bd30      	pop	{r4, r5, pc}
 80a2bcc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2bd0:	bf3c      	itt	cc
 80a2bd2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2bd6:	bd30      	popcc	{r4, r5, pc}
 80a2bd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2bdc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2be0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2be4:	f04f 0000 	mov.w	r0, #0
 80a2be8:	bd30      	pop	{r4, r5, pc}
 80a2bea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2bee:	bf1a      	itte	ne
 80a2bf0:	4619      	movne	r1, r3
 80a2bf2:	4610      	movne	r0, r2
 80a2bf4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2bf8:	bf1c      	itt	ne
 80a2bfa:	460b      	movne	r3, r1
 80a2bfc:	4602      	movne	r2, r0
 80a2bfe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2c02:	bf06      	itte	eq
 80a2c04:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2c08:	ea91 0f03 	teqeq	r1, r3
 80a2c0c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2c10:	bd30      	pop	{r4, r5, pc}
 80a2c12:	bf00      	nop

080a2c14 <__aeabi_ui2d>:
 80a2c14:	f090 0f00 	teq	r0, #0
 80a2c18:	bf04      	itt	eq
 80a2c1a:	2100      	moveq	r1, #0
 80a2c1c:	4770      	bxeq	lr
 80a2c1e:	b530      	push	{r4, r5, lr}
 80a2c20:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2c24:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2c28:	f04f 0500 	mov.w	r5, #0
 80a2c2c:	f04f 0100 	mov.w	r1, #0
 80a2c30:	e750      	b.n	80a2ad4 <__adddf3+0x138>
 80a2c32:	bf00      	nop

080a2c34 <__aeabi_i2d>:
 80a2c34:	f090 0f00 	teq	r0, #0
 80a2c38:	bf04      	itt	eq
 80a2c3a:	2100      	moveq	r1, #0
 80a2c3c:	4770      	bxeq	lr
 80a2c3e:	b530      	push	{r4, r5, lr}
 80a2c40:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2c44:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2c48:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2c4c:	bf48      	it	mi
 80a2c4e:	4240      	negmi	r0, r0
 80a2c50:	f04f 0100 	mov.w	r1, #0
 80a2c54:	e73e      	b.n	80a2ad4 <__adddf3+0x138>
 80a2c56:	bf00      	nop

080a2c58 <__aeabi_f2d>:
 80a2c58:	0042      	lsls	r2, r0, #1
 80a2c5a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2c5e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2c62:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2c66:	bf1f      	itttt	ne
 80a2c68:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2c6c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2c70:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2c74:	4770      	bxne	lr
 80a2c76:	f092 0f00 	teq	r2, #0
 80a2c7a:	bf14      	ite	ne
 80a2c7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2c80:	4770      	bxeq	lr
 80a2c82:	b530      	push	{r4, r5, lr}
 80a2c84:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2c88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2c8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2c90:	e720      	b.n	80a2ad4 <__adddf3+0x138>
 80a2c92:	bf00      	nop

080a2c94 <__aeabi_ul2d>:
 80a2c94:	ea50 0201 	orrs.w	r2, r0, r1
 80a2c98:	bf08      	it	eq
 80a2c9a:	4770      	bxeq	lr
 80a2c9c:	b530      	push	{r4, r5, lr}
 80a2c9e:	f04f 0500 	mov.w	r5, #0
 80a2ca2:	e00a      	b.n	80a2cba <__aeabi_l2d+0x16>

080a2ca4 <__aeabi_l2d>:
 80a2ca4:	ea50 0201 	orrs.w	r2, r0, r1
 80a2ca8:	bf08      	it	eq
 80a2caa:	4770      	bxeq	lr
 80a2cac:	b530      	push	{r4, r5, lr}
 80a2cae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2cb2:	d502      	bpl.n	80a2cba <__aeabi_l2d+0x16>
 80a2cb4:	4240      	negs	r0, r0
 80a2cb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2cba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2cbe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2cc2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2cc6:	f43f aedc 	beq.w	80a2a82 <__adddf3+0xe6>
 80a2cca:	f04f 0203 	mov.w	r2, #3
 80a2cce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2cd2:	bf18      	it	ne
 80a2cd4:	3203      	addne	r2, #3
 80a2cd6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2cda:	bf18      	it	ne
 80a2cdc:	3203      	addne	r2, #3
 80a2cde:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2ce2:	f1c2 0320 	rsb	r3, r2, #32
 80a2ce6:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2cea:	fa20 f002 	lsr.w	r0, r0, r2
 80a2cee:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2cf2:	ea40 000e 	orr.w	r0, r0, lr
 80a2cf6:	fa21 f102 	lsr.w	r1, r1, r2
 80a2cfa:	4414      	add	r4, r2
 80a2cfc:	e6c1      	b.n	80a2a82 <__adddf3+0xe6>
 80a2cfe:	bf00      	nop

080a2d00 <__aeabi_dmul>:
 80a2d00:	b570      	push	{r4, r5, r6, lr}
 80a2d02:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2d06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2d0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2d0e:	bf1d      	ittte	ne
 80a2d10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2d14:	ea94 0f0c 	teqne	r4, ip
 80a2d18:	ea95 0f0c 	teqne	r5, ip
 80a2d1c:	f000 f8de 	bleq	80a2edc <__aeabi_dmul+0x1dc>
 80a2d20:	442c      	add	r4, r5
 80a2d22:	ea81 0603 	eor.w	r6, r1, r3
 80a2d26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2d2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2d2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2d32:	bf18      	it	ne
 80a2d34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2d38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2d3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2d40:	d038      	beq.n	80a2db4 <__aeabi_dmul+0xb4>
 80a2d42:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2d46:	f04f 0500 	mov.w	r5, #0
 80a2d4a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2d4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2d52:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2d56:	f04f 0600 	mov.w	r6, #0
 80a2d5a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2d5e:	f09c 0f00 	teq	ip, #0
 80a2d62:	bf18      	it	ne
 80a2d64:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2d68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2d6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2d70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2d74:	d204      	bcs.n	80a2d80 <__aeabi_dmul+0x80>
 80a2d76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2d7a:	416d      	adcs	r5, r5
 80a2d7c:	eb46 0606 	adc.w	r6, r6, r6
 80a2d80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2d84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2d88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2d8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2d90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2d94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2d98:	bf88      	it	hi
 80a2d9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2d9e:	d81e      	bhi.n	80a2dde <__aeabi_dmul+0xde>
 80a2da0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2da4:	bf08      	it	eq
 80a2da6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2daa:	f150 0000 	adcs.w	r0, r0, #0
 80a2dae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2db2:	bd70      	pop	{r4, r5, r6, pc}
 80a2db4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2db8:	ea46 0101 	orr.w	r1, r6, r1
 80a2dbc:	ea40 0002 	orr.w	r0, r0, r2
 80a2dc0:	ea81 0103 	eor.w	r1, r1, r3
 80a2dc4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2dc8:	bfc2      	ittt	gt
 80a2dca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2dce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2dd2:	bd70      	popgt	{r4, r5, r6, pc}
 80a2dd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2dd8:	f04f 0e00 	mov.w	lr, #0
 80a2ddc:	3c01      	subs	r4, #1
 80a2dde:	f300 80ab 	bgt.w	80a2f38 <__aeabi_dmul+0x238>
 80a2de2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2de6:	bfde      	ittt	le
 80a2de8:	2000      	movle	r0, #0
 80a2dea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2dee:	bd70      	pople	{r4, r5, r6, pc}
 80a2df0:	f1c4 0400 	rsb	r4, r4, #0
 80a2df4:	3c20      	subs	r4, #32
 80a2df6:	da35      	bge.n	80a2e64 <__aeabi_dmul+0x164>
 80a2df8:	340c      	adds	r4, #12
 80a2dfa:	dc1b      	bgt.n	80a2e34 <__aeabi_dmul+0x134>
 80a2dfc:	f104 0414 	add.w	r4, r4, #20
 80a2e00:	f1c4 0520 	rsb	r5, r4, #32
 80a2e04:	fa00 f305 	lsl.w	r3, r0, r5
 80a2e08:	fa20 f004 	lsr.w	r0, r0, r4
 80a2e0c:	fa01 f205 	lsl.w	r2, r1, r5
 80a2e10:	ea40 0002 	orr.w	r0, r0, r2
 80a2e14:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2e18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2e1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2e20:	fa21 f604 	lsr.w	r6, r1, r4
 80a2e24:	eb42 0106 	adc.w	r1, r2, r6
 80a2e28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2e2c:	bf08      	it	eq
 80a2e2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2e32:	bd70      	pop	{r4, r5, r6, pc}
 80a2e34:	f1c4 040c 	rsb	r4, r4, #12
 80a2e38:	f1c4 0520 	rsb	r5, r4, #32
 80a2e3c:	fa00 f304 	lsl.w	r3, r0, r4
 80a2e40:	fa20 f005 	lsr.w	r0, r0, r5
 80a2e44:	fa01 f204 	lsl.w	r2, r1, r4
 80a2e48:	ea40 0002 	orr.w	r0, r0, r2
 80a2e4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2e50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2e54:	f141 0100 	adc.w	r1, r1, #0
 80a2e58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2e5c:	bf08      	it	eq
 80a2e5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2e62:	bd70      	pop	{r4, r5, r6, pc}
 80a2e64:	f1c4 0520 	rsb	r5, r4, #32
 80a2e68:	fa00 f205 	lsl.w	r2, r0, r5
 80a2e6c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2e70:	fa20 f304 	lsr.w	r3, r0, r4
 80a2e74:	fa01 f205 	lsl.w	r2, r1, r5
 80a2e78:	ea43 0302 	orr.w	r3, r3, r2
 80a2e7c:	fa21 f004 	lsr.w	r0, r1, r4
 80a2e80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2e84:	fa21 f204 	lsr.w	r2, r1, r4
 80a2e88:	ea20 0002 	bic.w	r0, r0, r2
 80a2e8c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2e90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2e94:	bf08      	it	eq
 80a2e96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2e9a:	bd70      	pop	{r4, r5, r6, pc}
 80a2e9c:	f094 0f00 	teq	r4, #0
 80a2ea0:	d10f      	bne.n	80a2ec2 <__aeabi_dmul+0x1c2>
 80a2ea2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2ea6:	0040      	lsls	r0, r0, #1
 80a2ea8:	eb41 0101 	adc.w	r1, r1, r1
 80a2eac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2eb0:	bf08      	it	eq
 80a2eb2:	3c01      	subeq	r4, #1
 80a2eb4:	d0f7      	beq.n	80a2ea6 <__aeabi_dmul+0x1a6>
 80a2eb6:	ea41 0106 	orr.w	r1, r1, r6
 80a2eba:	f095 0f00 	teq	r5, #0
 80a2ebe:	bf18      	it	ne
 80a2ec0:	4770      	bxne	lr
 80a2ec2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2ec6:	0052      	lsls	r2, r2, #1
 80a2ec8:	eb43 0303 	adc.w	r3, r3, r3
 80a2ecc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2ed0:	bf08      	it	eq
 80a2ed2:	3d01      	subeq	r5, #1
 80a2ed4:	d0f7      	beq.n	80a2ec6 <__aeabi_dmul+0x1c6>
 80a2ed6:	ea43 0306 	orr.w	r3, r3, r6
 80a2eda:	4770      	bx	lr
 80a2edc:	ea94 0f0c 	teq	r4, ip
 80a2ee0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2ee4:	bf18      	it	ne
 80a2ee6:	ea95 0f0c 	teqne	r5, ip
 80a2eea:	d00c      	beq.n	80a2f06 <__aeabi_dmul+0x206>
 80a2eec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2ef0:	bf18      	it	ne
 80a2ef2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2ef6:	d1d1      	bne.n	80a2e9c <__aeabi_dmul+0x19c>
 80a2ef8:	ea81 0103 	eor.w	r1, r1, r3
 80a2efc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2f00:	f04f 0000 	mov.w	r0, #0
 80a2f04:	bd70      	pop	{r4, r5, r6, pc}
 80a2f06:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2f0a:	bf06      	itte	eq
 80a2f0c:	4610      	moveq	r0, r2
 80a2f0e:	4619      	moveq	r1, r3
 80a2f10:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2f14:	d019      	beq.n	80a2f4a <__aeabi_dmul+0x24a>
 80a2f16:	ea94 0f0c 	teq	r4, ip
 80a2f1a:	d102      	bne.n	80a2f22 <__aeabi_dmul+0x222>
 80a2f1c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2f20:	d113      	bne.n	80a2f4a <__aeabi_dmul+0x24a>
 80a2f22:	ea95 0f0c 	teq	r5, ip
 80a2f26:	d105      	bne.n	80a2f34 <__aeabi_dmul+0x234>
 80a2f28:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2f2c:	bf1c      	itt	ne
 80a2f2e:	4610      	movne	r0, r2
 80a2f30:	4619      	movne	r1, r3
 80a2f32:	d10a      	bne.n	80a2f4a <__aeabi_dmul+0x24a>
 80a2f34:	ea81 0103 	eor.w	r1, r1, r3
 80a2f38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2f3c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2f40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2f44:	f04f 0000 	mov.w	r0, #0
 80a2f48:	bd70      	pop	{r4, r5, r6, pc}
 80a2f4a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2f4e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2f52:	bd70      	pop	{r4, r5, r6, pc}

080a2f54 <__aeabi_ddiv>:
 80a2f54:	b570      	push	{r4, r5, r6, lr}
 80a2f56:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2f5a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2f5e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2f62:	bf1d      	ittte	ne
 80a2f64:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2f68:	ea94 0f0c 	teqne	r4, ip
 80a2f6c:	ea95 0f0c 	teqne	r5, ip
 80a2f70:	f000 f8a7 	bleq	80a30c2 <__aeabi_ddiv+0x16e>
 80a2f74:	eba4 0405 	sub.w	r4, r4, r5
 80a2f78:	ea81 0e03 	eor.w	lr, r1, r3
 80a2f7c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2f80:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2f84:	f000 8088 	beq.w	80a3098 <__aeabi_ddiv+0x144>
 80a2f88:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2f8c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2f90:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2f94:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2f98:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2f9c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2fa0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2fa4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2fa8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2fac:	429d      	cmp	r5, r3
 80a2fae:	bf08      	it	eq
 80a2fb0:	4296      	cmpeq	r6, r2
 80a2fb2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2fb6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2fba:	d202      	bcs.n	80a2fc2 <__aeabi_ddiv+0x6e>
 80a2fbc:	085b      	lsrs	r3, r3, #1
 80a2fbe:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2fc2:	1ab6      	subs	r6, r6, r2
 80a2fc4:	eb65 0503 	sbc.w	r5, r5, r3
 80a2fc8:	085b      	lsrs	r3, r3, #1
 80a2fca:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2fce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2fd2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2fd6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2fda:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2fde:	bf22      	ittt	cs
 80a2fe0:	1ab6      	subcs	r6, r6, r2
 80a2fe2:	4675      	movcs	r5, lr
 80a2fe4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2fe8:	085b      	lsrs	r3, r3, #1
 80a2fea:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2fee:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2ff2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2ff6:	bf22      	ittt	cs
 80a2ff8:	1ab6      	subcs	r6, r6, r2
 80a2ffa:	4675      	movcs	r5, lr
 80a2ffc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3000:	085b      	lsrs	r3, r3, #1
 80a3002:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3006:	ebb6 0e02 	subs.w	lr, r6, r2
 80a300a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a300e:	bf22      	ittt	cs
 80a3010:	1ab6      	subcs	r6, r6, r2
 80a3012:	4675      	movcs	r5, lr
 80a3014:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3018:	085b      	lsrs	r3, r3, #1
 80a301a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a301e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3022:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3026:	bf22      	ittt	cs
 80a3028:	1ab6      	subcs	r6, r6, r2
 80a302a:	4675      	movcs	r5, lr
 80a302c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3030:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3034:	d018      	beq.n	80a3068 <__aeabi_ddiv+0x114>
 80a3036:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a303a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a303e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a3042:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3046:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a304a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a304e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a3052:	d1c0      	bne.n	80a2fd6 <__aeabi_ddiv+0x82>
 80a3054:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3058:	d10b      	bne.n	80a3072 <__aeabi_ddiv+0x11e>
 80a305a:	ea41 0100 	orr.w	r1, r1, r0
 80a305e:	f04f 0000 	mov.w	r0, #0
 80a3062:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3066:	e7b6      	b.n	80a2fd6 <__aeabi_ddiv+0x82>
 80a3068:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a306c:	bf04      	itt	eq
 80a306e:	4301      	orreq	r1, r0
 80a3070:	2000      	moveq	r0, #0
 80a3072:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3076:	bf88      	it	hi
 80a3078:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a307c:	f63f aeaf 	bhi.w	80a2dde <__aeabi_dmul+0xde>
 80a3080:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3084:	bf04      	itt	eq
 80a3086:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a308a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a308e:	f150 0000 	adcs.w	r0, r0, #0
 80a3092:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3096:	bd70      	pop	{r4, r5, r6, pc}
 80a3098:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a309c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a30a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a30a4:	bfc2      	ittt	gt
 80a30a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a30aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a30ae:	bd70      	popgt	{r4, r5, r6, pc}
 80a30b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a30b4:	f04f 0e00 	mov.w	lr, #0
 80a30b8:	3c01      	subs	r4, #1
 80a30ba:	e690      	b.n	80a2dde <__aeabi_dmul+0xde>
 80a30bc:	ea45 0e06 	orr.w	lr, r5, r6
 80a30c0:	e68d      	b.n	80a2dde <__aeabi_dmul+0xde>
 80a30c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a30c6:	ea94 0f0c 	teq	r4, ip
 80a30ca:	bf08      	it	eq
 80a30cc:	ea95 0f0c 	teqeq	r5, ip
 80a30d0:	f43f af3b 	beq.w	80a2f4a <__aeabi_dmul+0x24a>
 80a30d4:	ea94 0f0c 	teq	r4, ip
 80a30d8:	d10a      	bne.n	80a30f0 <__aeabi_ddiv+0x19c>
 80a30da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a30de:	f47f af34 	bne.w	80a2f4a <__aeabi_dmul+0x24a>
 80a30e2:	ea95 0f0c 	teq	r5, ip
 80a30e6:	f47f af25 	bne.w	80a2f34 <__aeabi_dmul+0x234>
 80a30ea:	4610      	mov	r0, r2
 80a30ec:	4619      	mov	r1, r3
 80a30ee:	e72c      	b.n	80a2f4a <__aeabi_dmul+0x24a>
 80a30f0:	ea95 0f0c 	teq	r5, ip
 80a30f4:	d106      	bne.n	80a3104 <__aeabi_ddiv+0x1b0>
 80a30f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a30fa:	f43f aefd 	beq.w	80a2ef8 <__aeabi_dmul+0x1f8>
 80a30fe:	4610      	mov	r0, r2
 80a3100:	4619      	mov	r1, r3
 80a3102:	e722      	b.n	80a2f4a <__aeabi_dmul+0x24a>
 80a3104:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3108:	bf18      	it	ne
 80a310a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a310e:	f47f aec5 	bne.w	80a2e9c <__aeabi_dmul+0x19c>
 80a3112:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3116:	f47f af0d 	bne.w	80a2f34 <__aeabi_dmul+0x234>
 80a311a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a311e:	f47f aeeb 	bne.w	80a2ef8 <__aeabi_dmul+0x1f8>
 80a3122:	e712      	b.n	80a2f4a <__aeabi_dmul+0x24a>

080a3124 <__gedf2>:
 80a3124:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3128:	e006      	b.n	80a3138 <__cmpdf2+0x4>
 80a312a:	bf00      	nop

080a312c <__ledf2>:
 80a312c:	f04f 0c01 	mov.w	ip, #1
 80a3130:	e002      	b.n	80a3138 <__cmpdf2+0x4>
 80a3132:	bf00      	nop

080a3134 <__cmpdf2>:
 80a3134:	f04f 0c01 	mov.w	ip, #1
 80a3138:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a313c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3140:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3144:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3148:	bf18      	it	ne
 80a314a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a314e:	d01b      	beq.n	80a3188 <__cmpdf2+0x54>
 80a3150:	b001      	add	sp, #4
 80a3152:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3156:	bf0c      	ite	eq
 80a3158:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a315c:	ea91 0f03 	teqne	r1, r3
 80a3160:	bf02      	ittt	eq
 80a3162:	ea90 0f02 	teqeq	r0, r2
 80a3166:	2000      	moveq	r0, #0
 80a3168:	4770      	bxeq	lr
 80a316a:	f110 0f00 	cmn.w	r0, #0
 80a316e:	ea91 0f03 	teq	r1, r3
 80a3172:	bf58      	it	pl
 80a3174:	4299      	cmppl	r1, r3
 80a3176:	bf08      	it	eq
 80a3178:	4290      	cmpeq	r0, r2
 80a317a:	bf2c      	ite	cs
 80a317c:	17d8      	asrcs	r0, r3, #31
 80a317e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3182:	f040 0001 	orr.w	r0, r0, #1
 80a3186:	4770      	bx	lr
 80a3188:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a318c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3190:	d102      	bne.n	80a3198 <__cmpdf2+0x64>
 80a3192:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3196:	d107      	bne.n	80a31a8 <__cmpdf2+0x74>
 80a3198:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a319c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a31a0:	d1d6      	bne.n	80a3150 <__cmpdf2+0x1c>
 80a31a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a31a6:	d0d3      	beq.n	80a3150 <__cmpdf2+0x1c>
 80a31a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a31ac:	4770      	bx	lr
 80a31ae:	bf00      	nop

080a31b0 <__aeabi_cdrcmple>:
 80a31b0:	4684      	mov	ip, r0
 80a31b2:	4610      	mov	r0, r2
 80a31b4:	4662      	mov	r2, ip
 80a31b6:	468c      	mov	ip, r1
 80a31b8:	4619      	mov	r1, r3
 80a31ba:	4663      	mov	r3, ip
 80a31bc:	e000      	b.n	80a31c0 <__aeabi_cdcmpeq>
 80a31be:	bf00      	nop

080a31c0 <__aeabi_cdcmpeq>:
 80a31c0:	b501      	push	{r0, lr}
 80a31c2:	f7ff ffb7 	bl	80a3134 <__cmpdf2>
 80a31c6:	2800      	cmp	r0, #0
 80a31c8:	bf48      	it	mi
 80a31ca:	f110 0f00 	cmnmi.w	r0, #0
 80a31ce:	bd01      	pop	{r0, pc}

080a31d0 <__aeabi_dcmpeq>:
 80a31d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a31d4:	f7ff fff4 	bl	80a31c0 <__aeabi_cdcmpeq>
 80a31d8:	bf0c      	ite	eq
 80a31da:	2001      	moveq	r0, #1
 80a31dc:	2000      	movne	r0, #0
 80a31de:	f85d fb08 	ldr.w	pc, [sp], #8
 80a31e2:	bf00      	nop

080a31e4 <__aeabi_dcmplt>:
 80a31e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a31e8:	f7ff ffea 	bl	80a31c0 <__aeabi_cdcmpeq>
 80a31ec:	bf34      	ite	cc
 80a31ee:	2001      	movcc	r0, #1
 80a31f0:	2000      	movcs	r0, #0
 80a31f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a31f6:	bf00      	nop

080a31f8 <__aeabi_dcmple>:
 80a31f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a31fc:	f7ff ffe0 	bl	80a31c0 <__aeabi_cdcmpeq>
 80a3200:	bf94      	ite	ls
 80a3202:	2001      	movls	r0, #1
 80a3204:	2000      	movhi	r0, #0
 80a3206:	f85d fb08 	ldr.w	pc, [sp], #8
 80a320a:	bf00      	nop

080a320c <__aeabi_dcmpge>:
 80a320c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3210:	f7ff ffce 	bl	80a31b0 <__aeabi_cdrcmple>
 80a3214:	bf94      	ite	ls
 80a3216:	2001      	movls	r0, #1
 80a3218:	2000      	movhi	r0, #0
 80a321a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a321e:	bf00      	nop

080a3220 <__aeabi_dcmpgt>:
 80a3220:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3224:	f7ff ffc4 	bl	80a31b0 <__aeabi_cdrcmple>
 80a3228:	bf34      	ite	cc
 80a322a:	2001      	movcc	r0, #1
 80a322c:	2000      	movcs	r0, #0
 80a322e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3232:	bf00      	nop

080a3234 <__aeabi_dcmpun>:
 80a3234:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3238:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a323c:	d102      	bne.n	80a3244 <__aeabi_dcmpun+0x10>
 80a323e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3242:	d10a      	bne.n	80a325a <__aeabi_dcmpun+0x26>
 80a3244:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3248:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a324c:	d102      	bne.n	80a3254 <__aeabi_dcmpun+0x20>
 80a324e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3252:	d102      	bne.n	80a325a <__aeabi_dcmpun+0x26>
 80a3254:	f04f 0000 	mov.w	r0, #0
 80a3258:	4770      	bx	lr
 80a325a:	f04f 0001 	mov.w	r0, #1
 80a325e:	4770      	bx	lr

080a3260 <__aeabi_d2iz>:
 80a3260:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3264:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3268:	d215      	bcs.n	80a3296 <__aeabi_d2iz+0x36>
 80a326a:	d511      	bpl.n	80a3290 <__aeabi_d2iz+0x30>
 80a326c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3270:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3274:	d912      	bls.n	80a329c <__aeabi_d2iz+0x3c>
 80a3276:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a327a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a327e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3282:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3286:	fa23 f002 	lsr.w	r0, r3, r2
 80a328a:	bf18      	it	ne
 80a328c:	4240      	negne	r0, r0
 80a328e:	4770      	bx	lr
 80a3290:	f04f 0000 	mov.w	r0, #0
 80a3294:	4770      	bx	lr
 80a3296:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a329a:	d105      	bne.n	80a32a8 <__aeabi_d2iz+0x48>
 80a329c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a32a0:	bf08      	it	eq
 80a32a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a32a6:	4770      	bx	lr
 80a32a8:	f04f 0000 	mov.w	r0, #0
 80a32ac:	4770      	bx	lr
 80a32ae:	bf00      	nop

080a32b0 <__aeabi_d2uiz>:
 80a32b0:	004a      	lsls	r2, r1, #1
 80a32b2:	d211      	bcs.n	80a32d8 <__aeabi_d2uiz+0x28>
 80a32b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a32b8:	d211      	bcs.n	80a32de <__aeabi_d2uiz+0x2e>
 80a32ba:	d50d      	bpl.n	80a32d8 <__aeabi_d2uiz+0x28>
 80a32bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a32c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a32c4:	d40e      	bmi.n	80a32e4 <__aeabi_d2uiz+0x34>
 80a32c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a32ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a32ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a32d2:	fa23 f002 	lsr.w	r0, r3, r2
 80a32d6:	4770      	bx	lr
 80a32d8:	f04f 0000 	mov.w	r0, #0
 80a32dc:	4770      	bx	lr
 80a32de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a32e2:	d102      	bne.n	80a32ea <__aeabi_d2uiz+0x3a>
 80a32e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a32e8:	4770      	bx	lr
 80a32ea:	f04f 0000 	mov.w	r0, #0
 80a32ee:	4770      	bx	lr

080a32f0 <__aeabi_d2f>:
 80a32f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a32f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a32f8:	bf24      	itt	cs
 80a32fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a32fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a3302:	d90d      	bls.n	80a3320 <__aeabi_d2f+0x30>
 80a3304:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3308:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a330c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a3310:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a3314:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a3318:	bf08      	it	eq
 80a331a:	f020 0001 	biceq.w	r0, r0, #1
 80a331e:	4770      	bx	lr
 80a3320:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a3324:	d121      	bne.n	80a336a <__aeabi_d2f+0x7a>
 80a3326:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a332a:	bfbc      	itt	lt
 80a332c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a3330:	4770      	bxlt	lr
 80a3332:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3336:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a333a:	f1c2 0218 	rsb	r2, r2, #24
 80a333e:	f1c2 0c20 	rsb	ip, r2, #32
 80a3342:	fa10 f30c 	lsls.w	r3, r0, ip
 80a3346:	fa20 f002 	lsr.w	r0, r0, r2
 80a334a:	bf18      	it	ne
 80a334c:	f040 0001 	orrne.w	r0, r0, #1
 80a3350:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3354:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a3358:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a335c:	ea40 000c 	orr.w	r0, r0, ip
 80a3360:	fa23 f302 	lsr.w	r3, r3, r2
 80a3364:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a3368:	e7cc      	b.n	80a3304 <__aeabi_d2f+0x14>
 80a336a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a336e:	d107      	bne.n	80a3380 <__aeabi_d2f+0x90>
 80a3370:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a3374:	bf1e      	ittt	ne
 80a3376:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a337a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a337e:	4770      	bxne	lr
 80a3380:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a3384:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3388:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a338c:	4770      	bx	lr
 80a338e:	bf00      	nop

080a3390 <atof>:
 80a3390:	2100      	movs	r1, #0
 80a3392:	f000 be99 	b.w	80a40c8 <strtod>
	...

080a3398 <__cxa_atexit>:
 80a3398:	b510      	push	{r4, lr}
 80a339a:	4c05      	ldr	r4, [pc, #20]	; (80a33b0 <__cxa_atexit+0x18>)
 80a339c:	4613      	mov	r3, r2
 80a339e:	b12c      	cbz	r4, 80a33ac <__cxa_atexit+0x14>
 80a33a0:	460a      	mov	r2, r1
 80a33a2:	4601      	mov	r1, r0
 80a33a4:	2002      	movs	r0, #2
 80a33a6:	f3af 8000 	nop.w
 80a33aa:	bd10      	pop	{r4, pc}
 80a33ac:	4620      	mov	r0, r4
 80a33ae:	bd10      	pop	{r4, pc}
 80a33b0:	00000000 	.word	0x00000000

080a33b4 <_localeconv_r>:
 80a33b4:	4800      	ldr	r0, [pc, #0]	; (80a33b8 <_localeconv_r+0x4>)
 80a33b6:	4770      	bx	lr
 80a33b8:	20000074 	.word	0x20000074

080a33bc <memcpy>:
 80a33bc:	b510      	push	{r4, lr}
 80a33be:	1e43      	subs	r3, r0, #1
 80a33c0:	440a      	add	r2, r1
 80a33c2:	4291      	cmp	r1, r2
 80a33c4:	d004      	beq.n	80a33d0 <memcpy+0x14>
 80a33c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a33ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a33ce:	e7f8      	b.n	80a33c2 <memcpy+0x6>
 80a33d0:	bd10      	pop	{r4, pc}

080a33d2 <memset>:
 80a33d2:	4603      	mov	r3, r0
 80a33d4:	4402      	add	r2, r0
 80a33d6:	4293      	cmp	r3, r2
 80a33d8:	d002      	beq.n	80a33e0 <memset+0xe>
 80a33da:	f803 1b01 	strb.w	r1, [r3], #1
 80a33de:	e7fa      	b.n	80a33d6 <memset+0x4>
 80a33e0:	4770      	bx	lr
	...

080a33e4 <srand>:
 80a33e4:	b538      	push	{r3, r4, r5, lr}
 80a33e6:	4b12      	ldr	r3, [pc, #72]	; (80a3430 <srand+0x4c>)
 80a33e8:	4605      	mov	r5, r0
 80a33ea:	681c      	ldr	r4, [r3, #0]
 80a33ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a33ee:	b9d3      	cbnz	r3, 80a3426 <srand+0x42>
 80a33f0:	2018      	movs	r0, #24
 80a33f2:	f7fe fab9 	bl	80a1968 <malloc>
 80a33f6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a33fa:	63a0      	str	r0, [r4, #56]	; 0x38
 80a33fc:	8003      	strh	r3, [r0, #0]
 80a33fe:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a3402:	8043      	strh	r3, [r0, #2]
 80a3404:	f241 2334 	movw	r3, #4660	; 0x1234
 80a3408:	8083      	strh	r3, [r0, #4]
 80a340a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a340e:	80c3      	strh	r3, [r0, #6]
 80a3410:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a3414:	8103      	strh	r3, [r0, #8]
 80a3416:	2305      	movs	r3, #5
 80a3418:	8143      	strh	r3, [r0, #10]
 80a341a:	230b      	movs	r3, #11
 80a341c:	8183      	strh	r3, [r0, #12]
 80a341e:	2201      	movs	r2, #1
 80a3420:	2300      	movs	r3, #0
 80a3422:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3426:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3428:	2200      	movs	r2, #0
 80a342a:	611d      	str	r5, [r3, #16]
 80a342c:	615a      	str	r2, [r3, #20]
 80a342e:	bd38      	pop	{r3, r4, r5, pc}
 80a3430:	20000070 	.word	0x20000070

080a3434 <strcmp>:
 80a3434:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3438:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a343c:	2a01      	cmp	r2, #1
 80a343e:	bf28      	it	cs
 80a3440:	429a      	cmpcs	r2, r3
 80a3442:	d0f7      	beq.n	80a3434 <strcmp>
 80a3444:	1ad0      	subs	r0, r2, r3
 80a3446:	4770      	bx	lr

080a3448 <strlen>:
 80a3448:	4603      	mov	r3, r0
 80a344a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a344e:	2a00      	cmp	r2, #0
 80a3450:	d1fb      	bne.n	80a344a <strlen+0x2>
 80a3452:	1a18      	subs	r0, r3, r0
 80a3454:	3801      	subs	r0, #1
 80a3456:	4770      	bx	lr

080a3458 <strncmp>:
 80a3458:	b530      	push	{r4, r5, lr}
 80a345a:	b182      	cbz	r2, 80a347e <strncmp+0x26>
 80a345c:	1e45      	subs	r5, r0, #1
 80a345e:	3901      	subs	r1, #1
 80a3460:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a3464:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a3468:	42a3      	cmp	r3, r4
 80a346a:	d106      	bne.n	80a347a <strncmp+0x22>
 80a346c:	43ec      	mvns	r4, r5
 80a346e:	4414      	add	r4, r2
 80a3470:	42e0      	cmn	r0, r4
 80a3472:	d001      	beq.n	80a3478 <strncmp+0x20>
 80a3474:	2b00      	cmp	r3, #0
 80a3476:	d1f3      	bne.n	80a3460 <strncmp+0x8>
 80a3478:	461c      	mov	r4, r3
 80a347a:	1b18      	subs	r0, r3, r4
 80a347c:	bd30      	pop	{r4, r5, pc}
 80a347e:	4610      	mov	r0, r2
 80a3480:	bd30      	pop	{r4, r5, pc}

080a3482 <sulp>:
 80a3482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3486:	460f      	mov	r7, r1
 80a3488:	4690      	mov	r8, r2
 80a348a:	f001 fc07 	bl	80a4c9c <__ulp>
 80a348e:	4604      	mov	r4, r0
 80a3490:	460d      	mov	r5, r1
 80a3492:	f1b8 0f00 	cmp.w	r8, #0
 80a3496:	d011      	beq.n	80a34bc <sulp+0x3a>
 80a3498:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a349c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a34a0:	2b00      	cmp	r3, #0
 80a34a2:	dd0b      	ble.n	80a34bc <sulp+0x3a>
 80a34a4:	051b      	lsls	r3, r3, #20
 80a34a6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a34aa:	2400      	movs	r4, #0
 80a34ac:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a34b0:	4622      	mov	r2, r4
 80a34b2:	462b      	mov	r3, r5
 80a34b4:	f7ff fc24 	bl	80a2d00 <__aeabi_dmul>
 80a34b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a34bc:	4620      	mov	r0, r4
 80a34be:	4629      	mov	r1, r5
 80a34c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a34c4:	0000      	movs	r0, r0
	...

080a34c8 <_strtod_r>:
 80a34c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a34cc:	4682      	mov	sl, r0
 80a34ce:	460c      	mov	r4, r1
 80a34d0:	b09d      	sub	sp, #116	; 0x74
 80a34d2:	2300      	movs	r3, #0
 80a34d4:	9213      	str	r2, [sp, #76]	; 0x4c
 80a34d6:	9318      	str	r3, [sp, #96]	; 0x60
 80a34d8:	f04f 0800 	mov.w	r8, #0
 80a34dc:	f04f 0900 	mov.w	r9, #0
 80a34e0:	9117      	str	r1, [sp, #92]	; 0x5c
 80a34e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a34e4:	781a      	ldrb	r2, [r3, #0]
 80a34e6:	2a0d      	cmp	r2, #13
 80a34e8:	d805      	bhi.n	80a34f6 <_strtod_r+0x2e>
 80a34ea:	2a09      	cmp	r2, #9
 80a34ec:	d213      	bcs.n	80a3516 <_strtod_r+0x4e>
 80a34ee:	2a00      	cmp	r2, #0
 80a34f0:	f000 81ad 	beq.w	80a384e <_strtod_r+0x386>
 80a34f4:	e012      	b.n	80a351c <_strtod_r+0x54>
 80a34f6:	2a2b      	cmp	r2, #43	; 0x2b
 80a34f8:	d004      	beq.n	80a3504 <_strtod_r+0x3c>
 80a34fa:	2a2d      	cmp	r2, #45	; 0x2d
 80a34fc:	d004      	beq.n	80a3508 <_strtod_r+0x40>
 80a34fe:	2a20      	cmp	r2, #32
 80a3500:	d10c      	bne.n	80a351c <_strtod_r+0x54>
 80a3502:	e008      	b.n	80a3516 <_strtod_r+0x4e>
 80a3504:	2200      	movs	r2, #0
 80a3506:	e000      	b.n	80a350a <_strtod_r+0x42>
 80a3508:	2201      	movs	r2, #1
 80a350a:	920c      	str	r2, [sp, #48]	; 0x30
 80a350c:	1c5a      	adds	r2, r3, #1
 80a350e:	9217      	str	r2, [sp, #92]	; 0x5c
 80a3510:	785b      	ldrb	r3, [r3, #1]
 80a3512:	b92b      	cbnz	r3, 80a3520 <_strtod_r+0x58>
 80a3514:	e19b      	b.n	80a384e <_strtod_r+0x386>
 80a3516:	3301      	adds	r3, #1
 80a3518:	9317      	str	r3, [sp, #92]	; 0x5c
 80a351a:	e7e2      	b.n	80a34e2 <_strtod_r+0x1a>
 80a351c:	2300      	movs	r3, #0
 80a351e:	930c      	str	r3, [sp, #48]	; 0x30
 80a3520:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a3522:	782b      	ldrb	r3, [r5, #0]
 80a3524:	2b30      	cmp	r3, #48	; 0x30
 80a3526:	d15c      	bne.n	80a35e2 <_strtod_r+0x11a>
 80a3528:	786b      	ldrb	r3, [r5, #1]
 80a352a:	2b58      	cmp	r3, #88	; 0x58
 80a352c:	d001      	beq.n	80a3532 <_strtod_r+0x6a>
 80a352e:	2b78      	cmp	r3, #120	; 0x78
 80a3530:	d14c      	bne.n	80a35cc <_strtod_r+0x104>
 80a3532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a3534:	4aa8      	ldr	r2, [pc, #672]	; (80a37d8 <_strtod_r+0x310>)
 80a3536:	9301      	str	r3, [sp, #4]
 80a3538:	ab18      	add	r3, sp, #96	; 0x60
 80a353a:	9300      	str	r3, [sp, #0]
 80a353c:	a917      	add	r1, sp, #92	; 0x5c
 80a353e:	ab19      	add	r3, sp, #100	; 0x64
 80a3540:	4650      	mov	r0, sl
 80a3542:	f000 fe14 	bl	80a416e <__gethex>
 80a3546:	f010 0607 	ands.w	r6, r0, #7
 80a354a:	4604      	mov	r4, r0
 80a354c:	f000 8585 	beq.w	80a405a <_strtod_r+0xb92>
 80a3550:	2e06      	cmp	r6, #6
 80a3552:	d105      	bne.n	80a3560 <_strtod_r+0x98>
 80a3554:	3501      	adds	r5, #1
 80a3556:	2300      	movs	r3, #0
 80a3558:	9517      	str	r5, [sp, #92]	; 0x5c
 80a355a:	930c      	str	r3, [sp, #48]	; 0x30
 80a355c:	f000 bd7d 	b.w	80a405a <_strtod_r+0xb92>
 80a3560:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a3562:	b13a      	cbz	r2, 80a3574 <_strtod_r+0xac>
 80a3564:	2135      	movs	r1, #53	; 0x35
 80a3566:	a81a      	add	r0, sp, #104	; 0x68
 80a3568:	f001 fc7f 	bl	80a4e6a <__copybits>
 80a356c:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a356e:	4650      	mov	r0, sl
 80a3570:	f001 f904 	bl	80a477c <_Bfree>
 80a3574:	2e06      	cmp	r6, #6
 80a3576:	d822      	bhi.n	80a35be <_strtod_r+0xf6>
 80a3578:	e8df f006 	tbb	[pc, r6]
 80a357c:	18080d04 	.word	0x18080d04
 80a3580:	0d1d      	.short	0x0d1d
 80a3582:	04          	.byte	0x04
 80a3583:	00          	.byte	0x00
 80a3584:	f04f 0900 	mov.w	r9, #0
 80a3588:	46c8      	mov	r8, r9
 80a358a:	e018      	b.n	80a35be <_strtod_r+0xf6>
 80a358c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a3590:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80a3594:	e013      	b.n	80a35be <_strtod_r+0xf6>
 80a3596:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a3598:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a359a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a359e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a35a2:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a35a6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a35aa:	e008      	b.n	80a35be <_strtod_r+0xf6>
 80a35ac:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80a37dc <_strtod_r+0x314>
 80a35b0:	f04f 0800 	mov.w	r8, #0
 80a35b4:	e003      	b.n	80a35be <_strtod_r+0xf6>
 80a35b6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a35ba:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a35be:	0721      	lsls	r1, r4, #28
 80a35c0:	f140 854b 	bpl.w	80a405a <_strtod_r+0xb92>
 80a35c4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a35c8:	f000 bd47 	b.w	80a405a <_strtod_r+0xb92>
 80a35cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a35ce:	1c5a      	adds	r2, r3, #1
 80a35d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80a35d2:	785b      	ldrb	r3, [r3, #1]
 80a35d4:	2b30      	cmp	r3, #48	; 0x30
 80a35d6:	d0f9      	beq.n	80a35cc <_strtod_r+0x104>
 80a35d8:	2b00      	cmp	r3, #0
 80a35da:	f000 853e 	beq.w	80a405a <_strtod_r+0xb92>
 80a35de:	2301      	movs	r3, #1
 80a35e0:	e000      	b.n	80a35e4 <_strtod_r+0x11c>
 80a35e2:	2300      	movs	r3, #0
 80a35e4:	9305      	str	r3, [sp, #20]
 80a35e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a35e8:	220a      	movs	r2, #10
 80a35ea:	9306      	str	r3, [sp, #24]
 80a35ec:	2300      	movs	r3, #0
 80a35ee:	469b      	mov	fp, r3
 80a35f0:	9302      	str	r3, [sp, #8]
 80a35f2:	9304      	str	r3, [sp, #16]
 80a35f4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a35f6:	782e      	ldrb	r6, [r5, #0]
 80a35f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80a35fc:	b2d9      	uxtb	r1, r3
 80a35fe:	2909      	cmp	r1, #9
 80a3600:	d811      	bhi.n	80a3626 <_strtod_r+0x15e>
 80a3602:	f1bb 0f08 	cmp.w	fp, #8
 80a3606:	bfd5      	itete	le
 80a3608:	9904      	ldrle	r1, [sp, #16]
 80a360a:	9902      	ldrgt	r1, [sp, #8]
 80a360c:	fb02 3301 	mlale	r3, r2, r1, r3
 80a3610:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a3614:	f105 0501 	add.w	r5, r5, #1
 80a3618:	bfd4      	ite	le
 80a361a:	9304      	strle	r3, [sp, #16]
 80a361c:	9302      	strgt	r3, [sp, #8]
 80a361e:	f10b 0b01 	add.w	fp, fp, #1
 80a3622:	9517      	str	r5, [sp, #92]	; 0x5c
 80a3624:	e7e6      	b.n	80a35f4 <_strtod_r+0x12c>
 80a3626:	4650      	mov	r0, sl
 80a3628:	f7ff fec4 	bl	80a33b4 <_localeconv_r>
 80a362c:	6807      	ldr	r7, [r0, #0]
 80a362e:	4650      	mov	r0, sl
 80a3630:	f7ff fec0 	bl	80a33b4 <_localeconv_r>
 80a3634:	6800      	ldr	r0, [r0, #0]
 80a3636:	f7ff ff07 	bl	80a3448 <strlen>
 80a363a:	4639      	mov	r1, r7
 80a363c:	4602      	mov	r2, r0
 80a363e:	4628      	mov	r0, r5
 80a3640:	f7ff ff0a 	bl	80a3458 <strncmp>
 80a3644:	4607      	mov	r7, r0
 80a3646:	b128      	cbz	r0, 80a3654 <_strtod_r+0x18c>
 80a3648:	2000      	movs	r0, #0
 80a364a:	4633      	mov	r3, r6
 80a364c:	465d      	mov	r5, fp
 80a364e:	4602      	mov	r2, r0
 80a3650:	4601      	mov	r1, r0
 80a3652:	e05a      	b.n	80a370a <_strtod_r+0x242>
 80a3654:	4650      	mov	r0, sl
 80a3656:	f7ff fead 	bl	80a33b4 <_localeconv_r>
 80a365a:	6800      	ldr	r0, [r0, #0]
 80a365c:	f7ff fef4 	bl	80a3448 <strlen>
 80a3660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3662:	181a      	adds	r2, r3, r0
 80a3664:	9217      	str	r2, [sp, #92]	; 0x5c
 80a3666:	5c1b      	ldrb	r3, [r3, r0]
 80a3668:	f1bb 0f00 	cmp.w	fp, #0
 80a366c:	d145      	bne.n	80a36fa <_strtod_r+0x232>
 80a366e:	4658      	mov	r0, fp
 80a3670:	2b30      	cmp	r3, #48	; 0x30
 80a3672:	d105      	bne.n	80a3680 <_strtod_r+0x1b8>
 80a3674:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3676:	3001      	adds	r0, #1
 80a3678:	1c5a      	adds	r2, r3, #1
 80a367a:	9217      	str	r2, [sp, #92]	; 0x5c
 80a367c:	785b      	ldrb	r3, [r3, #1]
 80a367e:	e7f7      	b.n	80a3670 <_strtod_r+0x1a8>
 80a3680:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80a3684:	2a08      	cmp	r2, #8
 80a3686:	d846      	bhi.n	80a3716 <_strtod_r+0x24e>
 80a3688:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a368a:	9206      	str	r2, [sp, #24]
 80a368c:	4602      	mov	r2, r0
 80a368e:	2000      	movs	r0, #0
 80a3690:	4605      	mov	r5, r0
 80a3692:	3b30      	subs	r3, #48	; 0x30
 80a3694:	f100 0101 	add.w	r1, r0, #1
 80a3698:	d029      	beq.n	80a36ee <_strtod_r+0x226>
 80a369a:	440a      	add	r2, r1
 80a369c:	4629      	mov	r1, r5
 80a369e:	eb05 0c00 	add.w	ip, r5, r0
 80a36a2:	260a      	movs	r6, #10
 80a36a4:	4561      	cmp	r1, ip
 80a36a6:	d00f      	beq.n	80a36c8 <_strtod_r+0x200>
 80a36a8:	3101      	adds	r1, #1
 80a36aa:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80a36ae:	f1be 0f08 	cmp.w	lr, #8
 80a36b2:	dc03      	bgt.n	80a36bc <_strtod_r+0x1f4>
 80a36b4:	9f04      	ldr	r7, [sp, #16]
 80a36b6:	4377      	muls	r7, r6
 80a36b8:	9704      	str	r7, [sp, #16]
 80a36ba:	e7f3      	b.n	80a36a4 <_strtod_r+0x1dc>
 80a36bc:	2910      	cmp	r1, #16
 80a36be:	bfde      	ittt	le
 80a36c0:	9f02      	ldrle	r7, [sp, #8]
 80a36c2:	4377      	mulle	r7, r6
 80a36c4:	9702      	strle	r7, [sp, #8]
 80a36c6:	e7ed      	b.n	80a36a4 <_strtod_r+0x1dc>
 80a36c8:	4428      	add	r0, r5
 80a36ca:	2808      	cmp	r0, #8
 80a36cc:	f100 0501 	add.w	r5, r0, #1
 80a36d0:	dc05      	bgt.n	80a36de <_strtod_r+0x216>
 80a36d2:	9804      	ldr	r0, [sp, #16]
 80a36d4:	210a      	movs	r1, #10
 80a36d6:	fb01 3300 	mla	r3, r1, r0, r3
 80a36da:	9304      	str	r3, [sp, #16]
 80a36dc:	e006      	b.n	80a36ec <_strtod_r+0x224>
 80a36de:	2d10      	cmp	r5, #16
 80a36e0:	bfdf      	itttt	le
 80a36e2:	9802      	ldrle	r0, [sp, #8]
 80a36e4:	210a      	movle	r1, #10
 80a36e6:	fb01 3300 	mlale	r3, r1, r0, r3
 80a36ea:	9302      	strle	r3, [sp, #8]
 80a36ec:	2100      	movs	r1, #0
 80a36ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a36f0:	1c58      	adds	r0, r3, #1
 80a36f2:	9017      	str	r0, [sp, #92]	; 0x5c
 80a36f4:	785b      	ldrb	r3, [r3, #1]
 80a36f6:	4608      	mov	r0, r1
 80a36f8:	e002      	b.n	80a3700 <_strtod_r+0x238>
 80a36fa:	465d      	mov	r5, fp
 80a36fc:	4638      	mov	r0, r7
 80a36fe:	463a      	mov	r2, r7
 80a3700:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a3704:	2909      	cmp	r1, #9
 80a3706:	d9c4      	bls.n	80a3692 <_strtod_r+0x1ca>
 80a3708:	2101      	movs	r1, #1
 80a370a:	2b65      	cmp	r3, #101	; 0x65
 80a370c:	d001      	beq.n	80a3712 <_strtod_r+0x24a>
 80a370e:	2b45      	cmp	r3, #69	; 0x45
 80a3710:	d14f      	bne.n	80a37b2 <_strtod_r+0x2ea>
 80a3712:	b96d      	cbnz	r5, 80a3730 <_strtod_r+0x268>
 80a3714:	e004      	b.n	80a3720 <_strtod_r+0x258>
 80a3716:	2b65      	cmp	r3, #101	; 0x65
 80a3718:	f040 84ad 	bne.w	80a4076 <_strtod_r+0xbae>
 80a371c:	2200      	movs	r2, #0
 80a371e:	2101      	movs	r1, #1
 80a3720:	b928      	cbnz	r0, 80a372e <_strtod_r+0x266>
 80a3722:	9b05      	ldr	r3, [sp, #20]
 80a3724:	2b00      	cmp	r3, #0
 80a3726:	f000 8092 	beq.w	80a384e <_strtod_r+0x386>
 80a372a:	4605      	mov	r5, r0
 80a372c:	e000      	b.n	80a3730 <_strtod_r+0x268>
 80a372e:	2500      	movs	r5, #0
 80a3730:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a3732:	1c63      	adds	r3, r4, #1
 80a3734:	9317      	str	r3, [sp, #92]	; 0x5c
 80a3736:	7863      	ldrb	r3, [r4, #1]
 80a3738:	2b2b      	cmp	r3, #43	; 0x2b
 80a373a:	d006      	beq.n	80a374a <_strtod_r+0x282>
 80a373c:	2b2d      	cmp	r3, #45	; 0x2d
 80a373e:	d002      	beq.n	80a3746 <_strtod_r+0x27e>
 80a3740:	2600      	movs	r6, #0
 80a3742:	9603      	str	r6, [sp, #12]
 80a3744:	e006      	b.n	80a3754 <_strtod_r+0x28c>
 80a3746:	2301      	movs	r3, #1
 80a3748:	e000      	b.n	80a374c <_strtod_r+0x284>
 80a374a:	2300      	movs	r3, #0
 80a374c:	9303      	str	r3, [sp, #12]
 80a374e:	1ca3      	adds	r3, r4, #2
 80a3750:	9317      	str	r3, [sp, #92]	; 0x5c
 80a3752:	78a3      	ldrb	r3, [r4, #2]
 80a3754:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80a3758:	2e09      	cmp	r6, #9
 80a375a:	d829      	bhi.n	80a37b0 <_strtod_r+0x2e8>
 80a375c:	2b30      	cmp	r3, #48	; 0x30
 80a375e:	d104      	bne.n	80a376a <_strtod_r+0x2a2>
 80a3760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3762:	1c5e      	adds	r6, r3, #1
 80a3764:	9617      	str	r6, [sp, #92]	; 0x5c
 80a3766:	785b      	ldrb	r3, [r3, #1]
 80a3768:	e7f8      	b.n	80a375c <_strtod_r+0x294>
 80a376a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80a376e:	2e08      	cmp	r6, #8
 80a3770:	d81f      	bhi.n	80a37b2 <_strtod_r+0x2ea>
 80a3772:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80a3776:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3778:	461f      	mov	r7, r3
 80a377a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a377c:	1c5e      	adds	r6, r3, #1
 80a377e:	9617      	str	r6, [sp, #92]	; 0x5c
 80a3780:	785b      	ldrb	r3, [r3, #1]
 80a3782:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80a3786:	f1bc 0f09 	cmp.w	ip, #9
 80a378a:	d805      	bhi.n	80a3798 <_strtod_r+0x2d0>
 80a378c:	260a      	movs	r6, #10
 80a378e:	fb06 3e0e 	mla	lr, r6, lr, r3
 80a3792:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80a3796:	e7f0      	b.n	80a377a <_strtod_r+0x2b2>
 80a3798:	1bf6      	subs	r6, r6, r7
 80a379a:	2e08      	cmp	r6, #8
 80a379c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80a37a0:	dc02      	bgt.n	80a37a8 <_strtod_r+0x2e0>
 80a37a2:	4576      	cmp	r6, lr
 80a37a4:	bfa8      	it	ge
 80a37a6:	4676      	movge	r6, lr
 80a37a8:	9f03      	ldr	r7, [sp, #12]
 80a37aa:	b11f      	cbz	r7, 80a37b4 <_strtod_r+0x2ec>
 80a37ac:	4276      	negs	r6, r6
 80a37ae:	e001      	b.n	80a37b4 <_strtod_r+0x2ec>
 80a37b0:	9417      	str	r4, [sp, #92]	; 0x5c
 80a37b2:	2600      	movs	r6, #0
 80a37b4:	2d00      	cmp	r5, #0
 80a37b6:	d152      	bne.n	80a385e <_strtod_r+0x396>
 80a37b8:	2800      	cmp	r0, #0
 80a37ba:	f040 844e 	bne.w	80a405a <_strtod_r+0xb92>
 80a37be:	9a05      	ldr	r2, [sp, #20]
 80a37c0:	2a00      	cmp	r2, #0
 80a37c2:	f040 844a 	bne.w	80a405a <_strtod_r+0xb92>
 80a37c6:	2900      	cmp	r1, #0
 80a37c8:	d141      	bne.n	80a384e <_strtod_r+0x386>
 80a37ca:	2b4e      	cmp	r3, #78	; 0x4e
 80a37cc:	d020      	beq.n	80a3810 <_strtod_r+0x348>
 80a37ce:	dc07      	bgt.n	80a37e0 <_strtod_r+0x318>
 80a37d0:	2b49      	cmp	r3, #73	; 0x49
 80a37d2:	d00a      	beq.n	80a37ea <_strtod_r+0x322>
 80a37d4:	e03b      	b.n	80a384e <_strtod_r+0x386>
 80a37d6:	bf00      	nop
 80a37d8:	080a51f0 	.word	0x080a51f0
 80a37dc:	7ff00000 	.word	0x7ff00000
 80a37e0:	2b69      	cmp	r3, #105	; 0x69
 80a37e2:	d002      	beq.n	80a37ea <_strtod_r+0x322>
 80a37e4:	2b6e      	cmp	r3, #110	; 0x6e
 80a37e6:	d013      	beq.n	80a3810 <_strtod_r+0x348>
 80a37e8:	e031      	b.n	80a384e <_strtod_r+0x386>
 80a37ea:	49aa      	ldr	r1, [pc, #680]	; (80a3a94 <_strtod_r+0x5cc>)
 80a37ec:	a817      	add	r0, sp, #92	; 0x5c
 80a37ee:	f000 feef 	bl	80a45d0 <__match>
 80a37f2:	b360      	cbz	r0, 80a384e <_strtod_r+0x386>
 80a37f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a37f6:	49a8      	ldr	r1, [pc, #672]	; (80a3a98 <_strtod_r+0x5d0>)
 80a37f8:	3b01      	subs	r3, #1
 80a37fa:	a817      	add	r0, sp, #92	; 0x5c
 80a37fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80a37fe:	f000 fee7 	bl	80a45d0 <__match>
 80a3802:	b910      	cbnz	r0, 80a380a <_strtod_r+0x342>
 80a3804:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3806:	3301      	adds	r3, #1
 80a3808:	9317      	str	r3, [sp, #92]	; 0x5c
 80a380a:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80a3ab4 <_strtod_r+0x5ec>
 80a380e:	e01a      	b.n	80a3846 <_strtod_r+0x37e>
 80a3810:	49a2      	ldr	r1, [pc, #648]	; (80a3a9c <_strtod_r+0x5d4>)
 80a3812:	a817      	add	r0, sp, #92	; 0x5c
 80a3814:	f000 fedc 	bl	80a45d0 <__match>
 80a3818:	b1c8      	cbz	r0, 80a384e <_strtod_r+0x386>
 80a381a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a381c:	781b      	ldrb	r3, [r3, #0]
 80a381e:	2b28      	cmp	r3, #40	; 0x28
 80a3820:	d10f      	bne.n	80a3842 <_strtod_r+0x37a>
 80a3822:	aa1a      	add	r2, sp, #104	; 0x68
 80a3824:	499e      	ldr	r1, [pc, #632]	; (80a3aa0 <_strtod_r+0x5d8>)
 80a3826:	a817      	add	r0, sp, #92	; 0x5c
 80a3828:	f000 fee5 	bl	80a45f6 <__hexnan>
 80a382c:	2805      	cmp	r0, #5
 80a382e:	d108      	bne.n	80a3842 <_strtod_r+0x37a>
 80a3830:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a3832:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a3836:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a383a:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a383e:	f000 bc0c 	b.w	80a405a <_strtod_r+0xb92>
 80a3842:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80a3ab8 <_strtod_r+0x5f0>
 80a3846:	f04f 0800 	mov.w	r8, #0
 80a384a:	f000 bc06 	b.w	80a405a <_strtod_r+0xb92>
 80a384e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a3850:	9417      	str	r4, [sp, #92]	; 0x5c
 80a3852:	2b00      	cmp	r3, #0
 80a3854:	f000 840c 	beq.w	80a4070 <_strtod_r+0xba8>
 80a3858:	2300      	movs	r3, #0
 80a385a:	930c      	str	r3, [sp, #48]	; 0x30
 80a385c:	e3ff      	b.n	80a405e <_strtod_r+0xb96>
 80a385e:	462c      	mov	r4, r5
 80a3860:	f1bb 0f00 	cmp.w	fp, #0
 80a3864:	bf08      	it	eq
 80a3866:	46ab      	moveq	fp, r5
 80a3868:	9804      	ldr	r0, [sp, #16]
 80a386a:	2d10      	cmp	r5, #16
 80a386c:	bfa8      	it	ge
 80a386e:	2410      	movge	r4, #16
 80a3870:	1ab7      	subs	r7, r6, r2
 80a3872:	f7ff f9cf 	bl	80a2c14 <__aeabi_ui2d>
 80a3876:	2c09      	cmp	r4, #9
 80a3878:	4680      	mov	r8, r0
 80a387a:	4689      	mov	r9, r1
 80a387c:	dd13      	ble.n	80a38a6 <_strtod_r+0x3de>
 80a387e:	4b89      	ldr	r3, [pc, #548]	; (80a3aa4 <_strtod_r+0x5dc>)
 80a3880:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80a3884:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a3888:	f7ff fa3a 	bl	80a2d00 <__aeabi_dmul>
 80a388c:	4680      	mov	r8, r0
 80a388e:	9802      	ldr	r0, [sp, #8]
 80a3890:	4689      	mov	r9, r1
 80a3892:	f7ff f9bf 	bl	80a2c14 <__aeabi_ui2d>
 80a3896:	4602      	mov	r2, r0
 80a3898:	460b      	mov	r3, r1
 80a389a:	4640      	mov	r0, r8
 80a389c:	4649      	mov	r1, r9
 80a389e:	f7ff f87d 	bl	80a299c <__adddf3>
 80a38a2:	4680      	mov	r8, r0
 80a38a4:	4689      	mov	r9, r1
 80a38a6:	2d0f      	cmp	r5, #15
 80a38a8:	dc33      	bgt.n	80a3912 <_strtod_r+0x44a>
 80a38aa:	2f00      	cmp	r7, #0
 80a38ac:	f000 83d5 	beq.w	80a405a <_strtod_r+0xb92>
 80a38b0:	dd22      	ble.n	80a38f8 <_strtod_r+0x430>
 80a38b2:	2f16      	cmp	r7, #22
 80a38b4:	dc07      	bgt.n	80a38c6 <_strtod_r+0x3fe>
 80a38b6:	4d7b      	ldr	r5, [pc, #492]	; (80a3aa4 <_strtod_r+0x5dc>)
 80a38b8:	4642      	mov	r2, r8
 80a38ba:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 80a38be:	464b      	mov	r3, r9
 80a38c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a38c4:	e013      	b.n	80a38ee <_strtod_r+0x426>
 80a38c6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80a38ca:	429f      	cmp	r7, r3
 80a38cc:	dc21      	bgt.n	80a3912 <_strtod_r+0x44a>
 80a38ce:	4c75      	ldr	r4, [pc, #468]	; (80a3aa4 <_strtod_r+0x5dc>)
 80a38d0:	f1c5 050f 	rsb	r5, r5, #15
 80a38d4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80a38d8:	1b7d      	subs	r5, r7, r5
 80a38da:	4642      	mov	r2, r8
 80a38dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a38e0:	464b      	mov	r3, r9
 80a38e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80a38e6:	f7ff fa0b 	bl	80a2d00 <__aeabi_dmul>
 80a38ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a38ee:	f7ff fa07 	bl	80a2d00 <__aeabi_dmul>
 80a38f2:	4680      	mov	r8, r0
 80a38f4:	4689      	mov	r9, r1
 80a38f6:	e3b0      	b.n	80a405a <_strtod_r+0xb92>
 80a38f8:	f117 0f16 	cmn.w	r7, #22
 80a38fc:	db09      	blt.n	80a3912 <_strtod_r+0x44a>
 80a38fe:	4d69      	ldr	r5, [pc, #420]	; (80a3aa4 <_strtod_r+0x5dc>)
 80a3900:	4640      	mov	r0, r8
 80a3902:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 80a3906:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a390a:	4649      	mov	r1, r9
 80a390c:	f7ff fb22 	bl	80a2f54 <__aeabi_ddiv>
 80a3910:	e7ef      	b.n	80a38f2 <_strtod_r+0x42a>
 80a3912:	1b2c      	subs	r4, r5, r4
 80a3914:	443c      	add	r4, r7
 80a3916:	2c00      	cmp	r4, #0
 80a3918:	dd5d      	ble.n	80a39d6 <_strtod_r+0x50e>
 80a391a:	f014 010f 	ands.w	r1, r4, #15
 80a391e:	d00a      	beq.n	80a3936 <_strtod_r+0x46e>
 80a3920:	4b60      	ldr	r3, [pc, #384]	; (80a3aa4 <_strtod_r+0x5dc>)
 80a3922:	4642      	mov	r2, r8
 80a3924:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80a3928:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a392c:	464b      	mov	r3, r9
 80a392e:	f7ff f9e7 	bl	80a2d00 <__aeabi_dmul>
 80a3932:	4680      	mov	r8, r0
 80a3934:	4689      	mov	r9, r1
 80a3936:	f034 040f 	bics.w	r4, r4, #15
 80a393a:	f000 80c1 	beq.w	80a3ac0 <_strtod_r+0x5f8>
 80a393e:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80a3942:	dd0f      	ble.n	80a3964 <_strtod_r+0x49c>
 80a3944:	f04f 0b00 	mov.w	fp, #0
 80a3948:	f8cd b008 	str.w	fp, [sp, #8]
 80a394c:	f8cd b014 	str.w	fp, [sp, #20]
 80a3950:	f8cd b010 	str.w	fp, [sp, #16]
 80a3954:	2322      	movs	r3, #34	; 0x22
 80a3956:	f8ca 3000 	str.w	r3, [sl]
 80a395a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80a3ab4 <_strtod_r+0x5ec>
 80a395e:	f04f 0800 	mov.w	r8, #0
 80a3962:	e189      	b.n	80a3c78 <_strtod_r+0x7b0>
 80a3964:	4640      	mov	r0, r8
 80a3966:	4649      	mov	r1, r9
 80a3968:	2300      	movs	r3, #0
 80a396a:	4e4f      	ldr	r6, [pc, #316]	; (80a3aa8 <_strtod_r+0x5e0>)
 80a396c:	1124      	asrs	r4, r4, #4
 80a396e:	9302      	str	r3, [sp, #8]
 80a3970:	2c01      	cmp	r4, #1
 80a3972:	dd0c      	ble.n	80a398e <_strtod_r+0x4c6>
 80a3974:	07e2      	lsls	r2, r4, #31
 80a3976:	d504      	bpl.n	80a3982 <_strtod_r+0x4ba>
 80a3978:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a397c:	f7ff f9c0 	bl	80a2d00 <__aeabi_dmul>
 80a3980:	2301      	movs	r3, #1
 80a3982:	9a02      	ldr	r2, [sp, #8]
 80a3984:	1064      	asrs	r4, r4, #1
 80a3986:	3201      	adds	r2, #1
 80a3988:	9202      	str	r2, [sp, #8]
 80a398a:	3608      	adds	r6, #8
 80a398c:	e7f0      	b.n	80a3970 <_strtod_r+0x4a8>
 80a398e:	b10b      	cbz	r3, 80a3994 <_strtod_r+0x4cc>
 80a3990:	4680      	mov	r8, r0
 80a3992:	4689      	mov	r9, r1
 80a3994:	4b44      	ldr	r3, [pc, #272]	; (80a3aa8 <_strtod_r+0x5e0>)
 80a3996:	9a02      	ldr	r2, [sp, #8]
 80a3998:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a399c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80a39a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a39a4:	4642      	mov	r2, r8
 80a39a6:	464b      	mov	r3, r9
 80a39a8:	f7ff f9aa 	bl	80a2d00 <__aeabi_dmul>
 80a39ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a39b0:	4689      	mov	r9, r1
 80a39b2:	460a      	mov	r2, r1
 80a39b4:	0d1b      	lsrs	r3, r3, #20
 80a39b6:	493d      	ldr	r1, [pc, #244]	; (80a3aac <_strtod_r+0x5e4>)
 80a39b8:	051b      	lsls	r3, r3, #20
 80a39ba:	428b      	cmp	r3, r1
 80a39bc:	4680      	mov	r8, r0
 80a39be:	d8c1      	bhi.n	80a3944 <_strtod_r+0x47c>
 80a39c0:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a39c4:	428b      	cmp	r3, r1
 80a39c6:	bf86      	itte	hi
 80a39c8:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 80a3abc <_strtod_r+0x5f4>
 80a39cc:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80a39d0:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a39d4:	e074      	b.n	80a3ac0 <_strtod_r+0x5f8>
 80a39d6:	d073      	beq.n	80a3ac0 <_strtod_r+0x5f8>
 80a39d8:	4264      	negs	r4, r4
 80a39da:	f014 020f 	ands.w	r2, r4, #15
 80a39de:	d00a      	beq.n	80a39f6 <_strtod_r+0x52e>
 80a39e0:	4b30      	ldr	r3, [pc, #192]	; (80a3aa4 <_strtod_r+0x5dc>)
 80a39e2:	4640      	mov	r0, r8
 80a39e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a39e8:	4649      	mov	r1, r9
 80a39ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a39ee:	f7ff fab1 	bl	80a2f54 <__aeabi_ddiv>
 80a39f2:	4680      	mov	r8, r0
 80a39f4:	4689      	mov	r9, r1
 80a39f6:	1124      	asrs	r4, r4, #4
 80a39f8:	d062      	beq.n	80a3ac0 <_strtod_r+0x5f8>
 80a39fa:	2c1f      	cmp	r4, #31
 80a39fc:	dd08      	ble.n	80a3a10 <_strtod_r+0x548>
 80a39fe:	f04f 0b00 	mov.w	fp, #0
 80a3a02:	f8cd b008 	str.w	fp, [sp, #8]
 80a3a06:	f8cd b014 	str.w	fp, [sp, #20]
 80a3a0a:	f8cd b010 	str.w	fp, [sp, #16]
 80a3a0e:	e12c      	b.n	80a3c6a <_strtod_r+0x7a2>
 80a3a10:	4640      	mov	r0, r8
 80a3a12:	4649      	mov	r1, r9
 80a3a14:	f014 0f10 	tst.w	r4, #16
 80a3a18:	bf0c      	ite	eq
 80a3a1a:	2300      	moveq	r3, #0
 80a3a1c:	236a      	movne	r3, #106	; 0x6a
 80a3a1e:	4e24      	ldr	r6, [pc, #144]	; (80a3ab0 <_strtod_r+0x5e8>)
 80a3a20:	9303      	str	r3, [sp, #12]
 80a3a22:	2300      	movs	r3, #0
 80a3a24:	2c00      	cmp	r4, #0
 80a3a26:	dd09      	ble.n	80a3a3c <_strtod_r+0x574>
 80a3a28:	07e2      	lsls	r2, r4, #31
 80a3a2a:	d504      	bpl.n	80a3a36 <_strtod_r+0x56e>
 80a3a2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a3a30:	f7ff f966 	bl	80a2d00 <__aeabi_dmul>
 80a3a34:	2301      	movs	r3, #1
 80a3a36:	1064      	asrs	r4, r4, #1
 80a3a38:	3608      	adds	r6, #8
 80a3a3a:	e7f3      	b.n	80a3a24 <_strtod_r+0x55c>
 80a3a3c:	b10b      	cbz	r3, 80a3a42 <_strtod_r+0x57a>
 80a3a3e:	4680      	mov	r8, r0
 80a3a40:	4689      	mov	r9, r1
 80a3a42:	9b03      	ldr	r3, [sp, #12]
 80a3a44:	b1eb      	cbz	r3, 80a3a82 <_strtod_r+0x5ba>
 80a3a46:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80a3a4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a3a4e:	2b00      	cmp	r3, #0
 80a3a50:	4649      	mov	r1, r9
 80a3a52:	dd16      	ble.n	80a3a82 <_strtod_r+0x5ba>
 80a3a54:	2b1f      	cmp	r3, #31
 80a3a56:	dd0e      	ble.n	80a3a76 <_strtod_r+0x5ae>
 80a3a58:	2b34      	cmp	r3, #52	; 0x34
 80a3a5a:	bfde      	ittt	le
 80a3a5c:	3b20      	suble	r3, #32
 80a3a5e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80a3a62:	fa02 f303 	lslle.w	r3, r2, r3
 80a3a66:	f04f 0800 	mov.w	r8, #0
 80a3a6a:	bfcc      	ite	gt
 80a3a6c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a3a70:	ea03 0901 	andle.w	r9, r3, r1
 80a3a74:	e005      	b.n	80a3a82 <_strtod_r+0x5ba>
 80a3a76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a3a7a:	fa02 f303 	lsl.w	r3, r2, r3
 80a3a7e:	ea03 0808 	and.w	r8, r3, r8
 80a3a82:	2200      	movs	r2, #0
 80a3a84:	2300      	movs	r3, #0
 80a3a86:	4640      	mov	r0, r8
 80a3a88:	4649      	mov	r1, r9
 80a3a8a:	f7ff fba1 	bl	80a31d0 <__aeabi_dcmpeq>
 80a3a8e:	2800      	cmp	r0, #0
 80a3a90:	d1b5      	bne.n	80a39fe <_strtod_r+0x536>
 80a3a92:	e017      	b.n	80a3ac4 <_strtod_r+0x5fc>
 80a3a94:	080a50c3 	.word	0x080a50c3
 80a3a98:	080a5204 	.word	0x080a5204
 80a3a9c:	080a50b9 	.word	0x080a50b9
 80a3aa0:	080a520c 	.word	0x080a520c
 80a3aa4:	080a5248 	.word	0x080a5248
 80a3aa8:	080a5310 	.word	0x080a5310
 80a3aac:	7ca00000 	.word	0x7ca00000
 80a3ab0:	080a5220 	.word	0x080a5220
 80a3ab4:	7ff00000 	.word	0x7ff00000
 80a3ab8:	fff80000 	.word	0xfff80000
 80a3abc:	7fefffff 	.word	0x7fefffff
 80a3ac0:	2300      	movs	r3, #0
 80a3ac2:	9303      	str	r3, [sp, #12]
 80a3ac4:	9b04      	ldr	r3, [sp, #16]
 80a3ac6:	465a      	mov	r2, fp
 80a3ac8:	9300      	str	r3, [sp, #0]
 80a3aca:	9906      	ldr	r1, [sp, #24]
 80a3acc:	462b      	mov	r3, r5
 80a3ace:	4650      	mov	r0, sl
 80a3ad0:	f000 fea6 	bl	80a4820 <__s2b>
 80a3ad4:	9005      	str	r0, [sp, #20]
 80a3ad6:	2800      	cmp	r0, #0
 80a3ad8:	f43f af34 	beq.w	80a3944 <_strtod_r+0x47c>
 80a3adc:	2f00      	cmp	r7, #0
 80a3ade:	f1c7 0300 	rsb	r3, r7, #0
 80a3ae2:	bfa8      	it	ge
 80a3ae4:	2300      	movge	r3, #0
 80a3ae6:	930d      	str	r3, [sp, #52]	; 0x34
 80a3ae8:	f04f 0b00 	mov.w	fp, #0
 80a3aec:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 80a3af0:	9312      	str	r3, [sp, #72]	; 0x48
 80a3af2:	f8cd b008 	str.w	fp, [sp, #8]
 80a3af6:	9b05      	ldr	r3, [sp, #20]
 80a3af8:	4650      	mov	r0, sl
 80a3afa:	6859      	ldr	r1, [r3, #4]
 80a3afc:	f000 fe09 	bl	80a4712 <_Balloc>
 80a3b00:	9004      	str	r0, [sp, #16]
 80a3b02:	2800      	cmp	r0, #0
 80a3b04:	f43f af26 	beq.w	80a3954 <_strtod_r+0x48c>
 80a3b08:	9b05      	ldr	r3, [sp, #20]
 80a3b0a:	300c      	adds	r0, #12
 80a3b0c:	691a      	ldr	r2, [r3, #16]
 80a3b0e:	f103 010c 	add.w	r1, r3, #12
 80a3b12:	3202      	adds	r2, #2
 80a3b14:	0092      	lsls	r2, r2, #2
 80a3b16:	f7ff fc51 	bl	80a33bc <memcpy>
 80a3b1a:	ab1a      	add	r3, sp, #104	; 0x68
 80a3b1c:	9301      	str	r3, [sp, #4]
 80a3b1e:	ab19      	add	r3, sp, #100	; 0x64
 80a3b20:	9300      	str	r3, [sp, #0]
 80a3b22:	4642      	mov	r2, r8
 80a3b24:	464b      	mov	r3, r9
 80a3b26:	4650      	mov	r0, sl
 80a3b28:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a3b2c:	f001 f927 	bl	80a4d7e <__d2b>
 80a3b30:	9018      	str	r0, [sp, #96]	; 0x60
 80a3b32:	2800      	cmp	r0, #0
 80a3b34:	f43f af0e 	beq.w	80a3954 <_strtod_r+0x48c>
 80a3b38:	2101      	movs	r1, #1
 80a3b3a:	4650      	mov	r0, sl
 80a3b3c:	f000 fefb 	bl	80a4936 <__i2b>
 80a3b40:	9002      	str	r0, [sp, #8]
 80a3b42:	2800      	cmp	r0, #0
 80a3b44:	f43f af06 	beq.w	80a3954 <_strtod_r+0x48c>
 80a3b48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a3b4a:	9903      	ldr	r1, [sp, #12]
 80a3b4c:	2b00      	cmp	r3, #0
 80a3b4e:	bfac      	ite	ge
 80a3b50:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80a3b52:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80a3b54:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80a3b56:	bfac      	ite	ge
 80a3b58:	18d6      	addge	r6, r2, r3
 80a3b5a:	1ad2      	sublt	r2, r2, r3
 80a3b5c:	eba3 0301 	sub.w	r3, r3, r1
 80a3b60:	4423      	add	r3, r4
 80a3b62:	49b1      	ldr	r1, [pc, #708]	; (80a3e28 <_strtod_r+0x960>)
 80a3b64:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a3b68:	bfac      	ite	ge
 80a3b6a:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80a3b6c:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 80a3b6e:	428b      	cmp	r3, r1
 80a3b70:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 80a3b74:	f280 8085 	bge.w	80a3c82 <_strtod_r+0x7ba>
 80a3b78:	1ac9      	subs	r1, r1, r3
 80a3b7a:	291f      	cmp	r1, #31
 80a3b7c:	bfc8      	it	gt
 80a3b7e:	4dab      	ldrgt	r5, [pc, #684]	; (80a3e2c <_strtod_r+0x964>)
 80a3b80:	f04f 0701 	mov.w	r7, #1
 80a3b84:	bfd4      	ite	le
 80a3b86:	fa07 f301 	lslle.w	r3, r7, r1
 80a3b8a:	1aed      	subgt	r5, r5, r3
 80a3b8c:	eba4 0401 	sub.w	r4, r4, r1
 80a3b90:	bfd9      	ittee	le
 80a3b92:	9307      	strle	r3, [sp, #28]
 80a3b94:	2500      	movle	r5, #0
 80a3b96:	fa07 f505 	lslgt.w	r5, r7, r5
 80a3b9a:	9707      	strgt	r7, [sp, #28]
 80a3b9c:	1937      	adds	r7, r6, r4
 80a3b9e:	9b03      	ldr	r3, [sp, #12]
 80a3ba0:	42be      	cmp	r6, r7
 80a3ba2:	4414      	add	r4, r2
 80a3ba4:	441c      	add	r4, r3
 80a3ba6:	4633      	mov	r3, r6
 80a3ba8:	bfa8      	it	ge
 80a3baa:	463b      	movge	r3, r7
 80a3bac:	42a3      	cmp	r3, r4
 80a3bae:	bfa8      	it	ge
 80a3bb0:	4623      	movge	r3, r4
 80a3bb2:	2b00      	cmp	r3, #0
 80a3bb4:	bfc2      	ittt	gt
 80a3bb6:	1aff      	subgt	r7, r7, r3
 80a3bb8:	1ae4      	subgt	r4, r4, r3
 80a3bba:	1af6      	subgt	r6, r6, r3
 80a3bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a3bbe:	2b00      	cmp	r3, #0
 80a3bc0:	d163      	bne.n	80a3c8a <_strtod_r+0x7c2>
 80a3bc2:	2f00      	cmp	r7, #0
 80a3bc4:	dc7a      	bgt.n	80a3cbc <_strtod_r+0x7f4>
 80a3bc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a3bc8:	2b00      	cmp	r3, #0
 80a3bca:	f040 8081 	bne.w	80a3cd0 <_strtod_r+0x808>
 80a3bce:	2c00      	cmp	r4, #0
 80a3bd0:	f300 8088 	bgt.w	80a3ce4 <_strtod_r+0x81c>
 80a3bd4:	2e00      	cmp	r6, #0
 80a3bd6:	f300 808f 	bgt.w	80a3cf8 <_strtod_r+0x830>
 80a3bda:	9a04      	ldr	r2, [sp, #16]
 80a3bdc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a3bde:	4650      	mov	r0, sl
 80a3be0:	f000 fffd 	bl	80a4bde <__mdiff>
 80a3be4:	4683      	mov	fp, r0
 80a3be6:	2800      	cmp	r0, #0
 80a3be8:	f43f aeb4 	beq.w	80a3954 <_strtod_r+0x48c>
 80a3bec:	68c3      	ldr	r3, [r0, #12]
 80a3bee:	2400      	movs	r4, #0
 80a3bf0:	60c4      	str	r4, [r0, #12]
 80a3bf2:	9902      	ldr	r1, [sp, #8]
 80a3bf4:	9306      	str	r3, [sp, #24]
 80a3bf6:	f000 ffd6 	bl	80a4ba6 <__mcmp>
 80a3bfa:	42a0      	cmp	r0, r4
 80a3bfc:	f280 808b 	bge.w	80a3d16 <_strtod_r+0x84e>
 80a3c00:	9b06      	ldr	r3, [sp, #24]
 80a3c02:	2b00      	cmp	r3, #0
 80a3c04:	f040 8202 	bne.w	80a400c <_strtod_r+0xb44>
 80a3c08:	f1b8 0f00 	cmp.w	r8, #0
 80a3c0c:	f040 81fe 	bne.w	80a400c <_strtod_r+0xb44>
 80a3c10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a3c14:	2b00      	cmp	r3, #0
 80a3c16:	f040 81f9 	bne.w	80a400c <_strtod_r+0xb44>
 80a3c1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a3c1e:	0d1b      	lsrs	r3, r3, #20
 80a3c20:	051b      	lsls	r3, r3, #20
 80a3c22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a3c26:	f240 81f1 	bls.w	80a400c <_strtod_r+0xb44>
 80a3c2a:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a3c2e:	2b00      	cmp	r3, #0
 80a3c30:	d06c      	beq.n	80a3d0c <_strtod_r+0x844>
 80a3c32:	4659      	mov	r1, fp
 80a3c34:	2201      	movs	r2, #1
 80a3c36:	4650      	mov	r0, sl
 80a3c38:	f000 ff64 	bl	80a4b04 <__lshift>
 80a3c3c:	9902      	ldr	r1, [sp, #8]
 80a3c3e:	4683      	mov	fp, r0
 80a3c40:	f000 ffb1 	bl	80a4ba6 <__mcmp>
 80a3c44:	2800      	cmp	r0, #0
 80a3c46:	f340 81e1 	ble.w	80a400c <_strtod_r+0xb44>
 80a3c4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a3c4e:	9a03      	ldr	r2, [sp, #12]
 80a3c50:	0d1b      	lsrs	r3, r3, #20
 80a3c52:	051b      	lsls	r3, r3, #20
 80a3c54:	2a00      	cmp	r2, #0
 80a3c56:	f000 808d 	beq.w	80a3d74 <_strtod_r+0x8ac>
 80a3c5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a3c5e:	f300 8089 	bgt.w	80a3d74 <_strtod_r+0x8ac>
 80a3c62:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80a3c66:	f300 81d3 	bgt.w	80a4010 <_strtod_r+0xb48>
 80a3c6a:	2322      	movs	r3, #34	; 0x22
 80a3c6c:	f04f 0800 	mov.w	r8, #0
 80a3c70:	f04f 0900 	mov.w	r9, #0
 80a3c74:	f8ca 3000 	str.w	r3, [sl]
 80a3c78:	9b05      	ldr	r3, [sp, #20]
 80a3c7a:	2b00      	cmp	r3, #0
 80a3c7c:	f040 81d9 	bne.w	80a4032 <_strtod_r+0xb6a>
 80a3c80:	e1eb      	b.n	80a405a <_strtod_r+0xb92>
 80a3c82:	2301      	movs	r3, #1
 80a3c84:	2500      	movs	r5, #0
 80a3c86:	9307      	str	r3, [sp, #28]
 80a3c88:	e788      	b.n	80a3b9c <_strtod_r+0x6d4>
 80a3c8a:	461a      	mov	r2, r3
 80a3c8c:	9902      	ldr	r1, [sp, #8]
 80a3c8e:	4650      	mov	r0, sl
 80a3c90:	f000 feea 	bl	80a4a68 <__pow5mult>
 80a3c94:	9002      	str	r0, [sp, #8]
 80a3c96:	2800      	cmp	r0, #0
 80a3c98:	f43f ae5c 	beq.w	80a3954 <_strtod_r+0x48c>
 80a3c9c:	4601      	mov	r1, r0
 80a3c9e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a3ca0:	4650      	mov	r0, sl
 80a3ca2:	f000 fe51 	bl	80a4948 <__multiply>
 80a3ca6:	9006      	str	r0, [sp, #24]
 80a3ca8:	2800      	cmp	r0, #0
 80a3caa:	f43f ae53 	beq.w	80a3954 <_strtod_r+0x48c>
 80a3cae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a3cb0:	4650      	mov	r0, sl
 80a3cb2:	f000 fd63 	bl	80a477c <_Bfree>
 80a3cb6:	9b06      	ldr	r3, [sp, #24]
 80a3cb8:	9318      	str	r3, [sp, #96]	; 0x60
 80a3cba:	e782      	b.n	80a3bc2 <_strtod_r+0x6fa>
 80a3cbc:	463a      	mov	r2, r7
 80a3cbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a3cc0:	4650      	mov	r0, sl
 80a3cc2:	f000 ff1f 	bl	80a4b04 <__lshift>
 80a3cc6:	9018      	str	r0, [sp, #96]	; 0x60
 80a3cc8:	2800      	cmp	r0, #0
 80a3cca:	f47f af7c 	bne.w	80a3bc6 <_strtod_r+0x6fe>
 80a3cce:	e641      	b.n	80a3954 <_strtod_r+0x48c>
 80a3cd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80a3cd2:	9904      	ldr	r1, [sp, #16]
 80a3cd4:	4650      	mov	r0, sl
 80a3cd6:	f000 fec7 	bl	80a4a68 <__pow5mult>
 80a3cda:	9004      	str	r0, [sp, #16]
 80a3cdc:	2800      	cmp	r0, #0
 80a3cde:	f47f af76 	bne.w	80a3bce <_strtod_r+0x706>
 80a3ce2:	e637      	b.n	80a3954 <_strtod_r+0x48c>
 80a3ce4:	4622      	mov	r2, r4
 80a3ce6:	9904      	ldr	r1, [sp, #16]
 80a3ce8:	4650      	mov	r0, sl
 80a3cea:	f000 ff0b 	bl	80a4b04 <__lshift>
 80a3cee:	9004      	str	r0, [sp, #16]
 80a3cf0:	2800      	cmp	r0, #0
 80a3cf2:	f47f af6f 	bne.w	80a3bd4 <_strtod_r+0x70c>
 80a3cf6:	e62d      	b.n	80a3954 <_strtod_r+0x48c>
 80a3cf8:	4632      	mov	r2, r6
 80a3cfa:	9902      	ldr	r1, [sp, #8]
 80a3cfc:	4650      	mov	r0, sl
 80a3cfe:	f000 ff01 	bl	80a4b04 <__lshift>
 80a3d02:	9002      	str	r0, [sp, #8]
 80a3d04:	2800      	cmp	r0, #0
 80a3d06:	f47f af68 	bne.w	80a3bda <_strtod_r+0x712>
 80a3d0a:	e623      	b.n	80a3954 <_strtod_r+0x48c>
 80a3d0c:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a3d10:	2b01      	cmp	r3, #1
 80a3d12:	dc8e      	bgt.n	80a3c32 <_strtod_r+0x76a>
 80a3d14:	e17a      	b.n	80a400c <_strtod_r+0xb44>
 80a3d16:	d161      	bne.n	80a3ddc <_strtod_r+0x914>
 80a3d18:	9a06      	ldr	r2, [sp, #24]
 80a3d1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a3d1e:	b322      	cbz	r2, 80a3d6a <_strtod_r+0x8a2>
 80a3d20:	4943      	ldr	r1, [pc, #268]	; (80a3e30 <_strtod_r+0x968>)
 80a3d22:	464a      	mov	r2, r9
 80a3d24:	428b      	cmp	r3, r1
 80a3d26:	d12e      	bne.n	80a3d86 <_strtod_r+0x8be>
 80a3d28:	9b03      	ldr	r3, [sp, #12]
 80a3d2a:	4641      	mov	r1, r8
 80a3d2c:	b163      	cbz	r3, 80a3d48 <_strtod_r+0x880>
 80a3d2e:	4b41      	ldr	r3, [pc, #260]	; (80a3e34 <_strtod_r+0x96c>)
 80a3d30:	4013      	ands	r3, r2
 80a3d32:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a3d36:	d807      	bhi.n	80a3d48 <_strtod_r+0x880>
 80a3d38:	0d1b      	lsrs	r3, r3, #20
 80a3d3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a3d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3d42:	fa00 f303 	lsl.w	r3, r0, r3
 80a3d46:	e001      	b.n	80a3d4c <_strtod_r+0x884>
 80a3d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a3d4c:	428b      	cmp	r3, r1
 80a3d4e:	d11a      	bne.n	80a3d86 <_strtod_r+0x8be>
 80a3d50:	4939      	ldr	r1, [pc, #228]	; (80a3e38 <_strtod_r+0x970>)
 80a3d52:	428a      	cmp	r2, r1
 80a3d54:	d102      	bne.n	80a3d5c <_strtod_r+0x894>
 80a3d56:	3301      	adds	r3, #1
 80a3d58:	f43f adfc 	beq.w	80a3954 <_strtod_r+0x48c>
 80a3d5c:	4b35      	ldr	r3, [pc, #212]	; (80a3e34 <_strtod_r+0x96c>)
 80a3d5e:	f04f 0800 	mov.w	r8, #0
 80a3d62:	4013      	ands	r3, r2
 80a3d64:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80a3d68:	e150      	b.n	80a400c <_strtod_r+0xb44>
 80a3d6a:	b963      	cbnz	r3, 80a3d86 <_strtod_r+0x8be>
 80a3d6c:	f1b8 0f00 	cmp.w	r8, #0
 80a3d70:	d109      	bne.n	80a3d86 <_strtod_r+0x8be>
 80a3d72:	e76a      	b.n	80a3c4a <_strtod_r+0x782>
 80a3d74:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a3d78:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a3d7c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a3d80:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a3d84:	e142      	b.n	80a400c <_strtod_r+0xb44>
 80a3d86:	b115      	cbz	r5, 80a3d8e <_strtod_r+0x8c6>
 80a3d88:	ea15 0f09 	tst.w	r5, r9
 80a3d8c:	e002      	b.n	80a3d94 <_strtod_r+0x8cc>
 80a3d8e:	9b07      	ldr	r3, [sp, #28]
 80a3d90:	ea13 0f08 	tst.w	r3, r8
 80a3d94:	f000 813a 	beq.w	80a400c <_strtod_r+0xb44>
 80a3d98:	9b06      	ldr	r3, [sp, #24]
 80a3d9a:	9a03      	ldr	r2, [sp, #12]
 80a3d9c:	4640      	mov	r0, r8
 80a3d9e:	4649      	mov	r1, r9
 80a3da0:	b153      	cbz	r3, 80a3db8 <_strtod_r+0x8f0>
 80a3da2:	f7ff fb6e 	bl	80a3482 <sulp>
 80a3da6:	4602      	mov	r2, r0
 80a3da8:	460b      	mov	r3, r1
 80a3daa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a3dae:	f7fe fdf5 	bl	80a299c <__adddf3>
 80a3db2:	4680      	mov	r8, r0
 80a3db4:	4689      	mov	r9, r1
 80a3db6:	e129      	b.n	80a400c <_strtod_r+0xb44>
 80a3db8:	f7ff fb63 	bl	80a3482 <sulp>
 80a3dbc:	4602      	mov	r2, r0
 80a3dbe:	460b      	mov	r3, r1
 80a3dc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a3dc4:	f7fe fde8 	bl	80a2998 <__aeabi_dsub>
 80a3dc8:	2200      	movs	r2, #0
 80a3dca:	2300      	movs	r3, #0
 80a3dcc:	4680      	mov	r8, r0
 80a3dce:	4689      	mov	r9, r1
 80a3dd0:	f7ff f9fe 	bl	80a31d0 <__aeabi_dcmpeq>
 80a3dd4:	2800      	cmp	r0, #0
 80a3dd6:	f47f af48 	bne.w	80a3c6a <_strtod_r+0x7a2>
 80a3dda:	e117      	b.n	80a400c <_strtod_r+0xb44>
 80a3ddc:	9902      	ldr	r1, [sp, #8]
 80a3dde:	4658      	mov	r0, fp
 80a3de0:	f001 f81b 	bl	80a4e1a <__ratio>
 80a3de4:	2200      	movs	r2, #0
 80a3de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a3dea:	4606      	mov	r6, r0
 80a3dec:	460f      	mov	r7, r1
 80a3dee:	f7ff fa03 	bl	80a31f8 <__aeabi_dcmple>
 80a3df2:	2800      	cmp	r0, #0
 80a3df4:	d03f      	beq.n	80a3e76 <_strtod_r+0x9ae>
 80a3df6:	9b06      	ldr	r3, [sp, #24]
 80a3df8:	b113      	cbz	r3, 80a3e00 <_strtod_r+0x938>
 80a3dfa:	2600      	movs	r6, #0
 80a3dfc:	4f0f      	ldr	r7, [pc, #60]	; (80a3e3c <_strtod_r+0x974>)
 80a3dfe:	e010      	b.n	80a3e22 <_strtod_r+0x95a>
 80a3e00:	f1b8 0f00 	cmp.w	r8, #0
 80a3e04:	d103      	bne.n	80a3e0e <_strtod_r+0x946>
 80a3e06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a3e0a:	b93b      	cbnz	r3, 80a3e1c <_strtod_r+0x954>
 80a3e0c:	e01a      	b.n	80a3e44 <_strtod_r+0x97c>
 80a3e0e:	f1b8 0f01 	cmp.w	r8, #1
 80a3e12:	d103      	bne.n	80a3e1c <_strtod_r+0x954>
 80a3e14:	f1b9 0f00 	cmp.w	r9, #0
 80a3e18:	f43f af27 	beq.w	80a3c6a <_strtod_r+0x7a2>
 80a3e1c:	4f08      	ldr	r7, [pc, #32]	; (80a3e40 <_strtod_r+0x978>)
 80a3e1e:	2600      	movs	r6, #0
 80a3e20:	2400      	movs	r4, #0
 80a3e22:	4d06      	ldr	r5, [pc, #24]	; (80a3e3c <_strtod_r+0x974>)
 80a3e24:	e03c      	b.n	80a3ea0 <_strtod_r+0x9d8>
 80a3e26:	bf00      	nop
 80a3e28:	fffffc02 	.word	0xfffffc02
 80a3e2c:	fffffbe2 	.word	0xfffffbe2
 80a3e30:	000fffff 	.word	0x000fffff
 80a3e34:	7ff00000 	.word	0x7ff00000
 80a3e38:	7fefffff 	.word	0x7fefffff
 80a3e3c:	3ff00000 	.word	0x3ff00000
 80a3e40:	bff00000 	.word	0xbff00000
 80a3e44:	2200      	movs	r2, #0
 80a3e46:	4b9a      	ldr	r3, [pc, #616]	; (80a40b0 <_strtod_r+0xbe8>)
 80a3e48:	4630      	mov	r0, r6
 80a3e4a:	4639      	mov	r1, r7
 80a3e4c:	f7ff f9ca 	bl	80a31e4 <__aeabi_dcmplt>
 80a3e50:	b940      	cbnz	r0, 80a3e64 <_strtod_r+0x99c>
 80a3e52:	2200      	movs	r2, #0
 80a3e54:	4b97      	ldr	r3, [pc, #604]	; (80a40b4 <_strtod_r+0xbec>)
 80a3e56:	4630      	mov	r0, r6
 80a3e58:	4639      	mov	r1, r7
 80a3e5a:	f7fe ff51 	bl	80a2d00 <__aeabi_dmul>
 80a3e5e:	4604      	mov	r4, r0
 80a3e60:	460d      	mov	r5, r1
 80a3e62:	e001      	b.n	80a3e68 <_strtod_r+0x9a0>
 80a3e64:	9c06      	ldr	r4, [sp, #24]
 80a3e66:	4d93      	ldr	r5, [pc, #588]	; (80a40b4 <_strtod_r+0xbec>)
 80a3e68:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a3e6c:	9414      	str	r4, [sp, #80]	; 0x50
 80a3e6e:	9315      	str	r3, [sp, #84]	; 0x54
 80a3e70:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80a3e74:	e014      	b.n	80a3ea0 <_strtod_r+0x9d8>
 80a3e76:	4b8f      	ldr	r3, [pc, #572]	; (80a40b4 <_strtod_r+0xbec>)
 80a3e78:	2200      	movs	r2, #0
 80a3e7a:	4630      	mov	r0, r6
 80a3e7c:	4639      	mov	r1, r7
 80a3e7e:	f7fe ff3f 	bl	80a2d00 <__aeabi_dmul>
 80a3e82:	9b06      	ldr	r3, [sp, #24]
 80a3e84:	4604      	mov	r4, r0
 80a3e86:	460d      	mov	r5, r1
 80a3e88:	b923      	cbnz	r3, 80a3e94 <_strtod_r+0x9cc>
 80a3e8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a3e8e:	900e      	str	r0, [sp, #56]	; 0x38
 80a3e90:	930f      	str	r3, [sp, #60]	; 0x3c
 80a3e92:	e003      	b.n	80a3e9c <_strtod_r+0x9d4>
 80a3e94:	4602      	mov	r2, r0
 80a3e96:	460b      	mov	r3, r1
 80a3e98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80a3e9c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80a3ea0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a3ea4:	0d1b      	lsrs	r3, r3, #20
 80a3ea6:	051b      	lsls	r3, r3, #20
 80a3ea8:	9307      	str	r3, [sp, #28]
 80a3eaa:	9a07      	ldr	r2, [sp, #28]
 80a3eac:	4b82      	ldr	r3, [pc, #520]	; (80a40b8 <_strtod_r+0xbf0>)
 80a3eae:	429a      	cmp	r2, r3
 80a3eb0:	d12b      	bne.n	80a3f0a <_strtod_r+0xa42>
 80a3eb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3eb6:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a3eba:	4640      	mov	r0, r8
 80a3ebc:	4649      	mov	r1, r9
 80a3ebe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a3ec2:	f000 feeb 	bl	80a4c9c <__ulp>
 80a3ec6:	4602      	mov	r2, r0
 80a3ec8:	460b      	mov	r3, r1
 80a3eca:	4630      	mov	r0, r6
 80a3ecc:	4639      	mov	r1, r7
 80a3ece:	f7fe ff17 	bl	80a2d00 <__aeabi_dmul>
 80a3ed2:	4642      	mov	r2, r8
 80a3ed4:	464b      	mov	r3, r9
 80a3ed6:	f7fe fd61 	bl	80a299c <__adddf3>
 80a3eda:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a3ede:	0d1b      	lsrs	r3, r3, #20
 80a3ee0:	4a76      	ldr	r2, [pc, #472]	; (80a40bc <_strtod_r+0xbf4>)
 80a3ee2:	051b      	lsls	r3, r3, #20
 80a3ee4:	4293      	cmp	r3, r2
 80a3ee6:	4680      	mov	r8, r0
 80a3ee8:	d90c      	bls.n	80a3f04 <_strtod_r+0xa3c>
 80a3eea:	4b75      	ldr	r3, [pc, #468]	; (80a40c0 <_strtod_r+0xbf8>)
 80a3eec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a3eee:	429a      	cmp	r2, r3
 80a3ef0:	d103      	bne.n	80a3efa <_strtod_r+0xa32>
 80a3ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3ef4:	3301      	adds	r3, #1
 80a3ef6:	f43f ad2d 	beq.w	80a3954 <_strtod_r+0x48c>
 80a3efa:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80a40c0 <_strtod_r+0xbf8>
 80a3efe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a3f02:	e072      	b.n	80a3fea <_strtod_r+0xb22>
 80a3f04:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80a3f08:	e039      	b.n	80a3f7e <_strtod_r+0xab6>
 80a3f0a:	9b03      	ldr	r3, [sp, #12]
 80a3f0c:	b33b      	cbz	r3, 80a3f5e <_strtod_r+0xa96>
 80a3f0e:	9b07      	ldr	r3, [sp, #28]
 80a3f10:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a3f14:	d823      	bhi.n	80a3f5e <_strtod_r+0xa96>
 80a3f16:	a35e      	add	r3, pc, #376	; (adr r3, 80a4090 <_strtod_r+0xbc8>)
 80a3f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f1c:	4620      	mov	r0, r4
 80a3f1e:	4629      	mov	r1, r5
 80a3f20:	f7ff f96a 	bl	80a31f8 <__aeabi_dcmple>
 80a3f24:	b1b8      	cbz	r0, 80a3f56 <_strtod_r+0xa8e>
 80a3f26:	4629      	mov	r1, r5
 80a3f28:	4620      	mov	r0, r4
 80a3f2a:	f7ff f9c1 	bl	80a32b0 <__aeabi_d2uiz>
 80a3f2e:	2800      	cmp	r0, #0
 80a3f30:	bf08      	it	eq
 80a3f32:	2001      	moveq	r0, #1
 80a3f34:	f7fe fe6e 	bl	80a2c14 <__aeabi_ui2d>
 80a3f38:	9b06      	ldr	r3, [sp, #24]
 80a3f3a:	4604      	mov	r4, r0
 80a3f3c:	460d      	mov	r5, r1
 80a3f3e:	b923      	cbnz	r3, 80a3f4a <_strtod_r+0xa82>
 80a3f40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a3f44:	9010      	str	r0, [sp, #64]	; 0x40
 80a3f46:	9311      	str	r3, [sp, #68]	; 0x44
 80a3f48:	e003      	b.n	80a3f52 <_strtod_r+0xa8a>
 80a3f4a:	4602      	mov	r2, r0
 80a3f4c:	460b      	mov	r3, r1
 80a3f4e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a3f52:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a3f56:	9a07      	ldr	r2, [sp, #28]
 80a3f58:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a3f5c:	1a9f      	subs	r7, r3, r2
 80a3f5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a3f62:	f000 fe9b 	bl	80a4c9c <__ulp>
 80a3f66:	4602      	mov	r2, r0
 80a3f68:	460b      	mov	r3, r1
 80a3f6a:	4630      	mov	r0, r6
 80a3f6c:	4639      	mov	r1, r7
 80a3f6e:	f7fe fec7 	bl	80a2d00 <__aeabi_dmul>
 80a3f72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3f76:	f7fe fd11 	bl	80a299c <__adddf3>
 80a3f7a:	4680      	mov	r8, r0
 80a3f7c:	4689      	mov	r9, r1
 80a3f7e:	9b03      	ldr	r3, [sp, #12]
 80a3f80:	bb9b      	cbnz	r3, 80a3fea <_strtod_r+0xb22>
 80a3f82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a3f86:	0d1b      	lsrs	r3, r3, #20
 80a3f88:	9a07      	ldr	r2, [sp, #28]
 80a3f8a:	051b      	lsls	r3, r3, #20
 80a3f8c:	429a      	cmp	r2, r3
 80a3f8e:	464e      	mov	r6, r9
 80a3f90:	d12b      	bne.n	80a3fea <_strtod_r+0xb22>
 80a3f92:	4629      	mov	r1, r5
 80a3f94:	4620      	mov	r0, r4
 80a3f96:	f7ff f963 	bl	80a3260 <__aeabi_d2iz>
 80a3f9a:	f7fe fe4b 	bl	80a2c34 <__aeabi_i2d>
 80a3f9e:	460b      	mov	r3, r1
 80a3fa0:	4602      	mov	r2, r0
 80a3fa2:	4629      	mov	r1, r5
 80a3fa4:	4620      	mov	r0, r4
 80a3fa6:	f7fe fcf7 	bl	80a2998 <__aeabi_dsub>
 80a3faa:	9b06      	ldr	r3, [sp, #24]
 80a3fac:	4604      	mov	r4, r0
 80a3fae:	460d      	mov	r5, r1
 80a3fb0:	b92b      	cbnz	r3, 80a3fbe <_strtod_r+0xaf6>
 80a3fb2:	f1b8 0f00 	cmp.w	r8, #0
 80a3fb6:	d102      	bne.n	80a3fbe <_strtod_r+0xaf6>
 80a3fb8:	f3c9 0613 	ubfx	r6, r9, #0, #20
 80a3fbc:	b17e      	cbz	r6, 80a3fde <_strtod_r+0xb16>
 80a3fbe:	a336      	add	r3, pc, #216	; (adr r3, 80a4098 <_strtod_r+0xbd0>)
 80a3fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3fc4:	4620      	mov	r0, r4
 80a3fc6:	4629      	mov	r1, r5
 80a3fc8:	f7ff f90c 	bl	80a31e4 <__aeabi_dcmplt>
 80a3fcc:	bb88      	cbnz	r0, 80a4032 <_strtod_r+0xb6a>
 80a3fce:	a334      	add	r3, pc, #208	; (adr r3, 80a40a0 <_strtod_r+0xbd8>)
 80a3fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3fd4:	4620      	mov	r0, r4
 80a3fd6:	4629      	mov	r1, r5
 80a3fd8:	f7ff f922 	bl	80a3220 <__aeabi_dcmpgt>
 80a3fdc:	e004      	b.n	80a3fe8 <_strtod_r+0xb20>
 80a3fde:	a332      	add	r3, pc, #200	; (adr r3, 80a40a8 <_strtod_r+0xbe0>)
 80a3fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3fe4:	f7ff f8fe 	bl	80a31e4 <__aeabi_dcmplt>
 80a3fe8:	bb18      	cbnz	r0, 80a4032 <_strtod_r+0xb6a>
 80a3fea:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a3fec:	4650      	mov	r0, sl
 80a3fee:	f000 fbc5 	bl	80a477c <_Bfree>
 80a3ff2:	9904      	ldr	r1, [sp, #16]
 80a3ff4:	4650      	mov	r0, sl
 80a3ff6:	f000 fbc1 	bl	80a477c <_Bfree>
 80a3ffa:	9902      	ldr	r1, [sp, #8]
 80a3ffc:	4650      	mov	r0, sl
 80a3ffe:	f000 fbbd 	bl	80a477c <_Bfree>
 80a4002:	4659      	mov	r1, fp
 80a4004:	4650      	mov	r0, sl
 80a4006:	f000 fbb9 	bl	80a477c <_Bfree>
 80a400a:	e574      	b.n	80a3af6 <_strtod_r+0x62e>
 80a400c:	9b03      	ldr	r3, [sp, #12]
 80a400e:	b183      	cbz	r3, 80a4032 <_strtod_r+0xb6a>
 80a4010:	4b2c      	ldr	r3, [pc, #176]	; (80a40c4 <_strtod_r+0xbfc>)
 80a4012:	4640      	mov	r0, r8
 80a4014:	930b      	str	r3, [sp, #44]	; 0x2c
 80a4016:	2300      	movs	r3, #0
 80a4018:	930a      	str	r3, [sp, #40]	; 0x28
 80a401a:	4649      	mov	r1, r9
 80a401c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a4020:	f7fe fe6e 	bl	80a2d00 <__aeabi_dmul>
 80a4024:	4680      	mov	r8, r0
 80a4026:	4689      	mov	r9, r1
 80a4028:	b919      	cbnz	r1, 80a4032 <_strtod_r+0xb6a>
 80a402a:	b910      	cbnz	r0, 80a4032 <_strtod_r+0xb6a>
 80a402c:	2322      	movs	r3, #34	; 0x22
 80a402e:	f8ca 3000 	str.w	r3, [sl]
 80a4032:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a4034:	4650      	mov	r0, sl
 80a4036:	f000 fba1 	bl	80a477c <_Bfree>
 80a403a:	9904      	ldr	r1, [sp, #16]
 80a403c:	4650      	mov	r0, sl
 80a403e:	f000 fb9d 	bl	80a477c <_Bfree>
 80a4042:	9902      	ldr	r1, [sp, #8]
 80a4044:	4650      	mov	r0, sl
 80a4046:	f000 fb99 	bl	80a477c <_Bfree>
 80a404a:	9905      	ldr	r1, [sp, #20]
 80a404c:	4650      	mov	r0, sl
 80a404e:	f000 fb95 	bl	80a477c <_Bfree>
 80a4052:	4659      	mov	r1, fp
 80a4054:	4650      	mov	r0, sl
 80a4056:	f000 fb91 	bl	80a477c <_Bfree>
 80a405a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a405c:	b113      	cbz	r3, 80a4064 <_strtod_r+0xb9c>
 80a405e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4060:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a4062:	6013      	str	r3, [r2, #0]
 80a4064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a4066:	b11b      	cbz	r3, 80a4070 <_strtod_r+0xba8>
 80a4068:	4642      	mov	r2, r8
 80a406a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a406e:	e007      	b.n	80a4080 <_strtod_r+0xbb8>
 80a4070:	4642      	mov	r2, r8
 80a4072:	464b      	mov	r3, r9
 80a4074:	e004      	b.n	80a4080 <_strtod_r+0xbb8>
 80a4076:	2500      	movs	r5, #0
 80a4078:	462a      	mov	r2, r5
 80a407a:	2101      	movs	r1, #1
 80a407c:	f7ff bb47 	b.w	80a370e <_strtod_r+0x246>
 80a4080:	4610      	mov	r0, r2
 80a4082:	4619      	mov	r1, r3
 80a4084:	b01d      	add	sp, #116	; 0x74
 80a4086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a408a:	bf00      	nop
 80a408c:	f3af 8000 	nop.w
 80a4090:	ffc00000 	.word	0xffc00000
 80a4094:	41dfffff 	.word	0x41dfffff
 80a4098:	94a03595 	.word	0x94a03595
 80a409c:	3fdfffff 	.word	0x3fdfffff
 80a40a0:	35afe535 	.word	0x35afe535
 80a40a4:	3fe00000 	.word	0x3fe00000
 80a40a8:	94a03595 	.word	0x94a03595
 80a40ac:	3fcfffff 	.word	0x3fcfffff
 80a40b0:	3ff00000 	.word	0x3ff00000
 80a40b4:	3fe00000 	.word	0x3fe00000
 80a40b8:	7fe00000 	.word	0x7fe00000
 80a40bc:	7c9fffff 	.word	0x7c9fffff
 80a40c0:	7fefffff 	.word	0x7fefffff
 80a40c4:	39500000 	.word	0x39500000

080a40c8 <strtod>:
 80a40c8:	4b02      	ldr	r3, [pc, #8]	; (80a40d4 <strtod+0xc>)
 80a40ca:	460a      	mov	r2, r1
 80a40cc:	4601      	mov	r1, r0
 80a40ce:	6818      	ldr	r0, [r3, #0]
 80a40d0:	f7ff b9fa 	b.w	80a34c8 <_strtod_r>
 80a40d4:	20000070 	.word	0x20000070

080a40d8 <rshift>:
 80a40d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a40da:	6906      	ldr	r6, [r0, #16]
 80a40dc:	114b      	asrs	r3, r1, #5
 80a40de:	42b3      	cmp	r3, r6
 80a40e0:	f100 0514 	add.w	r5, r0, #20
 80a40e4:	da27      	bge.n	80a4136 <rshift+0x5e>
 80a40e6:	f011 011f 	ands.w	r1, r1, #31
 80a40ea:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80a40ee:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80a40f2:	d101      	bne.n	80a40f8 <rshift+0x20>
 80a40f4:	4629      	mov	r1, r5
 80a40f6:	e016      	b.n	80a4126 <rshift+0x4e>
 80a40f8:	1d14      	adds	r4, r2, #4
 80a40fa:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80a40fe:	462b      	mov	r3, r5
 80a4100:	f1c1 0e20 	rsb	lr, r1, #32
 80a4104:	40ca      	lsrs	r2, r1
 80a4106:	42b4      	cmp	r4, r6
 80a4108:	d209      	bcs.n	80a411e <rshift+0x46>
 80a410a:	6827      	ldr	r7, [r4, #0]
 80a410c:	fa07 f70e 	lsl.w	r7, r7, lr
 80a4110:	433a      	orrs	r2, r7
 80a4112:	f843 2b04 	str.w	r2, [r3], #4
 80a4116:	f854 2b04 	ldr.w	r2, [r4], #4
 80a411a:	40ca      	lsrs	r2, r1
 80a411c:	e7f3      	b.n	80a4106 <rshift+0x2e>
 80a411e:	601a      	str	r2, [r3, #0]
 80a4120:	b152      	cbz	r2, 80a4138 <rshift+0x60>
 80a4122:	3304      	adds	r3, #4
 80a4124:	e008      	b.n	80a4138 <rshift+0x60>
 80a4126:	42b2      	cmp	r2, r6
 80a4128:	460b      	mov	r3, r1
 80a412a:	d205      	bcs.n	80a4138 <rshift+0x60>
 80a412c:	f852 3b04 	ldr.w	r3, [r2], #4
 80a4130:	f841 3b04 	str.w	r3, [r1], #4
 80a4134:	e7f7      	b.n	80a4126 <rshift+0x4e>
 80a4136:	462b      	mov	r3, r5
 80a4138:	1b5b      	subs	r3, r3, r5
 80a413a:	109b      	asrs	r3, r3, #2
 80a413c:	6103      	str	r3, [r0, #16]
 80a413e:	b903      	cbnz	r3, 80a4142 <rshift+0x6a>
 80a4140:	6143      	str	r3, [r0, #20]
 80a4142:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4144 <__hexdig_fun>:
 80a4144:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a4148:	2b09      	cmp	r3, #9
 80a414a:	d801      	bhi.n	80a4150 <__hexdig_fun+0xc>
 80a414c:	3820      	subs	r0, #32
 80a414e:	e00a      	b.n	80a4166 <__hexdig_fun+0x22>
 80a4150:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a4154:	2b05      	cmp	r3, #5
 80a4156:	d801      	bhi.n	80a415c <__hexdig_fun+0x18>
 80a4158:	3847      	subs	r0, #71	; 0x47
 80a415a:	e004      	b.n	80a4166 <__hexdig_fun+0x22>
 80a415c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a4160:	2b05      	cmp	r3, #5
 80a4162:	d802      	bhi.n	80a416a <__hexdig_fun+0x26>
 80a4164:	3827      	subs	r0, #39	; 0x27
 80a4166:	b2c0      	uxtb	r0, r0
 80a4168:	4770      	bx	lr
 80a416a:	2000      	movs	r0, #0
 80a416c:	4770      	bx	lr

080a416e <__gethex>:
 80a416e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4172:	b08b      	sub	sp, #44	; 0x2c
 80a4174:	468a      	mov	sl, r1
 80a4176:	4690      	mov	r8, r2
 80a4178:	9306      	str	r3, [sp, #24]
 80a417a:	9002      	str	r0, [sp, #8]
 80a417c:	f7ff f91a 	bl	80a33b4 <_localeconv_r>
 80a4180:	6803      	ldr	r3, [r0, #0]
 80a4182:	f04f 0b00 	mov.w	fp, #0
 80a4186:	4618      	mov	r0, r3
 80a4188:	9303      	str	r3, [sp, #12]
 80a418a:	f7ff f95d 	bl	80a3448 <strlen>
 80a418e:	9b03      	ldr	r3, [sp, #12]
 80a4190:	9001      	str	r0, [sp, #4]
 80a4192:	4403      	add	r3, r0
 80a4194:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a4198:	9307      	str	r3, [sp, #28]
 80a419a:	f8da 3000 	ldr.w	r3, [sl]
 80a419e:	3302      	adds	r3, #2
 80a41a0:	461f      	mov	r7, r3
 80a41a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a41a6:	2830      	cmp	r0, #48	; 0x30
 80a41a8:	d102      	bne.n	80a41b0 <__gethex+0x42>
 80a41aa:	f10b 0b01 	add.w	fp, fp, #1
 80a41ae:	e7f7      	b.n	80a41a0 <__gethex+0x32>
 80a41b0:	f7ff ffc8 	bl	80a4144 <__hexdig_fun>
 80a41b4:	4604      	mov	r4, r0
 80a41b6:	b9e0      	cbnz	r0, 80a41f2 <__gethex+0x84>
 80a41b8:	9a01      	ldr	r2, [sp, #4]
 80a41ba:	9903      	ldr	r1, [sp, #12]
 80a41bc:	4638      	mov	r0, r7
 80a41be:	f7ff f94b 	bl	80a3458 <strncmp>
 80a41c2:	2800      	cmp	r0, #0
 80a41c4:	d134      	bne.n	80a4230 <__gethex+0xc2>
 80a41c6:	9b01      	ldr	r3, [sp, #4]
 80a41c8:	5cf8      	ldrb	r0, [r7, r3]
 80a41ca:	18fe      	adds	r6, r7, r3
 80a41cc:	f7ff ffba 	bl	80a4144 <__hexdig_fun>
 80a41d0:	b380      	cbz	r0, 80a4234 <__gethex+0xc6>
 80a41d2:	4633      	mov	r3, r6
 80a41d4:	7818      	ldrb	r0, [r3, #0]
 80a41d6:	461f      	mov	r7, r3
 80a41d8:	2830      	cmp	r0, #48	; 0x30
 80a41da:	f103 0301 	add.w	r3, r3, #1
 80a41de:	d0f9      	beq.n	80a41d4 <__gethex+0x66>
 80a41e0:	f7ff ffb0 	bl	80a4144 <__hexdig_fun>
 80a41e4:	fab0 f580 	clz	r5, r0
 80a41e8:	4634      	mov	r4, r6
 80a41ea:	096d      	lsrs	r5, r5, #5
 80a41ec:	f04f 0b01 	mov.w	fp, #1
 80a41f0:	e001      	b.n	80a41f6 <__gethex+0x88>
 80a41f2:	2500      	movs	r5, #0
 80a41f4:	462c      	mov	r4, r5
 80a41f6:	463a      	mov	r2, r7
 80a41f8:	4616      	mov	r6, r2
 80a41fa:	7830      	ldrb	r0, [r6, #0]
 80a41fc:	3201      	adds	r2, #1
 80a41fe:	f7ff ffa1 	bl	80a4144 <__hexdig_fun>
 80a4202:	2800      	cmp	r0, #0
 80a4204:	d1f8      	bne.n	80a41f8 <__gethex+0x8a>
 80a4206:	9a01      	ldr	r2, [sp, #4]
 80a4208:	9903      	ldr	r1, [sp, #12]
 80a420a:	4630      	mov	r0, r6
 80a420c:	f7ff f924 	bl	80a3458 <strncmp>
 80a4210:	b950      	cbnz	r0, 80a4228 <__gethex+0xba>
 80a4212:	b954      	cbnz	r4, 80a422a <__gethex+0xbc>
 80a4214:	9b01      	ldr	r3, [sp, #4]
 80a4216:	18f4      	adds	r4, r6, r3
 80a4218:	4622      	mov	r2, r4
 80a421a:	4616      	mov	r6, r2
 80a421c:	7830      	ldrb	r0, [r6, #0]
 80a421e:	3201      	adds	r2, #1
 80a4220:	f7ff ff90 	bl	80a4144 <__hexdig_fun>
 80a4224:	2800      	cmp	r0, #0
 80a4226:	d1f8      	bne.n	80a421a <__gethex+0xac>
 80a4228:	b134      	cbz	r4, 80a4238 <__gethex+0xca>
 80a422a:	1ba4      	subs	r4, r4, r6
 80a422c:	00a4      	lsls	r4, r4, #2
 80a422e:	e003      	b.n	80a4238 <__gethex+0xca>
 80a4230:	463e      	mov	r6, r7
 80a4232:	e000      	b.n	80a4236 <__gethex+0xc8>
 80a4234:	4604      	mov	r4, r0
 80a4236:	2501      	movs	r5, #1
 80a4238:	7833      	ldrb	r3, [r6, #0]
 80a423a:	2b50      	cmp	r3, #80	; 0x50
 80a423c:	d001      	beq.n	80a4242 <__gethex+0xd4>
 80a423e:	2b70      	cmp	r3, #112	; 0x70
 80a4240:	d12a      	bne.n	80a4298 <__gethex+0x12a>
 80a4242:	7873      	ldrb	r3, [r6, #1]
 80a4244:	2b2b      	cmp	r3, #43	; 0x2b
 80a4246:	d008      	beq.n	80a425a <__gethex+0xec>
 80a4248:	2b2d      	cmp	r3, #45	; 0x2d
 80a424a:	d003      	beq.n	80a4254 <__gethex+0xe6>
 80a424c:	1c71      	adds	r1, r6, #1
 80a424e:	f04f 0900 	mov.w	r9, #0
 80a4252:	e005      	b.n	80a4260 <__gethex+0xf2>
 80a4254:	f04f 0901 	mov.w	r9, #1
 80a4258:	e001      	b.n	80a425e <__gethex+0xf0>
 80a425a:	f04f 0900 	mov.w	r9, #0
 80a425e:	1cb1      	adds	r1, r6, #2
 80a4260:	7808      	ldrb	r0, [r1, #0]
 80a4262:	f7ff ff6f 	bl	80a4144 <__hexdig_fun>
 80a4266:	1e43      	subs	r3, r0, #1
 80a4268:	b2db      	uxtb	r3, r3
 80a426a:	2b18      	cmp	r3, #24
 80a426c:	d814      	bhi.n	80a4298 <__gethex+0x12a>
 80a426e:	f1a0 0210 	sub.w	r2, r0, #16
 80a4272:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a4276:	f7ff ff65 	bl	80a4144 <__hexdig_fun>
 80a427a:	1e43      	subs	r3, r0, #1
 80a427c:	b2db      	uxtb	r3, r3
 80a427e:	2b18      	cmp	r3, #24
 80a4280:	d804      	bhi.n	80a428c <__gethex+0x11e>
 80a4282:	230a      	movs	r3, #10
 80a4284:	fb03 0202 	mla	r2, r3, r2, r0
 80a4288:	3a10      	subs	r2, #16
 80a428a:	e7f2      	b.n	80a4272 <__gethex+0x104>
 80a428c:	f1b9 0f00 	cmp.w	r9, #0
 80a4290:	d000      	beq.n	80a4294 <__gethex+0x126>
 80a4292:	4252      	negs	r2, r2
 80a4294:	4414      	add	r4, r2
 80a4296:	e000      	b.n	80a429a <__gethex+0x12c>
 80a4298:	4631      	mov	r1, r6
 80a429a:	f8ca 1000 	str.w	r1, [sl]
 80a429e:	b12d      	cbz	r5, 80a42ac <__gethex+0x13e>
 80a42a0:	f1bb 0f00 	cmp.w	fp, #0
 80a42a4:	bf14      	ite	ne
 80a42a6:	2000      	movne	r0, #0
 80a42a8:	2006      	moveq	r0, #6
 80a42aa:	e17c      	b.n	80a45a6 <__gethex+0x438>
 80a42ac:	4629      	mov	r1, r5
 80a42ae:	1bf3      	subs	r3, r6, r7
 80a42b0:	3b01      	subs	r3, #1
 80a42b2:	2b07      	cmp	r3, #7
 80a42b4:	dd02      	ble.n	80a42bc <__gethex+0x14e>
 80a42b6:	3101      	adds	r1, #1
 80a42b8:	105b      	asrs	r3, r3, #1
 80a42ba:	e7fa      	b.n	80a42b2 <__gethex+0x144>
 80a42bc:	9802      	ldr	r0, [sp, #8]
 80a42be:	f000 fa28 	bl	80a4712 <_Balloc>
 80a42c2:	f04f 0900 	mov.w	r9, #0
 80a42c6:	4605      	mov	r5, r0
 80a42c8:	46cb      	mov	fp, r9
 80a42ca:	9b01      	ldr	r3, [sp, #4]
 80a42cc:	f100 0a14 	add.w	sl, r0, #20
 80a42d0:	f1c3 0301 	rsb	r3, r3, #1
 80a42d4:	f8cd a010 	str.w	sl, [sp, #16]
 80a42d8:	9308      	str	r3, [sp, #32]
 80a42da:	42b7      	cmp	r7, r6
 80a42dc:	d22f      	bcs.n	80a433e <__gethex+0x1d0>
 80a42de:	1e73      	subs	r3, r6, #1
 80a42e0:	9305      	str	r3, [sp, #20]
 80a42e2:	9a07      	ldr	r2, [sp, #28]
 80a42e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a42e8:	4293      	cmp	r3, r2
 80a42ea:	d00b      	beq.n	80a4304 <__gethex+0x196>
 80a42ec:	f1bb 0f20 	cmp.w	fp, #32
 80a42f0:	d116      	bne.n	80a4320 <__gethex+0x1b2>
 80a42f2:	9b04      	ldr	r3, [sp, #16]
 80a42f4:	f8c3 9000 	str.w	r9, [r3]
 80a42f8:	3304      	adds	r3, #4
 80a42fa:	f04f 0900 	mov.w	r9, #0
 80a42fe:	9304      	str	r3, [sp, #16]
 80a4300:	46cb      	mov	fp, r9
 80a4302:	e00d      	b.n	80a4320 <__gethex+0x1b2>
 80a4304:	9b05      	ldr	r3, [sp, #20]
 80a4306:	9a08      	ldr	r2, [sp, #32]
 80a4308:	4413      	add	r3, r2
 80a430a:	429f      	cmp	r7, r3
 80a430c:	d8ee      	bhi.n	80a42ec <__gethex+0x17e>
 80a430e:	4618      	mov	r0, r3
 80a4310:	9a01      	ldr	r2, [sp, #4]
 80a4312:	9903      	ldr	r1, [sp, #12]
 80a4314:	9309      	str	r3, [sp, #36]	; 0x24
 80a4316:	f7ff f89f 	bl	80a3458 <strncmp>
 80a431a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a431c:	b168      	cbz	r0, 80a433a <__gethex+0x1cc>
 80a431e:	e7e5      	b.n	80a42ec <__gethex+0x17e>
 80a4320:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a4324:	f7ff ff0e 	bl	80a4144 <__hexdig_fun>
 80a4328:	f000 000f 	and.w	r0, r0, #15
 80a432c:	fa00 f00b 	lsl.w	r0, r0, fp
 80a4330:	9b05      	ldr	r3, [sp, #20]
 80a4332:	ea49 0900 	orr.w	r9, r9, r0
 80a4336:	f10b 0b04 	add.w	fp, fp, #4
 80a433a:	461e      	mov	r6, r3
 80a433c:	e7cd      	b.n	80a42da <__gethex+0x16c>
 80a433e:	9804      	ldr	r0, [sp, #16]
 80a4340:	f840 9b04 	str.w	r9, [r0], #4
 80a4344:	ebca 0000 	rsb	r0, sl, r0
 80a4348:	1080      	asrs	r0, r0, #2
 80a434a:	6128      	str	r0, [r5, #16]
 80a434c:	0147      	lsls	r7, r0, #5
 80a434e:	4648      	mov	r0, r9
 80a4350:	f000 faa4 	bl	80a489c <__hi0bits>
 80a4354:	f8d8 6000 	ldr.w	r6, [r8]
 80a4358:	1a38      	subs	r0, r7, r0
 80a435a:	42b0      	cmp	r0, r6
 80a435c:	dd26      	ble.n	80a43ac <__gethex+0x23e>
 80a435e:	1b87      	subs	r7, r0, r6
 80a4360:	4639      	mov	r1, r7
 80a4362:	4628      	mov	r0, r5
 80a4364:	f000 fd9b 	bl	80a4e9e <__any_on>
 80a4368:	b1c8      	cbz	r0, 80a439e <__gethex+0x230>
 80a436a:	1e7b      	subs	r3, r7, #1
 80a436c:	1159      	asrs	r1, r3, #5
 80a436e:	f003 021f 	and.w	r2, r3, #31
 80a4372:	f04f 0901 	mov.w	r9, #1
 80a4376:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80a437a:	fa09 f202 	lsl.w	r2, r9, r2
 80a437e:	420a      	tst	r2, r1
 80a4380:	d00e      	beq.n	80a43a0 <__gethex+0x232>
 80a4382:	454b      	cmp	r3, r9
 80a4384:	dc02      	bgt.n	80a438c <__gethex+0x21e>
 80a4386:	f04f 0902 	mov.w	r9, #2
 80a438a:	e009      	b.n	80a43a0 <__gethex+0x232>
 80a438c:	1eb9      	subs	r1, r7, #2
 80a438e:	4628      	mov	r0, r5
 80a4390:	f000 fd85 	bl	80a4e9e <__any_on>
 80a4394:	2800      	cmp	r0, #0
 80a4396:	d0f6      	beq.n	80a4386 <__gethex+0x218>
 80a4398:	f04f 0903 	mov.w	r9, #3
 80a439c:	e000      	b.n	80a43a0 <__gethex+0x232>
 80a439e:	4681      	mov	r9, r0
 80a43a0:	4639      	mov	r1, r7
 80a43a2:	4628      	mov	r0, r5
 80a43a4:	f7ff fe98 	bl	80a40d8 <rshift>
 80a43a8:	443c      	add	r4, r7
 80a43aa:	e00c      	b.n	80a43c6 <__gethex+0x258>
 80a43ac:	da09      	bge.n	80a43c2 <__gethex+0x254>
 80a43ae:	1a37      	subs	r7, r6, r0
 80a43b0:	4629      	mov	r1, r5
 80a43b2:	463a      	mov	r2, r7
 80a43b4:	9802      	ldr	r0, [sp, #8]
 80a43b6:	f000 fba5 	bl	80a4b04 <__lshift>
 80a43ba:	4605      	mov	r5, r0
 80a43bc:	1be4      	subs	r4, r4, r7
 80a43be:	f100 0a14 	add.w	sl, r0, #20
 80a43c2:	f04f 0900 	mov.w	r9, #0
 80a43c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a43ca:	429c      	cmp	r4, r3
 80a43cc:	dd08      	ble.n	80a43e0 <__gethex+0x272>
 80a43ce:	9802      	ldr	r0, [sp, #8]
 80a43d0:	4629      	mov	r1, r5
 80a43d2:	f000 f9d3 	bl	80a477c <_Bfree>
 80a43d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a43d8:	2300      	movs	r3, #0
 80a43da:	6013      	str	r3, [r2, #0]
 80a43dc:	20a3      	movs	r0, #163	; 0xa3
 80a43de:	e0e2      	b.n	80a45a6 <__gethex+0x438>
 80a43e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a43e4:	4284      	cmp	r4, r0
 80a43e6:	da53      	bge.n	80a4490 <__gethex+0x322>
 80a43e8:	1b04      	subs	r4, r0, r4
 80a43ea:	42a6      	cmp	r6, r4
 80a43ec:	dc2e      	bgt.n	80a444c <__gethex+0x2de>
 80a43ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a43f2:	2b02      	cmp	r3, #2
 80a43f4:	d01a      	beq.n	80a442c <__gethex+0x2be>
 80a43f6:	2b03      	cmp	r3, #3
 80a43f8:	d01c      	beq.n	80a4434 <__gethex+0x2c6>
 80a43fa:	2b01      	cmp	r3, #1
 80a43fc:	d11d      	bne.n	80a443a <__gethex+0x2cc>
 80a43fe:	42a6      	cmp	r6, r4
 80a4400:	d11b      	bne.n	80a443a <__gethex+0x2cc>
 80a4402:	2e01      	cmp	r6, #1
 80a4404:	dc0b      	bgt.n	80a441e <__gethex+0x2b0>
 80a4406:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a440a:	9a06      	ldr	r2, [sp, #24]
 80a440c:	2062      	movs	r0, #98	; 0x62
 80a440e:	6013      	str	r3, [r2, #0]
 80a4410:	2301      	movs	r3, #1
 80a4412:	612b      	str	r3, [r5, #16]
 80a4414:	f8ca 3000 	str.w	r3, [sl]
 80a4418:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a441a:	601d      	str	r5, [r3, #0]
 80a441c:	e0c3      	b.n	80a45a6 <__gethex+0x438>
 80a441e:	1e71      	subs	r1, r6, #1
 80a4420:	4628      	mov	r0, r5
 80a4422:	f000 fd3c 	bl	80a4e9e <__any_on>
 80a4426:	2800      	cmp	r0, #0
 80a4428:	d1ed      	bne.n	80a4406 <__gethex+0x298>
 80a442a:	e006      	b.n	80a443a <__gethex+0x2cc>
 80a442c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a442e:	2b00      	cmp	r3, #0
 80a4430:	d0e9      	beq.n	80a4406 <__gethex+0x298>
 80a4432:	e002      	b.n	80a443a <__gethex+0x2cc>
 80a4434:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a4436:	2b00      	cmp	r3, #0
 80a4438:	d1e5      	bne.n	80a4406 <__gethex+0x298>
 80a443a:	9802      	ldr	r0, [sp, #8]
 80a443c:	4629      	mov	r1, r5
 80a443e:	f000 f99d 	bl	80a477c <_Bfree>
 80a4442:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a4444:	2300      	movs	r3, #0
 80a4446:	6013      	str	r3, [r2, #0]
 80a4448:	2050      	movs	r0, #80	; 0x50
 80a444a:	e0ac      	b.n	80a45a6 <__gethex+0x438>
 80a444c:	1e67      	subs	r7, r4, #1
 80a444e:	f1b9 0f00 	cmp.w	r9, #0
 80a4452:	d106      	bne.n	80a4462 <__gethex+0x2f4>
 80a4454:	b13f      	cbz	r7, 80a4466 <__gethex+0x2f8>
 80a4456:	4639      	mov	r1, r7
 80a4458:	4628      	mov	r0, r5
 80a445a:	f000 fd20 	bl	80a4e9e <__any_on>
 80a445e:	4681      	mov	r9, r0
 80a4460:	e001      	b.n	80a4466 <__gethex+0x2f8>
 80a4462:	f04f 0901 	mov.w	r9, #1
 80a4466:	117a      	asrs	r2, r7, #5
 80a4468:	2301      	movs	r3, #1
 80a446a:	f007 071f 	and.w	r7, r7, #31
 80a446e:	fa03 f707 	lsl.w	r7, r3, r7
 80a4472:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80a4476:	4621      	mov	r1, r4
 80a4478:	421f      	tst	r7, r3
 80a447a:	4628      	mov	r0, r5
 80a447c:	bf18      	it	ne
 80a447e:	f049 0902 	orrne.w	r9, r9, #2
 80a4482:	1b36      	subs	r6, r6, r4
 80a4484:	f7ff fe28 	bl	80a40d8 <rshift>
 80a4488:	2702      	movs	r7, #2
 80a448a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80a448e:	e000      	b.n	80a4492 <__gethex+0x324>
 80a4490:	2701      	movs	r7, #1
 80a4492:	f1b9 0f00 	cmp.w	r9, #0
 80a4496:	f000 8081 	beq.w	80a459c <__gethex+0x42e>
 80a449a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a449e:	2b02      	cmp	r3, #2
 80a44a0:	d00e      	beq.n	80a44c0 <__gethex+0x352>
 80a44a2:	2b03      	cmp	r3, #3
 80a44a4:	d010      	beq.n	80a44c8 <__gethex+0x35a>
 80a44a6:	2b01      	cmp	r3, #1
 80a44a8:	d176      	bne.n	80a4598 <__gethex+0x42a>
 80a44aa:	f019 0f02 	tst.w	r9, #2
 80a44ae:	d073      	beq.n	80a4598 <__gethex+0x42a>
 80a44b0:	f8da 0000 	ldr.w	r0, [sl]
 80a44b4:	ea49 0900 	orr.w	r9, r9, r0
 80a44b8:	f019 0f01 	tst.w	r9, #1
 80a44bc:	d107      	bne.n	80a44ce <__gethex+0x360>
 80a44be:	e06b      	b.n	80a4598 <__gethex+0x42a>
 80a44c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a44c2:	f1c3 0301 	rsb	r3, r3, #1
 80a44c6:	9315      	str	r3, [sp, #84]	; 0x54
 80a44c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a44ca:	2b00      	cmp	r3, #0
 80a44cc:	d064      	beq.n	80a4598 <__gethex+0x42a>
 80a44ce:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80a44d2:	f105 0314 	add.w	r3, r5, #20
 80a44d6:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80a44da:	eb03 0109 	add.w	r1, r3, r9
 80a44de:	2000      	movs	r0, #0
 80a44e0:	681a      	ldr	r2, [r3, #0]
 80a44e2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80a44e6:	d002      	beq.n	80a44ee <__gethex+0x380>
 80a44e8:	3201      	adds	r2, #1
 80a44ea:	601a      	str	r2, [r3, #0]
 80a44ec:	e020      	b.n	80a4530 <__gethex+0x3c2>
 80a44ee:	f843 0b04 	str.w	r0, [r3], #4
 80a44f2:	4299      	cmp	r1, r3
 80a44f4:	d8f4      	bhi.n	80a44e0 <__gethex+0x372>
 80a44f6:	68ab      	ldr	r3, [r5, #8]
 80a44f8:	459a      	cmp	sl, r3
 80a44fa:	db12      	blt.n	80a4522 <__gethex+0x3b4>
 80a44fc:	6869      	ldr	r1, [r5, #4]
 80a44fe:	9802      	ldr	r0, [sp, #8]
 80a4500:	3101      	adds	r1, #1
 80a4502:	f000 f906 	bl	80a4712 <_Balloc>
 80a4506:	4683      	mov	fp, r0
 80a4508:	692a      	ldr	r2, [r5, #16]
 80a450a:	f105 010c 	add.w	r1, r5, #12
 80a450e:	3202      	adds	r2, #2
 80a4510:	0092      	lsls	r2, r2, #2
 80a4512:	300c      	adds	r0, #12
 80a4514:	f7fe ff52 	bl	80a33bc <memcpy>
 80a4518:	4629      	mov	r1, r5
 80a451a:	9802      	ldr	r0, [sp, #8]
 80a451c:	f000 f92e 	bl	80a477c <_Bfree>
 80a4520:	465d      	mov	r5, fp
 80a4522:	692b      	ldr	r3, [r5, #16]
 80a4524:	1c5a      	adds	r2, r3, #1
 80a4526:	612a      	str	r2, [r5, #16]
 80a4528:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80a452c:	2201      	movs	r2, #1
 80a452e:	615a      	str	r2, [r3, #20]
 80a4530:	2f02      	cmp	r7, #2
 80a4532:	f105 0214 	add.w	r2, r5, #20
 80a4536:	d111      	bne.n	80a455c <__gethex+0x3ee>
 80a4538:	f8d8 3000 	ldr.w	r3, [r8]
 80a453c:	3b01      	subs	r3, #1
 80a453e:	429e      	cmp	r6, r3
 80a4540:	d127      	bne.n	80a4592 <__gethex+0x424>
 80a4542:	1171      	asrs	r1, r6, #5
 80a4544:	2301      	movs	r3, #1
 80a4546:	f006 061f 	and.w	r6, r6, #31
 80a454a:	fa03 f606 	lsl.w	r6, r3, r6
 80a454e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80a4552:	421e      	tst	r6, r3
 80a4554:	bf0c      	ite	eq
 80a4556:	2702      	moveq	r7, #2
 80a4558:	2701      	movne	r7, #1
 80a455a:	e01a      	b.n	80a4592 <__gethex+0x424>
 80a455c:	692b      	ldr	r3, [r5, #16]
 80a455e:	459a      	cmp	sl, r3
 80a4560:	da0a      	bge.n	80a4578 <__gethex+0x40a>
 80a4562:	2101      	movs	r1, #1
 80a4564:	4628      	mov	r0, r5
 80a4566:	f7ff fdb7 	bl	80a40d8 <rshift>
 80a456a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a456e:	3401      	adds	r4, #1
 80a4570:	429c      	cmp	r4, r3
 80a4572:	f73f af2c 	bgt.w	80a43ce <__gethex+0x260>
 80a4576:	e00b      	b.n	80a4590 <__gethex+0x422>
 80a4578:	f016 061f 	ands.w	r6, r6, #31
 80a457c:	d008      	beq.n	80a4590 <__gethex+0x422>
 80a457e:	4491      	add	r9, r2
 80a4580:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80a4584:	f000 f98a 	bl	80a489c <__hi0bits>
 80a4588:	f1c6 0620 	rsb	r6, r6, #32
 80a458c:	42b0      	cmp	r0, r6
 80a458e:	dbe8      	blt.n	80a4562 <__gethex+0x3f4>
 80a4590:	2701      	movs	r7, #1
 80a4592:	f047 0720 	orr.w	r7, r7, #32
 80a4596:	e001      	b.n	80a459c <__gethex+0x42e>
 80a4598:	f047 0710 	orr.w	r7, r7, #16
 80a459c:	4638      	mov	r0, r7
 80a459e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a45a0:	601d      	str	r5, [r3, #0]
 80a45a2:	9b06      	ldr	r3, [sp, #24]
 80a45a4:	601c      	str	r4, [r3, #0]
 80a45a6:	b00b      	add	sp, #44	; 0x2c
 80a45a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a45ac <L_shift>:
 80a45ac:	f1c2 0208 	rsb	r2, r2, #8
 80a45b0:	0092      	lsls	r2, r2, #2
 80a45b2:	b570      	push	{r4, r5, r6, lr}
 80a45b4:	f1c2 0620 	rsb	r6, r2, #32
 80a45b8:	6843      	ldr	r3, [r0, #4]
 80a45ba:	6805      	ldr	r5, [r0, #0]
 80a45bc:	fa03 f406 	lsl.w	r4, r3, r6
 80a45c0:	432c      	orrs	r4, r5
 80a45c2:	40d3      	lsrs	r3, r2
 80a45c4:	6004      	str	r4, [r0, #0]
 80a45c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80a45ca:	4288      	cmp	r0, r1
 80a45cc:	d3f4      	bcc.n	80a45b8 <L_shift+0xc>
 80a45ce:	bd70      	pop	{r4, r5, r6, pc}

080a45d0 <__match>:
 80a45d0:	b530      	push	{r4, r5, lr}
 80a45d2:	6803      	ldr	r3, [r0, #0]
 80a45d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a45d8:	3301      	adds	r3, #1
 80a45da:	b14c      	cbz	r4, 80a45f0 <__match+0x20>
 80a45dc:	781a      	ldrb	r2, [r3, #0]
 80a45de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a45e2:	2d19      	cmp	r5, #25
 80a45e4:	bf98      	it	ls
 80a45e6:	3220      	addls	r2, #32
 80a45e8:	42a2      	cmp	r2, r4
 80a45ea:	d0f3      	beq.n	80a45d4 <__match+0x4>
 80a45ec:	2000      	movs	r0, #0
 80a45ee:	bd30      	pop	{r4, r5, pc}
 80a45f0:	6003      	str	r3, [r0, #0]
 80a45f2:	2001      	movs	r0, #1
 80a45f4:	bd30      	pop	{r4, r5, pc}

080a45f6 <__hexnan>:
 80a45f6:	680b      	ldr	r3, [r1, #0]
 80a45f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a45fc:	115e      	asrs	r6, r3, #5
 80a45fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a4602:	f013 031f 	ands.w	r3, r3, #31
 80a4606:	bf18      	it	ne
 80a4608:	3604      	addne	r6, #4
 80a460a:	1f35      	subs	r5, r6, #4
 80a460c:	4617      	mov	r7, r2
 80a460e:	2200      	movs	r2, #0
 80a4610:	4682      	mov	sl, r0
 80a4612:	46a8      	mov	r8, r5
 80a4614:	462c      	mov	r4, r5
 80a4616:	4691      	mov	r9, r2
 80a4618:	b085      	sub	sp, #20
 80a461a:	f8d0 b000 	ldr.w	fp, [r0]
 80a461e:	9301      	str	r3, [sp, #4]
 80a4620:	f846 2c04 	str.w	r2, [r6, #-4]
 80a4624:	9200      	str	r2, [sp, #0]
 80a4626:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80a462a:	2900      	cmp	r1, #0
 80a462c:	d03c      	beq.n	80a46a8 <__hexnan+0xb2>
 80a462e:	4608      	mov	r0, r1
 80a4630:	9203      	str	r2, [sp, #12]
 80a4632:	9102      	str	r1, [sp, #8]
 80a4634:	f7ff fd86 	bl	80a4144 <__hexdig_fun>
 80a4638:	9a03      	ldr	r2, [sp, #12]
 80a463a:	bb00      	cbnz	r0, 80a467e <__hexnan+0x88>
 80a463c:	9902      	ldr	r1, [sp, #8]
 80a463e:	2920      	cmp	r1, #32
 80a4640:	d816      	bhi.n	80a4670 <__hexnan+0x7a>
 80a4642:	9b00      	ldr	r3, [sp, #0]
 80a4644:	4599      	cmp	r9, r3
 80a4646:	ddee      	ble.n	80a4626 <__hexnan+0x30>
 80a4648:	4544      	cmp	r4, r8
 80a464a:	d205      	bcs.n	80a4658 <__hexnan+0x62>
 80a464c:	2a07      	cmp	r2, #7
 80a464e:	dc03      	bgt.n	80a4658 <__hexnan+0x62>
 80a4650:	4641      	mov	r1, r8
 80a4652:	4620      	mov	r0, r4
 80a4654:	f7ff ffaa 	bl	80a45ac <L_shift>
 80a4658:	42bc      	cmp	r4, r7
 80a465a:	d923      	bls.n	80a46a4 <__hexnan+0xae>
 80a465c:	2300      	movs	r3, #0
 80a465e:	f1a4 0804 	sub.w	r8, r4, #4
 80a4662:	f844 3c04 	str.w	r3, [r4, #-4]
 80a4666:	f8cd 9000 	str.w	r9, [sp]
 80a466a:	4644      	mov	r4, r8
 80a466c:	461a      	mov	r2, r3
 80a466e:	e7da      	b.n	80a4626 <__hexnan+0x30>
 80a4670:	2929      	cmp	r1, #41	; 0x29
 80a4672:	d148      	bne.n	80a4706 <__hexnan+0x110>
 80a4674:	f10b 0301 	add.w	r3, fp, #1
 80a4678:	f8ca 3000 	str.w	r3, [sl]
 80a467c:	e014      	b.n	80a46a8 <__hexnan+0xb2>
 80a467e:	3201      	adds	r2, #1
 80a4680:	2a08      	cmp	r2, #8
 80a4682:	f109 0901 	add.w	r9, r9, #1
 80a4686:	dd06      	ble.n	80a4696 <__hexnan+0xa0>
 80a4688:	42bc      	cmp	r4, r7
 80a468a:	d9cc      	bls.n	80a4626 <__hexnan+0x30>
 80a468c:	2300      	movs	r3, #0
 80a468e:	f844 3c04 	str.w	r3, [r4, #-4]
 80a4692:	2201      	movs	r2, #1
 80a4694:	3c04      	subs	r4, #4
 80a4696:	6821      	ldr	r1, [r4, #0]
 80a4698:	f000 000f 	and.w	r0, r0, #15
 80a469c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80a46a0:	6020      	str	r0, [r4, #0]
 80a46a2:	e7c0      	b.n	80a4626 <__hexnan+0x30>
 80a46a4:	2208      	movs	r2, #8
 80a46a6:	e7be      	b.n	80a4626 <__hexnan+0x30>
 80a46a8:	f1b9 0f00 	cmp.w	r9, #0
 80a46ac:	d02b      	beq.n	80a4706 <__hexnan+0x110>
 80a46ae:	4544      	cmp	r4, r8
 80a46b0:	d205      	bcs.n	80a46be <__hexnan+0xc8>
 80a46b2:	2a07      	cmp	r2, #7
 80a46b4:	dc03      	bgt.n	80a46be <__hexnan+0xc8>
 80a46b6:	4641      	mov	r1, r8
 80a46b8:	4620      	mov	r0, r4
 80a46ba:	f7ff ff77 	bl	80a45ac <L_shift>
 80a46be:	42bc      	cmp	r4, r7
 80a46c0:	d90c      	bls.n	80a46dc <__hexnan+0xe6>
 80a46c2:	463b      	mov	r3, r7
 80a46c4:	f854 2b04 	ldr.w	r2, [r4], #4
 80a46c8:	42a5      	cmp	r5, r4
 80a46ca:	f843 2b04 	str.w	r2, [r3], #4
 80a46ce:	d2f9      	bcs.n	80a46c4 <__hexnan+0xce>
 80a46d0:	2200      	movs	r2, #0
 80a46d2:	f843 2b04 	str.w	r2, [r3], #4
 80a46d6:	429d      	cmp	r5, r3
 80a46d8:	d2fb      	bcs.n	80a46d2 <__hexnan+0xdc>
 80a46da:	e00b      	b.n	80a46f4 <__hexnan+0xfe>
 80a46dc:	9b01      	ldr	r3, [sp, #4]
 80a46de:	b14b      	cbz	r3, 80a46f4 <__hexnan+0xfe>
 80a46e0:	f1c3 0220 	rsb	r2, r3, #32
 80a46e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a46e8:	40d3      	lsrs	r3, r2
 80a46ea:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a46ee:	4013      	ands	r3, r2
 80a46f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80a46f4:	682b      	ldr	r3, [r5, #0]
 80a46f6:	b943      	cbnz	r3, 80a470a <__hexnan+0x114>
 80a46f8:	42bd      	cmp	r5, r7
 80a46fa:	d102      	bne.n	80a4702 <__hexnan+0x10c>
 80a46fc:	2301      	movs	r3, #1
 80a46fe:	602b      	str	r3, [r5, #0]
 80a4700:	e003      	b.n	80a470a <__hexnan+0x114>
 80a4702:	3d04      	subs	r5, #4
 80a4704:	e7f6      	b.n	80a46f4 <__hexnan+0xfe>
 80a4706:	2004      	movs	r0, #4
 80a4708:	e000      	b.n	80a470c <__hexnan+0x116>
 80a470a:	2005      	movs	r0, #5
 80a470c:	b005      	add	sp, #20
 80a470e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a4712 <_Balloc>:
 80a4712:	b570      	push	{r4, r5, r6, lr}
 80a4714:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80a4716:	4604      	mov	r4, r0
 80a4718:	460e      	mov	r6, r1
 80a471a:	b93d      	cbnz	r5, 80a472c <_Balloc+0x1a>
 80a471c:	2010      	movs	r0, #16
 80a471e:	f7fd f923 	bl	80a1968 <malloc>
 80a4722:	6260      	str	r0, [r4, #36]	; 0x24
 80a4724:	6045      	str	r5, [r0, #4]
 80a4726:	6085      	str	r5, [r0, #8]
 80a4728:	6005      	str	r5, [r0, #0]
 80a472a:	60c5      	str	r5, [r0, #12]
 80a472c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a472e:	68eb      	ldr	r3, [r5, #12]
 80a4730:	b143      	cbz	r3, 80a4744 <_Balloc+0x32>
 80a4732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a4734:	68db      	ldr	r3, [r3, #12]
 80a4736:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80a473a:	b178      	cbz	r0, 80a475c <_Balloc+0x4a>
 80a473c:	6802      	ldr	r2, [r0, #0]
 80a473e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80a4742:	e017      	b.n	80a4774 <_Balloc+0x62>
 80a4744:	2221      	movs	r2, #33	; 0x21
 80a4746:	2104      	movs	r1, #4
 80a4748:	4620      	mov	r0, r4
 80a474a:	f000 fbca 	bl	80a4ee2 <_calloc_r>
 80a474e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a4750:	60e8      	str	r0, [r5, #12]
 80a4752:	68db      	ldr	r3, [r3, #12]
 80a4754:	2b00      	cmp	r3, #0
 80a4756:	d1ec      	bne.n	80a4732 <_Balloc+0x20>
 80a4758:	2000      	movs	r0, #0
 80a475a:	bd70      	pop	{r4, r5, r6, pc}
 80a475c:	2101      	movs	r1, #1
 80a475e:	fa01 f506 	lsl.w	r5, r1, r6
 80a4762:	1d6a      	adds	r2, r5, #5
 80a4764:	0092      	lsls	r2, r2, #2
 80a4766:	4620      	mov	r0, r4
 80a4768:	f000 fbbb 	bl	80a4ee2 <_calloc_r>
 80a476c:	2800      	cmp	r0, #0
 80a476e:	d0f3      	beq.n	80a4758 <_Balloc+0x46>
 80a4770:	6046      	str	r6, [r0, #4]
 80a4772:	6085      	str	r5, [r0, #8]
 80a4774:	2300      	movs	r3, #0
 80a4776:	6103      	str	r3, [r0, #16]
 80a4778:	60c3      	str	r3, [r0, #12]
 80a477a:	bd70      	pop	{r4, r5, r6, pc}

080a477c <_Bfree>:
 80a477c:	b570      	push	{r4, r5, r6, lr}
 80a477e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80a4780:	4606      	mov	r6, r0
 80a4782:	460d      	mov	r5, r1
 80a4784:	b93c      	cbnz	r4, 80a4796 <_Bfree+0x1a>
 80a4786:	2010      	movs	r0, #16
 80a4788:	f7fd f8ee 	bl	80a1968 <malloc>
 80a478c:	6270      	str	r0, [r6, #36]	; 0x24
 80a478e:	6044      	str	r4, [r0, #4]
 80a4790:	6084      	str	r4, [r0, #8]
 80a4792:	6004      	str	r4, [r0, #0]
 80a4794:	60c4      	str	r4, [r0, #12]
 80a4796:	b13d      	cbz	r5, 80a47a8 <_Bfree+0x2c>
 80a4798:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80a479a:	686a      	ldr	r2, [r5, #4]
 80a479c:	68db      	ldr	r3, [r3, #12]
 80a479e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a47a2:	6029      	str	r1, [r5, #0]
 80a47a4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80a47a8:	bd70      	pop	{r4, r5, r6, pc}

080a47aa <__multadd>:
 80a47aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a47ae:	4606      	mov	r6, r0
 80a47b0:	460c      	mov	r4, r1
 80a47b2:	690d      	ldr	r5, [r1, #16]
 80a47b4:	461f      	mov	r7, r3
 80a47b6:	f101 0e14 	add.w	lr, r1, #20
 80a47ba:	2300      	movs	r3, #0
 80a47bc:	f8de 0000 	ldr.w	r0, [lr]
 80a47c0:	3301      	adds	r3, #1
 80a47c2:	b281      	uxth	r1, r0
 80a47c4:	fb02 7101 	mla	r1, r2, r1, r7
 80a47c8:	0c00      	lsrs	r0, r0, #16
 80a47ca:	0c0f      	lsrs	r7, r1, #16
 80a47cc:	fb02 7000 	mla	r0, r2, r0, r7
 80a47d0:	b289      	uxth	r1, r1
 80a47d2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80a47d6:	429d      	cmp	r5, r3
 80a47d8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80a47dc:	f84e 1b04 	str.w	r1, [lr], #4
 80a47e0:	dcec      	bgt.n	80a47bc <__multadd+0x12>
 80a47e2:	b1d7      	cbz	r7, 80a481a <__multadd+0x70>
 80a47e4:	68a3      	ldr	r3, [r4, #8]
 80a47e6:	429d      	cmp	r5, r3
 80a47e8:	db12      	blt.n	80a4810 <__multadd+0x66>
 80a47ea:	6861      	ldr	r1, [r4, #4]
 80a47ec:	4630      	mov	r0, r6
 80a47ee:	3101      	adds	r1, #1
 80a47f0:	f7ff ff8f 	bl	80a4712 <_Balloc>
 80a47f4:	4680      	mov	r8, r0
 80a47f6:	6922      	ldr	r2, [r4, #16]
 80a47f8:	f104 010c 	add.w	r1, r4, #12
 80a47fc:	3202      	adds	r2, #2
 80a47fe:	0092      	lsls	r2, r2, #2
 80a4800:	300c      	adds	r0, #12
 80a4802:	f7fe fddb 	bl	80a33bc <memcpy>
 80a4806:	4621      	mov	r1, r4
 80a4808:	4630      	mov	r0, r6
 80a480a:	f7ff ffb7 	bl	80a477c <_Bfree>
 80a480e:	4644      	mov	r4, r8
 80a4810:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80a4814:	3501      	adds	r5, #1
 80a4816:	615f      	str	r7, [r3, #20]
 80a4818:	6125      	str	r5, [r4, #16]
 80a481a:	4620      	mov	r0, r4
 80a481c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a4820 <__s2b>:
 80a4820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4824:	4606      	mov	r6, r0
 80a4826:	4615      	mov	r5, r2
 80a4828:	461f      	mov	r7, r3
 80a482a:	2209      	movs	r2, #9
 80a482c:	3308      	adds	r3, #8
 80a482e:	460c      	mov	r4, r1
 80a4830:	fb93 f3f2 	sdiv	r3, r3, r2
 80a4834:	2100      	movs	r1, #0
 80a4836:	2201      	movs	r2, #1
 80a4838:	429a      	cmp	r2, r3
 80a483a:	da02      	bge.n	80a4842 <__s2b+0x22>
 80a483c:	0052      	lsls	r2, r2, #1
 80a483e:	3101      	adds	r1, #1
 80a4840:	e7fa      	b.n	80a4838 <__s2b+0x18>
 80a4842:	4630      	mov	r0, r6
 80a4844:	f7ff ff65 	bl	80a4712 <_Balloc>
 80a4848:	9b08      	ldr	r3, [sp, #32]
 80a484a:	2d09      	cmp	r5, #9
 80a484c:	6143      	str	r3, [r0, #20]
 80a484e:	f04f 0301 	mov.w	r3, #1
 80a4852:	6103      	str	r3, [r0, #16]
 80a4854:	dd11      	ble.n	80a487a <__s2b+0x5a>
 80a4856:	f104 0809 	add.w	r8, r4, #9
 80a485a:	46c1      	mov	r9, r8
 80a485c:	442c      	add	r4, r5
 80a485e:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a4862:	4601      	mov	r1, r0
 80a4864:	3b30      	subs	r3, #48	; 0x30
 80a4866:	220a      	movs	r2, #10
 80a4868:	4630      	mov	r0, r6
 80a486a:	f7ff ff9e 	bl	80a47aa <__multadd>
 80a486e:	45a1      	cmp	r9, r4
 80a4870:	d1f5      	bne.n	80a485e <__s2b+0x3e>
 80a4872:	eb08 0405 	add.w	r4, r8, r5
 80a4876:	3c08      	subs	r4, #8
 80a4878:	e001      	b.n	80a487e <__s2b+0x5e>
 80a487a:	340a      	adds	r4, #10
 80a487c:	2509      	movs	r5, #9
 80a487e:	1b2d      	subs	r5, r5, r4
 80a4880:	1963      	adds	r3, r4, r5
 80a4882:	429f      	cmp	r7, r3
 80a4884:	dd08      	ble.n	80a4898 <__s2b+0x78>
 80a4886:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a488a:	4601      	mov	r1, r0
 80a488c:	3b30      	subs	r3, #48	; 0x30
 80a488e:	220a      	movs	r2, #10
 80a4890:	4630      	mov	r0, r6
 80a4892:	f7ff ff8a 	bl	80a47aa <__multadd>
 80a4896:	e7f3      	b.n	80a4880 <__s2b+0x60>
 80a4898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a489c <__hi0bits>:
 80a489c:	0c03      	lsrs	r3, r0, #16
 80a489e:	041b      	lsls	r3, r3, #16
 80a48a0:	b913      	cbnz	r3, 80a48a8 <__hi0bits+0xc>
 80a48a2:	0400      	lsls	r0, r0, #16
 80a48a4:	2310      	movs	r3, #16
 80a48a6:	e000      	b.n	80a48aa <__hi0bits+0xe>
 80a48a8:	2300      	movs	r3, #0
 80a48aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80a48ae:	bf04      	itt	eq
 80a48b0:	0200      	lsleq	r0, r0, #8
 80a48b2:	3308      	addeq	r3, #8
 80a48b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80a48b8:	bf04      	itt	eq
 80a48ba:	0100      	lsleq	r0, r0, #4
 80a48bc:	3304      	addeq	r3, #4
 80a48be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80a48c2:	bf04      	itt	eq
 80a48c4:	0080      	lsleq	r0, r0, #2
 80a48c6:	3302      	addeq	r3, #2
 80a48c8:	2800      	cmp	r0, #0
 80a48ca:	db03      	blt.n	80a48d4 <__hi0bits+0x38>
 80a48cc:	0042      	lsls	r2, r0, #1
 80a48ce:	d503      	bpl.n	80a48d8 <__hi0bits+0x3c>
 80a48d0:	1c58      	adds	r0, r3, #1
 80a48d2:	4770      	bx	lr
 80a48d4:	4618      	mov	r0, r3
 80a48d6:	4770      	bx	lr
 80a48d8:	2020      	movs	r0, #32
 80a48da:	4770      	bx	lr

080a48dc <__lo0bits>:
 80a48dc:	6803      	ldr	r3, [r0, #0]
 80a48de:	f013 0207 	ands.w	r2, r3, #7
 80a48e2:	d00b      	beq.n	80a48fc <__lo0bits+0x20>
 80a48e4:	07d9      	lsls	r1, r3, #31
 80a48e6:	d422      	bmi.n	80a492e <__lo0bits+0x52>
 80a48e8:	079a      	lsls	r2, r3, #30
 80a48ea:	bf4b      	itete	mi
 80a48ec:	085b      	lsrmi	r3, r3, #1
 80a48ee:	089b      	lsrpl	r3, r3, #2
 80a48f0:	6003      	strmi	r3, [r0, #0]
 80a48f2:	6003      	strpl	r3, [r0, #0]
 80a48f4:	bf4c      	ite	mi
 80a48f6:	2001      	movmi	r0, #1
 80a48f8:	2002      	movpl	r0, #2
 80a48fa:	4770      	bx	lr
 80a48fc:	b299      	uxth	r1, r3
 80a48fe:	b909      	cbnz	r1, 80a4904 <__lo0bits+0x28>
 80a4900:	0c1b      	lsrs	r3, r3, #16
 80a4902:	2210      	movs	r2, #16
 80a4904:	f013 0fff 	tst.w	r3, #255	; 0xff
 80a4908:	bf04      	itt	eq
 80a490a:	0a1b      	lsreq	r3, r3, #8
 80a490c:	3208      	addeq	r2, #8
 80a490e:	0719      	lsls	r1, r3, #28
 80a4910:	bf04      	itt	eq
 80a4912:	091b      	lsreq	r3, r3, #4
 80a4914:	3204      	addeq	r2, #4
 80a4916:	0799      	lsls	r1, r3, #30
 80a4918:	bf04      	itt	eq
 80a491a:	089b      	lsreq	r3, r3, #2
 80a491c:	3202      	addeq	r2, #2
 80a491e:	07d9      	lsls	r1, r3, #31
 80a4920:	d402      	bmi.n	80a4928 <__lo0bits+0x4c>
 80a4922:	085b      	lsrs	r3, r3, #1
 80a4924:	d005      	beq.n	80a4932 <__lo0bits+0x56>
 80a4926:	3201      	adds	r2, #1
 80a4928:	6003      	str	r3, [r0, #0]
 80a492a:	4610      	mov	r0, r2
 80a492c:	4770      	bx	lr
 80a492e:	2000      	movs	r0, #0
 80a4930:	4770      	bx	lr
 80a4932:	2020      	movs	r0, #32
 80a4934:	4770      	bx	lr

080a4936 <__i2b>:
 80a4936:	b510      	push	{r4, lr}
 80a4938:	460c      	mov	r4, r1
 80a493a:	2101      	movs	r1, #1
 80a493c:	f7ff fee9 	bl	80a4712 <_Balloc>
 80a4940:	2201      	movs	r2, #1
 80a4942:	6144      	str	r4, [r0, #20]
 80a4944:	6102      	str	r2, [r0, #16]
 80a4946:	bd10      	pop	{r4, pc}

080a4948 <__multiply>:
 80a4948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a494c:	4614      	mov	r4, r2
 80a494e:	690a      	ldr	r2, [r1, #16]
 80a4950:	6923      	ldr	r3, [r4, #16]
 80a4952:	4688      	mov	r8, r1
 80a4954:	429a      	cmp	r2, r3
 80a4956:	bfbe      	ittt	lt
 80a4958:	460b      	movlt	r3, r1
 80a495a:	46a0      	movlt	r8, r4
 80a495c:	461c      	movlt	r4, r3
 80a495e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80a4962:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80a4966:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a496a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80a496e:	eb07 0609 	add.w	r6, r7, r9
 80a4972:	429e      	cmp	r6, r3
 80a4974:	bfc8      	it	gt
 80a4976:	3101      	addgt	r1, #1
 80a4978:	f7ff fecb 	bl	80a4712 <_Balloc>
 80a497c:	f100 0514 	add.w	r5, r0, #20
 80a4980:	462b      	mov	r3, r5
 80a4982:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80a4986:	2200      	movs	r2, #0
 80a4988:	4563      	cmp	r3, ip
 80a498a:	d202      	bcs.n	80a4992 <__multiply+0x4a>
 80a498c:	f843 2b04 	str.w	r2, [r3], #4
 80a4990:	e7fa      	b.n	80a4988 <__multiply+0x40>
 80a4992:	f104 0214 	add.w	r2, r4, #20
 80a4996:	f108 0114 	add.w	r1, r8, #20
 80a499a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80a499e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80a49a2:	9300      	str	r3, [sp, #0]
 80a49a4:	9b00      	ldr	r3, [sp, #0]
 80a49a6:	9201      	str	r2, [sp, #4]
 80a49a8:	4293      	cmp	r3, r2
 80a49aa:	d957      	bls.n	80a4a5c <__multiply+0x114>
 80a49ac:	f8b2 b000 	ldrh.w	fp, [r2]
 80a49b0:	f1bb 0f00 	cmp.w	fp, #0
 80a49b4:	d023      	beq.n	80a49fe <__multiply+0xb6>
 80a49b6:	4689      	mov	r9, r1
 80a49b8:	46ae      	mov	lr, r5
 80a49ba:	f04f 0800 	mov.w	r8, #0
 80a49be:	f859 4b04 	ldr.w	r4, [r9], #4
 80a49c2:	f8be a000 	ldrh.w	sl, [lr]
 80a49c6:	b2a3      	uxth	r3, r4
 80a49c8:	fb0b a303 	mla	r3, fp, r3, sl
 80a49cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80a49d0:	f8de 4000 	ldr.w	r4, [lr]
 80a49d4:	4443      	add	r3, r8
 80a49d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a49da:	fb0b 840a 	mla	r4, fp, sl, r8
 80a49de:	46f2      	mov	sl, lr
 80a49e0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80a49e4:	b29b      	uxth	r3, r3
 80a49e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80a49ea:	454f      	cmp	r7, r9
 80a49ec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a49f0:	f84a 3b04 	str.w	r3, [sl], #4
 80a49f4:	d901      	bls.n	80a49fa <__multiply+0xb2>
 80a49f6:	46d6      	mov	lr, sl
 80a49f8:	e7e1      	b.n	80a49be <__multiply+0x76>
 80a49fa:	f8ce 8004 	str.w	r8, [lr, #4]
 80a49fe:	9b01      	ldr	r3, [sp, #4]
 80a4a00:	3204      	adds	r2, #4
 80a4a02:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80a4a06:	f1ba 0f00 	cmp.w	sl, #0
 80a4a0a:	d021      	beq.n	80a4a50 <__multiply+0x108>
 80a4a0c:	462c      	mov	r4, r5
 80a4a0e:	4689      	mov	r9, r1
 80a4a10:	682b      	ldr	r3, [r5, #0]
 80a4a12:	f04f 0800 	mov.w	r8, #0
 80a4a16:	f8b9 e000 	ldrh.w	lr, [r9]
 80a4a1a:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80a4a1e:	b29b      	uxth	r3, r3
 80a4a20:	fb0a be0e 	mla	lr, sl, lr, fp
 80a4a24:	46a3      	mov	fp, r4
 80a4a26:	44f0      	add	r8, lr
 80a4a28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a4a2c:	f84b 3b04 	str.w	r3, [fp], #4
 80a4a30:	f859 3b04 	ldr.w	r3, [r9], #4
 80a4a34:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80a4a38:	0c1b      	lsrs	r3, r3, #16
 80a4a3a:	fb0a e303 	mla	r3, sl, r3, lr
 80a4a3e:	454f      	cmp	r7, r9
 80a4a40:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80a4a44:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80a4a48:	d901      	bls.n	80a4a4e <__multiply+0x106>
 80a4a4a:	465c      	mov	r4, fp
 80a4a4c:	e7e3      	b.n	80a4a16 <__multiply+0xce>
 80a4a4e:	6063      	str	r3, [r4, #4]
 80a4a50:	3504      	adds	r5, #4
 80a4a52:	e7a7      	b.n	80a49a4 <__multiply+0x5c>
 80a4a54:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80a4a58:	b913      	cbnz	r3, 80a4a60 <__multiply+0x118>
 80a4a5a:	3e01      	subs	r6, #1
 80a4a5c:	2e00      	cmp	r6, #0
 80a4a5e:	dcf9      	bgt.n	80a4a54 <__multiply+0x10c>
 80a4a60:	6106      	str	r6, [r0, #16]
 80a4a62:	b003      	add	sp, #12
 80a4a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a4a68 <__pow5mult>:
 80a4a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4a6c:	4615      	mov	r5, r2
 80a4a6e:	f012 0203 	ands.w	r2, r2, #3
 80a4a72:	4606      	mov	r6, r0
 80a4a74:	460f      	mov	r7, r1
 80a4a76:	d007      	beq.n	80a4a88 <__pow5mult+0x20>
 80a4a78:	4c21      	ldr	r4, [pc, #132]	; (80a4b00 <__pow5mult+0x98>)
 80a4a7a:	3a01      	subs	r2, #1
 80a4a7c:	2300      	movs	r3, #0
 80a4a7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a4a82:	f7ff fe92 	bl	80a47aa <__multadd>
 80a4a86:	4607      	mov	r7, r0
 80a4a88:	10ad      	asrs	r5, r5, #2
 80a4a8a:	d036      	beq.n	80a4afa <__pow5mult+0x92>
 80a4a8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a4a8e:	b93c      	cbnz	r4, 80a4aa0 <__pow5mult+0x38>
 80a4a90:	2010      	movs	r0, #16
 80a4a92:	f7fc ff69 	bl	80a1968 <malloc>
 80a4a96:	6270      	str	r0, [r6, #36]	; 0x24
 80a4a98:	6044      	str	r4, [r0, #4]
 80a4a9a:	6084      	str	r4, [r0, #8]
 80a4a9c:	6004      	str	r4, [r0, #0]
 80a4a9e:	60c4      	str	r4, [r0, #12]
 80a4aa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a4aa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a4aa8:	b94c      	cbnz	r4, 80a4abe <__pow5mult+0x56>
 80a4aaa:	f240 2171 	movw	r1, #625	; 0x271
 80a4aae:	4630      	mov	r0, r6
 80a4ab0:	f7ff ff41 	bl	80a4936 <__i2b>
 80a4ab4:	4604      	mov	r4, r0
 80a4ab6:	2300      	movs	r3, #0
 80a4ab8:	f8c8 0008 	str.w	r0, [r8, #8]
 80a4abc:	6003      	str	r3, [r0, #0]
 80a4abe:	f04f 0800 	mov.w	r8, #0
 80a4ac2:	07eb      	lsls	r3, r5, #31
 80a4ac4:	d50a      	bpl.n	80a4adc <__pow5mult+0x74>
 80a4ac6:	4639      	mov	r1, r7
 80a4ac8:	4622      	mov	r2, r4
 80a4aca:	4630      	mov	r0, r6
 80a4acc:	f7ff ff3c 	bl	80a4948 <__multiply>
 80a4ad0:	4681      	mov	r9, r0
 80a4ad2:	4639      	mov	r1, r7
 80a4ad4:	4630      	mov	r0, r6
 80a4ad6:	f7ff fe51 	bl	80a477c <_Bfree>
 80a4ada:	464f      	mov	r7, r9
 80a4adc:	106d      	asrs	r5, r5, #1
 80a4ade:	d00c      	beq.n	80a4afa <__pow5mult+0x92>
 80a4ae0:	6820      	ldr	r0, [r4, #0]
 80a4ae2:	b108      	cbz	r0, 80a4ae8 <__pow5mult+0x80>
 80a4ae4:	4604      	mov	r4, r0
 80a4ae6:	e7ec      	b.n	80a4ac2 <__pow5mult+0x5a>
 80a4ae8:	4622      	mov	r2, r4
 80a4aea:	4621      	mov	r1, r4
 80a4aec:	4630      	mov	r0, r6
 80a4aee:	f7ff ff2b 	bl	80a4948 <__multiply>
 80a4af2:	6020      	str	r0, [r4, #0]
 80a4af4:	f8c0 8000 	str.w	r8, [r0]
 80a4af8:	e7f4      	b.n	80a4ae4 <__pow5mult+0x7c>
 80a4afa:	4638      	mov	r0, r7
 80a4afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a4b00:	080a5338 	.word	0x080a5338

080a4b04 <__lshift>:
 80a4b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4b08:	460c      	mov	r4, r1
 80a4b0a:	4607      	mov	r7, r0
 80a4b0c:	4691      	mov	r9, r2
 80a4b0e:	6926      	ldr	r6, [r4, #16]
 80a4b10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a4b14:	4456      	add	r6, sl
 80a4b16:	6849      	ldr	r1, [r1, #4]
 80a4b18:	68a3      	ldr	r3, [r4, #8]
 80a4b1a:	1c75      	adds	r5, r6, #1
 80a4b1c:	42ab      	cmp	r3, r5
 80a4b1e:	da02      	bge.n	80a4b26 <__lshift+0x22>
 80a4b20:	3101      	adds	r1, #1
 80a4b22:	005b      	lsls	r3, r3, #1
 80a4b24:	e7fa      	b.n	80a4b1c <__lshift+0x18>
 80a4b26:	4638      	mov	r0, r7
 80a4b28:	f7ff fdf3 	bl	80a4712 <_Balloc>
 80a4b2c:	2300      	movs	r3, #0
 80a4b2e:	4680      	mov	r8, r0
 80a4b30:	461a      	mov	r2, r3
 80a4b32:	f100 0114 	add.w	r1, r0, #20
 80a4b36:	4553      	cmp	r3, sl
 80a4b38:	da03      	bge.n	80a4b42 <__lshift+0x3e>
 80a4b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80a4b3e:	3301      	adds	r3, #1
 80a4b40:	e7f9      	b.n	80a4b36 <__lshift+0x32>
 80a4b42:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80a4b46:	6920      	ldr	r0, [r4, #16]
 80a4b48:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a4b4c:	f019 091f 	ands.w	r9, r9, #31
 80a4b50:	f104 0114 	add.w	r1, r4, #20
 80a4b54:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80a4b58:	d014      	beq.n	80a4b84 <__lshift+0x80>
 80a4b5a:	f1c9 0c20 	rsb	ip, r9, #32
 80a4b5e:	2200      	movs	r2, #0
 80a4b60:	6808      	ldr	r0, [r1, #0]
 80a4b62:	469a      	mov	sl, r3
 80a4b64:	fa00 f009 	lsl.w	r0, r0, r9
 80a4b68:	4302      	orrs	r2, r0
 80a4b6a:	f843 2b04 	str.w	r2, [r3], #4
 80a4b6e:	f851 2b04 	ldr.w	r2, [r1], #4
 80a4b72:	458e      	cmp	lr, r1
 80a4b74:	fa22 f20c 	lsr.w	r2, r2, ip
 80a4b78:	d8f2      	bhi.n	80a4b60 <__lshift+0x5c>
 80a4b7a:	f8ca 2004 	str.w	r2, [sl, #4]
 80a4b7e:	b142      	cbz	r2, 80a4b92 <__lshift+0x8e>
 80a4b80:	1cb5      	adds	r5, r6, #2
 80a4b82:	e006      	b.n	80a4b92 <__lshift+0x8e>
 80a4b84:	3b04      	subs	r3, #4
 80a4b86:	f851 2b04 	ldr.w	r2, [r1], #4
 80a4b8a:	458e      	cmp	lr, r1
 80a4b8c:	f843 2f04 	str.w	r2, [r3, #4]!
 80a4b90:	d8f9      	bhi.n	80a4b86 <__lshift+0x82>
 80a4b92:	3d01      	subs	r5, #1
 80a4b94:	4638      	mov	r0, r7
 80a4b96:	f8c8 5010 	str.w	r5, [r8, #16]
 80a4b9a:	4621      	mov	r1, r4
 80a4b9c:	f7ff fdee 	bl	80a477c <_Bfree>
 80a4ba0:	4640      	mov	r0, r8
 80a4ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a4ba6 <__mcmp>:
 80a4ba6:	6903      	ldr	r3, [r0, #16]
 80a4ba8:	690a      	ldr	r2, [r1, #16]
 80a4baa:	b510      	push	{r4, lr}
 80a4bac:	1a9b      	subs	r3, r3, r2
 80a4bae:	d111      	bne.n	80a4bd4 <__mcmp+0x2e>
 80a4bb0:	0092      	lsls	r2, r2, #2
 80a4bb2:	3014      	adds	r0, #20
 80a4bb4:	3114      	adds	r1, #20
 80a4bb6:	1883      	adds	r3, r0, r2
 80a4bb8:	440a      	add	r2, r1
 80a4bba:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80a4bbe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80a4bc2:	428c      	cmp	r4, r1
 80a4bc4:	d002      	beq.n	80a4bcc <__mcmp+0x26>
 80a4bc6:	d307      	bcc.n	80a4bd8 <__mcmp+0x32>
 80a4bc8:	2001      	movs	r0, #1
 80a4bca:	bd10      	pop	{r4, pc}
 80a4bcc:	4298      	cmp	r0, r3
 80a4bce:	d3f4      	bcc.n	80a4bba <__mcmp+0x14>
 80a4bd0:	2000      	movs	r0, #0
 80a4bd2:	bd10      	pop	{r4, pc}
 80a4bd4:	4618      	mov	r0, r3
 80a4bd6:	bd10      	pop	{r4, pc}
 80a4bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a4bdc:	bd10      	pop	{r4, pc}

080a4bde <__mdiff>:
 80a4bde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4be2:	460c      	mov	r4, r1
 80a4be4:	4607      	mov	r7, r0
 80a4be6:	4611      	mov	r1, r2
 80a4be8:	4620      	mov	r0, r4
 80a4bea:	4615      	mov	r5, r2
 80a4bec:	f7ff ffdb 	bl	80a4ba6 <__mcmp>
 80a4bf0:	1e06      	subs	r6, r0, #0
 80a4bf2:	d108      	bne.n	80a4c06 <__mdiff+0x28>
 80a4bf4:	4631      	mov	r1, r6
 80a4bf6:	4638      	mov	r0, r7
 80a4bf8:	f7ff fd8b 	bl	80a4712 <_Balloc>
 80a4bfc:	2301      	movs	r3, #1
 80a4bfe:	6103      	str	r3, [r0, #16]
 80a4c00:	6146      	str	r6, [r0, #20]
 80a4c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a4c06:	bfbc      	itt	lt
 80a4c08:	4623      	movlt	r3, r4
 80a4c0a:	462c      	movlt	r4, r5
 80a4c0c:	4638      	mov	r0, r7
 80a4c0e:	6861      	ldr	r1, [r4, #4]
 80a4c10:	bfba      	itte	lt
 80a4c12:	461d      	movlt	r5, r3
 80a4c14:	2601      	movlt	r6, #1
 80a4c16:	2600      	movge	r6, #0
 80a4c18:	f7ff fd7b 	bl	80a4712 <_Balloc>
 80a4c1c:	692b      	ldr	r3, [r5, #16]
 80a4c1e:	60c6      	str	r6, [r0, #12]
 80a4c20:	6926      	ldr	r6, [r4, #16]
 80a4c22:	f105 0914 	add.w	r9, r5, #20
 80a4c26:	f104 0114 	add.w	r1, r4, #20
 80a4c2a:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80a4c2e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80a4c32:	f100 0514 	add.w	r5, r0, #20
 80a4c36:	f04f 0c00 	mov.w	ip, #0
 80a4c3a:	f851 2b04 	ldr.w	r2, [r1], #4
 80a4c3e:	f859 4b04 	ldr.w	r4, [r9], #4
 80a4c42:	b293      	uxth	r3, r2
 80a4c44:	449c      	add	ip, r3
 80a4c46:	b2a3      	uxth	r3, r4
 80a4c48:	0c24      	lsrs	r4, r4, #16
 80a4c4a:	ebc3 030c 	rsb	r3, r3, ip
 80a4c4e:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 80a4c52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80a4c56:	b29b      	uxth	r3, r3
 80a4c58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80a4c5c:	45c8      	cmp	r8, r9
 80a4c5e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a4c62:	468e      	mov	lr, r1
 80a4c64:	f845 2b04 	str.w	r2, [r5], #4
 80a4c68:	d8e7      	bhi.n	80a4c3a <__mdiff+0x5c>
 80a4c6a:	45be      	cmp	lr, r7
 80a4c6c:	d20e      	bcs.n	80a4c8c <__mdiff+0xae>
 80a4c6e:	f85e 1b04 	ldr.w	r1, [lr], #4
 80a4c72:	b28a      	uxth	r2, r1
 80a4c74:	4462      	add	r2, ip
 80a4c76:	1413      	asrs	r3, r2, #16
 80a4c78:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80a4c7c:	b292      	uxth	r2, r2
 80a4c7e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80a4c82:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a4c86:	f845 2b04 	str.w	r2, [r5], #4
 80a4c8a:	e7ee      	b.n	80a4c6a <__mdiff+0x8c>
 80a4c8c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80a4c90:	b90b      	cbnz	r3, 80a4c96 <__mdiff+0xb8>
 80a4c92:	3e01      	subs	r6, #1
 80a4c94:	e7fa      	b.n	80a4c8c <__mdiff+0xae>
 80a4c96:	6106      	str	r6, [r0, #16]
 80a4c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a4c9c <__ulp>:
 80a4c9c:	4b10      	ldr	r3, [pc, #64]	; (80a4ce0 <__ulp+0x44>)
 80a4c9e:	400b      	ands	r3, r1
 80a4ca0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a4ca4:	2b00      	cmp	r3, #0
 80a4ca6:	dd02      	ble.n	80a4cae <__ulp+0x12>
 80a4ca8:	2000      	movs	r0, #0
 80a4caa:	4619      	mov	r1, r3
 80a4cac:	4770      	bx	lr
 80a4cae:	425b      	negs	r3, r3
 80a4cb0:	151b      	asrs	r3, r3, #20
 80a4cb2:	2b13      	cmp	r3, #19
 80a4cb4:	f04f 0000 	mov.w	r0, #0
 80a4cb8:	f04f 0100 	mov.w	r1, #0
 80a4cbc:	dc04      	bgt.n	80a4cc8 <__ulp+0x2c>
 80a4cbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80a4cc2:	fa42 f103 	asr.w	r1, r2, r3
 80a4cc6:	4770      	bx	lr
 80a4cc8:	3b14      	subs	r3, #20
 80a4cca:	2b1e      	cmp	r3, #30
 80a4ccc:	f04f 0201 	mov.w	r2, #1
 80a4cd0:	bfce      	itee	gt
 80a4cd2:	4613      	movgt	r3, r2
 80a4cd4:	f1c3 031f 	rsble	r3, r3, #31
 80a4cd8:	fa02 f303 	lslle.w	r3, r2, r3
 80a4cdc:	4618      	mov	r0, r3
 80a4cde:	4770      	bx	lr
 80a4ce0:	7ff00000 	.word	0x7ff00000

080a4ce4 <__b2d>:
 80a4ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4ce6:	6905      	ldr	r5, [r0, #16]
 80a4ce8:	f100 0614 	add.w	r6, r0, #20
 80a4cec:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80a4cf0:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80a4cf4:	1f2f      	subs	r7, r5, #4
 80a4cf6:	4620      	mov	r0, r4
 80a4cf8:	f7ff fdd0 	bl	80a489c <__hi0bits>
 80a4cfc:	f1c0 0320 	rsb	r3, r0, #32
 80a4d00:	280a      	cmp	r0, #10
 80a4d02:	600b      	str	r3, [r1, #0]
 80a4d04:	dc14      	bgt.n	80a4d30 <__b2d+0x4c>
 80a4d06:	f1c0 0e0b 	rsb	lr, r0, #11
 80a4d0a:	fa24 f10e 	lsr.w	r1, r4, lr
 80a4d0e:	42be      	cmp	r6, r7
 80a4d10:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80a4d14:	bf34      	ite	cc
 80a4d16:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a4d1a:	2100      	movcs	r1, #0
 80a4d1c:	3015      	adds	r0, #21
 80a4d1e:	fa04 f000 	lsl.w	r0, r4, r0
 80a4d22:	fa21 f10e 	lsr.w	r1, r1, lr
 80a4d26:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a4d2a:	ea40 0201 	orr.w	r2, r0, r1
 80a4d2e:	e023      	b.n	80a4d78 <__b2d+0x94>
 80a4d30:	42be      	cmp	r6, r7
 80a4d32:	bf3a      	itte	cc
 80a4d34:	f1a5 0708 	subcc.w	r7, r5, #8
 80a4d38:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a4d3c:	2100      	movcs	r1, #0
 80a4d3e:	380b      	subs	r0, #11
 80a4d40:	d015      	beq.n	80a4d6e <__b2d+0x8a>
 80a4d42:	4084      	lsls	r4, r0
 80a4d44:	f1c0 0520 	rsb	r5, r0, #32
 80a4d48:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80a4d4c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80a4d50:	42b7      	cmp	r7, r6
 80a4d52:	fa21 fe05 	lsr.w	lr, r1, r5
 80a4d56:	ea44 030e 	orr.w	r3, r4, lr
 80a4d5a:	bf8c      	ite	hi
 80a4d5c:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 80a4d60:	2400      	movls	r4, #0
 80a4d62:	fa01 f000 	lsl.w	r0, r1, r0
 80a4d66:	40ec      	lsrs	r4, r5
 80a4d68:	ea40 0204 	orr.w	r2, r0, r4
 80a4d6c:	e004      	b.n	80a4d78 <__b2d+0x94>
 80a4d6e:	460a      	mov	r2, r1
 80a4d70:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80a4d74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a4d78:	4610      	mov	r0, r2
 80a4d7a:	4619      	mov	r1, r3
 80a4d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4d7e <__d2b>:
 80a4d7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a4d82:	461c      	mov	r4, r3
 80a4d84:	2101      	movs	r1, #1
 80a4d86:	4690      	mov	r8, r2
 80a4d88:	9e08      	ldr	r6, [sp, #32]
 80a4d8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a4d8c:	f7ff fcc1 	bl	80a4712 <_Balloc>
 80a4d90:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80a4d94:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80a4d98:	4607      	mov	r7, r0
 80a4d9a:	b10c      	cbz	r4, 80a4da0 <__d2b+0x22>
 80a4d9c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80a4da0:	9201      	str	r2, [sp, #4]
 80a4da2:	f1b8 0f00 	cmp.w	r8, #0
 80a4da6:	d019      	beq.n	80a4ddc <__d2b+0x5e>
 80a4da8:	a802      	add	r0, sp, #8
 80a4daa:	f840 8d08 	str.w	r8, [r0, #-8]!
 80a4dae:	f7ff fd95 	bl	80a48dc <__lo0bits>
 80a4db2:	9b00      	ldr	r3, [sp, #0]
 80a4db4:	b148      	cbz	r0, 80a4dca <__d2b+0x4c>
 80a4db6:	9a01      	ldr	r2, [sp, #4]
 80a4db8:	f1c0 0120 	rsb	r1, r0, #32
 80a4dbc:	fa02 f101 	lsl.w	r1, r2, r1
 80a4dc0:	430b      	orrs	r3, r1
 80a4dc2:	40c2      	lsrs	r2, r0
 80a4dc4:	617b      	str	r3, [r7, #20]
 80a4dc6:	9201      	str	r2, [sp, #4]
 80a4dc8:	e000      	b.n	80a4dcc <__d2b+0x4e>
 80a4dca:	617b      	str	r3, [r7, #20]
 80a4dcc:	9b01      	ldr	r3, [sp, #4]
 80a4dce:	2b00      	cmp	r3, #0
 80a4dd0:	bf14      	ite	ne
 80a4dd2:	2102      	movne	r1, #2
 80a4dd4:	2101      	moveq	r1, #1
 80a4dd6:	61bb      	str	r3, [r7, #24]
 80a4dd8:	6139      	str	r1, [r7, #16]
 80a4dda:	e007      	b.n	80a4dec <__d2b+0x6e>
 80a4ddc:	a801      	add	r0, sp, #4
 80a4dde:	f7ff fd7d 	bl	80a48dc <__lo0bits>
 80a4de2:	9b01      	ldr	r3, [sp, #4]
 80a4de4:	2101      	movs	r1, #1
 80a4de6:	617b      	str	r3, [r7, #20]
 80a4de8:	6139      	str	r1, [r7, #16]
 80a4dea:	3020      	adds	r0, #32
 80a4dec:	b134      	cbz	r4, 80a4dfc <__d2b+0x7e>
 80a4dee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80a4df2:	4404      	add	r4, r0
 80a4df4:	6034      	str	r4, [r6, #0]
 80a4df6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a4dfa:	e009      	b.n	80a4e10 <__d2b+0x92>
 80a4dfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a4e00:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80a4e04:	6030      	str	r0, [r6, #0]
 80a4e06:	6918      	ldr	r0, [r3, #16]
 80a4e08:	f7ff fd48 	bl	80a489c <__hi0bits>
 80a4e0c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80a4e10:	6028      	str	r0, [r5, #0]
 80a4e12:	4638      	mov	r0, r7
 80a4e14:	b002      	add	sp, #8
 80a4e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a4e1a <__ratio>:
 80a4e1a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a4e1e:	4688      	mov	r8, r1
 80a4e20:	4669      	mov	r1, sp
 80a4e22:	4681      	mov	r9, r0
 80a4e24:	f7ff ff5e 	bl	80a4ce4 <__b2d>
 80a4e28:	460d      	mov	r5, r1
 80a4e2a:	4604      	mov	r4, r0
 80a4e2c:	a901      	add	r1, sp, #4
 80a4e2e:	4640      	mov	r0, r8
 80a4e30:	f7ff ff58 	bl	80a4ce4 <__b2d>
 80a4e34:	460f      	mov	r7, r1
 80a4e36:	4606      	mov	r6, r0
 80a4e38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a4e3c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a4e40:	4620      	mov	r0, r4
 80a4e42:	1a9a      	subs	r2, r3, r2
 80a4e44:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80a4e48:	1ac9      	subs	r1, r1, r3
 80a4e4a:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80a4e4e:	2b00      	cmp	r3, #0
 80a4e50:	bfcc      	ite	gt
 80a4e52:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80a4e56:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 80a4e5a:	4632      	mov	r2, r6
 80a4e5c:	463b      	mov	r3, r7
 80a4e5e:	4629      	mov	r1, r5
 80a4e60:	f7fe f878 	bl	80a2f54 <__aeabi_ddiv>
 80a4e64:	b003      	add	sp, #12
 80a4e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a4e6a <__copybits>:
 80a4e6a:	3901      	subs	r1, #1
 80a4e6c:	b510      	push	{r4, lr}
 80a4e6e:	1149      	asrs	r1, r1, #5
 80a4e70:	6914      	ldr	r4, [r2, #16]
 80a4e72:	3101      	adds	r1, #1
 80a4e74:	f102 0314 	add.w	r3, r2, #20
 80a4e78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a4e7c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a4e80:	42a3      	cmp	r3, r4
 80a4e82:	4602      	mov	r2, r0
 80a4e84:	d204      	bcs.n	80a4e90 <__copybits+0x26>
 80a4e86:	f853 2b04 	ldr.w	r2, [r3], #4
 80a4e8a:	f840 2b04 	str.w	r2, [r0], #4
 80a4e8e:	e7f7      	b.n	80a4e80 <__copybits+0x16>
 80a4e90:	2300      	movs	r3, #0
 80a4e92:	428a      	cmp	r2, r1
 80a4e94:	d202      	bcs.n	80a4e9c <__copybits+0x32>
 80a4e96:	f842 3b04 	str.w	r3, [r2], #4
 80a4e9a:	e7fa      	b.n	80a4e92 <__copybits+0x28>
 80a4e9c:	bd10      	pop	{r4, pc}

080a4e9e <__any_on>:
 80a4e9e:	f100 0214 	add.w	r2, r0, #20
 80a4ea2:	6900      	ldr	r0, [r0, #16]
 80a4ea4:	114b      	asrs	r3, r1, #5
 80a4ea6:	4298      	cmp	r0, r3
 80a4ea8:	b510      	push	{r4, lr}
 80a4eaa:	db0c      	blt.n	80a4ec6 <__any_on+0x28>
 80a4eac:	dd0c      	ble.n	80a4ec8 <__any_on+0x2a>
 80a4eae:	f011 011f 	ands.w	r1, r1, #31
 80a4eb2:	d009      	beq.n	80a4ec8 <__any_on+0x2a>
 80a4eb4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a4eb8:	fa24 f001 	lsr.w	r0, r4, r1
 80a4ebc:	fa00 f101 	lsl.w	r1, r0, r1
 80a4ec0:	428c      	cmp	r4, r1
 80a4ec2:	d10c      	bne.n	80a4ede <__any_on+0x40>
 80a4ec4:	e000      	b.n	80a4ec8 <__any_on+0x2a>
 80a4ec6:	4603      	mov	r3, r0
 80a4ec8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a4ecc:	4293      	cmp	r3, r2
 80a4ece:	d904      	bls.n	80a4eda <__any_on+0x3c>
 80a4ed0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a4ed4:	2900      	cmp	r1, #0
 80a4ed6:	d0f9      	beq.n	80a4ecc <__any_on+0x2e>
 80a4ed8:	e001      	b.n	80a4ede <__any_on+0x40>
 80a4eda:	2000      	movs	r0, #0
 80a4edc:	bd10      	pop	{r4, pc}
 80a4ede:	2001      	movs	r0, #1
 80a4ee0:	bd10      	pop	{r4, pc}

080a4ee2 <_calloc_r>:
 80a4ee2:	b538      	push	{r3, r4, r5, lr}
 80a4ee4:	fb02 f401 	mul.w	r4, r2, r1
 80a4ee8:	4621      	mov	r1, r4
 80a4eea:	f7fc fd55 	bl	80a1998 <_malloc_r>
 80a4eee:	4605      	mov	r5, r0
 80a4ef0:	b118      	cbz	r0, 80a4efa <_calloc_r+0x18>
 80a4ef2:	4622      	mov	r2, r4
 80a4ef4:	2100      	movs	r1, #0
 80a4ef6:	f7fe fa6c 	bl	80a33d2 <memset>
 80a4efa:	4628      	mov	r0, r5
 80a4efc:	bd38      	pop	{r3, r4, r5, pc}

080a4efe <link_code_end>:
	...

080a4f00 <dynalib_user>:
 80a4f00:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a4f10:	0000 0000 6f43 6c6f 4f00 6666 4800 6165     ....Cool.Off.Hea
 80a4f20:	0074 6e49 6176 696c 2064 6f6d 6564 203a     t.Invalid mode: 
 80a4f30:	7400 6d65 6570 6172 7574 6572 7300 7465     .temperature.set
 80a4f40:	6f4d 6564 7300 7465 6554 706d 3b00 0000     Mode.setTemp.;..

080a4f50 <CSWTCH.210>:
 80a4f50:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a4f60:	0050 0000                                   P...

080a4f64 <_ZTV7TwoWire>:
	...
 80a4f6c:	1a1b 080a 1a65 080a 1a3d 080a 1a1d 080a     ....e...=.......
 80a4f7c:	1a45 080a 1a4d 080a 1a55 080a 1a5d 080a     E...M...U...]...

080a4f8c <_ZTV9IPAddress>:
	...
 80a4f94:	1ab1 080a 1aa1 080a 1aa3 080a 6162 6475     ............baud
 80a4fa4:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a4fb4:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a4fc4:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a4fd4:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a4fe4:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a4ff4:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a5004:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a5014:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a5024:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a5034:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a5044:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a5054:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a5064:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a5074:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a5084 <_ZTVN5spark12NetworkClassE>:
	...
 80a508c:	1b79 080a 1b83 080a 1b8d 080a 1b97 080a     y...............
 80a509c:	1ba1 080a 1bad 080a 1bb9 080a 1bc5 080a     ................
 80a50ac:	1bcd 080a 1bd7 080a 1be1 080a 616e 006e     ............nan.
 80a50bc:	766f 0066 002e 6e69 0066 005a 2b25 3330     ovf...inf.Z.%+03
 80a50cc:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
 80a50dc:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
 80a50ec:	656d 0000                                   me..

080a50f0 <_ZTV11USARTSerial>:
	...
 80a50f8:	205d 080a 20ad 080a 20bb 080a 1c45 080a     ] ... ... ..E...
 80a5108:	2071 080a 2093 080a 207f 080a 20a7 080a     q ... ... ... ..
 80a5118:	205f 080a 2063 080a                         _ ..c ..

080a5120 <_ZTV9USBSerial>:
	...
 80a5128:	2165 080a 21b5 080a 21c3 080a 1c45 080a     e!...!...!..E...
 80a5138:	21a1 080a 2167 080a 217d 080a 21af 080a     .!..g!..}!...!..
 80a5148:	2193 080a 2161 080a                         .!..a!..

080a5150 <_ZTVN5spark9WiFiClassE>:
	...
 80a5158:	23a7 080a 239d 080a 2393 080a 2305 080a     .#...#...#...#..
 80a5168:	2387 080a 237b 080a 236f 080a 2367 080a     .#..{#..o#..g#..
 80a5178:	235d 080a 2353 080a 230f 080a               ]#..S#...#..

080a5184 <_ZSt7nothrow>:
 80a5184:	0000 0000                                   ....

080a5188 <__sf_fake_stdin>:
	...

080a51a8 <__sf_fake_stdout>:
	...

080a51c8 <__sf_fake_stderr>:
	...
 80a51e8:	0043 4f50 4953 0058                         C.POSIX.

080a51f0 <fpi.5342>:
 80a51f0:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80a5200:	0000 0000 6e69 7469 0079 0000               ....inity...

080a520c <fpinan.5378>:
 80a520c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 80a521c:	0000 0000                                   ....

080a5220 <tinytens>:
 80a5220:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80a5230:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80a5240:	6f43 64ac 0628 1168                         Co.d(.h.

080a5248 <__mprec_tens>:
 80a5248:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80a5258:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80a5268:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80a5278:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80a5288:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80a5298:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80a52a8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80a52b8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80a52c8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80a52d8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80a52e8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80a52f8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80a5308:	9db4 79d9 7843 44ea                         ...yCx.D

080a5310 <__mprec_bigtens>:
 80a5310:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80a5320:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80a5330:	bf3c 7f73 4fdd 7515                         <.s..O.u

080a5338 <p05.5385>:
 80a5338:	0005 0000 0019 0000 007d 0000               ........}...

080a5344 <link_const_variable_data_end>:
 80a5344:	080a02b9 	.word	0x080a02b9
 80a5348:	080a15f9 	.word	0x080a15f9
 80a534c:	080a1b69 	.word	0x080a1b69
 80a5350:	080a1c31 	.word	0x080a1c31
 80a5354:	080a1e95 	.word	0x080a1e95
 80a5358:	080a2015 	.word	0x080a2015
 80a535c:	080a2049 	.word	0x080a2049
 80a5360:	080a23b1 	.word	0x080a23b1
 80a5364:	080a268d 	.word	0x080a268d
 80a5368:	080a2701 	.word	0x080a2701
 80a536c:	080a27c5 	.word	0x080a27c5
 80a5370:	080a2849 	.word	0x080a2849
 80a5374:	080a28cd 	.word	0x080a28cd

080a5378 <link_constructors_end>:
	...
