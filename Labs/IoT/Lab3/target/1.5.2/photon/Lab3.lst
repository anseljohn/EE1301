
/Users/owner/Documents/School/EE1301/Labs/IoT/Lab3/target/1.5.2/photon/Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003610  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3630  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  080a3634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005b0  20000078  20000078  00030078  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a36a8  080a36a8  000236a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a36d0  080a36d0  000236d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a95bc  00000000  00000000  000236d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f014  00000000  00000000  000ccc90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013e6b  00000000  00000000  000dbca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ed8  00000000  00000000  000efb0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003300  00000000  00000000  000f19e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023ec8  00000000  00000000  000f4ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00022773  00000000  00000000  00118baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a9221  00000000  00000000  0013b322  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b754  00000000  00000000  001e4544  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 f921 	bl	80a3278 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 f926 	bl	80a328e <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a3634 	.word	0x080a3634
 80a0050:	20000074 	.word	0x20000074
 80a0054:	20000078 	.word	0x20000078
 80a0058:	20000628 	.word	0x20000628
 80a005c:	20000628 	.word	0x20000628

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 f9d5 	bl	80a2410 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a35f8 	.word	0x080a35f8
 80a0088:	080a362c 	.word	0x080a362c

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b848 	b.w	80a0120 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f875 	bl	80a0180 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 b97b 	b.w	80a2394 <_post_loop>

080a009e <_ZdlPv>:
 80a009e:	f001 bc33 	b.w	80a1908 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z7setMode6String>:
  led.show();

  delay(500);
}

int setMode(String modeStr) {
 80a00b4:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a00b6:	4915      	ldr	r1, [pc, #84]	; (80a010c <_Z7setMode6String+0x58>)
 80a00b8:	4605      	mov	r5, r0
 80a00ba:	f001 ff3f 	bl	80a1f3c <_ZNK6String6equalsEPKc>
 80a00be:	4c14      	ldr	r4, [pc, #80]	; (80a0110 <_Z7setMode6String+0x5c>)
  if (modeStr == "Cool") {
 80a00c0:	b118      	cbz	r0, 80a00ca <_Z7setMode6String+0x16>
    mode = COOLING;
 80a00c2:	2300      	movs	r3, #0
 80a00c4:	7023      	strb	r3, [r4, #0]
    Serial.print("Invalid mode: ");
    Serial.println(modeStr);
    mode = OFF;
    return -1;
  }
  return 1;
 80a00c6:	2001      	movs	r0, #1
 80a00c8:	bd38      	pop	{r3, r4, r5, pc}
 80a00ca:	4912      	ldr	r1, [pc, #72]	; (80a0114 <_Z7setMode6String+0x60>)
 80a00cc:	4628      	mov	r0, r5
 80a00ce:	f001 ff35 	bl	80a1f3c <_ZNK6String6equalsEPKc>
}

int setMode(String modeStr) {
  if (modeStr == "Cool") {
    mode = COOLING;
  } else if (modeStr == "Off") {
 80a00d2:	b110      	cbz	r0, 80a00da <_Z7setMode6String+0x26>
    mode = OFF;
 80a00d4:	2001      	movs	r0, #1
 80a00d6:	7020      	strb	r0, [r4, #0]
 80a00d8:	bd38      	pop	{r3, r4, r5, pc}
 80a00da:	490f      	ldr	r1, [pc, #60]	; (80a0118 <_Z7setMode6String+0x64>)
 80a00dc:	4628      	mov	r0, r5
 80a00de:	f001 ff2d 	bl	80a1f3c <_ZNK6String6equalsEPKc>
  } else if (modeStr == "Heat") {
 80a00e2:	b118      	cbz	r0, 80a00ec <_Z7setMode6String+0x38>
    mode = HEATING;
 80a00e4:	2302      	movs	r3, #2
 80a00e6:	7023      	strb	r3, [r4, #0]
    Serial.print("Invalid mode: ");
    Serial.println(modeStr);
    mode = OFF;
    return -1;
  }
  return 1;
 80a00e8:	2001      	movs	r0, #1
 80a00ea:	bd38      	pop	{r3, r4, r5, pc}
  } else if (modeStr == "Off") {
    mode = OFF;
  } else if (modeStr == "Heat") {
    mode = HEATING;
  } else {
    Serial.print("Invalid mode: ");
 80a00ec:	f002 f85e 	bl	80a21ac <_Z16_fetch_usbserialv>
 80a00f0:	490a      	ldr	r1, [pc, #40]	; (80a011c <_Z7setMode6String+0x68>)
 80a00f2:	f001 fd8d 	bl	80a1c10 <_ZN5Print5printEPKc>
    Serial.println(modeStr);
 80a00f6:	f002 f859 	bl	80a21ac <_Z16_fetch_usbserialv>
 80a00fa:	6829      	ldr	r1, [r5, #0]
 80a00fc:	f001 fd9b 	bl	80a1c36 <_ZN5Print7printlnEPKc>
    mode = OFF;
 80a0100:	2301      	movs	r3, #1
 80a0102:	7023      	strb	r3, [r4, #0]
 80a0104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return -1;
  }
  return 1;
 80a0108:	bd38      	pop	{r3, r4, r5, pc}
 80a010a:	bf00      	nop
 80a010c:	080a3328 	.word	0x080a3328
 80a0110:	20000000 	.word	0x20000000
 80a0114:	080a332d 	.word	0x080a332d
 80a0118:	080a3331 	.word	0x080a3331
 80a011c:	080a3336 	.word	0x080a3336

080a0120 <setup>:

int coolingColor = led.Color(0, 0, 100);
int heatingColor = led.Color(100, 0, 0);
int offColor = led.Color(100, 100, 100);

void setup() {
 80a0120:	b508      	push	{r3, lr}
  Serial.begin(9600);
 80a0122:	f002 f843 	bl	80a21ac <_Z16_fetch_usbserialv>
 80a0126:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a012a:	f002 f825 	bl	80a2178 <_ZN9USBSerial5beginEl>
  pinMode(TEMP_PIN, OUTPUT);
 80a012e:	4b0c      	ldr	r3, [pc, #48]	; (80a0160 <setup+0x40>)
 80a0130:	2101      	movs	r1, #1
 80a0132:	8818      	ldrh	r0, [r3, #0]
 80a0134:	f002 f9de 	bl	80a24f4 <pinMode>
  pinMode(A0, INPUT);
 80a0138:	2100      	movs	r1, #0
 80a013a:	200a      	movs	r0, #10
 80a013c:	f002 f9da 	bl	80a24f4 <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a0140:	2300      	movs	r3, #0
 80a0142:	2209      	movs	r2, #9
 80a0144:	4907      	ldr	r1, [pc, #28]	; (80a0164 <setup+0x44>)
 80a0146:	4808      	ldr	r0, [pc, #32]	; (80a0168 <setup+0x48>)
 80a0148:	f001 fb6e 	bl	80a1828 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a014c:	4a07      	ldr	r2, [pc, #28]	; (80a016c <setup+0x4c>)
 80a014e:	4908      	ldr	r1, [pc, #32]	; (80a0170 <setup+0x50>)
 80a0150:	4808      	ldr	r0, [pc, #32]	; (80a0174 <setup+0x54>)
 80a0152:	f001 fc0b 	bl	80a196c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

  Particle.variable("temperature", temp);
  Particle.function("setMode", setMode);

  led.begin();
}
 80a0156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(A0, INPUT);

  Particle.variable("temperature", temp);
  Particle.function("setMode", setMode);

  led.begin();
 80a015a:	4807      	ldr	r0, [pc, #28]	; (80a0178 <setup+0x58>)
 80a015c:	f000 b8d4 	b.w	80a0308 <_ZN17Adafruit_NeoPixel5beginEv>
 80a0160:	20000004 	.word	0x20000004
 80a0164:	20000098 	.word	0x20000098
 80a0168:	080a3345 	.word	0x080a3345
 80a016c:	080a3351 	.word	0x080a3351
 80a0170:	080a00b5 	.word	0x080a00b5
 80a0174:	080a1941 	.word	0x080a1941
 80a0178:	20000080 	.word	0x20000080
 80a017c:	00000000 	.word	0x00000000

080a0180 <loop>:
}

void loop() {
 80a0180:	b537      	push	{r0, r1, r2, r4, r5, lr}
  digitalWrite(TEMP_PIN, HIGH);
 80a0182:	4d29      	ldr	r5, [pc, #164]	; (80a0228 <loop+0xa8>)
 80a0184:	2101      	movs	r1, #1
 80a0186:	8828      	ldrh	r0, [r5, #0]
 80a0188:	f002 f9c5 	bl	80a2516 <digitalWrite>
  delay(10);
 80a018c:	200a      	movs	r0, #10
 80a018e:	f001 fbcb 	bl	80a1928 <delay>
  temp = (analogRead(A0) - 620) / 12.4;
 80a0192:	200a      	movs	r0, #10
 80a0194:	f002 f9d8 	bl	80a2548 <analogRead>
 80a0198:	f5a0 701b 	sub.w	r0, r0, #620	; 0x26c
 80a019c:	f002 fd00 	bl	80a2ba0 <__aeabi_i2d>
 80a01a0:	a31f      	add	r3, pc, #124	; (adr r3, 80a0220 <loop+0xa0>)
 80a01a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01a6:	f002 fe8b 	bl	80a2ec0 <__aeabi_ddiv>
 80a01aa:	4c20      	ldr	r4, [pc, #128]	; (80a022c <loop+0xac>)
 80a01ac:	e9c4 0100 	strd	r0, r1, [r4]
  digitalWrite(TEMP_PIN, LOW);
 80a01b0:	2100      	movs	r1, #0
 80a01b2:	8828      	ldrh	r0, [r5, #0]
 80a01b4:	f002 f9af 	bl	80a2516 <digitalWrite>
  Serial.print(temp);
 80a01b8:	f001 fff8 	bl	80a21ac <_Z16_fetch_usbserialv>
 80a01bc:	2302      	movs	r3, #2
 80a01be:	9300      	str	r3, [sp, #0]
 80a01c0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a01c4:	f001 fe1a 	bl	80a1dfc <_ZN5Print5printEdi>
  Serial.println(";");
 80a01c8:	f001 fff0 	bl	80a21ac <_Z16_fetch_usbserialv>
 80a01cc:	4918      	ldr	r1, [pc, #96]	; (80a0230 <loop+0xb0>)
 80a01ce:	f001 fd32 	bl	80a1c36 <_ZN5Print7printlnEPKc>

  switch (mode) {
 80a01d2:	4b18      	ldr	r3, [pc, #96]	; (80a0234 <loop+0xb4>)
 80a01d4:	781b      	ldrb	r3, [r3, #0]
 80a01d6:	2b01      	cmp	r3, #1
 80a01d8:	d010      	beq.n	80a01fc <loop+0x7c>
 80a01da:	d308      	bcc.n	80a01ee <loop+0x6e>
 80a01dc:	2b02      	cmp	r3, #2
 80a01de:	d113      	bne.n	80a0208 <loop+0x88>
      break;
    case OFF: 
      led.setPixelColor(0, offColor);
      break;
    case HEATING: 
      led.setPixelColor(0, heatingColor);
 80a01e0:	4b15      	ldr	r3, [pc, #84]	; (80a0238 <loop+0xb8>)
 80a01e2:	2100      	movs	r1, #0
 80a01e4:	681a      	ldr	r2, [r3, #0]
 80a01e6:	4815      	ldr	r0, [pc, #84]	; (80a023c <loop+0xbc>)
 80a01e8:	f001 f97e 	bl	80a14e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      break;
 80a01ec:	e00c      	b.n	80a0208 <loop+0x88>
  Serial.print(temp);
  Serial.println(";");

  switch (mode) {
    case COOLING: 
      led.setPixelColor(0, coolingColor);
 80a01ee:	4b14      	ldr	r3, [pc, #80]	; (80a0240 <loop+0xc0>)
 80a01f0:	2100      	movs	r1, #0
 80a01f2:	681a      	ldr	r2, [r3, #0]
 80a01f4:	4811      	ldr	r0, [pc, #68]	; (80a023c <loop+0xbc>)
 80a01f6:	f001 f977 	bl	80a14e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      break;
 80a01fa:	e005      	b.n	80a0208 <loop+0x88>
    case OFF: 
      led.setPixelColor(0, offColor);
 80a01fc:	4b11      	ldr	r3, [pc, #68]	; (80a0244 <loop+0xc4>)
 80a01fe:	2100      	movs	r1, #0
 80a0200:	681a      	ldr	r2, [r3, #0]
 80a0202:	480e      	ldr	r0, [pc, #56]	; (80a023c <loop+0xbc>)
 80a0204:	f001 f970 	bl	80a14e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      break;
  }



  led.show();
 80a0208:	480c      	ldr	r0, [pc, #48]	; (80a023c <loop+0xbc>)
 80a020a:	f000 f8b3 	bl	80a0374 <_ZN17Adafruit_NeoPixel4showEv>

  delay(500);
 80a020e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 80a0212:	b003      	add	sp, #12
 80a0214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}



  led.show();

  delay(500);
 80a0218:	f001 bb86 	b.w	80a1928 <delay>
 80a021c:	f3af 8000 	nop.w
 80a0220:	cccccccd 	.word	0xcccccccd
 80a0224:	4028cccc 	.word	0x4028cccc
 80a0228:	20000004 	.word	0x20000004
 80a022c:	20000098 	.word	0x20000098
 80a0230:	080a3359 	.word	0x080a3359
 80a0234:	20000000 	.word	0x20000000
 80a0238:	200000a0 	.word	0x200000a0
 80a023c:	20000080 	.word	0x20000080
 80a0240:	2000007c 	.word	0x2000007c
 80a0244:	20000094 	.word	0x20000094

080a0248 <_GLOBAL__sub_I_temp>:
    Serial.println(modeStr);
    mode = OFF;
    return -1;
  }
  return 1;
 80a0248:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a024a:	f001 f9cf 	bl	80a15ec <HAL_Pin_Map>

// Global vars
double temp = 0;
int TEMP_PIN = D7;
int LED_PIN = D4;
Adafruit_NeoPixel led = Adafruit_NeoPixel(1, LED_PIN, WS2811);
 80a024e:	4c11      	ldr	r4, [pc, #68]	; (80a0294 <_GLOBAL__sub_I_temp+0x4c>)
 80a0250:	4a11      	ldr	r2, [pc, #68]	; (80a0298 <_GLOBAL__sub_I_temp+0x50>)
 80a0252:	2300      	movs	r3, #0
 80a0254:	7812      	ldrb	r2, [r2, #0]
 80a0256:	2101      	movs	r1, #1
 80a0258:	4620      	mov	r0, r4
 80a025a:	f000 f87a 	bl	80a0352 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a025e:	4a0f      	ldr	r2, [pc, #60]	; (80a029c <_GLOBAL__sub_I_temp+0x54>)
 80a0260:	490f      	ldr	r1, [pc, #60]	; (80a02a0 <_GLOBAL__sub_I_temp+0x58>)
 80a0262:	4620      	mov	r0, r4
 80a0264:	f002 f9e0 	bl	80a2628 <__aeabi_atexit>
enum thermode {COOLING, OFF, HEATING};
thermode mode = OFF;

int coolingColor = led.Color(0, 0, 100);
 80a0268:	2100      	movs	r1, #0
 80a026a:	2264      	movs	r2, #100	; 0x64
 80a026c:	4608      	mov	r0, r1
 80a026e:	f001 f986 	bl	80a157e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0272:	4b0c      	ldr	r3, [pc, #48]	; (80a02a4 <_GLOBAL__sub_I_temp+0x5c>)
int heatingColor = led.Color(100, 0, 0);
 80a0274:	2200      	movs	r2, #0
int LED_PIN = D4;
Adafruit_NeoPixel led = Adafruit_NeoPixel(1, LED_PIN, WS2811);
enum thermode {COOLING, OFF, HEATING};
thermode mode = OFF;

int coolingColor = led.Color(0, 0, 100);
 80a0276:	6018      	str	r0, [r3, #0]
int heatingColor = led.Color(100, 0, 0);
 80a0278:	4611      	mov	r1, r2
 80a027a:	2064      	movs	r0, #100	; 0x64
 80a027c:	f001 f97f 	bl	80a157e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0280:	4b09      	ldr	r3, [pc, #36]	; (80a02a8 <_GLOBAL__sub_I_temp+0x60>)
int offColor = led.Color(100, 100, 100);
 80a0282:	2264      	movs	r2, #100	; 0x64
Adafruit_NeoPixel led = Adafruit_NeoPixel(1, LED_PIN, WS2811);
enum thermode {COOLING, OFF, HEATING};
thermode mode = OFF;

int coolingColor = led.Color(0, 0, 100);
int heatingColor = led.Color(100, 0, 0);
 80a0284:	6018      	str	r0, [r3, #0]
int offColor = led.Color(100, 100, 100);
 80a0286:	4611      	mov	r1, r2
 80a0288:	4610      	mov	r0, r2
 80a028a:	f001 f978 	bl	80a157e <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a028e:	4b07      	ldr	r3, [pc, #28]	; (80a02ac <_GLOBAL__sub_I_temp+0x64>)
 80a0290:	6018      	str	r0, [r3, #0]
 80a0292:	bd10      	pop	{r4, pc}
 80a0294:	20000080 	.word	0x20000080
 80a0298:	20000008 	.word	0x20000008
 80a029c:	20000078 	.word	0x20000078
 80a02a0:	080a02b5 	.word	0x080a02b5
 80a02a4:	2000007c 	.word	0x2000007c
 80a02a8:	200000a0 	.word	0x200000a0
 80a02ac:	20000094 	.word	0x20000094

080a02b0 <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a02b0:	f001 b98c 	b.w	80a15cc <HAL_Timer_Get_Micro_Seconds>

080a02b4 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a02b4:	b510      	push	{r4, lr}
 80a02b6:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a02b8:	68c0      	ldr	r0, [r0, #12]
 80a02ba:	b108      	cbz	r0, 80a02c0 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a02bc:	f001 fb24 	bl	80a1908 <free>
  if (begun) pinMode(pin, INPUT);
 80a02c0:	7823      	ldrb	r3, [r4, #0]
 80a02c2:	b11b      	cbz	r3, 80a02cc <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a02c4:	2100      	movs	r1, #0
 80a02c6:	79e0      	ldrb	r0, [r4, #7]
 80a02c8:	f002 f914 	bl	80a24f4 <pinMode>
}
 80a02cc:	4620      	mov	r0, r4
 80a02ce:	bd10      	pop	{r4, pc}

080a02d0 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a02d0:	b538      	push	{r3, r4, r5, lr}
 80a02d2:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a02d4:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a02d6:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a02d8:	b108      	cbz	r0, 80a02de <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a02da:	f001 fb15 	bl	80a1908 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a02de:	79a3      	ldrb	r3, [r4, #6]
 80a02e0:	2b06      	cmp	r3, #6
 80a02e2:	bf0c      	ite	eq
 80a02e4:	2004      	moveq	r0, #4
 80a02e6:	2003      	movne	r0, #3
 80a02e8:	4368      	muls	r0, r5
 80a02ea:	b280      	uxth	r0, r0
 80a02ec:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a02ee:	f001 fb03 	bl	80a18f8 <malloc>
 80a02f2:	60e0      	str	r0, [r4, #12]
 80a02f4:	b128      	cbz	r0, 80a0302 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a02f6:	88a2      	ldrh	r2, [r4, #4]
 80a02f8:	2100      	movs	r1, #0
 80a02fa:	f002 ffc8 	bl	80a328e <memset>
    numLEDs = n;
 80a02fe:	8065      	strh	r5, [r4, #2]
 80a0300:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a0302:	80a0      	strh	r0, [r4, #4]
 80a0304:	8060      	strh	r0, [r4, #2]
 80a0306:	bd38      	pop	{r3, r4, r5, pc}

080a0308 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a0308:	b510      	push	{r4, lr}
 80a030a:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a030c:	2101      	movs	r1, #1
 80a030e:	79c0      	ldrb	r0, [r0, #7]
 80a0310:	f002 f8f0 	bl	80a24f4 <pinMode>
  digitalWrite(pin, LOW);
 80a0314:	2100      	movs	r1, #0
 80a0316:	79e0      	ldrb	r0, [r4, #7]
 80a0318:	f002 f8fd 	bl	80a2516 <digitalWrite>
  begun = true;
 80a031c:	2301      	movs	r3, #1
 80a031e:	7023      	strb	r3, [r4, #0]
 80a0320:	bd10      	pop	{r4, pc}

080a0322 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0322:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0324:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0326:	4605      	mov	r5, r0
 80a0328:	460c      	mov	r4, r1
    if (begun) {
 80a032a:	b11b      	cbz	r3, 80a0334 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a032c:	2100      	movs	r1, #0
 80a032e:	79c0      	ldrb	r0, [r0, #7]
 80a0330:	f002 f8e0 	bl	80a24f4 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0334:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a0336:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0338:	b153      	cbz	r3, 80a0350 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a033a:	b2a4      	uxth	r4, r4
 80a033c:	4620      	mov	r0, r4
 80a033e:	2101      	movs	r1, #1
 80a0340:	f002 f8d8 	bl	80a24f4 <pinMode>
        digitalWrite(p, LOW);
 80a0344:	4620      	mov	r0, r4
    }
}
 80a0346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a034a:	2100      	movs	r1, #0
 80a034c:	f002 b8e3 	b.w	80a2516 <digitalWrite>
 80a0350:	bd38      	pop	{r3, r4, r5, pc}

080a0352 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0352:	b570      	push	{r4, r5, r6, lr}
 80a0354:	4604      	mov	r4, r0
 80a0356:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0358:	2500      	movs	r5, #0
 80a035a:	7183      	strb	r3, [r0, #6]
 80a035c:	7005      	strb	r5, [r0, #0]
 80a035e:	7205      	strb	r5, [r0, #8]
 80a0360:	60c5      	str	r5, [r0, #12]
 80a0362:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a0364:	f7ff ffb4 	bl	80a02d0 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0368:	4620      	mov	r0, r4
 80a036a:	4631      	mov	r1, r6
 80a036c:	f7ff ffd9 	bl	80a0322 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0370:	4620      	mov	r0, r4
 80a0372:	bd70      	pop	{r4, r5, r6, pc}

080a0374 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0374:	68c3      	ldr	r3, [r0, #12]
 80a0376:	2b00      	cmp	r3, #0
 80a0378:	f000 858e 	beq.w	80a0e98 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a037c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0380:	4604      	mov	r4, r0
 80a0382:	7983      	ldrb	r3, [r0, #6]
 80a0384:	b086      	sub	sp, #24
 80a0386:	3b02      	subs	r3, #2
 80a0388:	b2db      	uxtb	r3, r3
 80a038a:	2b04      	cmp	r3, #4
 80a038c:	bf96      	itet	ls
 80a038e:	4a29      	ldrls	r2, [pc, #164]	; (80a0434 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0390:	2532      	movhi	r5, #50	; 0x32
 80a0392:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0396:	f7ff ff8b 	bl	80a02b0 <micros>
 80a039a:	6923      	ldr	r3, [r4, #16]
 80a039c:	1ac0      	subs	r0, r0, r3
 80a039e:	42a8      	cmp	r0, r5
 80a03a0:	d3f9      	bcc.n	80a0396 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a03a2:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a03a4:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a03a6:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a03a8:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a03aa:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a03ae:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a03b2:	f000 8272 	beq.w	80a089a <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a03b6:	2907      	cmp	r1, #7
 80a03b8:	f000 826f 	beq.w	80a089a <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a03bc:	2906      	cmp	r1, #6
 80a03be:	f000 8432 	beq.w	80a0c26 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a03c2:	2905      	cmp	r1, #5
 80a03c4:	f000 83ab 	beq.w	80a0b1e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a03c8:	2908      	cmp	r1, #8
 80a03ca:	f000 83a8 	beq.w	80a0b1e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a03ce:	2900      	cmp	r1, #0
 80a03d0:	f040 8563 	bne.w	80a0e9a <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a03d4:	4a18      	ldr	r2, [pc, #96]	; (80a0438 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a03d6:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a03da:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a03de:	b29b      	uxth	r3, r3
 80a03e0:	2b00      	cmp	r3, #0
 80a03e2:	f000 8395 	beq.w	80a0b10 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a03e6:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a03e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a03ec:	f10e 0503 	add.w	r5, lr, #3
 80a03f0:	3b03      	subs	r3, #3
 80a03f2:	b29b      	uxth	r3, r3
 80a03f4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a03f8:	f89e 3000 	ldrb.w	r3, [lr]
 80a03fc:	b2db      	uxtb	r3, r3
 80a03fe:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0402:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0406:	b2db      	uxtb	r3, r3
 80a0408:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a040c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0410:	b2db      	uxtb	r3, r3
 80a0412:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0416:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a041a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a041e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0422:	021b      	lsls	r3, r3, #8
 80a0424:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0428:	4303      	orrs	r3, r0
 80a042a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a042c:	f88d 1005 	strb.w	r1, [sp, #5]
 80a0430:	e11b      	b.n	80a066a <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a0432:	bf00      	nop
 80a0434:	080a335c 	.word	0x080a335c
 80a0438:	200000a4 	.word	0x200000a4
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a043c:	4600      	mov	r0, r0
 80a043e:	bf00      	nop
 80a0440:	bf00      	nop
 80a0442:	bf00      	nop
 80a0444:	bf00      	nop
 80a0446:	bf00      	nop
 80a0448:	bf00      	nop
 80a044a:	bf00      	nop
 80a044c:	bf00      	nop
 80a044e:	bf00      	nop
 80a0450:	bf00      	nop
 80a0452:	bf00      	nop
 80a0454:	bf00      	nop
 80a0456:	bf00      	nop
 80a0458:	bf00      	nop
 80a045a:	bf00      	nop
 80a045c:	bf00      	nop
 80a045e:	bf00      	nop
 80a0460:	bf00      	nop
 80a0462:	bf00      	nop
 80a0464:	bf00      	nop
 80a0466:	bf00      	nop
 80a0468:	bf00      	nop
 80a046a:	bf00      	nop
 80a046c:	bf00      	nop
 80a046e:	bf00      	nop
 80a0470:	bf00      	nop
 80a0472:	bf00      	nop
 80a0474:	bf00      	nop
 80a0476:	bf00      	nop
 80a0478:	bf00      	nop
 80a047a:	bf00      	nop
 80a047c:	bf00      	nop
 80a047e:	bf00      	nop
 80a0480:	bf00      	nop
 80a0482:	bf00      	nop
 80a0484:	bf00      	nop
 80a0486:	bf00      	nop
 80a0488:	bf00      	nop
 80a048a:	bf00      	nop
 80a048c:	bf00      	nop
 80a048e:	bf00      	nop
 80a0490:	bf00      	nop
 80a0492:	bf00      	nop
 80a0494:	bf00      	nop
 80a0496:	bf00      	nop
 80a0498:	bf00      	nop
 80a049a:	bf00      	nop
 80a049c:	bf00      	nop
 80a049e:	bf00      	nop
 80a04a0:	bf00      	nop
 80a04a2:	bf00      	nop
 80a04a4:	bf00      	nop
 80a04a6:	bf00      	nop
 80a04a8:	bf00      	nop
 80a04aa:	bf00      	nop
 80a04ac:	bf00      	nop
 80a04ae:	bf00      	nop
 80a04b0:	bf00      	nop
 80a04b2:	bf00      	nop
 80a04b4:	bf00      	nop
 80a04b6:	bf00      	nop
 80a04b8:	bf00      	nop
 80a04ba:	bf00      	nop
 80a04bc:	bf00      	nop
 80a04be:	bf00      	nop
 80a04c0:	bf00      	nop
 80a04c2:	bf00      	nop
 80a04c4:	bf00      	nop
 80a04c6:	bf00      	nop
 80a04c8:	bf00      	nop
 80a04ca:	bf00      	nop
 80a04cc:	bf00      	nop
 80a04ce:	bf00      	nop
 80a04d0:	bf00      	nop
 80a04d2:	bf00      	nop
 80a04d4:	bf00      	nop
 80a04d6:	bf00      	nop
 80a04d8:	bf00      	nop
 80a04da:	bf00      	nop
 80a04dc:	bf00      	nop
 80a04de:	bf00      	nop
 80a04e0:	bf00      	nop
 80a04e2:	bf00      	nop
 80a04e4:	bf00      	nop
 80a04e6:	bf00      	nop
 80a04e8:	bf00      	nop
 80a04ea:	bf00      	nop
 80a04ec:	bf00      	nop
 80a04ee:	bf00      	nop
 80a04f0:	bf00      	nop
 80a04f2:	bf00      	nop
 80a04f4:	bf00      	nop
 80a04f6:	bf00      	nop
 80a04f8:	bf00      	nop
 80a04fa:	bf00      	nop
 80a04fc:	bf00      	nop
 80a04fe:	bf00      	nop
 80a0500:	bf00      	nop
 80a0502:	bf00      	nop
 80a0504:	bf00      	nop
 80a0506:	bf00      	nop
 80a0508:	bf00      	nop
 80a050a:	bf00      	nop
 80a050c:	bf00      	nop
 80a050e:	bf00      	nop
 80a0510:	bf00      	nop
 80a0512:	bf00      	nop
 80a0514:	bf00      	nop
 80a0516:	bf00      	nop
 80a0518:	bf00      	nop
 80a051a:	bf00      	nop
 80a051c:	bf00      	nop
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
 80a0528:	bf00      	nop
 80a052a:	bf00      	nop
 80a052c:	bf00      	nop
 80a052e:	bf00      	nop
 80a0530:	bf00      	nop
 80a0532:	bf00      	nop
 80a0534:	bf00      	nop
 80a0536:	bf00      	nop
 80a0538:	bf00      	nop
 80a053a:	bf00      	nop
 80a053c:	bf00      	nop
 80a053e:	bf00      	nop
 80a0540:	bf00      	nop
 80a0542:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0544:	79e3      	ldrb	r3, [r4, #7]
 80a0546:	6810      	ldr	r0, [r2, #0]
 80a0548:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a054c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0550:	88bf      	ldrh	r7, [r7, #4]
 80a0552:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0556:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0558:	4600      	mov	r0, r0
 80a055a:	bf00      	nop
 80a055c:	bf00      	nop
 80a055e:	bf00      	nop
 80a0560:	bf00      	nop
 80a0562:	bf00      	nop
 80a0564:	bf00      	nop
 80a0566:	bf00      	nop
 80a0568:	bf00      	nop
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
 80a056e:	bf00      	nop
 80a0570:	bf00      	nop
 80a0572:	bf00      	nop
 80a0574:	bf00      	nop
 80a0576:	bf00      	nop
 80a0578:	bf00      	nop
 80a057a:	bf00      	nop
 80a057c:	bf00      	nop
 80a057e:	bf00      	nop
 80a0580:	bf00      	nop
 80a0582:	bf00      	nop
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
 80a058a:	bf00      	nop
 80a058c:	bf00      	nop
 80a058e:	bf00      	nop
 80a0590:	bf00      	nop
 80a0592:	bf00      	nop
 80a0594:	bf00      	nop
 80a0596:	bf00      	nop
 80a0598:	bf00      	nop
 80a059a:	bf00      	nop
 80a059c:	bf00      	nop
 80a059e:	bf00      	nop
 80a05a0:	bf00      	nop
 80a05a2:	bf00      	nop
 80a05a4:	bf00      	nop
 80a05a6:	bf00      	nop
 80a05a8:	bf00      	nop
 80a05aa:	bf00      	nop
 80a05ac:	bf00      	nop
 80a05ae:	bf00      	nop
 80a05b0:	bf00      	nop
 80a05b2:	bf00      	nop
 80a05b4:	bf00      	nop
 80a05b6:	bf00      	nop
 80a05b8:	bf00      	nop
 80a05ba:	bf00      	nop
 80a05bc:	bf00      	nop
 80a05be:	bf00      	nop
 80a05c0:	bf00      	nop
 80a05c2:	bf00      	nop
 80a05c4:	bf00      	nop
 80a05c6:	bf00      	nop
 80a05c8:	bf00      	nop
 80a05ca:	bf00      	nop
 80a05cc:	bf00      	nop
 80a05ce:	bf00      	nop
 80a05d0:	bf00      	nop
 80a05d2:	bf00      	nop
 80a05d4:	bf00      	nop
 80a05d6:	bf00      	nop
 80a05d8:	bf00      	nop
 80a05da:	bf00      	nop
 80a05dc:	bf00      	nop
 80a05de:	bf00      	nop
 80a05e0:	bf00      	nop
 80a05e2:	bf00      	nop
 80a05e4:	bf00      	nop
 80a05e6:	bf00      	nop
 80a05e8:	bf00      	nop
 80a05ea:	bf00      	nop
 80a05ec:	bf00      	nop
 80a05ee:	bf00      	nop
 80a05f0:	bf00      	nop
 80a05f2:	bf00      	nop
 80a05f4:	bf00      	nop
 80a05f6:	bf00      	nop
 80a05f8:	bf00      	nop
 80a05fa:	bf00      	nop
 80a05fc:	bf00      	nop
 80a05fe:	bf00      	nop
 80a0600:	bf00      	nop
 80a0602:	bf00      	nop
 80a0604:	bf00      	nop
 80a0606:	bf00      	nop
 80a0608:	bf00      	nop
 80a060a:	bf00      	nop
 80a060c:	bf00      	nop
 80a060e:	bf00      	nop
 80a0610:	bf00      	nop
 80a0612:	bf00      	nop
 80a0614:	bf00      	nop
 80a0616:	bf00      	nop
 80a0618:	bf00      	nop
 80a061a:	bf00      	nop
 80a061c:	bf00      	nop
 80a061e:	bf00      	nop
 80a0620:	bf00      	nop
 80a0622:	bf00      	nop
 80a0624:	bf00      	nop
 80a0626:	bf00      	nop
 80a0628:	bf00      	nop
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0652:	9b04      	ldr	r3, [sp, #16]
 80a0654:	085b      	lsrs	r3, r3, #1
 80a0656:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0658:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a065c:	3301      	adds	r3, #1
 80a065e:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0660:	2b17      	cmp	r3, #23
 80a0662:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0666:	f200 82db 	bhi.w	80a0c20 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a066a:	79e3      	ldrb	r3, [r4, #7]
 80a066c:	6810      	ldr	r0, [r2, #0]
 80a066e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0672:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0676:	88bf      	ldrh	r7, [r7, #4]
 80a0678:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a067c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a067e:	9803      	ldr	r0, [sp, #12]
 80a0680:	9b04      	ldr	r3, [sp, #16]
 80a0682:	4218      	tst	r0, r3
 80a0684:	f47f aeda 	bne.w	80a043c <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0688:	4600      	mov	r0, r0
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a06da:	79e3      	ldrb	r3, [r4, #7]
 80a06dc:	6810      	ldr	r0, [r2, #0]
 80a06de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a06e2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a06e6:	88bf      	ldrh	r7, [r7, #4]
 80a06e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a06ec:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a06ee:	4600      	mov	r0, r0
 80a06f0:	bf00      	nop
 80a06f2:	bf00      	nop
 80a06f4:	bf00      	nop
 80a06f6:	bf00      	nop
 80a06f8:	bf00      	nop
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	bf00      	nop
 80a072e:	bf00      	nop
 80a0730:	bf00      	nop
 80a0732:	bf00      	nop
 80a0734:	bf00      	nop
 80a0736:	bf00      	nop
 80a0738:	bf00      	nop
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
 80a074a:	bf00      	nop
 80a074c:	bf00      	nop
 80a074e:	bf00      	nop
 80a0750:	bf00      	nop
 80a0752:	bf00      	nop
 80a0754:	bf00      	nop
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
 80a0774:	bf00      	nop
 80a0776:	bf00      	nop
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
 80a0870:	bf00      	nop
 80a0872:	bf00      	nop
 80a0874:	bf00      	nop
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	bf00      	nop
 80a087e:	bf00      	nop
 80a0880:	bf00      	nop
 80a0882:	bf00      	nop
 80a0884:	bf00      	nop
 80a0886:	bf00      	nop
 80a0888:	bf00      	nop
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
 80a0896:	bf00      	nop
 80a0898:	e6db      	b.n	80a0652 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a089a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a089e:	4a17      	ldr	r2, [pc, #92]	; (80a08fc <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a08a0:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a08a2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a08a6:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a08a8:	2b00      	cmp	r3, #0
 80a08aa:	f000 8131 	beq.w	80a0b10 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a08ae:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a08b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a08b4:	f10e 0103 	add.w	r1, lr, #3
 80a08b8:	3b03      	subs	r3, #3
 80a08ba:	b29b      	uxth	r3, r3
 80a08bc:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a08c0:	f89e 3000 	ldrb.w	r3, [lr]
 80a08c4:	b2db      	uxtb	r3, r3
 80a08c6:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a08ca:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a08ce:	b2db      	uxtb	r3, r3
 80a08d0:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a08d4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a08d8:	b2db      	uxtb	r3, r3
 80a08da:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a08de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a08e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a08e6:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a08ea:	0200      	lsls	r0, r0, #8
 80a08ec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a08f0:	433b      	orrs	r3, r7
 80a08f2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a08f4:	f88d 6005 	strb.w	r6, [sp, #5]
 80a08f8:	e080      	b.n	80a09fc <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a08fa:	bf00      	nop
 80a08fc:	200000a4 	.word	0x200000a4
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0900:	4600      	mov	r0, r0
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
 80a0914:	bf00      	nop
 80a0916:	bf00      	nop
 80a0918:	bf00      	nop
 80a091a:	bf00      	nop
 80a091c:	bf00      	nop
 80a091e:	bf00      	nop
 80a0920:	bf00      	nop
 80a0922:	bf00      	nop
 80a0924:	bf00      	nop
 80a0926:	bf00      	nop
 80a0928:	bf00      	nop
 80a092a:	bf00      	nop
 80a092c:	bf00      	nop
 80a092e:	bf00      	nop
 80a0930:	bf00      	nop
 80a0932:	bf00      	nop
 80a0934:	bf00      	nop
 80a0936:	bf00      	nop
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
 80a0942:	bf00      	nop
 80a0944:	bf00      	nop
 80a0946:	bf00      	nop
 80a0948:	bf00      	nop
 80a094a:	bf00      	nop
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
 80a0956:	bf00      	nop
 80a0958:	bf00      	nop
 80a095a:	bf00      	nop
 80a095c:	bf00      	nop
 80a095e:	bf00      	nop
 80a0960:	bf00      	nop
 80a0962:	bf00      	nop
 80a0964:	bf00      	nop
 80a0966:	bf00      	nop
 80a0968:	bf00      	nop
 80a096a:	bf00      	nop
 80a096c:	bf00      	nop
 80a096e:	bf00      	nop
 80a0970:	bf00      	nop
 80a0972:	bf00      	nop
 80a0974:	bf00      	nop
 80a0976:	bf00      	nop
 80a0978:	bf00      	nop
 80a097a:	bf00      	nop
 80a097c:	bf00      	nop
 80a097e:	bf00      	nop
 80a0980:	bf00      	nop
 80a0982:	bf00      	nop
 80a0984:	bf00      	nop
 80a0986:	bf00      	nop
 80a0988:	bf00      	nop
 80a098a:	bf00      	nop
 80a098c:	bf00      	nop
 80a098e:	bf00      	nop
 80a0990:	bf00      	nop
 80a0992:	bf00      	nop
 80a0994:	bf00      	nop
 80a0996:	bf00      	nop
 80a0998:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a099a:	79e3      	ldrb	r3, [r4, #7]
 80a099c:	6810      	ldr	r0, [r2, #0]
 80a099e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a09a2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a09a6:	88bf      	ldrh	r7, [r7, #4]
 80a09a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a09ac:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a09ae:	4600      	mov	r0, r0
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a09e4:	9b04      	ldr	r3, [sp, #16]
 80a09e6:	085b      	lsrs	r3, r3, #1
 80a09e8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a09ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a09ee:	3301      	adds	r3, #1
 80a09f0:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a09f2:	2b17      	cmp	r3, #23
 80a09f4:	f88d 3005 	strb.w	r3, [sp, #5]
 80a09f8:	f200 8083 	bhi.w	80a0b02 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a09fc:	79e3      	ldrb	r3, [r4, #7]
 80a09fe:	6810      	ldr	r0, [r2, #0]
 80a0a00:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a04:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a08:	88bf      	ldrh	r7, [r7, #4]
 80a0a0a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a0e:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0a10:	9803      	ldr	r0, [sp, #12]
 80a0a12:	9b04      	ldr	r3, [sp, #16]
 80a0a14:	4218      	tst	r0, r3
 80a0a16:	f47f af73 	bne.w	80a0900 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a1a:	4600      	mov	r0, r0
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0a42:	79e3      	ldrb	r3, [r4, #7]
 80a0a44:	6810      	ldr	r0, [r2, #0]
 80a0a46:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a4a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a4e:	88bf      	ldrh	r7, [r7, #4]
 80a0a50:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a54:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a56:	4600      	mov	r0, r0
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	bf00      	nop
 80a0a7a:	bf00      	nop
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
 80a0ab2:	bf00      	nop
 80a0ab4:	bf00      	nop
 80a0ab6:	bf00      	nop
 80a0ab8:	bf00      	nop
 80a0aba:	bf00      	nop
 80a0abc:	bf00      	nop
 80a0abe:	bf00      	nop
 80a0ac0:	bf00      	nop
 80a0ac2:	bf00      	nop
 80a0ac4:	bf00      	nop
 80a0ac6:	bf00      	nop
 80a0ac8:	bf00      	nop
 80a0aca:	bf00      	nop
 80a0acc:	bf00      	nop
 80a0ace:	bf00      	nop
 80a0ad0:	bf00      	nop
 80a0ad2:	bf00      	nop
 80a0ad4:	bf00      	nop
 80a0ad6:	bf00      	nop
 80a0ad8:	bf00      	nop
 80a0ada:	bf00      	nop
 80a0adc:	bf00      	nop
 80a0ade:	bf00      	nop
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	e770      	b.n	80a09e4 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b02:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0b06:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b08:	b29b      	uxth	r3, r3
 80a0b0a:	2b00      	cmp	r3, #0
 80a0b0c:	f47f aecf 	bne.w	80a08ae <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0b10:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0b12:	f7ff fbcd 	bl	80a02b0 <micros>
 80a0b16:	6120      	str	r0, [r4, #16]
}
 80a0b18:	b006      	add	sp, #24
 80a0b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b1e:	4b5e      	ldr	r3, [pc, #376]	; (80a0c98 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0b20:	4a5e      	ldr	r2, [pc, #376]	; (80a0c9c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0b22:	4618      	mov	r0, r3
 80a0b24:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0b26:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0b2a:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b2c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0b30:	b292      	uxth	r2, r2
 80a0b32:	2a00      	cmp	r2, #0
 80a0b34:	d0ec      	beq.n	80a0b10 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0b36:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0b3a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0b3e:	f10e 0503 	add.w	r5, lr, #3
 80a0b42:	3a03      	subs	r2, #3
 80a0b44:	b292      	uxth	r2, r2
 80a0b46:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0b4a:	f89e 2000 	ldrb.w	r2, [lr]
 80a0b4e:	b2d2      	uxtb	r2, r2
 80a0b50:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0b54:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a0b58:	b2d2      	uxtb	r2, r2
 80a0b5a:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0b5e:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a0b62:	b2d2      	uxtb	r2, r2
 80a0b64:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0b68:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0b6c:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0b70:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a0b74:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a0b78:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a0b7c:	ea42 020c 	orr.w	r2, r2, ip
 80a0b80:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0b82:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a0b86:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b88:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0b8a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0b8e:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0b92:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0b96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b9a:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0b9c:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0ba0:	9e03      	ldr	r6, [sp, #12]
 80a0ba2:	9a04      	ldr	r2, [sp, #16]
 80a0ba4:	4216      	tst	r6, r2
 80a0ba6:	d023      	beq.n	80a0bf0 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0ba8:	685a      	ldr	r2, [r3, #4]
 80a0baa:	9e05      	ldr	r6, [sp, #20]
 80a0bac:	1b92      	subs	r2, r2, r6
 80a0bae:	2a4f      	cmp	r2, #79	; 0x4f
 80a0bb0:	d9fa      	bls.n	80a0ba8 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a0bb2:	79e2      	ldrb	r2, [r4, #7]
 80a0bb4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0bb8:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0bbc:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0bc0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0bc4:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0bc8:	6842      	ldr	r2, [r0, #4]
 80a0bca:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0bcc:	685a      	ldr	r2, [r3, #4]
 80a0bce:	9e05      	ldr	r6, [sp, #20]
 80a0bd0:	1b92      	subs	r2, r2, r6
 80a0bd2:	2a07      	cmp	r2, #7
 80a0bd4:	d9fa      	bls.n	80a0bcc <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a0bd6:	9a04      	ldr	r2, [sp, #16]
 80a0bd8:	0852      	lsrs	r2, r2, #1
 80a0bda:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0bdc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0be0:	3201      	adds	r2, #1
 80a0be2:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0be4:	2a17      	cmp	r2, #23
 80a0be6:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0bea:	d9cc      	bls.n	80a0b86 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0bec:	46ae      	mov	lr, r5
 80a0bee:	e79d      	b.n	80a0b2c <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0bf0:	685a      	ldr	r2, [r3, #4]
 80a0bf2:	9e05      	ldr	r6, [sp, #20]
 80a0bf4:	1b92      	subs	r2, r2, r6
 80a0bf6:	2a18      	cmp	r2, #24
 80a0bf8:	d9fa      	bls.n	80a0bf0 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a0bfa:	79e2      	ldrb	r2, [r4, #7]
 80a0bfc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c00:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c04:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0c0c:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0c10:	6842      	ldr	r2, [r0, #4]
 80a0c12:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0c14:	685a      	ldr	r2, [r3, #4]
 80a0c16:	9e05      	ldr	r6, [sp, #20]
 80a0c18:	1b92      	subs	r2, r2, r6
 80a0c1a:	2a45      	cmp	r2, #69	; 0x45
 80a0c1c:	d9fa      	bls.n	80a0c14 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a0c1e:	e7da      	b.n	80a0bd6 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0c20:	46ae      	mov	lr, r5
 80a0c22:	f7ff bbda 	b.w	80a03da <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a0c26:	4a1d      	ldr	r2, [pc, #116]	; (80a0c9c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a0c28:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a0c2c:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0c2e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0c32:	b29b      	uxth	r3, r3
 80a0c34:	2b00      	cmp	r3, #0
 80a0c36:	f43f af6b 	beq.w	80a0b10 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a0c3a:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0c3c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0c40:	f10e 0104 	add.w	r1, lr, #4
 80a0c44:	3b04      	subs	r3, #4
 80a0c46:	b29b      	uxth	r3, r3
 80a0c48:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0c4c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0c50:	b2db      	uxtb	r3, r3
 80a0c52:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0c56:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0c5a:	b2db      	uxtb	r3, r3
 80a0c5c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0c60:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0c64:	b2db      	uxtb	r3, r3
 80a0c66:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0c6a:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a0c6e:	b2db      	uxtb	r3, r3
 80a0c70:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0c74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0c78:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0c7c:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a0c80:	043f      	lsls	r7, r7, #16
 80a0c82:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a0c86:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a0c8a:	4303      	orrs	r3, r0
 80a0c8c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a0c90:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0c92:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0c96:	e07e      	b.n	80a0d96 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a0c98:	e0001000 	.word	0xe0001000
 80a0c9c:	200000a4 	.word	0x200000a4
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ca0:	4600      	mov	r0, r0
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a0d0e:	79e3      	ldrb	r3, [r4, #7]
 80a0d10:	6810      	ldr	r0, [r2, #0]
 80a0d12:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d16:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d1a:	88bf      	ldrh	r7, [r7, #4]
 80a0d1c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d20:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d22:	4600      	mov	r0, r0
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0d80:	9b04      	ldr	r3, [sp, #16]
 80a0d82:	085b      	lsrs	r3, r3, #1
 80a0d84:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0d86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0d8a:	3301      	adds	r3, #1
 80a0d8c:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a0d8e:	2b1f      	cmp	r3, #31
 80a0d90:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0d94:	d87e      	bhi.n	80a0e94 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a0d96:	79e3      	ldrb	r3, [r4, #7]
 80a0d98:	6810      	ldr	r0, [r2, #0]
 80a0d9a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d9e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0da2:	88bf      	ldrh	r7, [r7, #4]
 80a0da4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0da8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0daa:	9803      	ldr	r0, [sp, #12]
 80a0dac:	9b04      	ldr	r3, [sp, #16]
 80a0dae:	4218      	tst	r0, r3
 80a0db0:	f47f af76 	bne.w	80a0ca0 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0db4:	4600      	mov	r0, r0
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a0ddc:	79e3      	ldrb	r3, [r4, #7]
 80a0dde:	6810      	ldr	r0, [r2, #0]
 80a0de0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0de4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0de8:	88bf      	ldrh	r7, [r7, #4]
 80a0dea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0dee:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0df0:	4600      	mov	r0, r0
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
 80a0e58:	bf00      	nop
 80a0e5a:	bf00      	nop
 80a0e5c:	bf00      	nop
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
 80a0e68:	bf00      	nop
 80a0e6a:	bf00      	nop
 80a0e6c:	bf00      	nop
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	e775      	b.n	80a0d80 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a0e94:	468e      	mov	lr, r1
 80a0e96:	e6ca      	b.n	80a0c2e <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a0e98:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0e9a:	2903      	cmp	r1, #3
 80a0e9c:	f000 812e 	beq.w	80a10fc <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0ea0:	4a1e      	ldr	r2, [pc, #120]	; (80a0f1c <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0ea2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0ea6:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0ea8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0eac:	b29b      	uxth	r3, r3
 80a0eae:	2b00      	cmp	r3, #0
 80a0eb0:	f43f ae2e 	beq.w	80a0b10 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0eb4:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0eb6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0eba:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a0ebc:	3b03      	subs	r3, #3
 80a0ebe:	b29b      	uxth	r3, r3
 80a0ec0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0ec4:	f89e 3000 	ldrb.w	r3, [lr]
 80a0ec8:	f10e 0103 	add.w	r1, lr, #3
 80a0ecc:	b2db      	uxtb	r3, r3
 80a0ece:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0ed2:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0ed6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0eda:	b2db      	uxtb	r3, r3
 80a0edc:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0ee0:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0ee4:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a0ee8:	b2db      	uxtb	r3, r3
 80a0eea:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0eee:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0ef2:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0ef6:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0efa:	021b      	lsls	r3, r3, #8
 80a0efc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0f00:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f04:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a0f08:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f0c:	433b      	orrs	r3, r7
 80a0f0e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0f10:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0f14:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a0f18:	e07d      	b.n	80a1016 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a0f1a:	bf00      	nop
 80a0f1c:	200000a4 	.word	0x200000a4
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a0f20:	9b04      	ldr	r3, [sp, #16]
 80a0f22:	085b      	lsrs	r3, r3, #1
 80a0f24:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f26:	4600      	mov	r0, r0
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
 80a0f66:	bf00      	nop
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0fac:	79e0      	ldrb	r0, [r4, #7]
 80a0fae:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a0fb0:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0fb4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a0fb8:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a0fbc:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0fc0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a0fc4:	3301      	adds	r3, #1
 80a0fc6:	b2db      	uxtb	r3, r3
 80a0fc8:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0fcc:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0fd0:	4600      	mov	r0, r0
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
          if(j==24) break;
 80a0ffa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0ffe:	2b18      	cmp	r3, #24
 80a1000:	d07a      	beq.n	80a10f8 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a1002:	79e3      	ldrb	r3, [r4, #7]
 80a1004:	6810      	ldr	r0, [r2, #0]
 80a1006:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a100a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a100e:	88bf      	ldrh	r7, [r7, #4]
 80a1010:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1014:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a1016:	9803      	ldr	r0, [sp, #12]
 80a1018:	9b04      	ldr	r3, [sp, #16]
 80a101a:	4218      	tst	r0, r3
 80a101c:	d180      	bne.n	80a0f20 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a101e:	4600      	mov	r0, r0
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a1040:	79e3      	ldrb	r3, [r4, #7]
 80a1042:	6810      	ldr	r0, [r2, #0]
 80a1044:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1048:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a104c:	88bf      	ldrh	r7, [r7, #4]
 80a104e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1052:	831f      	strh	r7, [r3, #24]
          j++;
 80a1054:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1058:	3301      	adds	r3, #1
 80a105a:	b2db      	uxtb	r3, r3
 80a105c:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1060:	9b04      	ldr	r3, [sp, #16]
 80a1062:	085b      	lsrs	r3, r3, #1
 80a1064:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1066:	4600      	mov	r0, r0
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
 80a10d6:	bf00      	nop
 80a10d8:	bf00      	nop
 80a10da:	bf00      	nop
 80a10dc:	bf00      	nop
 80a10de:	bf00      	nop
 80a10e0:	bf00      	nop
 80a10e2:	bf00      	nop
 80a10e4:	bf00      	nop
 80a10e6:	bf00      	nop
 80a10e8:	bf00      	nop
 80a10ea:	bf00      	nop
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
          if(j==24) break;
 80a10f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a10f4:	2b18      	cmp	r3, #24
 80a10f6:	d184      	bne.n	80a1002 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a10f8:	468e      	mov	lr, r1
 80a10fa:	e6d5      	b.n	80a0ea8 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a10fc:	4a17      	ldr	r2, [pc, #92]	; (80a115c <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a10fe:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1102:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1104:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1108:	b29b      	uxth	r3, r3
 80a110a:	2b00      	cmp	r3, #0
 80a110c:	f43f ad00 	beq.w	80a0b10 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1110:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1112:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1116:	f10e 0103 	add.w	r1, lr, #3
 80a111a:	3b03      	subs	r3, #3
 80a111c:	b29b      	uxth	r3, r3
 80a111e:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1122:	f89e 3000 	ldrb.w	r3, [lr]
 80a1126:	b2db      	uxtb	r3, r3
 80a1128:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a112c:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1130:	b2db      	uxtb	r3, r3
 80a1132:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1136:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a113a:	b2db      	uxtb	r3, r3
 80a113c:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1140:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1144:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1148:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a114c:	021b      	lsls	r3, r3, #8
 80a114e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1152:	4303      	orrs	r3, r0
 80a1154:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1156:	f88d 6005 	strb.w	r6, [sp, #5]
 80a115a:	e0e0      	b.n	80a131e <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a115c:	200000a4 	.word	0x200000a4
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1160:	4600      	mov	r0, r0
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
 80a11dc:	bf00      	nop
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a1282:	79e3      	ldrb	r3, [r4, #7]
 80a1284:	6810      	ldr	r0, [r2, #0]
 80a1286:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a128a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a128e:	88bf      	ldrh	r7, [r7, #4]
 80a1290:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1294:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1296:	4600      	mov	r0, r0
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1306:	9b04      	ldr	r3, [sp, #16]
 80a1308:	085b      	lsrs	r3, r3, #1
 80a130a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a130c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1310:	3301      	adds	r3, #1
 80a1312:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1314:	2b17      	cmp	r3, #23
 80a1316:	f88d 3005 	strb.w	r3, [sp, #5]
 80a131a:	f200 80e3 	bhi.w	80a14e4 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a131e:	79e3      	ldrb	r3, [r4, #7]
 80a1320:	6810      	ldr	r0, [r2, #0]
 80a1322:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1326:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a132a:	88bf      	ldrh	r7, [r7, #4]
 80a132c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1330:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1332:	9803      	ldr	r0, [sp, #12]
 80a1334:	9b04      	ldr	r3, [sp, #16]
 80a1336:	4218      	tst	r0, r3
 80a1338:	f47f af12 	bne.w	80a1160 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a133c:	4600      	mov	r0, r0
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a13be:	79e3      	ldrb	r3, [r4, #7]
 80a13c0:	6810      	ldr	r0, [r2, #0]
 80a13c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13c6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13ca:	88bf      	ldrh	r7, [r7, #4]
 80a13cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13d0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13d2:	4600      	mov	r0, r0
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	e710      	b.n	80a1306 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a14e4:	468e      	mov	lr, r1
 80a14e6:	e60d      	b.n	80a1104 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a14e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a14e8:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a14ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a14ec:	428b      	cmp	r3, r1
 80a14ee:	d945      	bls.n	80a157c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a14f0:	7a05      	ldrb	r5, [r0, #8]
 80a14f2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a14f6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a14fa:	b2d6      	uxtb	r6, r2
 80a14fc:	b145      	cbz	r5, 80a1510 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a14fe:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a1500:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a1502:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1504:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1508:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a150c:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1510:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1514:	68c7      	ldr	r7, [r0, #12]
 80a1516:	f1bc 0f06 	cmp.w	ip, #6
 80a151a:	bf0c      	ite	eq
 80a151c:	2504      	moveq	r5, #4
 80a151e:	2503      	movne	r5, #3
 80a1520:	4369      	muls	r1, r5
 80a1522:	f1bc 0f08 	cmp.w	ip, #8
 80a1526:	eb07 0501 	add.w	r5, r7, r1
 80a152a:	d824      	bhi.n	80a1576 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a152c:	f04f 0e01 	mov.w	lr, #1
 80a1530:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a1534:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a1538:	d10c      	bne.n	80a1554 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a153a:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a153e:	d10d      	bne.n	80a155c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a1540:	f01e 0f10 	tst.w	lr, #16
 80a1544:	d017      	beq.n	80a1576 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a1546:	2bff      	cmp	r3, #255	; 0xff
 80a1548:	bf08      	it	eq
 80a154a:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a154c:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a154e:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a1550:	70ac      	strb	r4, [r5, #2]
        } break;
 80a1552:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1554:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a1556:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a1558:	70ae      	strb	r6, [r5, #2]
        } break;
 80a155a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a155c:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a155e:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a1560:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1562:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1564:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1566:	b90b      	cbnz	r3, 80a156c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1568:	b2d2      	uxtb	r2, r2
 80a156a:	e002      	b.n	80a1572 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a156c:	435a      	muls	r2, r3
 80a156e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a1572:	70ea      	strb	r2, [r5, #3]
        } break;
 80a1574:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a1576:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1578:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a157a:	70ae      	strb	r6, [r5, #2]
 80a157c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a157e <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a157e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a1582:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a1586:	4770      	bx	lr

080a1588 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1588:	b508      	push	{r3, lr}
 80a158a:	f000 f82f 	bl	80a15ec <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a158e:	f000 f82d 	bl	80a15ec <HAL_Pin_Map>
 80a1592:	4b01      	ldr	r3, [pc, #4]	; (80a1598 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1594:	6018      	str	r0, [r3, #0]
 80a1596:	bd08      	pop	{r3, pc}
 80a1598:	200000a4 	.word	0x200000a4

080a159c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a159c:	b508      	push	{r3, lr}
 80a159e:	4b02      	ldr	r3, [pc, #8]	; (80a15a8 <os_mutex_recursive_create+0xc>)
 80a15a0:	681b      	ldr	r3, [r3, #0]
 80a15a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a15a4:	9301      	str	r3, [sp, #4]
 80a15a6:	bd08      	pop	{r3, pc}
 80a15a8:	080601d0 	.word	0x080601d0

080a15ac <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a15ac:	b508      	push	{r3, lr}
 80a15ae:	4b02      	ldr	r3, [pc, #8]	; (80a15b8 <os_mutex_recursive_destroy+0xc>)
 80a15b0:	681b      	ldr	r3, [r3, #0]
 80a15b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a15b4:	9301      	str	r3, [sp, #4]
 80a15b6:	bd08      	pop	{r3, pc}
 80a15b8:	080601d0 	.word	0x080601d0

080a15bc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a15bc:	b508      	push	{r3, lr}
 80a15be:	4b02      	ldr	r3, [pc, #8]	; (80a15c8 <HAL_RNG_GetRandomNumber+0xc>)
 80a15c0:	681b      	ldr	r3, [r3, #0]
 80a15c2:	685b      	ldr	r3, [r3, #4]
 80a15c4:	9301      	str	r3, [sp, #4]
 80a15c6:	bd08      	pop	{r3, pc}
 80a15c8:	0806019c 	.word	0x0806019c

080a15cc <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a15cc:	b508      	push	{r3, lr}
 80a15ce:	4b02      	ldr	r3, [pc, #8]	; (80a15d8 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a15d0:	681b      	ldr	r3, [r3, #0]
 80a15d2:	691b      	ldr	r3, [r3, #16]
 80a15d4:	9301      	str	r3, [sp, #4]
 80a15d6:	bd08      	pop	{r3, pc}
 80a15d8:	0806019c 	.word	0x0806019c

080a15dc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a15dc:	b508      	push	{r3, lr}
 80a15de:	4b02      	ldr	r3, [pc, #8]	; (80a15e8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a15e0:	681b      	ldr	r3, [r3, #0]
 80a15e2:	695b      	ldr	r3, [r3, #20]
 80a15e4:	9301      	str	r3, [sp, #4]
 80a15e6:	bd08      	pop	{r3, pc}
 80a15e8:	0806019c 	.word	0x0806019c

080a15ec <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a15ec:	b508      	push	{r3, lr}
 80a15ee:	4b02      	ldr	r3, [pc, #8]	; (80a15f8 <HAL_Pin_Map+0xc>)
 80a15f0:	681b      	ldr	r3, [r3, #0]
 80a15f2:	681b      	ldr	r3, [r3, #0]
 80a15f4:	9301      	str	r3, [sp, #4]
 80a15f6:	bd08      	pop	{r3, pc}
 80a15f8:	080601b0 	.word	0x080601b0

080a15fc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a15fc:	b508      	push	{r3, lr}
 80a15fe:	4b02      	ldr	r3, [pc, #8]	; (80a1608 <HAL_Validate_Pin_Function+0xc>)
 80a1600:	681b      	ldr	r3, [r3, #0]
 80a1602:	685b      	ldr	r3, [r3, #4]
 80a1604:	9301      	str	r3, [sp, #4]
 80a1606:	bd08      	pop	{r3, pc}
 80a1608:	080601b0 	.word	0x080601b0

080a160c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a160c:	b508      	push	{r3, lr}
 80a160e:	4b02      	ldr	r3, [pc, #8]	; (80a1618 <HAL_Pin_Mode+0xc>)
 80a1610:	681b      	ldr	r3, [r3, #0]
 80a1612:	689b      	ldr	r3, [r3, #8]
 80a1614:	9301      	str	r3, [sp, #4]
 80a1616:	bd08      	pop	{r3, pc}
 80a1618:	080601b0 	.word	0x080601b0

080a161c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a161c:	b508      	push	{r3, lr}
 80a161e:	4b02      	ldr	r3, [pc, #8]	; (80a1628 <HAL_Get_Pin_Mode+0xc>)
 80a1620:	681b      	ldr	r3, [r3, #0]
 80a1622:	68db      	ldr	r3, [r3, #12]
 80a1624:	9301      	str	r3, [sp, #4]
 80a1626:	bd08      	pop	{r3, pc}
 80a1628:	080601b0 	.word	0x080601b0

080a162c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a162c:	b508      	push	{r3, lr}
 80a162e:	4b02      	ldr	r3, [pc, #8]	; (80a1638 <HAL_GPIO_Write+0xc>)
 80a1630:	681b      	ldr	r3, [r3, #0]
 80a1632:	691b      	ldr	r3, [r3, #16]
 80a1634:	9301      	str	r3, [sp, #4]
 80a1636:	bd08      	pop	{r3, pc}
 80a1638:	080601b0 	.word	0x080601b0

080a163c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a163c:	b508      	push	{r3, lr}
 80a163e:	4b02      	ldr	r3, [pc, #8]	; (80a1648 <HAL_ADC_Read+0xc>)
 80a1640:	681b      	ldr	r3, [r3, #0]
 80a1642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1644:	9301      	str	r3, [sp, #4]
 80a1646:	bd08      	pop	{r3, pc}
 80a1648:	080601b0 	.word	0x080601b0

080a164c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a164c:	b508      	push	{r3, lr}
 80a164e:	4b02      	ldr	r3, [pc, #8]	; (80a1658 <HAL_I2C_Write_Data+0xc>)
 80a1650:	681b      	ldr	r3, [r3, #0]
 80a1652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1654:	9301      	str	r3, [sp, #4]
 80a1656:	bd08      	pop	{r3, pc}
 80a1658:	080601ac 	.word	0x080601ac

080a165c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a165c:	b508      	push	{r3, lr}
 80a165e:	4b02      	ldr	r3, [pc, #8]	; (80a1668 <HAL_I2C_Available_Data+0xc>)
 80a1660:	681b      	ldr	r3, [r3, #0]
 80a1662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1664:	9301      	str	r3, [sp, #4]
 80a1666:	bd08      	pop	{r3, pc}
 80a1668:	080601ac 	.word	0x080601ac

080a166c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a166c:	b508      	push	{r3, lr}
 80a166e:	4b02      	ldr	r3, [pc, #8]	; (80a1678 <HAL_I2C_Read_Data+0xc>)
 80a1670:	681b      	ldr	r3, [r3, #0]
 80a1672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1674:	9301      	str	r3, [sp, #4]
 80a1676:	bd08      	pop	{r3, pc}
 80a1678:	080601ac 	.word	0x080601ac

080a167c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a167c:	b508      	push	{r3, lr}
 80a167e:	4b02      	ldr	r3, [pc, #8]	; (80a1688 <HAL_I2C_Peek_Data+0xc>)
 80a1680:	681b      	ldr	r3, [r3, #0]
 80a1682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1684:	9301      	str	r3, [sp, #4]
 80a1686:	bd08      	pop	{r3, pc}
 80a1688:	080601ac 	.word	0x080601ac

080a168c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a168c:	b508      	push	{r3, lr}
 80a168e:	4b02      	ldr	r3, [pc, #8]	; (80a1698 <HAL_I2C_Flush_Data+0xc>)
 80a1690:	681b      	ldr	r3, [r3, #0]
 80a1692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1694:	9301      	str	r3, [sp, #4]
 80a1696:	bd08      	pop	{r3, pc}
 80a1698:	080601ac 	.word	0x080601ac

080a169c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a169c:	b508      	push	{r3, lr}
 80a169e:	4b02      	ldr	r3, [pc, #8]	; (80a16a8 <HAL_I2C_Is_Enabled+0xc>)
 80a16a0:	681b      	ldr	r3, [r3, #0]
 80a16a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a16a4:	9301      	str	r3, [sp, #4]
 80a16a6:	bd08      	pop	{r3, pc}
 80a16a8:	080601ac 	.word	0x080601ac

080a16ac <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a16ac:	b508      	push	{r3, lr}
 80a16ae:	4b03      	ldr	r3, [pc, #12]	; (80a16bc <HAL_I2C_Init+0x10>)
 80a16b0:	681b      	ldr	r3, [r3, #0]
 80a16b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a16b6:	9301      	str	r3, [sp, #4]
 80a16b8:	bd08      	pop	{r3, pc}
 80a16ba:	0000      	.short	0x0000
 80a16bc:	080601ac 	.word	0x080601ac

080a16c0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a16c0:	b508      	push	{r3, lr}
 80a16c2:	4b02      	ldr	r3, [pc, #8]	; (80a16cc <HAL_SPI_Init+0xc>)
 80a16c4:	681b      	ldr	r3, [r3, #0]
 80a16c6:	69db      	ldr	r3, [r3, #28]
 80a16c8:	9301      	str	r3, [sp, #4]
 80a16ca:	bd08      	pop	{r3, pc}
 80a16cc:	080601b4 	.word	0x080601b4

080a16d0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a16d0:	b508      	push	{r3, lr}
 80a16d2:	4b02      	ldr	r3, [pc, #8]	; (80a16dc <HAL_SPI_Is_Enabled+0xc>)
 80a16d4:	681b      	ldr	r3, [r3, #0]
 80a16d6:	6a1b      	ldr	r3, [r3, #32]
 80a16d8:	9301      	str	r3, [sp, #4]
 80a16da:	bd08      	pop	{r3, pc}
 80a16dc:	080601b4 	.word	0x080601b4

080a16e0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a16e0:	b508      	push	{r3, lr}
 80a16e2:	4b02      	ldr	r3, [pc, #8]	; (80a16ec <HAL_USART_Init+0xc>)
 80a16e4:	681b      	ldr	r3, [r3, #0]
 80a16e6:	699b      	ldr	r3, [r3, #24]
 80a16e8:	9301      	str	r3, [sp, #4]
 80a16ea:	bd08      	pop	{r3, pc}
 80a16ec:	080601c4 	.word	0x080601c4

080a16f0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a16f0:	b508      	push	{r3, lr}
 80a16f2:	4b02      	ldr	r3, [pc, #8]	; (80a16fc <HAL_USART_Write_Data+0xc>)
 80a16f4:	681b      	ldr	r3, [r3, #0]
 80a16f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a16f8:	9301      	str	r3, [sp, #4]
 80a16fa:	bd08      	pop	{r3, pc}
 80a16fc:	080601c4 	.word	0x080601c4

080a1700 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1700:	b508      	push	{r3, lr}
 80a1702:	4b02      	ldr	r3, [pc, #8]	; (80a170c <HAL_USART_Available_Data+0xc>)
 80a1704:	681b      	ldr	r3, [r3, #0]
 80a1706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1708:	9301      	str	r3, [sp, #4]
 80a170a:	bd08      	pop	{r3, pc}
 80a170c:	080601c4 	.word	0x080601c4

080a1710 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1710:	b508      	push	{r3, lr}
 80a1712:	4b02      	ldr	r3, [pc, #8]	; (80a171c <HAL_USART_Read_Data+0xc>)
 80a1714:	681b      	ldr	r3, [r3, #0]
 80a1716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1718:	9301      	str	r3, [sp, #4]
 80a171a:	bd08      	pop	{r3, pc}
 80a171c:	080601c4 	.word	0x080601c4

080a1720 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1720:	b508      	push	{r3, lr}
 80a1722:	4b02      	ldr	r3, [pc, #8]	; (80a172c <HAL_USART_Peek_Data+0xc>)
 80a1724:	681b      	ldr	r3, [r3, #0]
 80a1726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1728:	9301      	str	r3, [sp, #4]
 80a172a:	bd08      	pop	{r3, pc}
 80a172c:	080601c4 	.word	0x080601c4

080a1730 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1730:	b508      	push	{r3, lr}
 80a1732:	4b02      	ldr	r3, [pc, #8]	; (80a173c <HAL_USART_Flush_Data+0xc>)
 80a1734:	681b      	ldr	r3, [r3, #0]
 80a1736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1738:	9301      	str	r3, [sp, #4]
 80a173a:	bd08      	pop	{r3, pc}
 80a173c:	080601c4 	.word	0x080601c4

080a1740 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1740:	b508      	push	{r3, lr}
 80a1742:	4b02      	ldr	r3, [pc, #8]	; (80a174c <HAL_USART_Is_Enabled+0xc>)
 80a1744:	681b      	ldr	r3, [r3, #0]
 80a1746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1748:	9301      	str	r3, [sp, #4]
 80a174a:	bd08      	pop	{r3, pc}
 80a174c:	080601c4 	.word	0x080601c4

080a1750 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1750:	b508      	push	{r3, lr}
 80a1752:	4b02      	ldr	r3, [pc, #8]	; (80a175c <HAL_USART_Available_Data_For_Write+0xc>)
 80a1754:	681b      	ldr	r3, [r3, #0]
 80a1756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1758:	9301      	str	r3, [sp, #4]
 80a175a:	bd08      	pop	{r3, pc}
 80a175c:	080601c4 	.word	0x080601c4

080a1760 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1760:	b508      	push	{r3, lr}
 80a1762:	4b02      	ldr	r3, [pc, #8]	; (80a176c <HAL_USB_USART_Init+0xc>)
 80a1764:	681b      	ldr	r3, [r3, #0]
 80a1766:	681b      	ldr	r3, [r3, #0]
 80a1768:	9301      	str	r3, [sp, #4]
 80a176a:	bd08      	pop	{r3, pc}
 80a176c:	080601d8 	.word	0x080601d8

080a1770 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1770:	b508      	push	{r3, lr}
 80a1772:	4b02      	ldr	r3, [pc, #8]	; (80a177c <HAL_USB_USART_Begin+0xc>)
 80a1774:	681b      	ldr	r3, [r3, #0]
 80a1776:	685b      	ldr	r3, [r3, #4]
 80a1778:	9301      	str	r3, [sp, #4]
 80a177a:	bd08      	pop	{r3, pc}
 80a177c:	080601d8 	.word	0x080601d8

080a1780 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1780:	b508      	push	{r3, lr}
 80a1782:	4b02      	ldr	r3, [pc, #8]	; (80a178c <HAL_USB_USART_Available_Data+0xc>)
 80a1784:	681b      	ldr	r3, [r3, #0]
 80a1786:	691b      	ldr	r3, [r3, #16]
 80a1788:	9301      	str	r3, [sp, #4]
 80a178a:	bd08      	pop	{r3, pc}
 80a178c:	080601d8 	.word	0x080601d8

080a1790 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1790:	b508      	push	{r3, lr}
 80a1792:	4b02      	ldr	r3, [pc, #8]	; (80a179c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1794:	681b      	ldr	r3, [r3, #0]
 80a1796:	695b      	ldr	r3, [r3, #20]
 80a1798:	9301      	str	r3, [sp, #4]
 80a179a:	bd08      	pop	{r3, pc}
 80a179c:	080601d8 	.word	0x080601d8

080a17a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a17a0:	b508      	push	{r3, lr}
 80a17a2:	4b02      	ldr	r3, [pc, #8]	; (80a17ac <HAL_USB_USART_Receive_Data+0xc>)
 80a17a4:	681b      	ldr	r3, [r3, #0]
 80a17a6:	699b      	ldr	r3, [r3, #24]
 80a17a8:	9301      	str	r3, [sp, #4]
 80a17aa:	bd08      	pop	{r3, pc}
 80a17ac:	080601d8 	.word	0x080601d8

080a17b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a17b0:	b508      	push	{r3, lr}
 80a17b2:	4b02      	ldr	r3, [pc, #8]	; (80a17bc <HAL_USB_USART_Send_Data+0xc>)
 80a17b4:	681b      	ldr	r3, [r3, #0]
 80a17b6:	69db      	ldr	r3, [r3, #28]
 80a17b8:	9301      	str	r3, [sp, #4]
 80a17ba:	bd08      	pop	{r3, pc}
 80a17bc:	080601d8 	.word	0x080601d8

080a17c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a17c0:	b508      	push	{r3, lr}
 80a17c2:	4b02      	ldr	r3, [pc, #8]	; (80a17cc <HAL_USB_USART_Flush_Data+0xc>)
 80a17c4:	681b      	ldr	r3, [r3, #0]
 80a17c6:	6a1b      	ldr	r3, [r3, #32]
 80a17c8:	9301      	str	r3, [sp, #4]
 80a17ca:	bd08      	pop	{r3, pc}
 80a17cc:	080601d8 	.word	0x080601d8

080a17d0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a17d0:	b508      	push	{r3, lr}
 80a17d2:	4b02      	ldr	r3, [pc, #8]	; (80a17dc <inet_gethostbyname+0xc>)
 80a17d4:	681b      	ldr	r3, [r3, #0]
 80a17d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a17d8:	9301      	str	r3, [sp, #4]
 80a17da:	bd08      	pop	{r3, pc}
 80a17dc:	080601c0 	.word	0x080601c0

080a17e0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a17e0:	b508      	push	{r3, lr}
 80a17e2:	4b02      	ldr	r3, [pc, #8]	; (80a17ec <set_system_mode+0xc>)
 80a17e4:	681b      	ldr	r3, [r3, #0]
 80a17e6:	685b      	ldr	r3, [r3, #4]
 80a17e8:	9301      	str	r3, [sp, #4]
 80a17ea:	bd08      	pop	{r3, pc}
 80a17ec:	080601a4 	.word	0x080601a4

080a17f0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a17f0:	b508      	push	{r3, lr}
 80a17f2:	4b02      	ldr	r3, [pc, #8]	; (80a17fc <system_delay_ms+0xc>)
 80a17f4:	681b      	ldr	r3, [r3, #0]
 80a17f6:	695b      	ldr	r3, [r3, #20]
 80a17f8:	9301      	str	r3, [sp, #4]
 80a17fa:	bd08      	pop	{r3, pc}
 80a17fc:	080601a4 	.word	0x080601a4

080a1800 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1800:	b508      	push	{r3, lr}
 80a1802:	4b03      	ldr	r3, [pc, #12]	; (80a1810 <system_ctrl_set_app_request_handler+0x10>)
 80a1804:	681b      	ldr	r3, [r3, #0]
 80a1806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a180a:	9301      	str	r3, [sp, #4]
 80a180c:	bd08      	pop	{r3, pc}
 80a180e:	0000      	.short	0x0000
 80a1810:	080601a4 	.word	0x080601a4

080a1814 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1814:	b508      	push	{r3, lr}
 80a1816:	4b03      	ldr	r3, [pc, #12]	; (80a1824 <system_ctrl_set_result+0x10>)
 80a1818:	681b      	ldr	r3, [r3, #0]
 80a181a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a181e:	9301      	str	r3, [sp, #4]
 80a1820:	bd08      	pop	{r3, pc}
 80a1822:	0000      	.short	0x0000
 80a1824:	080601a4 	.word	0x080601a4

080a1828 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a1828:	b508      	push	{r3, lr}
 80a182a:	4b02      	ldr	r3, [pc, #8]	; (80a1834 <spark_variable+0xc>)
 80a182c:	681b      	ldr	r3, [r3, #0]
 80a182e:	681b      	ldr	r3, [r3, #0]
 80a1830:	9301      	str	r3, [sp, #4]
 80a1832:	bd08      	pop	{r3, pc}
 80a1834:	080601cc 	.word	0x080601cc

080a1838 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a1838:	b508      	push	{r3, lr}
 80a183a:	4b02      	ldr	r3, [pc, #8]	; (80a1844 <spark_function+0xc>)
 80a183c:	681b      	ldr	r3, [r3, #0]
 80a183e:	685b      	ldr	r3, [r3, #4]
 80a1840:	9301      	str	r3, [sp, #4]
 80a1842:	bd08      	pop	{r3, pc}
 80a1844:	080601cc 	.word	0x080601cc

080a1848 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1848:	b508      	push	{r3, lr}
 80a184a:	4b02      	ldr	r3, [pc, #8]	; (80a1854 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a184c:	681b      	ldr	r3, [r3, #0]
 80a184e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1850:	9301      	str	r3, [sp, #4]
 80a1852:	bd08      	pop	{r3, pc}
 80a1854:	080601cc 	.word	0x080601cc

080a1858 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1858:	b508      	push	{r3, lr}
 80a185a:	4b02      	ldr	r3, [pc, #8]	; (80a1864 <network_connect+0xc>)
 80a185c:	681b      	ldr	r3, [r3, #0]
 80a185e:	685b      	ldr	r3, [r3, #4]
 80a1860:	9301      	str	r3, [sp, #4]
 80a1862:	bd08      	pop	{r3, pc}
 80a1864:	080601c8 	.word	0x080601c8

080a1868 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1868:	b508      	push	{r3, lr}
 80a186a:	4b02      	ldr	r3, [pc, #8]	; (80a1874 <network_connecting+0xc>)
 80a186c:	681b      	ldr	r3, [r3, #0]
 80a186e:	689b      	ldr	r3, [r3, #8]
 80a1870:	9301      	str	r3, [sp, #4]
 80a1872:	bd08      	pop	{r3, pc}
 80a1874:	080601c8 	.word	0x080601c8

080a1878 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1878:	b508      	push	{r3, lr}
 80a187a:	4b02      	ldr	r3, [pc, #8]	; (80a1884 <network_disconnect+0xc>)
 80a187c:	681b      	ldr	r3, [r3, #0]
 80a187e:	68db      	ldr	r3, [r3, #12]
 80a1880:	9301      	str	r3, [sp, #4]
 80a1882:	bd08      	pop	{r3, pc}
 80a1884:	080601c8 	.word	0x080601c8

080a1888 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1888:	b508      	push	{r3, lr}
 80a188a:	4b02      	ldr	r3, [pc, #8]	; (80a1894 <network_ready+0xc>)
 80a188c:	681b      	ldr	r3, [r3, #0]
 80a188e:	691b      	ldr	r3, [r3, #16]
 80a1890:	9301      	str	r3, [sp, #4]
 80a1892:	bd08      	pop	{r3, pc}
 80a1894:	080601c8 	.word	0x080601c8

080a1898 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1898:	b508      	push	{r3, lr}
 80a189a:	4b02      	ldr	r3, [pc, #8]	; (80a18a4 <network_on+0xc>)
 80a189c:	681b      	ldr	r3, [r3, #0]
 80a189e:	695b      	ldr	r3, [r3, #20]
 80a18a0:	9301      	str	r3, [sp, #4]
 80a18a2:	bd08      	pop	{r3, pc}
 80a18a4:	080601c8 	.word	0x080601c8

080a18a8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a18a8:	b508      	push	{r3, lr}
 80a18aa:	4b02      	ldr	r3, [pc, #8]	; (80a18b4 <network_off+0xc>)
 80a18ac:	681b      	ldr	r3, [r3, #0]
 80a18ae:	699b      	ldr	r3, [r3, #24]
 80a18b0:	9301      	str	r3, [sp, #4]
 80a18b2:	bd08      	pop	{r3, pc}
 80a18b4:	080601c8 	.word	0x080601c8

080a18b8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a18b8:	b508      	push	{r3, lr}
 80a18ba:	4b02      	ldr	r3, [pc, #8]	; (80a18c4 <network_listen+0xc>)
 80a18bc:	681b      	ldr	r3, [r3, #0]
 80a18be:	69db      	ldr	r3, [r3, #28]
 80a18c0:	9301      	str	r3, [sp, #4]
 80a18c2:	bd08      	pop	{r3, pc}
 80a18c4:	080601c8 	.word	0x080601c8

080a18c8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a18c8:	b508      	push	{r3, lr}
 80a18ca:	4b02      	ldr	r3, [pc, #8]	; (80a18d4 <network_listening+0xc>)
 80a18cc:	681b      	ldr	r3, [r3, #0]
 80a18ce:	6a1b      	ldr	r3, [r3, #32]
 80a18d0:	9301      	str	r3, [sp, #4]
 80a18d2:	bd08      	pop	{r3, pc}
 80a18d4:	080601c8 	.word	0x080601c8

080a18d8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a18d8:	b508      	push	{r3, lr}
 80a18da:	4b02      	ldr	r3, [pc, #8]	; (80a18e4 <network_set_listen_timeout+0xc>)
 80a18dc:	681b      	ldr	r3, [r3, #0]
 80a18de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a18e0:	9301      	str	r3, [sp, #4]
 80a18e2:	bd08      	pop	{r3, pc}
 80a18e4:	080601c8 	.word	0x080601c8

080a18e8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a18e8:	b508      	push	{r3, lr}
 80a18ea:	4b02      	ldr	r3, [pc, #8]	; (80a18f4 <network_get_listen_timeout+0xc>)
 80a18ec:	681b      	ldr	r3, [r3, #0]
 80a18ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a18f0:	9301      	str	r3, [sp, #4]
 80a18f2:	bd08      	pop	{r3, pc}
 80a18f4:	080601c8 	.word	0x080601c8

080a18f8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a18f8:	b508      	push	{r3, lr}
 80a18fa:	4b02      	ldr	r3, [pc, #8]	; (80a1904 <malloc+0xc>)
 80a18fc:	681b      	ldr	r3, [r3, #0]
 80a18fe:	681b      	ldr	r3, [r3, #0]
 80a1900:	9301      	str	r3, [sp, #4]
 80a1902:	bd08      	pop	{r3, pc}
 80a1904:	080601a0 	.word	0x080601a0

080a1908 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1908:	b508      	push	{r3, lr}
 80a190a:	4b02      	ldr	r3, [pc, #8]	; (80a1914 <free+0xc>)
 80a190c:	681b      	ldr	r3, [r3, #0]
 80a190e:	685b      	ldr	r3, [r3, #4]
 80a1910:	9301      	str	r3, [sp, #4]
 80a1912:	bd08      	pop	{r3, pc}
 80a1914:	080601a0 	.word	0x080601a0

080a1918 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1918:	b508      	push	{r3, lr}
 80a191a:	4b02      	ldr	r3, [pc, #8]	; (80a1924 <realloc+0xc>)
 80a191c:	681b      	ldr	r3, [r3, #0]
 80a191e:	689b      	ldr	r3, [r3, #8]
 80a1920:	9301      	str	r3, [sp, #4]
 80a1922:	bd08      	pop	{r3, pc}
 80a1924:	080601a0 	.word	0x080601a0

080a1928 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1928:	2100      	movs	r1, #0
 80a192a:	f7ff bf61 	b.w	80a17f0 <system_delay_ms>

080a192e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a192e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1930:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1932:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1934:	b113      	cbz	r3, 80a193c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1936:	2203      	movs	r2, #3
 80a1938:	4601      	mov	r1, r0
 80a193a:	4798      	blx	r3
    }
 80a193c:	4620      	mov	r0, r4
 80a193e:	bd10      	pop	{r4, pc}

080a1940 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a1940:	b510      	push	{r4, lr}
 80a1942:	b088      	sub	sp, #32
 80a1944:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1946:	4668      	mov	r0, sp
 80a1948:	f000 facb 	bl	80a1ee2 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a194c:	4669      	mov	r1, sp
 80a194e:	a804      	add	r0, sp, #16
 80a1950:	f000 fae9 	bl	80a1f26 <_ZN6StringC1ERKS_>
 80a1954:	a804      	add	r0, sp, #16
 80a1956:	47a0      	blx	r4
 80a1958:	4604      	mov	r4, r0
 80a195a:	a804      	add	r0, sp, #16
 80a195c:	f000 fa7a 	bl	80a1e54 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1960:	4668      	mov	r0, sp
 80a1962:	f000 fa77 	bl	80a1e54 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a1966:	4620      	mov	r0, r4
 80a1968:	b008      	add	sp, #32
 80a196a:	bd10      	pop	{r4, pc}

080a196c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a196c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a196e:	4607      	mov	r7, r0
 80a1970:	460e      	mov	r6, r1
 80a1972:	4615      	mov	r5, r2
 80a1974:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a1976:	2410      	movs	r4, #16
 80a1978:	4622      	mov	r2, r4
 80a197a:	2100      	movs	r1, #0
 80a197c:	4668      	mov	r0, sp
 80a197e:	f001 fc86 	bl	80a328e <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1982:	2200      	movs	r2, #0
 80a1984:	4669      	mov	r1, sp
 80a1986:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a1988:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a198c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a198e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a1990:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1992:	f7ff ff51 	bl	80a1838 <spark_function>
}
 80a1996:	b005      	add	sp, #20
 80a1998:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a199a <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a199a:	4770      	bx	lr

080a199c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a199c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a199e:	4606      	mov	r6, r0
 80a19a0:	4615      	mov	r5, r2
 80a19a2:	460c      	mov	r4, r1
 80a19a4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a19a6:	42bc      	cmp	r4, r7
 80a19a8:	d006      	beq.n	80a19b8 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a19aa:	6833      	ldr	r3, [r6, #0]
 80a19ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a19b0:	689b      	ldr	r3, [r3, #8]
 80a19b2:	4630      	mov	r0, r6
 80a19b4:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a19b6:	e7f6      	b.n	80a19a6 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a19b8:	4628      	mov	r0, r5
 80a19ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a19bc <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a19bc:	2200      	movs	r2, #0
 80a19be:	7c00      	ldrb	r0, [r0, #16]
 80a19c0:	f7ff be44 	b.w	80a164c <HAL_I2C_Write_Data>

080a19c4 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a19c4:	2100      	movs	r1, #0
 80a19c6:	7c00      	ldrb	r0, [r0, #16]
 80a19c8:	f7ff be48 	b.w	80a165c <HAL_I2C_Available_Data>

080a19cc <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a19cc:	2100      	movs	r1, #0
 80a19ce:	7c00      	ldrb	r0, [r0, #16]
 80a19d0:	f7ff be4c 	b.w	80a166c <HAL_I2C_Read_Data>

080a19d4 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a19d4:	2100      	movs	r1, #0
 80a19d6:	7c00      	ldrb	r0, [r0, #16]
 80a19d8:	f7ff be50 	b.w	80a167c <HAL_I2C_Peek_Data>

080a19dc <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a19dc:	2100      	movs	r1, #0
 80a19de:	7c00      	ldrb	r0, [r0, #16]
 80a19e0:	f7ff be54 	b.w	80a168c <HAL_I2C_Flush_Data>

080a19e4 <_ZN7TwoWireD0Ev>:
 80a19e4:	b510      	push	{r4, lr}
 80a19e6:	4604      	mov	r4, r0
 80a19e8:	2114      	movs	r1, #20
 80a19ea:	f000 fe22 	bl	80a2632 <_ZdlPvj>
 80a19ee:	4620      	mov	r0, r4
 80a19f0:	bd10      	pop	{r4, pc}
	...

080a19f4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a19f4:	b510      	push	{r4, lr}
 80a19f6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a19f8:	2300      	movs	r3, #0
 80a19fa:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a19fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1a00:	60a3      	str	r3, [r4, #8]
 80a1a02:	4b04      	ldr	r3, [pc, #16]	; (80a1a14 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a1a04:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a1a06:	4608      	mov	r0, r1
 80a1a08:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a1a0a:	4611      	mov	r1, r2
 80a1a0c:	f7ff fe4e 	bl	80a16ac <HAL_I2C_Init>
}
 80a1a10:	4620      	mov	r0, r4
 80a1a12:	bd10      	pop	{r4, pc}
 80a1a14:	080a3378 	.word	0x080a3378

080a1a18 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1a18:	2100      	movs	r1, #0
 80a1a1a:	7c00      	ldrb	r0, [r0, #16]
 80a1a1c:	f7ff be3e 	b.w	80a169c <HAL_I2C_Is_Enabled>

080a1a20 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1a20:	4770      	bx	lr

080a1a22 <_ZN9IPAddressD0Ev>:
 80a1a22:	b510      	push	{r4, lr}
 80a1a24:	4604      	mov	r4, r0
 80a1a26:	2118      	movs	r1, #24
 80a1a28:	f000 fe03 	bl	80a2632 <_ZdlPvj>
 80a1a2c:	4620      	mov	r0, r4
 80a1a2e:	bd10      	pop	{r4, pc}

080a1a30 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a32:	460f      	mov	r7, r1
 80a1a34:	f100 0608 	add.w	r6, r0, #8
 80a1a38:	1d05      	adds	r5, r0, #4
 80a1a3a:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1a3c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1a40:	220a      	movs	r2, #10
 80a1a42:	4638      	mov	r0, r7
 80a1a44:	f000 f901 	bl	80a1c4a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1a48:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1a4a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1a4c:	d007      	beq.n	80a1a5e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1a4e:	2c00      	cmp	r4, #0
 80a1a50:	d0f4      	beq.n	80a1a3c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1a52:	212e      	movs	r1, #46	; 0x2e
 80a1a54:	4638      	mov	r0, r7
 80a1a56:	f000 f8df 	bl	80a1c18 <_ZN5Print5printEc>
 80a1a5a:	4404      	add	r4, r0
 80a1a5c:	e7ee      	b.n	80a1a3c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1a5e:	4620      	mov	r0, r4
 80a1a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1a64 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1a64:	b510      	push	{r4, lr}
 80a1a66:	4604      	mov	r4, r0
 80a1a68:	4b04      	ldr	r3, [pc, #16]	; (80a1a7c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1a6a:	2211      	movs	r2, #17
 80a1a6c:	f840 3b04 	str.w	r3, [r0], #4
 80a1a70:	2100      	movs	r1, #0
 80a1a72:	f001 fc0c 	bl	80a328e <memset>
{
    clear();
}
 80a1a76:	4620      	mov	r0, r4
 80a1a78:	bd10      	pop	{r4, pc}
 80a1a7a:	bf00      	nop
 80a1a7c:	080a33a0 	.word	0x080a33a0

080a1a80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1a80:	4603      	mov	r3, r0
 80a1a82:	4a07      	ldr	r2, [pc, #28]	; (80a1aa0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1a84:	b510      	push	{r4, lr}
 80a1a86:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1a8a:	f101 0210 	add.w	r2, r1, #16
 80a1a8e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1a92:	4291      	cmp	r1, r2
 80a1a94:	f843 4b04 	str.w	r4, [r3], #4
 80a1a98:	d1f9      	bne.n	80a1a8e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1a9a:	780a      	ldrb	r2, [r1, #0]
 80a1a9c:	701a      	strb	r2, [r3, #0]
}
 80a1a9e:	bd10      	pop	{r4, pc}
 80a1aa0:	080a33a0 	.word	0x080a33a0

080a1aa4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1aa4:	4a02      	ldr	r2, [pc, #8]	; (80a1ab0 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1aa6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1aa8:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1aaa:	2204      	movs	r2, #4
 80a1aac:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1aae:	4770      	bx	lr
 80a1ab0:	080a33a0 	.word	0x080a33a0

080a1ab4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1ab4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1ab6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1aba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1abe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1ac2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1ac6:	2304      	movs	r3, #4
 80a1ac8:	6041      	str	r1, [r0, #4]
 80a1aca:	7503      	strb	r3, [r0, #20]
 80a1acc:	bd10      	pop	{r4, pc}
	...

080a1ad0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1ad2:	4d04      	ldr	r5, [pc, #16]	; (80a1ae4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1ad4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1ad6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1ada:	9500      	str	r5, [sp, #0]
 80a1adc:	f7ff ffea 	bl	80a1ab4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1ae0:	b003      	add	sp, #12
 80a1ae2:	bd30      	pop	{r4, r5, pc}
 80a1ae4:	080a33a0 	.word	0x080a33a0

080a1ae8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1ae8:	4a01      	ldr	r2, [pc, #4]	; (80a1af0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1aea:	4b02      	ldr	r3, [pc, #8]	; (80a1af4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1aec:	601a      	str	r2, [r3, #0]
 80a1aee:	4770      	bx	lr
 80a1af0:	080a3422 	.word	0x080a3422
 80a1af4:	200000a8 	.word	0x200000a8

080a1af8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1af8:	2300      	movs	r3, #0
 80a1afa:	461a      	mov	r2, r3
 80a1afc:	6840      	ldr	r0, [r0, #4]
 80a1afe:	f7ff beab 	b.w	80a1858 <network_connect>

080a1b02 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1b02:	2200      	movs	r2, #0
 80a1b04:	2102      	movs	r1, #2
 80a1b06:	6840      	ldr	r0, [r0, #4]
 80a1b08:	f7ff beb6 	b.w	80a1878 <network_disconnect>

080a1b0c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1b0c:	2200      	movs	r2, #0
 80a1b0e:	4611      	mov	r1, r2
 80a1b10:	6840      	ldr	r0, [r0, #4]
 80a1b12:	f7ff bea9 	b.w	80a1868 <network_connecting>

080a1b16 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1b16:	2200      	movs	r2, #0
 80a1b18:	4611      	mov	r1, r2
 80a1b1a:	6840      	ldr	r0, [r0, #4]
 80a1b1c:	f7ff beb4 	b.w	80a1888 <network_ready>

080a1b20 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1b20:	2300      	movs	r3, #0
 80a1b22:	461a      	mov	r2, r3
 80a1b24:	4619      	mov	r1, r3
 80a1b26:	6840      	ldr	r0, [r0, #4]
 80a1b28:	f7ff beb6 	b.w	80a1898 <network_on>

080a1b2c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1b2c:	2300      	movs	r3, #0
 80a1b2e:	461a      	mov	r2, r3
 80a1b30:	4619      	mov	r1, r3
 80a1b32:	6840      	ldr	r0, [r0, #4]
 80a1b34:	f7ff beb8 	b.w	80a18a8 <network_off>

080a1b38 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1b38:	2200      	movs	r2, #0
 80a1b3a:	f081 0101 	eor.w	r1, r1, #1
 80a1b3e:	6840      	ldr	r0, [r0, #4]
 80a1b40:	f7ff beba 	b.w	80a18b8 <network_listen>

080a1b44 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1b44:	2200      	movs	r2, #0
 80a1b46:	6840      	ldr	r0, [r0, #4]
 80a1b48:	f7ff bec6 	b.w	80a18d8 <network_set_listen_timeout>

080a1b4c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1b4c:	2200      	movs	r2, #0
 80a1b4e:	4611      	mov	r1, r2
 80a1b50:	6840      	ldr	r0, [r0, #4]
 80a1b52:	f7ff bec9 	b.w	80a18e8 <network_get_listen_timeout>

080a1b56 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1b56:	2200      	movs	r2, #0
 80a1b58:	4611      	mov	r1, r2
 80a1b5a:	6840      	ldr	r0, [r0, #4]
 80a1b5c:	f7ff beb4 	b.w	80a18c8 <network_listening>

080a1b60 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1b60:	b570      	push	{r4, r5, r6, lr}
 80a1b62:	4616      	mov	r6, r2
 80a1b64:	b08e      	sub	sp, #56	; 0x38
 80a1b66:	4604      	mov	r4, r0
    IPAddress addr;
 80a1b68:	a808      	add	r0, sp, #32
 80a1b6a:	f7ff ff7b 	bl	80a1a64 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1b6e:	2211      	movs	r2, #17
 80a1b70:	2100      	movs	r1, #0
 80a1b72:	a803      	add	r0, sp, #12
 80a1b74:	f001 fb8b 	bl	80a328e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1b78:	4630      	mov	r0, r6
 80a1b7a:	f001 fbc3 	bl	80a3304 <strlen>
 80a1b7e:	2500      	movs	r5, #0
 80a1b80:	4b0a      	ldr	r3, [pc, #40]	; (80a1bac <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1b82:	9500      	str	r5, [sp, #0]
 80a1b84:	b281      	uxth	r1, r0
 80a1b86:	685b      	ldr	r3, [r3, #4]
 80a1b88:	aa03      	add	r2, sp, #12
 80a1b8a:	4630      	mov	r0, r6
 80a1b8c:	f7ff fe20 	bl	80a17d0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1b90:	b120      	cbz	r0, 80a1b9c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1b92:	4629      	mov	r1, r5
 80a1b94:	4620      	mov	r0, r4
 80a1b96:	f7ff ff85 	bl	80a1aa4 <_ZN9IPAddressC1Em>
 80a1b9a:	e003      	b.n	80a1ba4 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1b9c:	a903      	add	r1, sp, #12
 80a1b9e:	4620      	mov	r0, r4
 80a1ba0:	f7ff ff6e 	bl	80a1a80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1ba4:	4620      	mov	r0, r4
 80a1ba6:	b00e      	add	sp, #56	; 0x38
 80a1ba8:	bd70      	pop	{r4, r5, r6, pc}
 80a1baa:	bf00      	nop
 80a1bac:	20000530 	.word	0x20000530

080a1bb0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1bb0:	4b02      	ldr	r3, [pc, #8]	; (80a1bbc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1bb2:	4a03      	ldr	r2, [pc, #12]	; (80a1bc0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1bb4:	601a      	str	r2, [r3, #0]
 80a1bb6:	2200      	movs	r2, #0
 80a1bb8:	605a      	str	r2, [r3, #4]
 80a1bba:	4770      	bx	lr
 80a1bbc:	200000ac 	.word	0x200000ac
 80a1bc0:	080a3498 	.word	0x080a3498

080a1bc4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1bc6:	4606      	mov	r6, r0
 80a1bc8:	460d      	mov	r5, r1
 80a1bca:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1bcc:	2400      	movs	r4, #0
  while (size--) {
 80a1bce:	42bd      	cmp	r5, r7
 80a1bd0:	d00c      	beq.n	80a1bec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1bd2:	6833      	ldr	r3, [r6, #0]
 80a1bd4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1bd8:	689b      	ldr	r3, [r3, #8]
 80a1bda:	4630      	mov	r0, r6
 80a1bdc:	4798      	blx	r3
     if (chunk>=0)
 80a1bde:	2800      	cmp	r0, #0
 80a1be0:	db01      	blt.n	80a1be6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1be2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1be4:	e7f3      	b.n	80a1bce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1be6:	2c00      	cmp	r4, #0
 80a1be8:	bf08      	it	eq
 80a1bea:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1bec:	4620      	mov	r0, r4
 80a1bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1bf0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1bf0:	b570      	push	{r4, r5, r6, lr}
 80a1bf2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1bf4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1bf6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1bf8:	b149      	cbz	r1, 80a1c0e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1bfa:	f001 fb83 	bl	80a3304 <strlen>
 80a1bfe:	682b      	ldr	r3, [r5, #0]
 80a1c00:	4602      	mov	r2, r0
 80a1c02:	4621      	mov	r1, r4
 80a1c04:	4628      	mov	r0, r5
    }
 80a1c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1c0a:	68db      	ldr	r3, [r3, #12]
 80a1c0c:	4718      	bx	r3
    }
 80a1c0e:	bd70      	pop	{r4, r5, r6, pc}

080a1c10 <_ZN5Print5printEPKc>:
 80a1c10:	b508      	push	{r3, lr}
 80a1c12:	f7ff ffed 	bl	80a1bf0 <_ZN5Print5writeEPKc>
 80a1c16:	bd08      	pop	{r3, pc}

080a1c18 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1c18:	6803      	ldr	r3, [r0, #0]
 80a1c1a:	689b      	ldr	r3, [r3, #8]
 80a1c1c:	4718      	bx	r3

080a1c1e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1c1e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1c20:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1c22:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1c24:	f7ff fff8 	bl	80a1c18 <_ZN5Print5printEc>
  n += print('\n');
 80a1c28:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1c2a:	4604      	mov	r4, r0
  n += print('\n');
 80a1c2c:	4628      	mov	r0, r5
 80a1c2e:	f7ff fff3 	bl	80a1c18 <_ZN5Print5printEc>
  return n;
}
 80a1c32:	4420      	add	r0, r4
 80a1c34:	bd38      	pop	{r3, r4, r5, pc}

080a1c36 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1c36:	b538      	push	{r3, r4, r5, lr}
 80a1c38:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1c3a:	f7ff ffd9 	bl	80a1bf0 <_ZN5Print5writeEPKc>
 80a1c3e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1c40:	4628      	mov	r0, r5
 80a1c42:	f7ff ffec 	bl	80a1c1e <_ZN5Print7printlnEv>
  return n;
}
 80a1c46:	4420      	add	r0, r4
 80a1c48:	bd38      	pop	{r3, r4, r5, pc}

080a1c4a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1c4a:	2a01      	cmp	r2, #1
 80a1c4c:	bf98      	it	ls
 80a1c4e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1c50:	b530      	push	{r4, r5, lr}
 80a1c52:	460b      	mov	r3, r1
 80a1c54:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1c56:	2100      	movs	r1, #0
 80a1c58:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1c5c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a1c60:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a1c64:	fb05 3312 	mls	r3, r5, r2, r3
 80a1c68:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1c6a:	2b09      	cmp	r3, #9
 80a1c6c:	bf94      	ite	ls
 80a1c6e:	3330      	addls	r3, #48	; 0x30
 80a1c70:	3337      	addhi	r3, #55	; 0x37
 80a1c72:	b2db      	uxtb	r3, r3
 80a1c74:	4621      	mov	r1, r4
 80a1c76:	f804 3901 	strb.w	r3, [r4], #-1
 80a1c7a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1c7c:	2d00      	cmp	r5, #0
 80a1c7e:	d1ef      	bne.n	80a1c60 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1c80:	f7ff ffb6 	bl	80a1bf0 <_ZN5Print5writeEPKc>
}
 80a1c84:	b00b      	add	sp, #44	; 0x2c
 80a1c86:	bd30      	pop	{r4, r5, pc}

080a1c88 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1c8c:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1c8e:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1c90:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1c92:	4617      	mov	r7, r2
 80a1c94:	461e      	mov	r6, r3
 80a1c96:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1c9a:	f001 fa81 	bl	80a31a0 <__aeabi_dcmpun>
 80a1c9e:	b108      	cbz	r0, 80a1ca4 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1ca0:	494d      	ldr	r1, [pc, #308]	; (80a1dd8 <_ZN5Print10printFloatEdh+0x150>)
 80a1ca2:	e012      	b.n	80a1cca <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1ca4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a1ca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a1cac:	4b4b      	ldr	r3, [pc, #300]	; (80a1ddc <_ZN5Print10printFloatEdh+0x154>)
 80a1cae:	4638      	mov	r0, r7
 80a1cb0:	4621      	mov	r1, r4
 80a1cb2:	f001 fa75 	bl	80a31a0 <__aeabi_dcmpun>
 80a1cb6:	b968      	cbnz	r0, 80a1cd4 <_ZN5Print10printFloatEdh+0x4c>
 80a1cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a1cbc:	4b47      	ldr	r3, [pc, #284]	; (80a1ddc <_ZN5Print10printFloatEdh+0x154>)
 80a1cbe:	4638      	mov	r0, r7
 80a1cc0:	4621      	mov	r1, r4
 80a1cc2:	f001 fa4f 	bl	80a3164 <__aeabi_dcmple>
 80a1cc6:	b928      	cbnz	r0, 80a1cd4 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1cc8:	4945      	ldr	r1, [pc, #276]	; (80a1de0 <_ZN5Print10printFloatEdh+0x158>)
 80a1cca:	4640      	mov	r0, r8
 80a1ccc:	f7ff ff90 	bl	80a1bf0 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a1cd4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1cd8:	4b42      	ldr	r3, [pc, #264]	; (80a1de4 <_ZN5Print10printFloatEdh+0x15c>)
 80a1cda:	4638      	mov	r0, r7
 80a1cdc:	4631      	mov	r1, r6
 80a1cde:	f001 fa55 	bl	80a318c <__aeabi_dcmpgt>
 80a1ce2:	b108      	cbz	r0, 80a1ce8 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1ce4:	4940      	ldr	r1, [pc, #256]	; (80a1de8 <_ZN5Print10printFloatEdh+0x160>)
 80a1ce6:	e7f0      	b.n	80a1cca <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a1ce8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1cec:	4b3f      	ldr	r3, [pc, #252]	; (80a1dec <_ZN5Print10printFloatEdh+0x164>)
 80a1cee:	4638      	mov	r0, r7
 80a1cf0:	4631      	mov	r1, r6
 80a1cf2:	f001 fa2d 	bl	80a3150 <__aeabi_dcmplt>
 80a1cf6:	2800      	cmp	r0, #0
 80a1cf8:	d1f4      	bne.n	80a1ce4 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a1cfa:	2200      	movs	r2, #0
 80a1cfc:	2300      	movs	r3, #0
 80a1cfe:	4638      	mov	r0, r7
 80a1d00:	4631      	mov	r1, r6
 80a1d02:	f001 fa25 	bl	80a3150 <__aeabi_dcmplt>
 80a1d06:	b138      	cbz	r0, 80a1d18 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a1d08:	212d      	movs	r1, #45	; 0x2d
 80a1d0a:	4640      	mov	r0, r8
 80a1d0c:	f7ff ff84 	bl	80a1c18 <_ZN5Print5printEc>
     number = -number;
 80a1d10:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a1d14:	4604      	mov	r4, r0
 80a1d16:	e000      	b.n	80a1d1a <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1d18:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1d1a:	4935      	ldr	r1, [pc, #212]	; (80a1df0 <_ZN5Print10printFloatEdh+0x168>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1d1c:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1d20:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a1d22:	fa5f f389 	uxtb.w	r3, r9
 80a1d26:	429d      	cmp	r5, r3
 80a1d28:	d906      	bls.n	80a1d38 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a1d2a:	2200      	movs	r2, #0
 80a1d2c:	4b31      	ldr	r3, [pc, #196]	; (80a1df4 <_ZN5Print10printFloatEdh+0x16c>)
 80a1d2e:	f001 f8c7 	bl	80a2ec0 <__aeabi_ddiv>
 80a1d32:	f109 0901 	add.w	r9, r9, #1
 80a1d36:	e7f4      	b.n	80a1d22 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a1d38:	463a      	mov	r2, r7
 80a1d3a:	4633      	mov	r3, r6
 80a1d3c:	f000 fde4 	bl	80a2908 <__adddf3>
 80a1d40:	460f      	mov	r7, r1
 80a1d42:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1d44:	f001 fa6a 	bl	80a321c <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1d48:	220a      	movs	r2, #10
 80a1d4a:	4601      	mov	r1, r0
 80a1d4c:	4681      	mov	r9, r0
 80a1d4e:	4640      	mov	r0, r8
 80a1d50:	f7ff ff7b 	bl	80a1c4a <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1d54:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a1d56:	b3e5      	cbz	r5, 80a1dd2 <_ZN5Print10printFloatEdh+0x14a>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a1d58:	4648      	mov	r0, r9
 80a1d5a:	f000 ff11 	bl	80a2b80 <__aeabi_ui2d>
 80a1d5e:	4602      	mov	r2, r0
 80a1d60:	460b      	mov	r3, r1
 80a1d62:	4630      	mov	r0, r6
 80a1d64:	4639      	mov	r1, r7
 80a1d66:	f000 fdcd 	bl	80a2904 <__aeabi_dsub>
 80a1d6a:	4606      	mov	r6, r0
 80a1d6c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1d6e:	4640      	mov	r0, r8
 80a1d70:	4921      	ldr	r1, [pc, #132]	; (80a1df8 <_ZN5Print10printFloatEdh+0x170>)
 80a1d72:	f7ff ff3d 	bl	80a1bf0 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a1d76:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a1d78:	2200      	movs	r2, #0
 80a1d7a:	4b1e      	ldr	r3, [pc, #120]	; (80a1df4 <_ZN5Print10printFloatEdh+0x16c>)
 80a1d7c:	4630      	mov	r0, r6
 80a1d7e:	4639      	mov	r1, r7
 80a1d80:	f000 ff74 	bl	80a2c6c <__aeabi_dmul>
 80a1d84:	4606      	mov	r6, r0
 80a1d86:	460f      	mov	r7, r1
    int toPrint = int(remainder);
 80a1d88:	f001 fa20 	bl	80a31cc <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a1d8c:	f1b0 0a00 	subs.w	sl, r0, #0
 80a1d90:	da07      	bge.n	80a1da2 <_ZN5Print10printFloatEdh+0x11a>
            t = print('-');
 80a1d92:	212d      	movs	r1, #45	; 0x2d
 80a1d94:	4640      	mov	r0, r8
 80a1d96:	f7ff ff3f 	bl	80a1c18 <_ZN5Print5printEc>
            val = -n;
 80a1d9a:	f1ca 0100 	rsb	r1, sl, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 80a1d9e:	4681      	mov	r9, r0
 80a1da0:	e002      	b.n	80a1da8 <_ZN5Print10printFloatEdh+0x120>
            val = -n;
        } else {
            val = n;
 80a1da2:	4651      	mov	r1, sl
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 80a1da4:	f04f 0900 	mov.w	r9, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1da8:	220a      	movs	r2, #10
 80a1daa:	4640      	mov	r0, r8
 80a1dac:	f7ff ff4d 	bl	80a1c4a <_ZN5Print11printNumberEmh>
    n += print(toPrint);
 80a1db0:	4448      	add	r0, r9
 80a1db2:	4404      	add	r4, r0
    remainder -= toPrint;
 80a1db4:	4650      	mov	r0, sl
 80a1db6:	f000 fef3 	bl	80a2ba0 <__aeabi_i2d>
 80a1dba:	4602      	mov	r2, r0
 80a1dbc:	460b      	mov	r3, r1
 80a1dbe:	4630      	mov	r0, r6
 80a1dc0:	4639      	mov	r1, r7
 80a1dc2:	f000 fd9f 	bl	80a2904 <__aeabi_dsub>
 80a1dc6:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1dc8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a1dcc:	4606      	mov	r6, r0
 80a1dce:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1dd0:	d1d2      	bne.n	80a1d78 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1dd2:	4620      	mov	r0, r4
 80a1dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1dd8:	080a34c4 	.word	0x080a34c4
 80a1ddc:	7fefffff 	.word	0x7fefffff
 80a1de0:	080a34ce 	.word	0x080a34ce
 80a1de4:	41efffff 	.word	0x41efffff
 80a1de8:	080a34c8 	.word	0x080a34c8
 80a1dec:	c1efffff 	.word	0xc1efffff
 80a1df0:	3fe00000 	.word	0x3fe00000
 80a1df4:	40240000 	.word	0x40240000
 80a1df8:	080a34cc 	.word	0x080a34cc

080a1dfc <_ZN5Print5printEdi>:
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a1dfc:	f89d 1000 	ldrb.w	r1, [sp]
 80a1e00:	9100      	str	r1, [sp, #0]
 80a1e02:	f7ff bf41 	b.w	80a1c88 <_ZN5Print10printFloatEdh>

080a1e06 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1e06:	b510      	push	{r4, lr}
 80a1e08:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1e0a:	f7ff fd90 	bl	80a192e <_ZNSt14_Function_baseD1Ev>
 80a1e0e:	4620      	mov	r0, r4
 80a1e10:	bd10      	pop	{r4, pc}
	...

080a1e14 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1e14:	4803      	ldr	r0, [pc, #12]	; (80a1e24 <_GLOBAL__sub_I_RGB+0x10>)
 80a1e16:	2300      	movs	r3, #0
 80a1e18:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1e1a:	4a03      	ldr	r2, [pc, #12]	; (80a1e28 <_GLOBAL__sub_I_RGB+0x14>)
 80a1e1c:	4903      	ldr	r1, [pc, #12]	; (80a1e2c <_GLOBAL__sub_I_RGB+0x18>)
 80a1e1e:	f000 bc03 	b.w	80a2628 <__aeabi_atexit>
 80a1e22:	bf00      	nop
 80a1e24:	200000b4 	.word	0x200000b4
 80a1e28:	20000078 	.word	0x20000078
 80a1e2c:	080a1e07 	.word	0x080a1e07

080a1e30 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1e30:	b570      	push	{r4, r5, r6, lr}
 80a1e32:	4604      	mov	r4, r0
 80a1e34:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1e36:	2500      	movs	r5, #0
 80a1e38:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1e3c:	f7ff fbae 	bl	80a159c <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a1e40:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a1e42:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a1e44:	f7ff fc3c 	bl	80a16c0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1e48:	6065      	str	r5, [r4, #4]
}
 80a1e4a:	4620      	mov	r0, r4
 80a1e4c:	bd70      	pop	{r4, r5, r6, pc}

080a1e4e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a1e4e:	7800      	ldrb	r0, [r0, #0]
 80a1e50:	f7ff bc3e 	b.w	80a16d0 <HAL_SPI_Is_Enabled>

080a1e54 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1e54:	b510      	push	{r4, lr}
 80a1e56:	4604      	mov	r4, r0
{
	free(buffer);
 80a1e58:	6800      	ldr	r0, [r0, #0]
 80a1e5a:	f7ff fd55 	bl	80a1908 <free>
}
 80a1e5e:	4620      	mov	r0, r4
 80a1e60:	bd10      	pop	{r4, pc}

080a1e62 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1e62:	b510      	push	{r4, lr}
 80a1e64:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1e66:	6800      	ldr	r0, [r0, #0]
 80a1e68:	b108      	cbz	r0, 80a1e6e <_ZN6String10invalidateEv+0xc>
 80a1e6a:	f7ff fd4d 	bl	80a1908 <free>
	buffer = NULL;
 80a1e6e:	2300      	movs	r3, #0
 80a1e70:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1e72:	60a3      	str	r3, [r4, #8]
 80a1e74:	6063      	str	r3, [r4, #4]
 80a1e76:	bd10      	pop	{r4, pc}

080a1e78 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1e78:	b538      	push	{r3, r4, r5, lr}
 80a1e7a:	4604      	mov	r4, r0
 80a1e7c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1e7e:	6800      	ldr	r0, [r0, #0]
 80a1e80:	3101      	adds	r1, #1
 80a1e82:	f7ff fd49 	bl	80a1918 <realloc>
	if (newbuffer) {
 80a1e86:	b110      	cbz	r0, 80a1e8e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1e88:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1e8c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1e8e:	bd38      	pop	{r3, r4, r5, pc}

080a1e90 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1e90:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1e92:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1e94:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1e96:	b113      	cbz	r3, 80a1e9e <_ZN6String7reserveEj+0xe>
 80a1e98:	6843      	ldr	r3, [r0, #4]
 80a1e9a:	428b      	cmp	r3, r1
 80a1e9c:	d207      	bcs.n	80a1eae <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1e9e:	4620      	mov	r0, r4
 80a1ea0:	f7ff ffea 	bl	80a1e78 <_ZN6String12changeBufferEj>
 80a1ea4:	b120      	cbz	r0, 80a1eb0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1ea6:	68a3      	ldr	r3, [r4, #8]
 80a1ea8:	b90b      	cbnz	r3, 80a1eae <_ZN6String7reserveEj+0x1e>
 80a1eaa:	6822      	ldr	r2, [r4, #0]
 80a1eac:	7013      	strb	r3, [r2, #0]
 80a1eae:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1eb0:	bd10      	pop	{r4, pc}

080a1eb2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1eb2:	b570      	push	{r4, r5, r6, lr}
 80a1eb4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1eb6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1eb8:	4604      	mov	r4, r0
 80a1eba:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1ebc:	f7ff ffe8 	bl	80a1e90 <_ZN6String7reserveEj>
 80a1ec0:	b918      	cbnz	r0, 80a1eca <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1ec2:	4620      	mov	r0, r4
 80a1ec4:	f7ff ffcd 	bl	80a1e62 <_ZN6String10invalidateEv>
		return *this;
 80a1ec8:	e009      	b.n	80a1ede <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1eca:	462a      	mov	r2, r5
 80a1ecc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1ece:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1ed0:	6820      	ldr	r0, [r4, #0]
 80a1ed2:	f001 f9d1 	bl	80a3278 <memcpy>
	buffer[len] = 0;
 80a1ed6:	6822      	ldr	r2, [r4, #0]
 80a1ed8:	68a3      	ldr	r3, [r4, #8]
 80a1eda:	2100      	movs	r1, #0
 80a1edc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1ede:	4620      	mov	r0, r4
 80a1ee0:	bd70      	pop	{r4, r5, r6, pc}

080a1ee2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1ee2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1ee4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1ee6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1ee8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1eea:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1eec:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1eee:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1ef0:	460d      	mov	r5, r1
 80a1ef2:	b139      	cbz	r1, 80a1f04 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1ef4:	4608      	mov	r0, r1
 80a1ef6:	f001 fa05 	bl	80a3304 <strlen>
 80a1efa:	4629      	mov	r1, r5
 80a1efc:	4602      	mov	r2, r0
 80a1efe:	4620      	mov	r0, r4
 80a1f00:	f7ff ffd7 	bl	80a1eb2 <_ZN6String4copyEPKcj>
}
 80a1f04:	4620      	mov	r0, r4
 80a1f06:	bd38      	pop	{r3, r4, r5, pc}

080a1f08 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1f08:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a1f0a:	b510      	push	{r4, lr}
 80a1f0c:	460b      	mov	r3, r1
 80a1f0e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1f10:	d007      	beq.n	80a1f22 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1f12:	6809      	ldr	r1, [r1, #0]
 80a1f14:	b119      	cbz	r1, 80a1f1e <_ZN6StringaSERKS_+0x16>
 80a1f16:	689a      	ldr	r2, [r3, #8]
 80a1f18:	f7ff ffcb 	bl	80a1eb2 <_ZN6String4copyEPKcj>
 80a1f1c:	e001      	b.n	80a1f22 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a1f1e:	f7ff ffa0 	bl	80a1e62 <_ZN6String10invalidateEv>

	return *this;
}
 80a1f22:	4620      	mov	r0, r4
 80a1f24:	bd10      	pop	{r4, pc}

080a1f26 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a1f26:	b510      	push	{r4, lr}
 80a1f28:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1f2a:	2300      	movs	r3, #0
 80a1f2c:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1f2e:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1f30:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1f32:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1f34:	f7ff ffe8 	bl	80a1f08 <_ZN6StringaSERKS_>
}
 80a1f38:	4620      	mov	r0, r4
 80a1f3a:	bd10      	pop	{r4, pc}

080a1f3c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1f3c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1f3e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1f40:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1f42:	b912      	cbnz	r2, 80a1f4a <_ZNK6String6equalsEPKc+0xe>
 80a1f44:	b919      	cbnz	r1, 80a1f4e <_ZNK6String6equalsEPKc+0x12>
 80a1f46:	2001      	movs	r0, #1
 80a1f48:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a1f4a:	b911      	cbnz	r1, 80a1f52 <_ZNK6String6equalsEPKc+0x16>
 80a1f4c:	6803      	ldr	r3, [r0, #0]
 80a1f4e:	7818      	ldrb	r0, [r3, #0]
 80a1f50:	e002      	b.n	80a1f58 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a1f52:	6800      	ldr	r0, [r0, #0]
 80a1f54:	f001 f9cc 	bl	80a32f0 <strcmp>
 80a1f58:	fab0 f080 	clz	r0, r0
 80a1f5c:	0940      	lsrs	r0, r0, #5
}
 80a1f5e:	bd08      	pop	{r3, pc}

080a1f60 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a1f60:	b510      	push	{r4, lr}
 80a1f62:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a1f64:	6800      	ldr	r0, [r0, #0]
 80a1f66:	b118      	cbz	r0, 80a1f70 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a1f68:	f7ff fcce 	bl	80a1908 <free>
            wakeupSource_ = nullptr;
 80a1f6c:	2300      	movs	r3, #0
 80a1f6e:	6023      	str	r3, [r4, #0]
 80a1f70:	bd10      	pop	{r4, pc}

080a1f72 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1f72:	b510      	push	{r4, lr}
 80a1f74:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a1f76:	f7ff fff3 	bl	80a1f60 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1f7a:	4620      	mov	r0, r4
 80a1f7c:	bd10      	pop	{r4, pc}
	...

080a1f80 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1f84:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1f86:	4c08      	ldr	r4, [pc, #32]	; (80a1fa8 <_GLOBAL__sub_I_System+0x28>)
 80a1f88:	2000      	movs	r0, #0
 80a1f8a:	6020      	str	r0, [r4, #0]
 80a1f8c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1f8e:	71a0      	strb	r0, [r4, #6]
 80a1f90:	8120      	strh	r0, [r4, #8]
 80a1f92:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1f94:	f7ff fc24 	bl	80a17e0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1f98:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1f9e:	4a03      	ldr	r2, [pc, #12]	; (80a1fac <_GLOBAL__sub_I_System+0x2c>)
 80a1fa0:	4903      	ldr	r1, [pc, #12]	; (80a1fb0 <_GLOBAL__sub_I_System+0x30>)
 80a1fa2:	f000 bb41 	b.w	80a2628 <__aeabi_atexit>
 80a1fa6:	bf00      	nop
 80a1fa8:	200000c4 	.word	0x200000c4
 80a1fac:	20000078 	.word	0x20000078
 80a1fb0:	080a1f73 	.word	0x080a1f73

080a1fb4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1fb4:	4b02      	ldr	r3, [pc, #8]	; (80a1fc0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1fb6:	681a      	ldr	r2, [r3, #0]
 80a1fb8:	4b02      	ldr	r3, [pc, #8]	; (80a1fc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1fba:	601a      	str	r2, [r3, #0]
 80a1fbc:	4770      	bx	lr
 80a1fbe:	bf00      	nop
 80a1fc0:	2000000c 	.word	0x2000000c
 80a1fc4:	200000d0 	.word	0x200000d0

080a1fc8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1fc8:	4770      	bx	lr

080a1fca <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1fca:	7441      	strb	r1, [r0, #17]
 80a1fcc:	4770      	bx	lr

080a1fce <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1fce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1fd0:	7c00      	ldrb	r0, [r0, #16]
 80a1fd2:	f7ff fbbd 	bl	80a1750 <HAL_USART_Available_Data_For_Write>
}
 80a1fd6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1fda:	bd08      	pop	{r3, pc}

080a1fdc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1fdc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1fde:	7c00      	ldrb	r0, [r0, #16]
 80a1fe0:	f7ff fb8e 	bl	80a1700 <HAL_USART_Available_Data>
}
 80a1fe4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1fe8:	bd08      	pop	{r3, pc}

080a1fea <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1fea:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1fec:	7c00      	ldrb	r0, [r0, #16]
 80a1fee:	f7ff fb97 	bl	80a1720 <HAL_USART_Peek_Data>
}
 80a1ff2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1ff6:	bf28      	it	cs
 80a1ff8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1ffc:	bd08      	pop	{r3, pc}

080a1ffe <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1ffe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2000:	7c00      	ldrb	r0, [r0, #16]
 80a2002:	f7ff fb85 	bl	80a1710 <HAL_USART_Read_Data>
}
 80a2006:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a200a:	bf28      	it	cs
 80a200c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2010:	bd08      	pop	{r3, pc}

080a2012 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2012:	7c00      	ldrb	r0, [r0, #16]
 80a2014:	f7ff bb8c 	b.w	80a1730 <HAL_USART_Flush_Data>

080a2018 <_ZN11USARTSerialD0Ev>:
 80a2018:	b510      	push	{r4, lr}
 80a201a:	4604      	mov	r4, r0
 80a201c:	2114      	movs	r1, #20
 80a201e:	f000 fb08 	bl	80a2632 <_ZdlPvj>
 80a2022:	4620      	mov	r0, r4
 80a2024:	bd10      	pop	{r4, pc}

080a2026 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2026:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2028:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a202a:	4604      	mov	r4, r0
 80a202c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a202e:	b925      	cbnz	r5, 80a203a <_ZN11USARTSerial5writeEh+0x14>
 80a2030:	7c00      	ldrb	r0, [r0, #16]
 80a2032:	f7ff fb8d 	bl	80a1750 <HAL_USART_Available_Data_For_Write>
 80a2036:	2800      	cmp	r0, #0
 80a2038:	dd05      	ble.n	80a2046 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a203a:	4631      	mov	r1, r6
 80a203c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a203e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2042:	f7ff bb55 	b.w	80a16f0 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2046:	4628      	mov	r0, r5
 80a2048:	bd70      	pop	{r4, r5, r6, pc}
	...

080a204c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a204c:	b510      	push	{r4, lr}
 80a204e:	4604      	mov	r4, r0
 80a2050:	4608      	mov	r0, r1
 80a2052:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2054:	2200      	movs	r2, #0
 80a2056:	6062      	str	r2, [r4, #4]
 80a2058:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a205c:	60a2      	str	r2, [r4, #8]
 80a205e:	4a05      	ldr	r2, [pc, #20]	; (80a2074 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2060:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2062:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2064:	2201      	movs	r2, #1
 80a2066:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2068:	461a      	mov	r2, r3
 80a206a:	f7ff fb39 	bl	80a16e0 <HAL_USART_Init>
}
 80a206e:	4620      	mov	r0, r4
 80a2070:	bd10      	pop	{r4, pc}
 80a2072:	bf00      	nop
 80a2074:	080a3504 	.word	0x080a3504

080a2078 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2078:	7c00      	ldrb	r0, [r0, #16]
 80a207a:	f7ff bb61 	b.w	80a1740 <HAL_USART_Is_Enabled>
	...

080a2080 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2080:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2082:	4d0c      	ldr	r5, [pc, #48]	; (80a20b4 <_Z22__fetch_global_Serial1v+0x34>)
 80a2084:	6829      	ldr	r1, [r5, #0]
 80a2086:	f011 0401 	ands.w	r4, r1, #1
 80a208a:	d111      	bne.n	80a20b0 <_Z22__fetch_global_Serial1v+0x30>
 80a208c:	4628      	mov	r0, r5
 80a208e:	f7fe f808 	bl	80a00a2 <__cxa_guard_acquire>
 80a2092:	b168      	cbz	r0, 80a20b0 <_Z22__fetch_global_Serial1v+0x30>
 80a2094:	4a08      	ldr	r2, [pc, #32]	; (80a20b8 <_Z22__fetch_global_Serial1v+0x38>)
 80a2096:	4621      	mov	r1, r4
 80a2098:	4b08      	ldr	r3, [pc, #32]	; (80a20bc <_Z22__fetch_global_Serial1v+0x3c>)
 80a209a:	4809      	ldr	r0, [pc, #36]	; (80a20c0 <_Z22__fetch_global_Serial1v+0x40>)
 80a209c:	f7ff ffd6 	bl	80a204c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a20a0:	4628      	mov	r0, r5
 80a20a2:	f7fe f803 	bl	80a00ac <__cxa_guard_release>
 80a20a6:	4a07      	ldr	r2, [pc, #28]	; (80a20c4 <_Z22__fetch_global_Serial1v+0x44>)
 80a20a8:	4907      	ldr	r1, [pc, #28]	; (80a20c8 <_Z22__fetch_global_Serial1v+0x48>)
 80a20aa:	4805      	ldr	r0, [pc, #20]	; (80a20c0 <_Z22__fetch_global_Serial1v+0x40>)
 80a20ac:	f000 fabc 	bl	80a2628 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a20b0:	4803      	ldr	r0, [pc, #12]	; (80a20c0 <_Z22__fetch_global_Serial1v+0x40>)
 80a20b2:	bd38      	pop	{r3, r4, r5, pc}
 80a20b4:	2000016c 	.word	0x2000016c
 80a20b8:	20000170 	.word	0x20000170
 80a20bc:	200000e8 	.word	0x200000e8
 80a20c0:	200000d4 	.word	0x200000d4
 80a20c4:	20000078 	.word	0x20000078
 80a20c8:	080a1fc9 	.word	0x080a1fc9

080a20cc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a20cc:	7441      	strb	r1, [r0, #17]
 80a20ce:	4770      	bx	lr

080a20d0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a20d0:	4770      	bx	lr

080a20d2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a20d2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a20d4:	2100      	movs	r1, #0
 80a20d6:	7c00      	ldrb	r0, [r0, #16]
 80a20d8:	f7ff fb62 	bl	80a17a0 <HAL_USB_USART_Receive_Data>
}
 80a20dc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a20e0:	bf28      	it	cs
 80a20e2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a20e6:	bd08      	pop	{r3, pc}

080a20e8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a20e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a20ea:	2101      	movs	r1, #1
 80a20ec:	7c00      	ldrb	r0, [r0, #16]
 80a20ee:	f7ff fb57 	bl	80a17a0 <HAL_USB_USART_Receive_Data>
}
 80a20f2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a20f6:	bf28      	it	cs
 80a20f8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a20fc:	bd08      	pop	{r3, pc}

080a20fe <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a20fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2100:	7c00      	ldrb	r0, [r0, #16]
 80a2102:	f7ff fb45 	bl	80a1790 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2106:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a210a:	bd08      	pop	{r3, pc}

080a210c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a210c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a210e:	7c00      	ldrb	r0, [r0, #16]
 80a2110:	f7ff fb36 	bl	80a1780 <HAL_USB_USART_Available_Data>
}
 80a2114:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2118:	bd08      	pop	{r3, pc}

080a211a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a211a:	7c00      	ldrb	r0, [r0, #16]
 80a211c:	f7ff bb50 	b.w	80a17c0 <HAL_USB_USART_Flush_Data>

080a2120 <_ZN9USBSerialD0Ev>:
 80a2120:	b510      	push	{r4, lr}
 80a2122:	4604      	mov	r4, r0
 80a2124:	2114      	movs	r1, #20
 80a2126:	f000 fa84 	bl	80a2632 <_ZdlPvj>
 80a212a:	4620      	mov	r0, r4
 80a212c:	bd10      	pop	{r4, pc}

080a212e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a212e:	b538      	push	{r3, r4, r5, lr}
 80a2130:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2132:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2134:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2136:	f7ff fb2b 	bl	80a1790 <HAL_USB_USART_Available_Data_For_Write>
 80a213a:	2800      	cmp	r0, #0
 80a213c:	dc01      	bgt.n	80a2142 <_ZN9USBSerial5writeEh+0x14>
 80a213e:	7c60      	ldrb	r0, [r4, #17]
 80a2140:	b128      	cbz	r0, 80a214e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2142:	4629      	mov	r1, r5
 80a2144:	7c20      	ldrb	r0, [r4, #16]
 80a2146:	f7ff fb33 	bl	80a17b0 <HAL_USB_USART_Send_Data>
 80a214a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a214e:	bd38      	pop	{r3, r4, r5, pc}

080a2150 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2150:	b510      	push	{r4, lr}
 80a2152:	4604      	mov	r4, r0
 80a2154:	2300      	movs	r3, #0
 80a2156:	6063      	str	r3, [r4, #4]
 80a2158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a215c:	60a3      	str	r3, [r4, #8]
 80a215e:	4b05      	ldr	r3, [pc, #20]	; (80a2174 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2160:	4608      	mov	r0, r1
 80a2162:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2164:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2166:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2168:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a216a:	4611      	mov	r1, r2
 80a216c:	f7ff faf8 	bl	80a1760 <HAL_USB_USART_Init>
}
 80a2170:	4620      	mov	r0, r4
 80a2172:	bd10      	pop	{r4, pc}
 80a2174:	080a3534 	.word	0x080a3534

080a2178 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2178:	2200      	movs	r2, #0
 80a217a:	7c00      	ldrb	r0, [r0, #16]
 80a217c:	f7ff baf8 	b.w	80a1770 <HAL_USB_USART_Begin>

080a2180 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2180:	b510      	push	{r4, lr}
 80a2182:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2184:	2214      	movs	r2, #20
 80a2186:	2100      	movs	r1, #0
 80a2188:	f001 f881 	bl	80a328e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a218c:	4b05      	ldr	r3, [pc, #20]	; (80a21a4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a218e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2190:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2192:	4b05      	ldr	r3, [pc, #20]	; (80a21a8 <_Z19acquireSerialBufferv+0x28>)
 80a2194:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2196:	f240 1301 	movw	r3, #257	; 0x101
 80a219a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a219c:	2381      	movs	r3, #129	; 0x81
 80a219e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a21a0:	bd10      	pop	{r4, pc}
 80a21a2:	bf00      	nop
 80a21a4:	20000279 	.word	0x20000279
 80a21a8:	200001f8 	.word	0x200001f8

080a21ac <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a21ac:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a21ae:	4d0e      	ldr	r5, [pc, #56]	; (80a21e8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a21b0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a21b2:	a801      	add	r0, sp, #4
 80a21b4:	f7ff ffe4 	bl	80a2180 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a21b8:	6829      	ldr	r1, [r5, #0]
 80a21ba:	f011 0401 	ands.w	r4, r1, #1
 80a21be:	d110      	bne.n	80a21e2 <_Z16_fetch_usbserialv+0x36>
 80a21c0:	4628      	mov	r0, r5
 80a21c2:	f7fd ff6e 	bl	80a00a2 <__cxa_guard_acquire>
 80a21c6:	b160      	cbz	r0, 80a21e2 <_Z16_fetch_usbserialv+0x36>
 80a21c8:	aa01      	add	r2, sp, #4
 80a21ca:	4621      	mov	r1, r4
 80a21cc:	4807      	ldr	r0, [pc, #28]	; (80a21ec <_Z16_fetch_usbserialv+0x40>)
 80a21ce:	f7ff ffbf 	bl	80a2150 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a21d2:	4628      	mov	r0, r5
 80a21d4:	f7fd ff6a 	bl	80a00ac <__cxa_guard_release>
 80a21d8:	4a05      	ldr	r2, [pc, #20]	; (80a21f0 <_Z16_fetch_usbserialv+0x44>)
 80a21da:	4906      	ldr	r1, [pc, #24]	; (80a21f4 <_Z16_fetch_usbserialv+0x48>)
 80a21dc:	4803      	ldr	r0, [pc, #12]	; (80a21ec <_Z16_fetch_usbserialv+0x40>)
 80a21de:	f000 fa23 	bl	80a2628 <__aeabi_atexit>
	return _usbserial;
}
 80a21e2:	4802      	ldr	r0, [pc, #8]	; (80a21ec <_Z16_fetch_usbserialv+0x40>)
 80a21e4:	b007      	add	sp, #28
 80a21e6:	bd30      	pop	{r4, r5, pc}
 80a21e8:	200001f4 	.word	0x200001f4
 80a21ec:	2000037c 	.word	0x2000037c
 80a21f0:	20000078 	.word	0x20000078
 80a21f4:	080a20d1 	.word	0x080a20d1

080a21f8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a21f8:	b510      	push	{r4, lr}
 80a21fa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a21fc:	2214      	movs	r2, #20
 80a21fe:	2100      	movs	r1, #0
 80a2200:	f001 f845 	bl	80a328e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2204:	4b05      	ldr	r3, [pc, #20]	; (80a221c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2206:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2208:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a220a:	4b05      	ldr	r3, [pc, #20]	; (80a2220 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a220c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a220e:	f240 1301 	movw	r3, #257	; 0x101
 80a2212:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2214:	2381      	movs	r3, #129	; 0x81
 80a2216:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2218:	bd10      	pop	{r4, pc}
 80a221a:	bf00      	nop
 80a221c:	2000042c 	.word	0x2000042c
 80a2220:	20000394 	.word	0x20000394

080a2224 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2224:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2226:	4c0e      	ldr	r4, [pc, #56]	; (80a2260 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2228:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a222a:	a801      	add	r0, sp, #4
 80a222c:	f7ff ffe4 	bl	80a21f8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2230:	6823      	ldr	r3, [r4, #0]
 80a2232:	07db      	lsls	r3, r3, #31
 80a2234:	d410      	bmi.n	80a2258 <_Z17_fetch_usbserial1v+0x34>
 80a2236:	4620      	mov	r0, r4
 80a2238:	f7fd ff33 	bl	80a00a2 <__cxa_guard_acquire>
 80a223c:	b160      	cbz	r0, 80a2258 <_Z17_fetch_usbserial1v+0x34>
 80a223e:	aa01      	add	r2, sp, #4
 80a2240:	2101      	movs	r1, #1
 80a2242:	4808      	ldr	r0, [pc, #32]	; (80a2264 <_Z17_fetch_usbserial1v+0x40>)
 80a2244:	f7ff ff84 	bl	80a2150 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2248:	4620      	mov	r0, r4
 80a224a:	f7fd ff2f 	bl	80a00ac <__cxa_guard_release>
 80a224e:	4a06      	ldr	r2, [pc, #24]	; (80a2268 <_Z17_fetch_usbserial1v+0x44>)
 80a2250:	4906      	ldr	r1, [pc, #24]	; (80a226c <_Z17_fetch_usbserial1v+0x48>)
 80a2252:	4804      	ldr	r0, [pc, #16]	; (80a2264 <_Z17_fetch_usbserial1v+0x40>)
 80a2254:	f000 f9e8 	bl	80a2628 <__aeabi_atexit>
  return _usbserial1;
}
 80a2258:	4802      	ldr	r0, [pc, #8]	; (80a2264 <_Z17_fetch_usbserial1v+0x40>)
 80a225a:	b006      	add	sp, #24
 80a225c:	bd10      	pop	{r4, pc}
 80a225e:	bf00      	nop
 80a2260:	20000390 	.word	0x20000390
 80a2264:	20000418 	.word	0x20000418
 80a2268:	20000078 	.word	0x20000078
 80a226c:	080a20d1 	.word	0x080a20d1

080a2270 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2270:	2200      	movs	r2, #0
 80a2272:	4611      	mov	r1, r2
 80a2274:	6840      	ldr	r0, [r0, #4]
 80a2276:	f7ff bb07 	b.w	80a1888 <network_ready>

080a227a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a227a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a227c:	4616      	mov	r6, r2
 80a227e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2280:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2282:	460f      	mov	r7, r1
 80a2284:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a2286:	2100      	movs	r1, #0
 80a2288:	a803      	add	r0, sp, #12
 80a228a:	f001 f800 	bl	80a328e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a228e:	4630      	mov	r0, r6
 80a2290:	f001 f838 	bl	80a3304 <strlen>
 80a2294:	2500      	movs	r5, #0
 80a2296:	9500      	str	r5, [sp, #0]
 80a2298:	b281      	uxth	r1, r0
 80a229a:	687b      	ldr	r3, [r7, #4]
 80a229c:	aa03      	add	r2, sp, #12
 80a229e:	4630      	mov	r0, r6
 80a22a0:	f7ff fa96 	bl	80a17d0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a22a4:	b120      	cbz	r0, 80a22b0 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a22a6:	4629      	mov	r1, r5
 80a22a8:	4620      	mov	r0, r4
 80a22aa:	f7ff fbfb 	bl	80a1aa4 <_ZN9IPAddressC1Em>
 80a22ae:	e003      	b.n	80a22b8 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a22b0:	a903      	add	r1, sp, #12
 80a22b2:	4620      	mov	r0, r4
 80a22b4:	f7ff fbe4 	bl	80a1a80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a22b8:	4620      	mov	r0, r4
 80a22ba:	b009      	add	sp, #36	; 0x24
 80a22bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a22be <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a22be:	2200      	movs	r2, #0
 80a22c0:	4611      	mov	r1, r2
 80a22c2:	6840      	ldr	r0, [r0, #4]
 80a22c4:	f7ff bb00 	b.w	80a18c8 <network_listening>

080a22c8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a22c8:	2200      	movs	r2, #0
 80a22ca:	4611      	mov	r1, r2
 80a22cc:	6840      	ldr	r0, [r0, #4]
 80a22ce:	f7ff bb0b 	b.w	80a18e8 <network_get_listen_timeout>

080a22d2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a22d2:	2200      	movs	r2, #0
 80a22d4:	6840      	ldr	r0, [r0, #4]
 80a22d6:	f7ff baff 	b.w	80a18d8 <network_set_listen_timeout>

080a22da <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a22da:	2200      	movs	r2, #0
 80a22dc:	f081 0101 	eor.w	r1, r1, #1
 80a22e0:	6840      	ldr	r0, [r0, #4]
 80a22e2:	f7ff bae9 	b.w	80a18b8 <network_listen>

080a22e6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a22e6:	2300      	movs	r3, #0
 80a22e8:	461a      	mov	r2, r3
 80a22ea:	4619      	mov	r1, r3
 80a22ec:	6840      	ldr	r0, [r0, #4]
 80a22ee:	f7ff badb 	b.w	80a18a8 <network_off>

080a22f2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a22f2:	2300      	movs	r3, #0
 80a22f4:	461a      	mov	r2, r3
 80a22f6:	4619      	mov	r1, r3
 80a22f8:	6840      	ldr	r0, [r0, #4]
 80a22fa:	f7ff bacd 	b.w	80a1898 <network_on>

080a22fe <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a22fe:	2200      	movs	r2, #0
 80a2300:	4611      	mov	r1, r2
 80a2302:	6840      	ldr	r0, [r0, #4]
 80a2304:	f7ff bab0 	b.w	80a1868 <network_connecting>

080a2308 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2308:	2200      	movs	r2, #0
 80a230a:	2102      	movs	r1, #2
 80a230c:	6840      	ldr	r0, [r0, #4]
 80a230e:	f7ff bab3 	b.w	80a1878 <network_disconnect>

080a2312 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2312:	2300      	movs	r3, #0
 80a2314:	461a      	mov	r2, r3
 80a2316:	6840      	ldr	r0, [r0, #4]
 80a2318:	f7ff ba9e 	b.w	80a1858 <network_connect>

080a231c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a231c:	4b02      	ldr	r3, [pc, #8]	; (80a2328 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a231e:	2204      	movs	r2, #4
 80a2320:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2322:	4a02      	ldr	r2, [pc, #8]	; (80a232c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2324:	601a      	str	r2, [r3, #0]
 80a2326:	4770      	bx	lr
 80a2328:	20000530 	.word	0x20000530
 80a232c:	080a3564 	.word	0x080a3564

080a2330 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2330:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2332:	4b14      	ldr	r3, [pc, #80]	; (80a2384 <serialEventRun+0x54>)
 80a2334:	b133      	cbz	r3, 80a2344 <serialEventRun+0x14>
 80a2336:	f7ff ff39 	bl	80a21ac <_Z16_fetch_usbserialv>
 80a233a:	6803      	ldr	r3, [r0, #0]
 80a233c:	691b      	ldr	r3, [r3, #16]
 80a233e:	4798      	blx	r3
 80a2340:	2800      	cmp	r0, #0
 80a2342:	dc16      	bgt.n	80a2372 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2344:	4b10      	ldr	r3, [pc, #64]	; (80a2388 <serialEventRun+0x58>)
 80a2346:	b133      	cbz	r3, 80a2356 <serialEventRun+0x26>
 80a2348:	f7ff fe9a 	bl	80a2080 <_Z22__fetch_global_Serial1v>
 80a234c:	6803      	ldr	r3, [r0, #0]
 80a234e:	691b      	ldr	r3, [r3, #16]
 80a2350:	4798      	blx	r3
 80a2352:	2800      	cmp	r0, #0
 80a2354:	dc10      	bgt.n	80a2378 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2356:	4b0d      	ldr	r3, [pc, #52]	; (80a238c <serialEventRun+0x5c>)
 80a2358:	b10b      	cbz	r3, 80a235e <serialEventRun+0x2e>
 80a235a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a235e:	4b0c      	ldr	r3, [pc, #48]	; (80a2390 <serialEventRun+0x60>)
 80a2360:	b17b      	cbz	r3, 80a2382 <serialEventRun+0x52>
 80a2362:	f7ff ff5f 	bl	80a2224 <_Z17_fetch_usbserial1v>
 80a2366:	6803      	ldr	r3, [r0, #0]
 80a2368:	691b      	ldr	r3, [r3, #16]
 80a236a:	4798      	blx	r3
 80a236c:	2800      	cmp	r0, #0
 80a236e:	dc06      	bgt.n	80a237e <serialEventRun+0x4e>
 80a2370:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2372:	f3af 8000 	nop.w
 80a2376:	e7e5      	b.n	80a2344 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2378:	f3af 8000 	nop.w
 80a237c:	e7eb      	b.n	80a2356 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a237e:	f3af 8000 	nop.w
 80a2382:	bd08      	pop	{r3, pc}
	...

080a2394 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2394:	b508      	push	{r3, lr}
	serialEventRun();
 80a2396:	f7ff ffcb 	bl	80a2330 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a239a:	f7ff f91f 	bl	80a15dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a239e:	4b01      	ldr	r3, [pc, #4]	; (80a23a4 <_post_loop+0x10>)
 80a23a0:	6018      	str	r0, [r3, #0]
 80a23a2:	bd08      	pop	{r3, pc}
 80a23a4:	20000550 	.word	0x20000550

080a23a8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a23a8:	4802      	ldr	r0, [pc, #8]	; (80a23b4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a23aa:	4a03      	ldr	r2, [pc, #12]	; (80a23b8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a23ac:	4903      	ldr	r1, [pc, #12]	; (80a23bc <_Z33system_initialize_user_backup_ramv+0x14>)
 80a23ae:	1a12      	subs	r2, r2, r0
 80a23b0:	f000 bf62 	b.w	80a3278 <memcpy>
 80a23b4:	40024000 	.word	0x40024000
 80a23b8:	40024004 	.word	0x40024004
 80a23bc:	080a3630 	.word	0x080a3630

080a23c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a23c0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a23c2:	2300      	movs	r3, #0
 80a23c4:	9300      	str	r3, [sp, #0]
 80a23c6:	461a      	mov	r2, r3
 80a23c8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a23cc:	f7ff fa22 	bl	80a1814 <system_ctrl_set_result>
}
 80a23d0:	b003      	add	sp, #12
 80a23d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a23d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a23d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a23da:	8843      	ldrh	r3, [r0, #2]
 80a23dc:	2b0a      	cmp	r3, #10
 80a23de:	d008      	beq.n	80a23f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a23e0:	2b50      	cmp	r3, #80	; 0x50
 80a23e2:	d109      	bne.n	80a23f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a23e4:	4b09      	ldr	r3, [pc, #36]	; (80a240c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a23e6:	681b      	ldr	r3, [r3, #0]
 80a23e8:	b13b      	cbz	r3, 80a23fa <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a23ea:	b003      	add	sp, #12
 80a23ec:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a23f0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a23f2:	f7ff ffe5 	bl	80a23c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a23f6:	e006      	b.n	80a2406 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a23f8:	2300      	movs	r3, #0
 80a23fa:	9300      	str	r3, [sp, #0]
 80a23fc:	461a      	mov	r2, r3
 80a23fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2402:	f7ff fa07 	bl	80a1814 <system_ctrl_set_result>
        break;
    }
}
 80a2406:	b003      	add	sp, #12
 80a2408:	f85d fb04 	ldr.w	pc, [sp], #4
 80a240c:	20000538 	.word	0x20000538

080a2410 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2410:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2412:	4c10      	ldr	r4, [pc, #64]	; (80a2454 <module_user_init_hook+0x44>)
 80a2414:	4d10      	ldr	r5, [pc, #64]	; (80a2458 <module_user_init_hook+0x48>)
 80a2416:	6823      	ldr	r3, [r4, #0]
 80a2418:	42ab      	cmp	r3, r5
 80a241a:	4b10      	ldr	r3, [pc, #64]	; (80a245c <module_user_init_hook+0x4c>)
 80a241c:	bf0c      	ite	eq
 80a241e:	2201      	moveq	r2, #1
 80a2420:	2200      	movne	r2, #0
 80a2422:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2424:	d002      	beq.n	80a242c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2426:	f7ff ffbf 	bl	80a23a8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a242a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a242c:	f7ff f8c6 	bl	80a15bc <HAL_RNG_GetRandomNumber>
 80a2430:	4604      	mov	r4, r0
    srand(seed);
 80a2432:	f000 ff35 	bl	80a32a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2436:	4b0a      	ldr	r3, [pc, #40]	; (80a2460 <module_user_init_hook+0x50>)
 80a2438:	b113      	cbz	r3, 80a2440 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a243a:	4620      	mov	r0, r4
 80a243c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2440:	2100      	movs	r1, #0
 80a2442:	4807      	ldr	r0, [pc, #28]	; (80a2460 <module_user_init_hook+0x50>)
 80a2444:	f7ff fa00 	bl	80a1848 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a244c:	2100      	movs	r1, #0
 80a244e:	4805      	ldr	r0, [pc, #20]	; (80a2464 <module_user_init_hook+0x54>)
 80a2450:	f7ff b9d6 	b.w	80a1800 <system_ctrl_set_app_request_handler>
 80a2454:	40024000 	.word	0x40024000
 80a2458:	9a271c1e 	.word	0x9a271c1e
 80a245c:	2000053c 	.word	0x2000053c
 80a2460:	00000000 	.word	0x00000000
 80a2464:	080a23d9 	.word	0x080a23d9

080a2468 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a2468:	b510      	push	{r4, lr}
 80a246a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a246c:	6880      	ldr	r0, [r0, #8]
 80a246e:	b108      	cbz	r0, 80a2474 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a2470:	f7ff f89c 	bl	80a15ac <os_mutex_recursive_destroy>
 80a2474:	4620      	mov	r0, r4
 80a2476:	bd10      	pop	{r4, pc}

080a2478 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2478:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a247a:	4e1a      	ldr	r6, [pc, #104]	; (80a24e4 <pinAvailable+0x6c>)
 80a247c:	4604      	mov	r4, r0
 80a247e:	6831      	ldr	r1, [r6, #0]
 80a2480:	f011 0501 	ands.w	r5, r1, #1
 80a2484:	d10f      	bne.n	80a24a6 <pinAvailable+0x2e>
 80a2486:	4630      	mov	r0, r6
 80a2488:	f7fd fe0b 	bl	80a00a2 <__cxa_guard_acquire>
 80a248c:	b158      	cbz	r0, 80a24a6 <pinAvailable+0x2e>
 80a248e:	4629      	mov	r1, r5
 80a2490:	4815      	ldr	r0, [pc, #84]	; (80a24e8 <pinAvailable+0x70>)
 80a2492:	f7ff fccd 	bl	80a1e30 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2496:	4630      	mov	r0, r6
 80a2498:	f7fd fe08 	bl	80a00ac <__cxa_guard_release>
 80a249c:	4a13      	ldr	r2, [pc, #76]	; (80a24ec <pinAvailable+0x74>)
 80a249e:	4914      	ldr	r1, [pc, #80]	; (80a24f0 <pinAvailable+0x78>)
 80a24a0:	4811      	ldr	r0, [pc, #68]	; (80a24e8 <pinAvailable+0x70>)
 80a24a2:	f000 f8c1 	bl	80a2628 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a24a6:	4810      	ldr	r0, [pc, #64]	; (80a24e8 <pinAvailable+0x70>)
 80a24a8:	f7ff fcd1 	bl	80a1e4e <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a24ac:	b128      	cbz	r0, 80a24ba <pinAvailable+0x42>
 80a24ae:	f1a4 030d 	sub.w	r3, r4, #13
 80a24b2:	2b02      	cmp	r3, #2
 80a24b4:	d801      	bhi.n	80a24ba <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a24b6:	2000      	movs	r0, #0
 80a24b8:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a24ba:	f000 f877 	bl	80a25ac <_Z19__fetch_global_Wirev>
 80a24be:	f7ff faab 	bl	80a1a18 <_ZN7TwoWire9isEnabledEv>
 80a24c2:	b108      	cbz	r0, 80a24c8 <pinAvailable+0x50>
 80a24c4:	2c01      	cmp	r4, #1
 80a24c6:	d9f6      	bls.n	80a24b6 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a24c8:	f7ff fdda 	bl	80a2080 <_Z22__fetch_global_Serial1v>
 80a24cc:	f7ff fdd4 	bl	80a2078 <_ZN11USARTSerial9isEnabledEv>
 80a24d0:	b118      	cbz	r0, 80a24da <pinAvailable+0x62>
 80a24d2:	f1a4 0312 	sub.w	r3, r4, #18
 80a24d6:	2b01      	cmp	r3, #1
 80a24d8:	d9ed      	bls.n	80a24b6 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a24da:	2c17      	cmp	r4, #23
 80a24dc:	bf8c      	ite	hi
 80a24de:	2000      	movhi	r0, #0
 80a24e0:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a24e2:	bd70      	pop	{r4, r5, r6, pc}
 80a24e4:	20000540 	.word	0x20000540
 80a24e8:	20000544 	.word	0x20000544
 80a24ec:	20000078 	.word	0x20000078
 80a24f0:	080a2469 	.word	0x080a2469

080a24f4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a24f4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a24f6:	b538      	push	{r3, r4, r5, lr}
 80a24f8:	4604      	mov	r4, r0
 80a24fa:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a24fc:	d80a      	bhi.n	80a2514 <pinMode+0x20>
 80a24fe:	29ff      	cmp	r1, #255	; 0xff
 80a2500:	d008      	beq.n	80a2514 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2502:	f7ff ffb9 	bl	80a2478 <pinAvailable>
 80a2506:	b128      	cbz	r0, 80a2514 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2508:	4629      	mov	r1, r5
 80a250a:	4620      	mov	r0, r4
}
 80a250c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2510:	f7ff b87c 	b.w	80a160c <HAL_Pin_Mode>
 80a2514:	bd38      	pop	{r3, r4, r5, pc}

080a2516 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2516:	b538      	push	{r3, r4, r5, lr}
 80a2518:	4604      	mov	r4, r0
 80a251a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a251c:	f7ff f87e 	bl	80a161c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2520:	28ff      	cmp	r0, #255	; 0xff
 80a2522:	d010      	beq.n	80a2546 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2524:	2806      	cmp	r0, #6
 80a2526:	d804      	bhi.n	80a2532 <digitalWrite+0x1c>
 80a2528:	234d      	movs	r3, #77	; 0x4d
 80a252a:	fa23 f000 	lsr.w	r0, r3, r0
 80a252e:	07c3      	lsls	r3, r0, #31
 80a2530:	d409      	bmi.n	80a2546 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2532:	4620      	mov	r0, r4
 80a2534:	f7ff ffa0 	bl	80a2478 <pinAvailable>
 80a2538:	b128      	cbz	r0, 80a2546 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a253a:	4629      	mov	r1, r5
 80a253c:	4620      	mov	r0, r4
}
 80a253e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2542:	f7ff b873 	b.w	80a162c <HAL_GPIO_Write>
 80a2546:	bd38      	pop	{r3, r4, r5, pc}

080a2548 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a2548:	b510      	push	{r4, lr}
 80a254a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a254c:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a254e:	bf9c      	itt	ls
 80a2550:	340a      	addls	r4, #10
 80a2552:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2554:	4620      	mov	r0, r4
 80a2556:	f7ff ff8f 	bl	80a2478 <pinAvailable>
 80a255a:	b150      	cbz	r0, 80a2572 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a255c:	2103      	movs	r1, #3
 80a255e:	4620      	mov	r0, r4
 80a2560:	f7ff f84c 	bl	80a15fc <HAL_Validate_Pin_Function>
 80a2564:	2803      	cmp	r0, #3
 80a2566:	d104      	bne.n	80a2572 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2568:	4620      	mov	r0, r4
}
 80a256a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a256e:	f7ff b865 	b.w	80a163c <HAL_ADC_Read>
}
 80a2572:	2000      	movs	r0, #0
 80a2574:	bd10      	pop	{r4, pc}
	...

080a2578 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a2578:	b570      	push	{r4, r5, r6, lr}
 80a257a:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a257c:	2514      	movs	r5, #20
 80a257e:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2580:	4e09      	ldr	r6, [pc, #36]	; (80a25a8 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2582:	2100      	movs	r1, #0
 80a2584:	f000 fe83 	bl	80a328e <memset>
 80a2588:	8025      	strh	r5, [r4, #0]
 80a258a:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a258c:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a258e:	60a5      	str	r5, [r4, #8]
 80a2590:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2592:	4628      	mov	r0, r5
 80a2594:	f000 f867 	bl	80a2666 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2598:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a259a:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a259c:	4628      	mov	r0, r5
 80a259e:	f000 f862 	bl	80a2666 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a25a2:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a25a4:	4620      	mov	r0, r4
 80a25a6:	bd70      	pop	{r4, r5, r6, pc}
 80a25a8:	080a3590 	.word	0x080a3590

080a25ac <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a25ac:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a25ae:	4d0e      	ldr	r5, [pc, #56]	; (80a25e8 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a25b0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a25b2:	6829      	ldr	r1, [r5, #0]
 80a25b4:	f011 0401 	ands.w	r4, r1, #1
 80a25b8:	d113      	bne.n	80a25e2 <_Z19__fetch_global_Wirev+0x36>
 80a25ba:	4628      	mov	r0, r5
 80a25bc:	f7fd fd71 	bl	80a00a2 <__cxa_guard_acquire>
 80a25c0:	b178      	cbz	r0, 80a25e2 <_Z19__fetch_global_Wirev+0x36>
 80a25c2:	a801      	add	r0, sp, #4
 80a25c4:	f7ff ffd8 	bl	80a2578 <_Z17acquireWireBufferv>
 80a25c8:	aa01      	add	r2, sp, #4
 80a25ca:	4621      	mov	r1, r4
 80a25cc:	4807      	ldr	r0, [pc, #28]	; (80a25ec <_Z19__fetch_global_Wirev+0x40>)
 80a25ce:	f7ff fa11 	bl	80a19f4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a25d2:	4628      	mov	r0, r5
 80a25d4:	f7fd fd6a 	bl	80a00ac <__cxa_guard_release>
 80a25d8:	4a05      	ldr	r2, [pc, #20]	; (80a25f0 <_Z19__fetch_global_Wirev+0x44>)
 80a25da:	4906      	ldr	r1, [pc, #24]	; (80a25f4 <_Z19__fetch_global_Wirev+0x48>)
 80a25dc:	4803      	ldr	r0, [pc, #12]	; (80a25ec <_Z19__fetch_global_Wirev+0x40>)
 80a25de:	f000 f823 	bl	80a2628 <__aeabi_atexit>
	return wire;
}
 80a25e2:	4802      	ldr	r0, [pc, #8]	; (80a25ec <_Z19__fetch_global_Wirev+0x40>)
 80a25e4:	b007      	add	sp, #28
 80a25e6:	bd30      	pop	{r4, r5, pc}
 80a25e8:	20000554 	.word	0x20000554
 80a25ec:	20000558 	.word	0x20000558
 80a25f0:	20000078 	.word	0x20000078
 80a25f4:	080a199b 	.word	0x080a199b

080a25f8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a25f8:	b513      	push	{r0, r1, r4, lr}
 80a25fa:	4c08      	ldr	r4, [pc, #32]	; (80a261c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a25fc:	2300      	movs	r3, #0
 80a25fe:	461a      	mov	r2, r3
 80a2600:	4619      	mov	r1, r3
 80a2602:	9300      	str	r3, [sp, #0]
 80a2604:	4620      	mov	r0, r4
 80a2606:	f7ff fa63 	bl	80a1ad0 <_ZN9IPAddressC1Ehhhh>
 80a260a:	4620      	mov	r0, r4
 80a260c:	4a04      	ldr	r2, [pc, #16]	; (80a2620 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a260e:	4905      	ldr	r1, [pc, #20]	; (80a2624 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2610:	b002      	add	sp, #8
 80a2612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2616:	f000 b807 	b.w	80a2628 <__aeabi_atexit>
 80a261a:	bf00      	nop
 80a261c:	2000056c 	.word	0x2000056c
 80a2620:	20000078 	.word	0x20000078
 80a2624:	080a1a21 	.word	0x080a1a21

080a2628 <__aeabi_atexit>:
 80a2628:	460b      	mov	r3, r1
 80a262a:	4601      	mov	r1, r0
 80a262c:	4618      	mov	r0, r3
 80a262e:	f000 be15 	b.w	80a325c <__cxa_atexit>

080a2632 <_ZdlPvj>:
 80a2632:	f7fd bd34 	b.w	80a009e <_ZdlPv>
	...

080a2638 <_ZSt15get_new_handlerv>:
 80a2638:	4b02      	ldr	r3, [pc, #8]	; (80a2644 <_ZSt15get_new_handlerv+0xc>)
 80a263a:	6818      	ldr	r0, [r3, #0]
 80a263c:	f3bf 8f5f 	dmb	sy
 80a2640:	4770      	bx	lr
 80a2642:	bf00      	nop
 80a2644:	20000584 	.word	0x20000584

080a2648 <_ZnwjRKSt9nothrow_t>:
 80a2648:	b510      	push	{r4, lr}
 80a264a:	2800      	cmp	r0, #0
 80a264c:	bf14      	ite	ne
 80a264e:	4604      	movne	r4, r0
 80a2650:	2401      	moveq	r4, #1
 80a2652:	4620      	mov	r0, r4
 80a2654:	f7ff f950 	bl	80a18f8 <malloc>
 80a2658:	b920      	cbnz	r0, 80a2664 <_ZnwjRKSt9nothrow_t+0x1c>
 80a265a:	f7ff ffed 	bl	80a2638 <_ZSt15get_new_handlerv>
 80a265e:	b108      	cbz	r0, 80a2664 <_ZnwjRKSt9nothrow_t+0x1c>
 80a2660:	4780      	blx	r0
 80a2662:	e7f6      	b.n	80a2652 <_ZnwjRKSt9nothrow_t+0xa>
 80a2664:	bd10      	pop	{r4, pc}

080a2666 <_ZnajRKSt9nothrow_t>:
 80a2666:	f7ff bfef 	b.w	80a2648 <_ZnwjRKSt9nothrow_t>
	...

080a266c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a266c:	4b24      	ldr	r3, [pc, #144]	; (80a2700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a266e:	681a      	ldr	r2, [r3, #0]
 80a2670:	07d0      	lsls	r0, r2, #31
 80a2672:	bf5c      	itt	pl
 80a2674:	2201      	movpl	r2, #1
 80a2676:	601a      	strpl	r2, [r3, #0]
 80a2678:	4b22      	ldr	r3, [pc, #136]	; (80a2704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a267a:	681a      	ldr	r2, [r3, #0]
 80a267c:	07d1      	lsls	r1, r2, #31
 80a267e:	bf5c      	itt	pl
 80a2680:	2201      	movpl	r2, #1
 80a2682:	601a      	strpl	r2, [r3, #0]
 80a2684:	4b20      	ldr	r3, [pc, #128]	; (80a2708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2686:	681a      	ldr	r2, [r3, #0]
 80a2688:	07d2      	lsls	r2, r2, #31
 80a268a:	bf5c      	itt	pl
 80a268c:	2201      	movpl	r2, #1
 80a268e:	601a      	strpl	r2, [r3, #0]
 80a2690:	4b1e      	ldr	r3, [pc, #120]	; (80a270c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2692:	681a      	ldr	r2, [r3, #0]
 80a2694:	07d0      	lsls	r0, r2, #31
 80a2696:	bf5c      	itt	pl
 80a2698:	2201      	movpl	r2, #1
 80a269a:	601a      	strpl	r2, [r3, #0]
 80a269c:	4b1c      	ldr	r3, [pc, #112]	; (80a2710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a269e:	681a      	ldr	r2, [r3, #0]
 80a26a0:	07d1      	lsls	r1, r2, #31
 80a26a2:	bf5c      	itt	pl
 80a26a4:	2201      	movpl	r2, #1
 80a26a6:	601a      	strpl	r2, [r3, #0]
 80a26a8:	4b1a      	ldr	r3, [pc, #104]	; (80a2714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a26aa:	681a      	ldr	r2, [r3, #0]
 80a26ac:	07d2      	lsls	r2, r2, #31
 80a26ae:	bf5c      	itt	pl
 80a26b0:	2201      	movpl	r2, #1
 80a26b2:	601a      	strpl	r2, [r3, #0]
 80a26b4:	4b18      	ldr	r3, [pc, #96]	; (80a2718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a26b6:	681a      	ldr	r2, [r3, #0]
 80a26b8:	07d0      	lsls	r0, r2, #31
 80a26ba:	bf5c      	itt	pl
 80a26bc:	2201      	movpl	r2, #1
 80a26be:	601a      	strpl	r2, [r3, #0]
 80a26c0:	4b16      	ldr	r3, [pc, #88]	; (80a271c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a26c2:	681a      	ldr	r2, [r3, #0]
 80a26c4:	07d1      	lsls	r1, r2, #31
 80a26c6:	bf5c      	itt	pl
 80a26c8:	2201      	movpl	r2, #1
 80a26ca:	601a      	strpl	r2, [r3, #0]
 80a26cc:	4b14      	ldr	r3, [pc, #80]	; (80a2720 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a26ce:	681a      	ldr	r2, [r3, #0]
 80a26d0:	07d2      	lsls	r2, r2, #31
 80a26d2:	bf5c      	itt	pl
 80a26d4:	2201      	movpl	r2, #1
 80a26d6:	601a      	strpl	r2, [r3, #0]
 80a26d8:	4b12      	ldr	r3, [pc, #72]	; (80a2724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a26da:	681a      	ldr	r2, [r3, #0]
 80a26dc:	07d0      	lsls	r0, r2, #31
 80a26de:	bf5c      	itt	pl
 80a26e0:	2201      	movpl	r2, #1
 80a26e2:	601a      	strpl	r2, [r3, #0]
 80a26e4:	4b10      	ldr	r3, [pc, #64]	; (80a2728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a26e6:	681a      	ldr	r2, [r3, #0]
 80a26e8:	07d1      	lsls	r1, r2, #31
 80a26ea:	bf5c      	itt	pl
 80a26ec:	2201      	movpl	r2, #1
 80a26ee:	601a      	strpl	r2, [r3, #0]
 80a26f0:	4b0e      	ldr	r3, [pc, #56]	; (80a272c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a26f2:	681a      	ldr	r2, [r3, #0]
 80a26f4:	07d2      	lsls	r2, r2, #31
 80a26f6:	bf5c      	itt	pl
 80a26f8:	2201      	movpl	r2, #1
 80a26fa:	601a      	strpl	r2, [r3, #0]
 80a26fc:	4770      	bx	lr
 80a26fe:	bf00      	nop
 80a2700:	200005b4 	.word	0x200005b4
 80a2704:	200005b0 	.word	0x200005b0
 80a2708:	200005ac 	.word	0x200005ac
 80a270c:	200005a8 	.word	0x200005a8
 80a2710:	200005a4 	.word	0x200005a4
 80a2714:	200005a0 	.word	0x200005a0
 80a2718:	2000059c 	.word	0x2000059c
 80a271c:	20000598 	.word	0x20000598
 80a2720:	20000594 	.word	0x20000594
 80a2724:	20000590 	.word	0x20000590
 80a2728:	2000058c 	.word	0x2000058c
 80a272c:	20000588 	.word	0x20000588

080a2730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2730:	4b18      	ldr	r3, [pc, #96]	; (80a2794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2732:	681a      	ldr	r2, [r3, #0]
 80a2734:	07d1      	lsls	r1, r2, #31
 80a2736:	bf5c      	itt	pl
 80a2738:	2201      	movpl	r2, #1
 80a273a:	601a      	strpl	r2, [r3, #0]
 80a273c:	4b16      	ldr	r3, [pc, #88]	; (80a2798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a273e:	681a      	ldr	r2, [r3, #0]
 80a2740:	07d2      	lsls	r2, r2, #31
 80a2742:	bf5c      	itt	pl
 80a2744:	2201      	movpl	r2, #1
 80a2746:	601a      	strpl	r2, [r3, #0]
 80a2748:	4b14      	ldr	r3, [pc, #80]	; (80a279c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a274a:	681a      	ldr	r2, [r3, #0]
 80a274c:	07d0      	lsls	r0, r2, #31
 80a274e:	bf5c      	itt	pl
 80a2750:	2201      	movpl	r2, #1
 80a2752:	601a      	strpl	r2, [r3, #0]
 80a2754:	4b12      	ldr	r3, [pc, #72]	; (80a27a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2756:	681a      	ldr	r2, [r3, #0]
 80a2758:	07d1      	lsls	r1, r2, #31
 80a275a:	bf5c      	itt	pl
 80a275c:	2201      	movpl	r2, #1
 80a275e:	601a      	strpl	r2, [r3, #0]
 80a2760:	4b10      	ldr	r3, [pc, #64]	; (80a27a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2762:	681a      	ldr	r2, [r3, #0]
 80a2764:	07d2      	lsls	r2, r2, #31
 80a2766:	bf5c      	itt	pl
 80a2768:	2201      	movpl	r2, #1
 80a276a:	601a      	strpl	r2, [r3, #0]
 80a276c:	4b0e      	ldr	r3, [pc, #56]	; (80a27a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a276e:	681a      	ldr	r2, [r3, #0]
 80a2770:	07d0      	lsls	r0, r2, #31
 80a2772:	bf5c      	itt	pl
 80a2774:	2201      	movpl	r2, #1
 80a2776:	601a      	strpl	r2, [r3, #0]
 80a2778:	4b0c      	ldr	r3, [pc, #48]	; (80a27ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a277a:	681a      	ldr	r2, [r3, #0]
 80a277c:	07d1      	lsls	r1, r2, #31
 80a277e:	bf5c      	itt	pl
 80a2780:	2201      	movpl	r2, #1
 80a2782:	601a      	strpl	r2, [r3, #0]
 80a2784:	4b0a      	ldr	r3, [pc, #40]	; (80a27b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2786:	681a      	ldr	r2, [r3, #0]
 80a2788:	07d2      	lsls	r2, r2, #31
 80a278a:	bf5c      	itt	pl
 80a278c:	2201      	movpl	r2, #1
 80a278e:	601a      	strpl	r2, [r3, #0]
 80a2790:	4770      	bx	lr
 80a2792:	bf00      	nop
 80a2794:	200005d4 	.word	0x200005d4
 80a2798:	200005d0 	.word	0x200005d0
 80a279c:	200005cc 	.word	0x200005cc
 80a27a0:	200005c8 	.word	0x200005c8
 80a27a4:	200005c4 	.word	0x200005c4
 80a27a8:	200005c0 	.word	0x200005c0
 80a27ac:	200005bc 	.word	0x200005bc
 80a27b0:	200005b8 	.word	0x200005b8

080a27b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a27b4:	4b18      	ldr	r3, [pc, #96]	; (80a2818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a27b6:	681a      	ldr	r2, [r3, #0]
 80a27b8:	07d1      	lsls	r1, r2, #31
 80a27ba:	bf5c      	itt	pl
 80a27bc:	2201      	movpl	r2, #1
 80a27be:	601a      	strpl	r2, [r3, #0]
 80a27c0:	4b16      	ldr	r3, [pc, #88]	; (80a281c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a27c2:	681a      	ldr	r2, [r3, #0]
 80a27c4:	07d2      	lsls	r2, r2, #31
 80a27c6:	bf5c      	itt	pl
 80a27c8:	2201      	movpl	r2, #1
 80a27ca:	601a      	strpl	r2, [r3, #0]
 80a27cc:	4b14      	ldr	r3, [pc, #80]	; (80a2820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a27ce:	681a      	ldr	r2, [r3, #0]
 80a27d0:	07d0      	lsls	r0, r2, #31
 80a27d2:	bf5c      	itt	pl
 80a27d4:	2201      	movpl	r2, #1
 80a27d6:	601a      	strpl	r2, [r3, #0]
 80a27d8:	4b12      	ldr	r3, [pc, #72]	; (80a2824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a27da:	681a      	ldr	r2, [r3, #0]
 80a27dc:	07d1      	lsls	r1, r2, #31
 80a27de:	bf5c      	itt	pl
 80a27e0:	2201      	movpl	r2, #1
 80a27e2:	601a      	strpl	r2, [r3, #0]
 80a27e4:	4b10      	ldr	r3, [pc, #64]	; (80a2828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a27e6:	681a      	ldr	r2, [r3, #0]
 80a27e8:	07d2      	lsls	r2, r2, #31
 80a27ea:	bf5c      	itt	pl
 80a27ec:	2201      	movpl	r2, #1
 80a27ee:	601a      	strpl	r2, [r3, #0]
 80a27f0:	4b0e      	ldr	r3, [pc, #56]	; (80a282c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a27f2:	681a      	ldr	r2, [r3, #0]
 80a27f4:	07d0      	lsls	r0, r2, #31
 80a27f6:	bf5c      	itt	pl
 80a27f8:	2201      	movpl	r2, #1
 80a27fa:	601a      	strpl	r2, [r3, #0]
 80a27fc:	4b0c      	ldr	r3, [pc, #48]	; (80a2830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a27fe:	681a      	ldr	r2, [r3, #0]
 80a2800:	07d1      	lsls	r1, r2, #31
 80a2802:	bf5c      	itt	pl
 80a2804:	2201      	movpl	r2, #1
 80a2806:	601a      	strpl	r2, [r3, #0]
 80a2808:	4b0a      	ldr	r3, [pc, #40]	; (80a2834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a280a:	681a      	ldr	r2, [r3, #0]
 80a280c:	07d2      	lsls	r2, r2, #31
 80a280e:	bf5c      	itt	pl
 80a2810:	2201      	movpl	r2, #1
 80a2812:	601a      	strpl	r2, [r3, #0]
 80a2814:	4770      	bx	lr
 80a2816:	bf00      	nop
 80a2818:	200005f4 	.word	0x200005f4
 80a281c:	200005f0 	.word	0x200005f0
 80a2820:	200005ec 	.word	0x200005ec
 80a2824:	200005e8 	.word	0x200005e8
 80a2828:	200005e4 	.word	0x200005e4
 80a282c:	200005e0 	.word	0x200005e0
 80a2830:	200005dc 	.word	0x200005dc
 80a2834:	200005d8 	.word	0x200005d8

080a2838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2838:	4b24      	ldr	r3, [pc, #144]	; (80a28cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a283a:	681a      	ldr	r2, [r3, #0]
 80a283c:	07d0      	lsls	r0, r2, #31
 80a283e:	bf5c      	itt	pl
 80a2840:	2201      	movpl	r2, #1
 80a2842:	601a      	strpl	r2, [r3, #0]
 80a2844:	4b22      	ldr	r3, [pc, #136]	; (80a28d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2846:	681a      	ldr	r2, [r3, #0]
 80a2848:	07d1      	lsls	r1, r2, #31
 80a284a:	bf5c      	itt	pl
 80a284c:	2201      	movpl	r2, #1
 80a284e:	601a      	strpl	r2, [r3, #0]
 80a2850:	4b20      	ldr	r3, [pc, #128]	; (80a28d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2852:	681a      	ldr	r2, [r3, #0]
 80a2854:	07d2      	lsls	r2, r2, #31
 80a2856:	bf5c      	itt	pl
 80a2858:	2201      	movpl	r2, #1
 80a285a:	601a      	strpl	r2, [r3, #0]
 80a285c:	4b1e      	ldr	r3, [pc, #120]	; (80a28d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a285e:	681a      	ldr	r2, [r3, #0]
 80a2860:	07d0      	lsls	r0, r2, #31
 80a2862:	bf5c      	itt	pl
 80a2864:	2201      	movpl	r2, #1
 80a2866:	601a      	strpl	r2, [r3, #0]
 80a2868:	4b1c      	ldr	r3, [pc, #112]	; (80a28dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a286a:	681a      	ldr	r2, [r3, #0]
 80a286c:	07d1      	lsls	r1, r2, #31
 80a286e:	bf5c      	itt	pl
 80a2870:	2201      	movpl	r2, #1
 80a2872:	601a      	strpl	r2, [r3, #0]
 80a2874:	4b1a      	ldr	r3, [pc, #104]	; (80a28e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2876:	681a      	ldr	r2, [r3, #0]
 80a2878:	07d2      	lsls	r2, r2, #31
 80a287a:	bf5c      	itt	pl
 80a287c:	2201      	movpl	r2, #1
 80a287e:	601a      	strpl	r2, [r3, #0]
 80a2880:	4b18      	ldr	r3, [pc, #96]	; (80a28e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2882:	681a      	ldr	r2, [r3, #0]
 80a2884:	07d0      	lsls	r0, r2, #31
 80a2886:	bf5c      	itt	pl
 80a2888:	2201      	movpl	r2, #1
 80a288a:	601a      	strpl	r2, [r3, #0]
 80a288c:	4b16      	ldr	r3, [pc, #88]	; (80a28e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a288e:	681a      	ldr	r2, [r3, #0]
 80a2890:	07d1      	lsls	r1, r2, #31
 80a2892:	bf5c      	itt	pl
 80a2894:	2201      	movpl	r2, #1
 80a2896:	601a      	strpl	r2, [r3, #0]
 80a2898:	4b14      	ldr	r3, [pc, #80]	; (80a28ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a289a:	681a      	ldr	r2, [r3, #0]
 80a289c:	07d2      	lsls	r2, r2, #31
 80a289e:	bf5c      	itt	pl
 80a28a0:	2201      	movpl	r2, #1
 80a28a2:	601a      	strpl	r2, [r3, #0]
 80a28a4:	4b12      	ldr	r3, [pc, #72]	; (80a28f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a28a6:	681a      	ldr	r2, [r3, #0]
 80a28a8:	07d0      	lsls	r0, r2, #31
 80a28aa:	bf5c      	itt	pl
 80a28ac:	2201      	movpl	r2, #1
 80a28ae:	601a      	strpl	r2, [r3, #0]
 80a28b0:	4b10      	ldr	r3, [pc, #64]	; (80a28f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a28b2:	681a      	ldr	r2, [r3, #0]
 80a28b4:	07d1      	lsls	r1, r2, #31
 80a28b6:	bf5c      	itt	pl
 80a28b8:	2201      	movpl	r2, #1
 80a28ba:	601a      	strpl	r2, [r3, #0]
 80a28bc:	4b0e      	ldr	r3, [pc, #56]	; (80a28f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a28be:	681a      	ldr	r2, [r3, #0]
 80a28c0:	07d2      	lsls	r2, r2, #31
 80a28c2:	bf5c      	itt	pl
 80a28c4:	2201      	movpl	r2, #1
 80a28c6:	601a      	strpl	r2, [r3, #0]
 80a28c8:	4770      	bx	lr
 80a28ca:	bf00      	nop
 80a28cc:	20000624 	.word	0x20000624
 80a28d0:	20000620 	.word	0x20000620
 80a28d4:	2000061c 	.word	0x2000061c
 80a28d8:	20000618 	.word	0x20000618
 80a28dc:	20000614 	.word	0x20000614
 80a28e0:	20000610 	.word	0x20000610
 80a28e4:	2000060c 	.word	0x2000060c
 80a28e8:	20000608 	.word	0x20000608
 80a28ec:	20000604 	.word	0x20000604
 80a28f0:	20000600 	.word	0x20000600
 80a28f4:	200005fc 	.word	0x200005fc
 80a28f8:	200005f8 	.word	0x200005f8

080a28fc <__aeabi_drsub>:
 80a28fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2900:	e002      	b.n	80a2908 <__adddf3>
 80a2902:	bf00      	nop

080a2904 <__aeabi_dsub>:
 80a2904:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2908 <__adddf3>:
 80a2908:	b530      	push	{r4, r5, lr}
 80a290a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a290e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2912:	ea94 0f05 	teq	r4, r5
 80a2916:	bf08      	it	eq
 80a2918:	ea90 0f02 	teqeq	r0, r2
 80a291c:	bf1f      	itttt	ne
 80a291e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2922:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2926:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a292a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a292e:	f000 80e2 	beq.w	80a2af6 <__adddf3+0x1ee>
 80a2932:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2936:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a293a:	bfb8      	it	lt
 80a293c:	426d      	neglt	r5, r5
 80a293e:	dd0c      	ble.n	80a295a <__adddf3+0x52>
 80a2940:	442c      	add	r4, r5
 80a2942:	ea80 0202 	eor.w	r2, r0, r2
 80a2946:	ea81 0303 	eor.w	r3, r1, r3
 80a294a:	ea82 0000 	eor.w	r0, r2, r0
 80a294e:	ea83 0101 	eor.w	r1, r3, r1
 80a2952:	ea80 0202 	eor.w	r2, r0, r2
 80a2956:	ea81 0303 	eor.w	r3, r1, r3
 80a295a:	2d36      	cmp	r5, #54	; 0x36
 80a295c:	bf88      	it	hi
 80a295e:	bd30      	pophi	{r4, r5, pc}
 80a2960:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2964:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2968:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a296c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2970:	d002      	beq.n	80a2978 <__adddf3+0x70>
 80a2972:	4240      	negs	r0, r0
 80a2974:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2978:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a297c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2980:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2984:	d002      	beq.n	80a298c <__adddf3+0x84>
 80a2986:	4252      	negs	r2, r2
 80a2988:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a298c:	ea94 0f05 	teq	r4, r5
 80a2990:	f000 80a7 	beq.w	80a2ae2 <__adddf3+0x1da>
 80a2994:	f1a4 0401 	sub.w	r4, r4, #1
 80a2998:	f1d5 0e20 	rsbs	lr, r5, #32
 80a299c:	db0d      	blt.n	80a29ba <__adddf3+0xb2>
 80a299e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a29a2:	fa22 f205 	lsr.w	r2, r2, r5
 80a29a6:	1880      	adds	r0, r0, r2
 80a29a8:	f141 0100 	adc.w	r1, r1, #0
 80a29ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80a29b0:	1880      	adds	r0, r0, r2
 80a29b2:	fa43 f305 	asr.w	r3, r3, r5
 80a29b6:	4159      	adcs	r1, r3
 80a29b8:	e00e      	b.n	80a29d8 <__adddf3+0xd0>
 80a29ba:	f1a5 0520 	sub.w	r5, r5, #32
 80a29be:	f10e 0e20 	add.w	lr, lr, #32
 80a29c2:	2a01      	cmp	r2, #1
 80a29c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a29c8:	bf28      	it	cs
 80a29ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a29ce:	fa43 f305 	asr.w	r3, r3, r5
 80a29d2:	18c0      	adds	r0, r0, r3
 80a29d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a29d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a29dc:	d507      	bpl.n	80a29ee <__adddf3+0xe6>
 80a29de:	f04f 0e00 	mov.w	lr, #0
 80a29e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a29e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a29ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80a29ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a29f2:	d31b      	bcc.n	80a2a2c <__adddf3+0x124>
 80a29f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a29f8:	d30c      	bcc.n	80a2a14 <__adddf3+0x10c>
 80a29fa:	0849      	lsrs	r1, r1, #1
 80a29fc:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2a00:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2a04:	f104 0401 	add.w	r4, r4, #1
 80a2a08:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2a0c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2a10:	f080 809a 	bcs.w	80a2b48 <__adddf3+0x240>
 80a2a14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2a18:	bf08      	it	eq
 80a2a1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2a1e:	f150 0000 	adcs.w	r0, r0, #0
 80a2a22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2a26:	ea41 0105 	orr.w	r1, r1, r5
 80a2a2a:	bd30      	pop	{r4, r5, pc}
 80a2a2c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2a30:	4140      	adcs	r0, r0
 80a2a32:	eb41 0101 	adc.w	r1, r1, r1
 80a2a36:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2a3a:	f1a4 0401 	sub.w	r4, r4, #1
 80a2a3e:	d1e9      	bne.n	80a2a14 <__adddf3+0x10c>
 80a2a40:	f091 0f00 	teq	r1, #0
 80a2a44:	bf04      	itt	eq
 80a2a46:	4601      	moveq	r1, r0
 80a2a48:	2000      	moveq	r0, #0
 80a2a4a:	fab1 f381 	clz	r3, r1
 80a2a4e:	bf08      	it	eq
 80a2a50:	3320      	addeq	r3, #32
 80a2a52:	f1a3 030b 	sub.w	r3, r3, #11
 80a2a56:	f1b3 0220 	subs.w	r2, r3, #32
 80a2a5a:	da0c      	bge.n	80a2a76 <__adddf3+0x16e>
 80a2a5c:	320c      	adds	r2, #12
 80a2a5e:	dd08      	ble.n	80a2a72 <__adddf3+0x16a>
 80a2a60:	f102 0c14 	add.w	ip, r2, #20
 80a2a64:	f1c2 020c 	rsb	r2, r2, #12
 80a2a68:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2a6c:	fa21 f102 	lsr.w	r1, r1, r2
 80a2a70:	e00c      	b.n	80a2a8c <__adddf3+0x184>
 80a2a72:	f102 0214 	add.w	r2, r2, #20
 80a2a76:	bfd8      	it	le
 80a2a78:	f1c2 0c20 	rsble	ip, r2, #32
 80a2a7c:	fa01 f102 	lsl.w	r1, r1, r2
 80a2a80:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2a84:	bfdc      	itt	le
 80a2a86:	ea41 010c 	orrle.w	r1, r1, ip
 80a2a8a:	4090      	lslle	r0, r2
 80a2a8c:	1ae4      	subs	r4, r4, r3
 80a2a8e:	bfa2      	ittt	ge
 80a2a90:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2a94:	4329      	orrge	r1, r5
 80a2a96:	bd30      	popge	{r4, r5, pc}
 80a2a98:	ea6f 0404 	mvn.w	r4, r4
 80a2a9c:	3c1f      	subs	r4, #31
 80a2a9e:	da1c      	bge.n	80a2ada <__adddf3+0x1d2>
 80a2aa0:	340c      	adds	r4, #12
 80a2aa2:	dc0e      	bgt.n	80a2ac2 <__adddf3+0x1ba>
 80a2aa4:	f104 0414 	add.w	r4, r4, #20
 80a2aa8:	f1c4 0220 	rsb	r2, r4, #32
 80a2aac:	fa20 f004 	lsr.w	r0, r0, r4
 80a2ab0:	fa01 f302 	lsl.w	r3, r1, r2
 80a2ab4:	ea40 0003 	orr.w	r0, r0, r3
 80a2ab8:	fa21 f304 	lsr.w	r3, r1, r4
 80a2abc:	ea45 0103 	orr.w	r1, r5, r3
 80a2ac0:	bd30      	pop	{r4, r5, pc}
 80a2ac2:	f1c4 040c 	rsb	r4, r4, #12
 80a2ac6:	f1c4 0220 	rsb	r2, r4, #32
 80a2aca:	fa20 f002 	lsr.w	r0, r0, r2
 80a2ace:	fa01 f304 	lsl.w	r3, r1, r4
 80a2ad2:	ea40 0003 	orr.w	r0, r0, r3
 80a2ad6:	4629      	mov	r1, r5
 80a2ad8:	bd30      	pop	{r4, r5, pc}
 80a2ada:	fa21 f004 	lsr.w	r0, r1, r4
 80a2ade:	4629      	mov	r1, r5
 80a2ae0:	bd30      	pop	{r4, r5, pc}
 80a2ae2:	f094 0f00 	teq	r4, #0
 80a2ae6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2aea:	bf06      	itte	eq
 80a2aec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2af0:	3401      	addeq	r4, #1
 80a2af2:	3d01      	subne	r5, #1
 80a2af4:	e74e      	b.n	80a2994 <__adddf3+0x8c>
 80a2af6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2afa:	bf18      	it	ne
 80a2afc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2b00:	d029      	beq.n	80a2b56 <__adddf3+0x24e>
 80a2b02:	ea94 0f05 	teq	r4, r5
 80a2b06:	bf08      	it	eq
 80a2b08:	ea90 0f02 	teqeq	r0, r2
 80a2b0c:	d005      	beq.n	80a2b1a <__adddf3+0x212>
 80a2b0e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2b12:	bf04      	itt	eq
 80a2b14:	4619      	moveq	r1, r3
 80a2b16:	4610      	moveq	r0, r2
 80a2b18:	bd30      	pop	{r4, r5, pc}
 80a2b1a:	ea91 0f03 	teq	r1, r3
 80a2b1e:	bf1e      	ittt	ne
 80a2b20:	2100      	movne	r1, #0
 80a2b22:	2000      	movne	r0, #0
 80a2b24:	bd30      	popne	{r4, r5, pc}
 80a2b26:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2b2a:	d105      	bne.n	80a2b38 <__adddf3+0x230>
 80a2b2c:	0040      	lsls	r0, r0, #1
 80a2b2e:	4149      	adcs	r1, r1
 80a2b30:	bf28      	it	cs
 80a2b32:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2b36:	bd30      	pop	{r4, r5, pc}
 80a2b38:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2b3c:	bf3c      	itt	cc
 80a2b3e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2b42:	bd30      	popcc	{r4, r5, pc}
 80a2b44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2b48:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2b4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2b50:	f04f 0000 	mov.w	r0, #0
 80a2b54:	bd30      	pop	{r4, r5, pc}
 80a2b56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2b5a:	bf1a      	itte	ne
 80a2b5c:	4619      	movne	r1, r3
 80a2b5e:	4610      	movne	r0, r2
 80a2b60:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2b64:	bf1c      	itt	ne
 80a2b66:	460b      	movne	r3, r1
 80a2b68:	4602      	movne	r2, r0
 80a2b6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2b6e:	bf06      	itte	eq
 80a2b70:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2b74:	ea91 0f03 	teqeq	r1, r3
 80a2b78:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2b7c:	bd30      	pop	{r4, r5, pc}
 80a2b7e:	bf00      	nop

080a2b80 <__aeabi_ui2d>:
 80a2b80:	f090 0f00 	teq	r0, #0
 80a2b84:	bf04      	itt	eq
 80a2b86:	2100      	moveq	r1, #0
 80a2b88:	4770      	bxeq	lr
 80a2b8a:	b530      	push	{r4, r5, lr}
 80a2b8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2b90:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2b94:	f04f 0500 	mov.w	r5, #0
 80a2b98:	f04f 0100 	mov.w	r1, #0
 80a2b9c:	e750      	b.n	80a2a40 <__adddf3+0x138>
 80a2b9e:	bf00      	nop

080a2ba0 <__aeabi_i2d>:
 80a2ba0:	f090 0f00 	teq	r0, #0
 80a2ba4:	bf04      	itt	eq
 80a2ba6:	2100      	moveq	r1, #0
 80a2ba8:	4770      	bxeq	lr
 80a2baa:	b530      	push	{r4, r5, lr}
 80a2bac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2bb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2bb4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2bb8:	bf48      	it	mi
 80a2bba:	4240      	negmi	r0, r0
 80a2bbc:	f04f 0100 	mov.w	r1, #0
 80a2bc0:	e73e      	b.n	80a2a40 <__adddf3+0x138>
 80a2bc2:	bf00      	nop

080a2bc4 <__aeabi_f2d>:
 80a2bc4:	0042      	lsls	r2, r0, #1
 80a2bc6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2bca:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2bce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2bd2:	bf1f      	itttt	ne
 80a2bd4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2bd8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2bdc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2be0:	4770      	bxne	lr
 80a2be2:	f092 0f00 	teq	r2, #0
 80a2be6:	bf14      	ite	ne
 80a2be8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2bec:	4770      	bxeq	lr
 80a2bee:	b530      	push	{r4, r5, lr}
 80a2bf0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2bf4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2bf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2bfc:	e720      	b.n	80a2a40 <__adddf3+0x138>
 80a2bfe:	bf00      	nop

080a2c00 <__aeabi_ul2d>:
 80a2c00:	ea50 0201 	orrs.w	r2, r0, r1
 80a2c04:	bf08      	it	eq
 80a2c06:	4770      	bxeq	lr
 80a2c08:	b530      	push	{r4, r5, lr}
 80a2c0a:	f04f 0500 	mov.w	r5, #0
 80a2c0e:	e00a      	b.n	80a2c26 <__aeabi_l2d+0x16>

080a2c10 <__aeabi_l2d>:
 80a2c10:	ea50 0201 	orrs.w	r2, r0, r1
 80a2c14:	bf08      	it	eq
 80a2c16:	4770      	bxeq	lr
 80a2c18:	b530      	push	{r4, r5, lr}
 80a2c1a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2c1e:	d502      	bpl.n	80a2c26 <__aeabi_l2d+0x16>
 80a2c20:	4240      	negs	r0, r0
 80a2c22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2c26:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2c2a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2c2e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2c32:	f43f aedc 	beq.w	80a29ee <__adddf3+0xe6>
 80a2c36:	f04f 0203 	mov.w	r2, #3
 80a2c3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2c3e:	bf18      	it	ne
 80a2c40:	3203      	addne	r2, #3
 80a2c42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2c46:	bf18      	it	ne
 80a2c48:	3203      	addne	r2, #3
 80a2c4a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2c4e:	f1c2 0320 	rsb	r3, r2, #32
 80a2c52:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2c56:	fa20 f002 	lsr.w	r0, r0, r2
 80a2c5a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2c5e:	ea40 000e 	orr.w	r0, r0, lr
 80a2c62:	fa21 f102 	lsr.w	r1, r1, r2
 80a2c66:	4414      	add	r4, r2
 80a2c68:	e6c1      	b.n	80a29ee <__adddf3+0xe6>
 80a2c6a:	bf00      	nop

080a2c6c <__aeabi_dmul>:
 80a2c6c:	b570      	push	{r4, r5, r6, lr}
 80a2c6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2c72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2c76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2c7a:	bf1d      	ittte	ne
 80a2c7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2c80:	ea94 0f0c 	teqne	r4, ip
 80a2c84:	ea95 0f0c 	teqne	r5, ip
 80a2c88:	f000 f8de 	bleq	80a2e48 <__aeabi_dmul+0x1dc>
 80a2c8c:	442c      	add	r4, r5
 80a2c8e:	ea81 0603 	eor.w	r6, r1, r3
 80a2c92:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2c96:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2c9a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2c9e:	bf18      	it	ne
 80a2ca0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2ca4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2cac:	d038      	beq.n	80a2d20 <__aeabi_dmul+0xb4>
 80a2cae:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2cb2:	f04f 0500 	mov.w	r5, #0
 80a2cb6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2cba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2cbe:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2cc2:	f04f 0600 	mov.w	r6, #0
 80a2cc6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2cca:	f09c 0f00 	teq	ip, #0
 80a2cce:	bf18      	it	ne
 80a2cd0:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2cd4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2cd8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2cdc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2ce0:	d204      	bcs.n	80a2cec <__aeabi_dmul+0x80>
 80a2ce2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2ce6:	416d      	adcs	r5, r5
 80a2ce8:	eb46 0606 	adc.w	r6, r6, r6
 80a2cec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2cf0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2cf4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2cf8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2cfc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2d00:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2d04:	bf88      	it	hi
 80a2d06:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2d0a:	d81e      	bhi.n	80a2d4a <__aeabi_dmul+0xde>
 80a2d0c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2d10:	bf08      	it	eq
 80a2d12:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2d16:	f150 0000 	adcs.w	r0, r0, #0
 80a2d1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2d1e:	bd70      	pop	{r4, r5, r6, pc}
 80a2d20:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2d24:	ea46 0101 	orr.w	r1, r6, r1
 80a2d28:	ea40 0002 	orr.w	r0, r0, r2
 80a2d2c:	ea81 0103 	eor.w	r1, r1, r3
 80a2d30:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2d34:	bfc2      	ittt	gt
 80a2d36:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2d3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2d3e:	bd70      	popgt	{r4, r5, r6, pc}
 80a2d40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2d44:	f04f 0e00 	mov.w	lr, #0
 80a2d48:	3c01      	subs	r4, #1
 80a2d4a:	f300 80ab 	bgt.w	80a2ea4 <__aeabi_dmul+0x238>
 80a2d4e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2d52:	bfde      	ittt	le
 80a2d54:	2000      	movle	r0, #0
 80a2d56:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2d5a:	bd70      	pople	{r4, r5, r6, pc}
 80a2d5c:	f1c4 0400 	rsb	r4, r4, #0
 80a2d60:	3c20      	subs	r4, #32
 80a2d62:	da35      	bge.n	80a2dd0 <__aeabi_dmul+0x164>
 80a2d64:	340c      	adds	r4, #12
 80a2d66:	dc1b      	bgt.n	80a2da0 <__aeabi_dmul+0x134>
 80a2d68:	f104 0414 	add.w	r4, r4, #20
 80a2d6c:	f1c4 0520 	rsb	r5, r4, #32
 80a2d70:	fa00 f305 	lsl.w	r3, r0, r5
 80a2d74:	fa20 f004 	lsr.w	r0, r0, r4
 80a2d78:	fa01 f205 	lsl.w	r2, r1, r5
 80a2d7c:	ea40 0002 	orr.w	r0, r0, r2
 80a2d80:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2d84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2d88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2d8c:	fa21 f604 	lsr.w	r6, r1, r4
 80a2d90:	eb42 0106 	adc.w	r1, r2, r6
 80a2d94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2d98:	bf08      	it	eq
 80a2d9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2d9e:	bd70      	pop	{r4, r5, r6, pc}
 80a2da0:	f1c4 040c 	rsb	r4, r4, #12
 80a2da4:	f1c4 0520 	rsb	r5, r4, #32
 80a2da8:	fa00 f304 	lsl.w	r3, r0, r4
 80a2dac:	fa20 f005 	lsr.w	r0, r0, r5
 80a2db0:	fa01 f204 	lsl.w	r2, r1, r4
 80a2db4:	ea40 0002 	orr.w	r0, r0, r2
 80a2db8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2dbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2dc0:	f141 0100 	adc.w	r1, r1, #0
 80a2dc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2dc8:	bf08      	it	eq
 80a2dca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2dce:	bd70      	pop	{r4, r5, r6, pc}
 80a2dd0:	f1c4 0520 	rsb	r5, r4, #32
 80a2dd4:	fa00 f205 	lsl.w	r2, r0, r5
 80a2dd8:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2ddc:	fa20 f304 	lsr.w	r3, r0, r4
 80a2de0:	fa01 f205 	lsl.w	r2, r1, r5
 80a2de4:	ea43 0302 	orr.w	r3, r3, r2
 80a2de8:	fa21 f004 	lsr.w	r0, r1, r4
 80a2dec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2df0:	fa21 f204 	lsr.w	r2, r1, r4
 80a2df4:	ea20 0002 	bic.w	r0, r0, r2
 80a2df8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2dfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2e00:	bf08      	it	eq
 80a2e02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2e06:	bd70      	pop	{r4, r5, r6, pc}
 80a2e08:	f094 0f00 	teq	r4, #0
 80a2e0c:	d10f      	bne.n	80a2e2e <__aeabi_dmul+0x1c2>
 80a2e0e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2e12:	0040      	lsls	r0, r0, #1
 80a2e14:	eb41 0101 	adc.w	r1, r1, r1
 80a2e18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2e1c:	bf08      	it	eq
 80a2e1e:	3c01      	subeq	r4, #1
 80a2e20:	d0f7      	beq.n	80a2e12 <__aeabi_dmul+0x1a6>
 80a2e22:	ea41 0106 	orr.w	r1, r1, r6
 80a2e26:	f095 0f00 	teq	r5, #0
 80a2e2a:	bf18      	it	ne
 80a2e2c:	4770      	bxne	lr
 80a2e2e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2e32:	0052      	lsls	r2, r2, #1
 80a2e34:	eb43 0303 	adc.w	r3, r3, r3
 80a2e38:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2e3c:	bf08      	it	eq
 80a2e3e:	3d01      	subeq	r5, #1
 80a2e40:	d0f7      	beq.n	80a2e32 <__aeabi_dmul+0x1c6>
 80a2e42:	ea43 0306 	orr.w	r3, r3, r6
 80a2e46:	4770      	bx	lr
 80a2e48:	ea94 0f0c 	teq	r4, ip
 80a2e4c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2e50:	bf18      	it	ne
 80a2e52:	ea95 0f0c 	teqne	r5, ip
 80a2e56:	d00c      	beq.n	80a2e72 <__aeabi_dmul+0x206>
 80a2e58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2e5c:	bf18      	it	ne
 80a2e5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2e62:	d1d1      	bne.n	80a2e08 <__aeabi_dmul+0x19c>
 80a2e64:	ea81 0103 	eor.w	r1, r1, r3
 80a2e68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2e6c:	f04f 0000 	mov.w	r0, #0
 80a2e70:	bd70      	pop	{r4, r5, r6, pc}
 80a2e72:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2e76:	bf06      	itte	eq
 80a2e78:	4610      	moveq	r0, r2
 80a2e7a:	4619      	moveq	r1, r3
 80a2e7c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2e80:	d019      	beq.n	80a2eb6 <__aeabi_dmul+0x24a>
 80a2e82:	ea94 0f0c 	teq	r4, ip
 80a2e86:	d102      	bne.n	80a2e8e <__aeabi_dmul+0x222>
 80a2e88:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2e8c:	d113      	bne.n	80a2eb6 <__aeabi_dmul+0x24a>
 80a2e8e:	ea95 0f0c 	teq	r5, ip
 80a2e92:	d105      	bne.n	80a2ea0 <__aeabi_dmul+0x234>
 80a2e94:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2e98:	bf1c      	itt	ne
 80a2e9a:	4610      	movne	r0, r2
 80a2e9c:	4619      	movne	r1, r3
 80a2e9e:	d10a      	bne.n	80a2eb6 <__aeabi_dmul+0x24a>
 80a2ea0:	ea81 0103 	eor.w	r1, r1, r3
 80a2ea4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2ea8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2eac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2eb0:	f04f 0000 	mov.w	r0, #0
 80a2eb4:	bd70      	pop	{r4, r5, r6, pc}
 80a2eb6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2eba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2ebe:	bd70      	pop	{r4, r5, r6, pc}

080a2ec0 <__aeabi_ddiv>:
 80a2ec0:	b570      	push	{r4, r5, r6, lr}
 80a2ec2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2ec6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2eca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2ece:	bf1d      	ittte	ne
 80a2ed0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2ed4:	ea94 0f0c 	teqne	r4, ip
 80a2ed8:	ea95 0f0c 	teqne	r5, ip
 80a2edc:	f000 f8a7 	bleq	80a302e <__aeabi_ddiv+0x16e>
 80a2ee0:	eba4 0405 	sub.w	r4, r4, r5
 80a2ee4:	ea81 0e03 	eor.w	lr, r1, r3
 80a2ee8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2eec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2ef0:	f000 8088 	beq.w	80a3004 <__aeabi_ddiv+0x144>
 80a2ef4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2ef8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2efc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2f00:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2f04:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2f08:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2f0c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2f10:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2f14:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2f18:	429d      	cmp	r5, r3
 80a2f1a:	bf08      	it	eq
 80a2f1c:	4296      	cmpeq	r6, r2
 80a2f1e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2f22:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2f26:	d202      	bcs.n	80a2f2e <__aeabi_ddiv+0x6e>
 80a2f28:	085b      	lsrs	r3, r3, #1
 80a2f2a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f2e:	1ab6      	subs	r6, r6, r2
 80a2f30:	eb65 0503 	sbc.w	r5, r5, r3
 80a2f34:	085b      	lsrs	r3, r3, #1
 80a2f36:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2f3e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2f42:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2f46:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2f4a:	bf22      	ittt	cs
 80a2f4c:	1ab6      	subcs	r6, r6, r2
 80a2f4e:	4675      	movcs	r5, lr
 80a2f50:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2f54:	085b      	lsrs	r3, r3, #1
 80a2f56:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f5a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2f5e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2f62:	bf22      	ittt	cs
 80a2f64:	1ab6      	subcs	r6, r6, r2
 80a2f66:	4675      	movcs	r5, lr
 80a2f68:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2f6c:	085b      	lsrs	r3, r3, #1
 80a2f6e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f72:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2f76:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2f7a:	bf22      	ittt	cs
 80a2f7c:	1ab6      	subcs	r6, r6, r2
 80a2f7e:	4675      	movcs	r5, lr
 80a2f80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2f84:	085b      	lsrs	r3, r3, #1
 80a2f86:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f8a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2f8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2f92:	bf22      	ittt	cs
 80a2f94:	1ab6      	subcs	r6, r6, r2
 80a2f96:	4675      	movcs	r5, lr
 80a2f98:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2f9c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2fa0:	d018      	beq.n	80a2fd4 <__aeabi_ddiv+0x114>
 80a2fa2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2fa6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2faa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2fae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2fb2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2fb6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2fba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2fbe:	d1c0      	bne.n	80a2f42 <__aeabi_ddiv+0x82>
 80a2fc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2fc4:	d10b      	bne.n	80a2fde <__aeabi_ddiv+0x11e>
 80a2fc6:	ea41 0100 	orr.w	r1, r1, r0
 80a2fca:	f04f 0000 	mov.w	r0, #0
 80a2fce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2fd2:	e7b6      	b.n	80a2f42 <__aeabi_ddiv+0x82>
 80a2fd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2fd8:	bf04      	itt	eq
 80a2fda:	4301      	orreq	r1, r0
 80a2fdc:	2000      	moveq	r0, #0
 80a2fde:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2fe2:	bf88      	it	hi
 80a2fe4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2fe8:	f63f aeaf 	bhi.w	80a2d4a <__aeabi_dmul+0xde>
 80a2fec:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2ff0:	bf04      	itt	eq
 80a2ff2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2ff6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2ffa:	f150 0000 	adcs.w	r0, r0, #0
 80a2ffe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3002:	bd70      	pop	{r4, r5, r6, pc}
 80a3004:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3008:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a300c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3010:	bfc2      	ittt	gt
 80a3012:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3016:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a301a:	bd70      	popgt	{r4, r5, r6, pc}
 80a301c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3020:	f04f 0e00 	mov.w	lr, #0
 80a3024:	3c01      	subs	r4, #1
 80a3026:	e690      	b.n	80a2d4a <__aeabi_dmul+0xde>
 80a3028:	ea45 0e06 	orr.w	lr, r5, r6
 80a302c:	e68d      	b.n	80a2d4a <__aeabi_dmul+0xde>
 80a302e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3032:	ea94 0f0c 	teq	r4, ip
 80a3036:	bf08      	it	eq
 80a3038:	ea95 0f0c 	teqeq	r5, ip
 80a303c:	f43f af3b 	beq.w	80a2eb6 <__aeabi_dmul+0x24a>
 80a3040:	ea94 0f0c 	teq	r4, ip
 80a3044:	d10a      	bne.n	80a305c <__aeabi_ddiv+0x19c>
 80a3046:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a304a:	f47f af34 	bne.w	80a2eb6 <__aeabi_dmul+0x24a>
 80a304e:	ea95 0f0c 	teq	r5, ip
 80a3052:	f47f af25 	bne.w	80a2ea0 <__aeabi_dmul+0x234>
 80a3056:	4610      	mov	r0, r2
 80a3058:	4619      	mov	r1, r3
 80a305a:	e72c      	b.n	80a2eb6 <__aeabi_dmul+0x24a>
 80a305c:	ea95 0f0c 	teq	r5, ip
 80a3060:	d106      	bne.n	80a3070 <__aeabi_ddiv+0x1b0>
 80a3062:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3066:	f43f aefd 	beq.w	80a2e64 <__aeabi_dmul+0x1f8>
 80a306a:	4610      	mov	r0, r2
 80a306c:	4619      	mov	r1, r3
 80a306e:	e722      	b.n	80a2eb6 <__aeabi_dmul+0x24a>
 80a3070:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3074:	bf18      	it	ne
 80a3076:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a307a:	f47f aec5 	bne.w	80a2e08 <__aeabi_dmul+0x19c>
 80a307e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3082:	f47f af0d 	bne.w	80a2ea0 <__aeabi_dmul+0x234>
 80a3086:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a308a:	f47f aeeb 	bne.w	80a2e64 <__aeabi_dmul+0x1f8>
 80a308e:	e712      	b.n	80a2eb6 <__aeabi_dmul+0x24a>

080a3090 <__gedf2>:
 80a3090:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3094:	e006      	b.n	80a30a4 <__cmpdf2+0x4>
 80a3096:	bf00      	nop

080a3098 <__ledf2>:
 80a3098:	f04f 0c01 	mov.w	ip, #1
 80a309c:	e002      	b.n	80a30a4 <__cmpdf2+0x4>
 80a309e:	bf00      	nop

080a30a0 <__cmpdf2>:
 80a30a0:	f04f 0c01 	mov.w	ip, #1
 80a30a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a30a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a30ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a30b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a30b4:	bf18      	it	ne
 80a30b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a30ba:	d01b      	beq.n	80a30f4 <__cmpdf2+0x54>
 80a30bc:	b001      	add	sp, #4
 80a30be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a30c2:	bf0c      	ite	eq
 80a30c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a30c8:	ea91 0f03 	teqne	r1, r3
 80a30cc:	bf02      	ittt	eq
 80a30ce:	ea90 0f02 	teqeq	r0, r2
 80a30d2:	2000      	moveq	r0, #0
 80a30d4:	4770      	bxeq	lr
 80a30d6:	f110 0f00 	cmn.w	r0, #0
 80a30da:	ea91 0f03 	teq	r1, r3
 80a30de:	bf58      	it	pl
 80a30e0:	4299      	cmppl	r1, r3
 80a30e2:	bf08      	it	eq
 80a30e4:	4290      	cmpeq	r0, r2
 80a30e6:	bf2c      	ite	cs
 80a30e8:	17d8      	asrcs	r0, r3, #31
 80a30ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a30ee:	f040 0001 	orr.w	r0, r0, #1
 80a30f2:	4770      	bx	lr
 80a30f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a30f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a30fc:	d102      	bne.n	80a3104 <__cmpdf2+0x64>
 80a30fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3102:	d107      	bne.n	80a3114 <__cmpdf2+0x74>
 80a3104:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3108:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a310c:	d1d6      	bne.n	80a30bc <__cmpdf2+0x1c>
 80a310e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3112:	d0d3      	beq.n	80a30bc <__cmpdf2+0x1c>
 80a3114:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3118:	4770      	bx	lr
 80a311a:	bf00      	nop

080a311c <__aeabi_cdrcmple>:
 80a311c:	4684      	mov	ip, r0
 80a311e:	4610      	mov	r0, r2
 80a3120:	4662      	mov	r2, ip
 80a3122:	468c      	mov	ip, r1
 80a3124:	4619      	mov	r1, r3
 80a3126:	4663      	mov	r3, ip
 80a3128:	e000      	b.n	80a312c <__aeabi_cdcmpeq>
 80a312a:	bf00      	nop

080a312c <__aeabi_cdcmpeq>:
 80a312c:	b501      	push	{r0, lr}
 80a312e:	f7ff ffb7 	bl	80a30a0 <__cmpdf2>
 80a3132:	2800      	cmp	r0, #0
 80a3134:	bf48      	it	mi
 80a3136:	f110 0f00 	cmnmi.w	r0, #0
 80a313a:	bd01      	pop	{r0, pc}

080a313c <__aeabi_dcmpeq>:
 80a313c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3140:	f7ff fff4 	bl	80a312c <__aeabi_cdcmpeq>
 80a3144:	bf0c      	ite	eq
 80a3146:	2001      	moveq	r0, #1
 80a3148:	2000      	movne	r0, #0
 80a314a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a314e:	bf00      	nop

080a3150 <__aeabi_dcmplt>:
 80a3150:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3154:	f7ff ffea 	bl	80a312c <__aeabi_cdcmpeq>
 80a3158:	bf34      	ite	cc
 80a315a:	2001      	movcc	r0, #1
 80a315c:	2000      	movcs	r0, #0
 80a315e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3162:	bf00      	nop

080a3164 <__aeabi_dcmple>:
 80a3164:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3168:	f7ff ffe0 	bl	80a312c <__aeabi_cdcmpeq>
 80a316c:	bf94      	ite	ls
 80a316e:	2001      	movls	r0, #1
 80a3170:	2000      	movhi	r0, #0
 80a3172:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3176:	bf00      	nop

080a3178 <__aeabi_dcmpge>:
 80a3178:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a317c:	f7ff ffce 	bl	80a311c <__aeabi_cdrcmple>
 80a3180:	bf94      	ite	ls
 80a3182:	2001      	movls	r0, #1
 80a3184:	2000      	movhi	r0, #0
 80a3186:	f85d fb08 	ldr.w	pc, [sp], #8
 80a318a:	bf00      	nop

080a318c <__aeabi_dcmpgt>:
 80a318c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3190:	f7ff ffc4 	bl	80a311c <__aeabi_cdrcmple>
 80a3194:	bf34      	ite	cc
 80a3196:	2001      	movcc	r0, #1
 80a3198:	2000      	movcs	r0, #0
 80a319a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a319e:	bf00      	nop

080a31a0 <__aeabi_dcmpun>:
 80a31a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a31a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a31a8:	d102      	bne.n	80a31b0 <__aeabi_dcmpun+0x10>
 80a31aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a31ae:	d10a      	bne.n	80a31c6 <__aeabi_dcmpun+0x26>
 80a31b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a31b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a31b8:	d102      	bne.n	80a31c0 <__aeabi_dcmpun+0x20>
 80a31ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a31be:	d102      	bne.n	80a31c6 <__aeabi_dcmpun+0x26>
 80a31c0:	f04f 0000 	mov.w	r0, #0
 80a31c4:	4770      	bx	lr
 80a31c6:	f04f 0001 	mov.w	r0, #1
 80a31ca:	4770      	bx	lr

080a31cc <__aeabi_d2iz>:
 80a31cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a31d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a31d4:	d215      	bcs.n	80a3202 <__aeabi_d2iz+0x36>
 80a31d6:	d511      	bpl.n	80a31fc <__aeabi_d2iz+0x30>
 80a31d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a31dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a31e0:	d912      	bls.n	80a3208 <__aeabi_d2iz+0x3c>
 80a31e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a31e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a31ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a31ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a31f2:	fa23 f002 	lsr.w	r0, r3, r2
 80a31f6:	bf18      	it	ne
 80a31f8:	4240      	negne	r0, r0
 80a31fa:	4770      	bx	lr
 80a31fc:	f04f 0000 	mov.w	r0, #0
 80a3200:	4770      	bx	lr
 80a3202:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3206:	d105      	bne.n	80a3214 <__aeabi_d2iz+0x48>
 80a3208:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a320c:	bf08      	it	eq
 80a320e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3212:	4770      	bx	lr
 80a3214:	f04f 0000 	mov.w	r0, #0
 80a3218:	4770      	bx	lr
 80a321a:	bf00      	nop

080a321c <__aeabi_d2uiz>:
 80a321c:	004a      	lsls	r2, r1, #1
 80a321e:	d211      	bcs.n	80a3244 <__aeabi_d2uiz+0x28>
 80a3220:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3224:	d211      	bcs.n	80a324a <__aeabi_d2uiz+0x2e>
 80a3226:	d50d      	bpl.n	80a3244 <__aeabi_d2uiz+0x28>
 80a3228:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a322c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3230:	d40e      	bmi.n	80a3250 <__aeabi_d2uiz+0x34>
 80a3232:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3236:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a323a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a323e:	fa23 f002 	lsr.w	r0, r3, r2
 80a3242:	4770      	bx	lr
 80a3244:	f04f 0000 	mov.w	r0, #0
 80a3248:	4770      	bx	lr
 80a324a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a324e:	d102      	bne.n	80a3256 <__aeabi_d2uiz+0x3a>
 80a3250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3254:	4770      	bx	lr
 80a3256:	f04f 0000 	mov.w	r0, #0
 80a325a:	4770      	bx	lr

080a325c <__cxa_atexit>:
 80a325c:	b510      	push	{r4, lr}
 80a325e:	4c05      	ldr	r4, [pc, #20]	; (80a3274 <__cxa_atexit+0x18>)
 80a3260:	4613      	mov	r3, r2
 80a3262:	b12c      	cbz	r4, 80a3270 <__cxa_atexit+0x14>
 80a3264:	460a      	mov	r2, r1
 80a3266:	4601      	mov	r1, r0
 80a3268:	2002      	movs	r0, #2
 80a326a:	f3af 8000 	nop.w
 80a326e:	bd10      	pop	{r4, pc}
 80a3270:	4620      	mov	r0, r4
 80a3272:	bd10      	pop	{r4, pc}
 80a3274:	00000000 	.word	0x00000000

080a3278 <memcpy>:
 80a3278:	b510      	push	{r4, lr}
 80a327a:	1e43      	subs	r3, r0, #1
 80a327c:	440a      	add	r2, r1
 80a327e:	4291      	cmp	r1, r2
 80a3280:	d004      	beq.n	80a328c <memcpy+0x14>
 80a3282:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3286:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a328a:	e7f8      	b.n	80a327e <memcpy+0x6>
 80a328c:	bd10      	pop	{r4, pc}

080a328e <memset>:
 80a328e:	4603      	mov	r3, r0
 80a3290:	4402      	add	r2, r0
 80a3292:	4293      	cmp	r3, r2
 80a3294:	d002      	beq.n	80a329c <memset+0xe>
 80a3296:	f803 1b01 	strb.w	r1, [r3], #1
 80a329a:	e7fa      	b.n	80a3292 <memset+0x4>
 80a329c:	4770      	bx	lr
	...

080a32a0 <srand>:
 80a32a0:	b538      	push	{r3, r4, r5, lr}
 80a32a2:	4b12      	ldr	r3, [pc, #72]	; (80a32ec <srand+0x4c>)
 80a32a4:	4605      	mov	r5, r0
 80a32a6:	681c      	ldr	r4, [r3, #0]
 80a32a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a32aa:	b9d3      	cbnz	r3, 80a32e2 <srand+0x42>
 80a32ac:	2018      	movs	r0, #24
 80a32ae:	f7fe fb23 	bl	80a18f8 <malloc>
 80a32b2:	f243 330e 	movw	r3, #13070	; 0x330e
 80a32b6:	63a0      	str	r0, [r4, #56]	; 0x38
 80a32b8:	8003      	strh	r3, [r0, #0]
 80a32ba:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a32be:	8043      	strh	r3, [r0, #2]
 80a32c0:	f241 2334 	movw	r3, #4660	; 0x1234
 80a32c4:	8083      	strh	r3, [r0, #4]
 80a32c6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a32ca:	80c3      	strh	r3, [r0, #6]
 80a32cc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a32d0:	8103      	strh	r3, [r0, #8]
 80a32d2:	2305      	movs	r3, #5
 80a32d4:	8143      	strh	r3, [r0, #10]
 80a32d6:	230b      	movs	r3, #11
 80a32d8:	8183      	strh	r3, [r0, #12]
 80a32da:	2201      	movs	r2, #1
 80a32dc:	2300      	movs	r3, #0
 80a32de:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a32e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a32e4:	2200      	movs	r2, #0
 80a32e6:	611d      	str	r5, [r3, #16]
 80a32e8:	615a      	str	r2, [r3, #20]
 80a32ea:	bd38      	pop	{r3, r4, r5, pc}
 80a32ec:	20000070 	.word	0x20000070

080a32f0 <strcmp>:
 80a32f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a32f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a32f8:	2a01      	cmp	r2, #1
 80a32fa:	bf28      	it	cs
 80a32fc:	429a      	cmpcs	r2, r3
 80a32fe:	d0f7      	beq.n	80a32f0 <strcmp>
 80a3300:	1ad0      	subs	r0, r2, r3
 80a3302:	4770      	bx	lr

080a3304 <strlen>:
 80a3304:	4603      	mov	r3, r0
 80a3306:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a330a:	2a00      	cmp	r2, #0
 80a330c:	d1fb      	bne.n	80a3306 <strlen+0x2>
 80a330e:	1a18      	subs	r0, r3, r0
 80a3310:	3801      	subs	r0, #1
 80a3312:	4770      	bx	lr

080a3314 <dynalib_user>:
 80a3314:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a3324:	0000 0000 6f43 6c6f 4f00 6666 4800 6165     ....Cool.Off.Hea
 80a3334:	0074 6e49 6176 696c 2064 6f6d 6564 203a     t.Invalid mode: 
 80a3344:	7400 6d65 6570 6172 7574 6572 7300 7465     .temperature.set
 80a3354:	6f4d 6564 3b00 0000                         Mode.;..

080a335c <CSWTCH.210>:
 80a335c:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a336c:	0050 0000                                   P...

080a3370 <_ZTV7TwoWire>:
	...
 80a3378:	199b 080a 19e5 080a 19bd 080a 199d 080a     ................
 80a3388:	19c5 080a 19cd 080a 19d5 080a 19dd 080a     ................

080a3398 <_ZTV9IPAddress>:
	...
 80a33a0:	1a31 080a 1a21 080a 1a23 080a 6162 6475     1...!...#...baud
 80a33b0:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a33c0:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a33d0:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a33e0:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a33f0:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a3400:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a3410:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a3420:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a3430:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a3440:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a3450:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a3460:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a3470:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a3480:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a3490 <_ZTVN5spark12NetworkClassE>:
	...
 80a3498:	1af9 080a 1b03 080a 1b0d 080a 1b17 080a     ................
 80a34a8:	1b21 080a 1b2d 080a 1b39 080a 1b45 080a     !...-...9...E...
 80a34b8:	1b4d 080a 1b57 080a 1b61 080a 616e 006e     M...W...a...nan.
 80a34c8:	766f 0066 002e 6e69 0066 005a 2b25 3330     ovf...inf.Z.%+03
 80a34d8:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
 80a34e8:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
 80a34f8:	656d 0000                                   me..

080a34fc <_ZTV11USARTSerial>:
	...
 80a3504:	1fc9 080a 2019 080a 2027 080a 1bc5 080a     ..... ..' ......
 80a3514:	1fdd 080a 1fff 080a 1feb 080a 2013 080a     ............. ..
 80a3524:	1fcb 080a 1fcf 080a                         ........

080a352c <_ZTV9USBSerial>:
	...
 80a3534:	20d1 080a 2121 080a 212f 080a 1bc5 080a     . ..!!../!......
 80a3544:	210d 080a 20d3 080a 20e9 080a 211b 080a     .!... ... ...!..
 80a3554:	20ff 080a 20cd 080a                         . ... ..

080a355c <_ZTVN5spark9WiFiClassE>:
	...
 80a3564:	2313 080a 2309 080a 22ff 080a 2271 080a     .#...#..."..q"..
 80a3574:	22f3 080a 22e7 080a 22db 080a 22d3 080a     ."..."..."..."..
 80a3584:	22c9 080a 22bf 080a 227b 080a               ."..."..{"..

080a3590 <_ZSt7nothrow>:
 80a3590:	0000 0000                                   ....

080a3594 <__sf_fake_stdin>:
	...

080a35b4 <__sf_fake_stdout>:
	...

080a35d4 <__sf_fake_stderr>:
	...
 80a35f4:	0043                                        C.

080a35f6 <link_const_variable_data_end>:
	...

080a35f8 <link_constructors_location>:
 80a35f8:	080a0249 	.word	0x080a0249
 80a35fc:	080a1589 	.word	0x080a1589
 80a3600:	080a1ae9 	.word	0x080a1ae9
 80a3604:	080a1bb1 	.word	0x080a1bb1
 80a3608:	080a1e15 	.word	0x080a1e15
 80a360c:	080a1f81 	.word	0x080a1f81
 80a3610:	080a1fb5 	.word	0x080a1fb5
 80a3614:	080a231d 	.word	0x080a231d
 80a3618:	080a25f9 	.word	0x080a25f9
 80a361c:	080a266d 	.word	0x080a266d
 80a3620:	080a2731 	.word	0x080a2731
 80a3624:	080a27b5 	.word	0x080a27b5
 80a3628:	080a2839 	.word	0x080a2839

080a362c <link_constructors_end>:
 80a362c:	00000000 	.word	0x00000000
