
/Users/owner/Documents/School/ee1301Main/EE1301/Labs/IoT/Lab3/target/1.5.2/photon/Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003d70  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3d90  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  080a3d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005bc  20000078  20000078  00030078  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a3e08  080a3e08  00023e08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3e30  080a3e30  00023e30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ad0f6  00000000  00000000  00023e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f821  00000000  00000000  000d0f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014064  00000000  00000000  000e074b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ef8  00000000  00000000  000f47af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003328  00000000  00000000  000f66a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024839  00000000  00000000  000f99cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00023885  00000000  00000000  0011e208  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a9325  00000000  00000000  00141a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b9b4  00000000  00000000  001eadb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 fc9d 	bl	80a3970 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 fca2 	bl	80a3986 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a3d94 	.word	0x080a3d94
 80a0050:	20000074 	.word	0x20000074
 80a0054:	20000078 	.word	0x20000078
 80a0058:	20000634 	.word	0x20000634
 80a005c:	20000634 	.word	0x20000634

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fd4f 	bl	80a2b04 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a3d54 	.word	0x080a3d54
 80a0088:	080a3d88 	.word	0x080a3d88

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b854 	b.w	80a0138 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f881 	bl	80a0198 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 bcf5 	b.w	80a2a88 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f001 bc91 	b.w	80a19c4 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 bc97 	b.w	80a19d4 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_Z7setMode6String>:
  led.show();

  delay(500);
}

int setMode(String modeStr) {
 80a00b8:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a00ba:	4919      	ldr	r1, [pc, #100]	; (80a0120 <_Z7setMode6String+0x68>)
 80a00bc:	4605      	mov	r5, r0
 80a00be:	f002 fab7 	bl	80a2630 <_ZNK6String6equalsEPKc>
 80a00c2:	4c18      	ldr	r4, [pc, #96]	; (80a0124 <_Z7setMode6String+0x6c>)
  if (modeStr == "Cool") {
 80a00c4:	b118      	cbz	r0, 80a00ce <_Z7setMode6String+0x16>
    mode = COOLING;
 80a00c6:	2300      	movs	r3, #0
 80a00c8:	7023      	strb	r3, [r4, #0]
    Serial.print("Invalid mode: ");
    Serial.println(modeStr);
    mode = OFF;
    return -1;
  }
  return 1;
 80a00ca:	2001      	movs	r0, #1
 80a00cc:	bd38      	pop	{r3, r4, r5, pc}
 80a00ce:	4916      	ldr	r1, [pc, #88]	; (80a0128 <_Z7setMode6String+0x70>)
 80a00d0:	4628      	mov	r0, r5
 80a00d2:	f002 faad 	bl	80a2630 <_ZNK6String6equalsEPKc>
}

int setMode(String modeStr) {
  if (modeStr == "Cool") {
    mode = COOLING;
  } else if (modeStr == "Off") {
 80a00d6:	b110      	cbz	r0, 80a00de <_Z7setMode6String+0x26>
    mode = OFF;
 80a00d8:	2001      	movs	r0, #1
 80a00da:	7020      	strb	r0, [r4, #0]
 80a00dc:	bd38      	pop	{r3, r4, r5, pc}
 80a00de:	4913      	ldr	r1, [pc, #76]	; (80a012c <_Z7setMode6String+0x74>)
 80a00e0:	4628      	mov	r0, r5
 80a00e2:	f002 faa5 	bl	80a2630 <_ZNK6String6equalsEPKc>
  } else if (modeStr == "Heat") {
 80a00e6:	b118      	cbz	r0, 80a00f0 <_Z7setMode6String+0x38>
    mode = HEATING;
 80a00e8:	2302      	movs	r3, #2
 80a00ea:	7023      	strb	r3, [r4, #0]
    Serial.print("Invalid mode: ");
    Serial.println(modeStr);
    mode = OFF;
    return -1;
  }
  return 1;
 80a00ec:	2001      	movs	r0, #1
 80a00ee:	bd38      	pop	{r3, r4, r5, pc}
 80a00f0:	490f      	ldr	r1, [pc, #60]	; (80a0130 <_Z7setMode6String+0x78>)
 80a00f2:	4628      	mov	r0, r5
 80a00f4:	f002 fa9c 	bl	80a2630 <_ZNK6String6equalsEPKc>
    mode = COOLING;
  } else if (modeStr == "Off") {
    mode = OFF;
  } else if (modeStr == "Heat") {
    mode = HEATING;
  } else if (modeStr == "REDALERT") {
 80a00f8:	b118      	cbz	r0, 80a0102 <_Z7setMode6String+0x4a>
    mode = REDALERT;
 80a00fa:	2303      	movs	r3, #3
 80a00fc:	7023      	strb	r3, [r4, #0]
    Serial.print("Invalid mode: ");
    Serial.println(modeStr);
    mode = OFF;
    return -1;
  }
  return 1;
 80a00fe:	2001      	movs	r0, #1
 80a0100:	bd38      	pop	{r3, r4, r5, pc}
  } else if (modeStr == "Heat") {
    mode = HEATING;
  } else if (modeStr == "REDALERT") {
    mode = REDALERT;
  } else {
    Serial.print("Invalid mode: ");
 80a0102:	f002 fbcd 	bl	80a28a0 <_Z16_fetch_usbserialv>
 80a0106:	490b      	ldr	r1, [pc, #44]	; (80a0134 <_Z7setMode6String+0x7c>)
 80a0108:	f002 f8fc 	bl	80a2304 <_ZN5Print5printEPKc>
    Serial.println(modeStr);
 80a010c:	f002 fbc8 	bl	80a28a0 <_Z16_fetch_usbserialv>
 80a0110:	6829      	ldr	r1, [r5, #0]
 80a0112:	f002 f90a 	bl	80a232a <_ZN5Print7printlnEPKc>
    mode = OFF;
 80a0116:	2301      	movs	r3, #1
 80a0118:	7023      	strb	r3, [r4, #0]
 80a011a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return -1;
  }
  return 1;
 80a011e:	bd38      	pop	{r3, r4, r5, pc}
 80a0120:	080a3a58 	.word	0x080a3a58
 80a0124:	20000000 	.word	0x20000000
 80a0128:	080a3a5d 	.word	0x080a3a5d
 80a012c:	080a3a61 	.word	0x080a3a61
 80a0130:	080a3a66 	.word	0x080a3a66
 80a0134:	080a3a6f 	.word	0x080a3a6f

080a0138 <setup>:
int coolingColor = led.Color(0, 0, 100);
int heatingColor = led.Color(255,165,0);
int offColor = led.Color(100, 100, 100);
int redAlertColor = led.Color(255, 0, 0);

void setup() {
 80a0138:	b508      	push	{r3, lr}
  Serial.begin(9600);
 80a013a:	f002 fbb1 	bl	80a28a0 <_Z16_fetch_usbserialv>
 80a013e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0142:	f002 fb93 	bl	80a286c <_ZN9USBSerial5beginEl>
  pinMode(TEMP_PIN, OUTPUT);
 80a0146:	4b0c      	ldr	r3, [pc, #48]	; (80a0178 <setup+0x40>)
 80a0148:	2101      	movs	r1, #1
 80a014a:	8818      	ldrh	r0, [r3, #0]
 80a014c:	f002 fd4c 	bl	80a2be8 <pinMode>
  pinMode(A0, INPUT);
 80a0150:	2100      	movs	r1, #0
 80a0152:	200a      	movs	r0, #10
 80a0154:	f002 fd48 	bl	80a2be8 <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a0158:	2300      	movs	r3, #0
 80a015a:	2209      	movs	r2, #9
 80a015c:	4907      	ldr	r1, [pc, #28]	; (80a017c <setup+0x44>)
 80a015e:	4808      	ldr	r0, [pc, #32]	; (80a0180 <setup+0x48>)
 80a0160:	f001 fbb8 	bl	80a18d4 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a0164:	4a07      	ldr	r2, [pc, #28]	; (80a0184 <setup+0x4c>)
 80a0166:	4908      	ldr	r1, [pc, #32]	; (80a0188 <setup+0x50>)
 80a0168:	4808      	ldr	r0, [pc, #32]	; (80a018c <setup+0x54>)
 80a016a:	f001 fcd1 	bl	80a1b10 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

  Particle.variable("temperature", temp);
  Particle.function("setMode", setMode);

  led.begin();
}
 80a016e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(A0, INPUT);

  Particle.variable("temperature", temp);
  Particle.function("setMode", setMode);

  led.begin();
 80a0172:	4807      	ldr	r0, [pc, #28]	; (80a0190 <setup+0x58>)
 80a0174:	f000 b90e 	b.w	80a0394 <_ZN17Adafruit_NeoPixel5beginEv>
 80a0178:	20000004 	.word	0x20000004
 80a017c:	200000a0 	.word	0x200000a0
 80a0180:	080a3a7e 	.word	0x080a3a7e
 80a0184:	080a3a8a 	.word	0x080a3a8a
 80a0188:	080a00b9 	.word	0x080a00b9
 80a018c:	080a1ae5 	.word	0x080a1ae5
 80a0190:	20000080 	.word	0x20000080
 80a0194:	00000000 	.word	0x00000000

080a0198 <loop>:
}

void loop() {
 80a0198:	b530      	push	{r4, r5, lr}
  digitalWrite(TEMP_PIN, HIGH);
 80a019a:	4d3b      	ldr	r5, [pc, #236]	; (80a0288 <loop+0xf0>)
  Particle.function("setMode", setMode);

  led.begin();
}

void loop() {
 80a019c:	b085      	sub	sp, #20
  digitalWrite(TEMP_PIN, HIGH);
 80a019e:	2101      	movs	r1, #1
 80a01a0:	8828      	ldrh	r0, [r5, #0]
 80a01a2:	f002 fd32 	bl	80a2c0a <digitalWrite>
  delay(10);
 80a01a6:	200a      	movs	r0, #10
 80a01a8:	f001 fc34 	bl	80a1a14 <delay>
  temp = (analogRead(A0) - 620) / 12.4;
 80a01ac:	200a      	movs	r0, #10
 80a01ae:	f002 fd45 	bl	80a2c3c <analogRead>
 80a01b2:	f5a0 701b 	sub.w	r0, r0, #620	; 0x26c
 80a01b6:	f003 f86f 	bl	80a3298 <__aeabi_i2d>
 80a01ba:	a331      	add	r3, pc, #196	; (adr r3, 80a0280 <loop+0xe8>)
 80a01bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01c0:	f003 f9fa 	bl	80a35b8 <__aeabi_ddiv>
 80a01c4:	4c31      	ldr	r4, [pc, #196]	; (80a028c <loop+0xf4>)
 80a01c6:	e9c4 0100 	strd	r0, r1, [r4]
  digitalWrite(TEMP_PIN, LOW);
 80a01ca:	2100      	movs	r1, #0
 80a01cc:	8828      	ldrh	r0, [r5, #0]
 80a01ce:	f002 fd1c 	bl	80a2c0a <digitalWrite>
  Serial.print(temp);
 80a01d2:	f002 fb65 	bl	80a28a0 <_Z16_fetch_usbserialv>
 80a01d6:	2302      	movs	r3, #2
 80a01d8:	9300      	str	r3, [sp, #0]
 80a01da:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a01de:	f002 f987 	bl	80a24f0 <_ZN5Print5printEdi>
  Serial.println(";");
 80a01e2:	f002 fb5d 	bl	80a28a0 <_Z16_fetch_usbserialv>
 80a01e6:	492a      	ldr	r1, [pc, #168]	; (80a0290 <loop+0xf8>)
 80a01e8:	f002 f89f 	bl	80a232a <_ZN5Print7printlnEPKc>

  switch (mode) {
 80a01ec:	4b29      	ldr	r3, [pc, #164]	; (80a0294 <loop+0xfc>)
 80a01ee:	781b      	ldrb	r3, [r3, #0]
 80a01f0:	2b03      	cmp	r3, #3
 80a01f2:	d83a      	bhi.n	80a026a <loop+0xd2>
 80a01f4:	e8df f003 	tbb	[pc, r3]
 80a01f8:	17100902 	.word	0x17100902
    case COOLING: 
      led.setPixelColor(0, coolingColor);
 80a01fc:	4b26      	ldr	r3, [pc, #152]	; (80a0298 <loop+0x100>)
 80a01fe:	2100      	movs	r1, #0
 80a0200:	681a      	ldr	r2, [r3, #0]
 80a0202:	4826      	ldr	r0, [pc, #152]	; (80a029c <loop+0x104>)
 80a0204:	f001 f9b6 	bl	80a1574 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      break;
 80a0208:	e02f      	b.n	80a026a <loop+0xd2>
    case OFF: 
      led.setPixelColor(0, offColor);
 80a020a:	4b25      	ldr	r3, [pc, #148]	; (80a02a0 <loop+0x108>)
 80a020c:	2100      	movs	r1, #0
 80a020e:	681a      	ldr	r2, [r3, #0]
 80a0210:	4822      	ldr	r0, [pc, #136]	; (80a029c <loop+0x104>)
 80a0212:	f001 f9af 	bl	80a1574 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      break;
 80a0216:	e028      	b.n	80a026a <loop+0xd2>
    case HEATING: 
      led.setPixelColor(0, heatingColor);
 80a0218:	4b22      	ldr	r3, [pc, #136]	; (80a02a4 <loop+0x10c>)
 80a021a:	2100      	movs	r1, #0
 80a021c:	681a      	ldr	r2, [r3, #0]
 80a021e:	481f      	ldr	r0, [pc, #124]	; (80a029c <loop+0x104>)
 80a0220:	f001 f9a8 	bl	80a1574 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      break;
 80a0224:	e021      	b.n	80a026a <loop+0xd2>
    case REDALERT:
      led.setPixelColor(0, redAlertColor);
 80a0226:	4b20      	ldr	r3, [pc, #128]	; (80a02a8 <loop+0x110>)
 80a0228:	2100      	movs	r1, #0
 80a022a:	681a      	ldr	r2, [r3, #0]
 80a022c:	481b      	ldr	r0, [pc, #108]	; (80a029c <loop+0x104>)
 80a022e:	f001 f9a1 	bl	80a1574 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a0232:	4b1e      	ldr	r3, [pc, #120]	; (80a02ac <loop+0x114>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0234:	4a1e      	ldr	r2, [pc, #120]	; (80a02b0 <loop+0x118>)
 80a0236:	781b      	ldrb	r3, [r3, #0]
 80a0238:	491e      	ldr	r1, [pc, #120]	; (80a02b4 <loop+0x11c>)
 80a023a:	f88d 3000 	strb.w	r3, [sp]
 80a023e:	a802      	add	r0, sp, #8
 80a0240:	233c      	movs	r3, #60	; 0x3c
 80a0242:	f001 fda3 	bl	80a1d8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0246:	9c03      	ldr	r4, [sp, #12]
 80a0248:	b17c      	cbz	r4, 80a026a <loop+0xd2>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a024a:	6863      	ldr	r3, [r4, #4]
 80a024c:	3b01      	subs	r3, #1
 80a024e:	6063      	str	r3, [r4, #4]
 80a0250:	b95b      	cbnz	r3, 80a026a <loop+0xd2>
        {
          _M_dispose();
 80a0252:	6823      	ldr	r3, [r4, #0]
 80a0254:	4620      	mov	r0, r4
 80a0256:	689b      	ldr	r3, [r3, #8]
 80a0258:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a025a:	68a3      	ldr	r3, [r4, #8]
 80a025c:	3b01      	subs	r3, #1
 80a025e:	60a3      	str	r3, [r4, #8]
 80a0260:	b91b      	cbnz	r3, 80a026a <loop+0xd2>
            _M_destroy();
 80a0262:	6823      	ldr	r3, [r4, #0]
 80a0264:	4620      	mov	r0, r4
 80a0266:	68db      	ldr	r3, [r3, #12]
 80a0268:	4798      	blx	r3
      break;
  }



  led.show();
 80a026a:	480c      	ldr	r0, [pc, #48]	; (80a029c <loop+0x104>)
 80a026c:	f000 f8c8 	bl	80a0400 <_ZN17Adafruit_NeoPixel4showEv>

  delay(500);
 80a0270:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0274:	f001 fbce 	bl	80a1a14 <delay>
}
 80a0278:	b005      	add	sp, #20
 80a027a:	bd30      	pop	{r4, r5, pc}
 80a027c:	f3af 8000 	nop.w
 80a0280:	cccccccd 	.word	0xcccccccd
 80a0284:	4028cccc 	.word	0x4028cccc
 80a0288:	20000004 	.word	0x20000004
 80a028c:	200000a0 	.word	0x200000a0
 80a0290:	080a3a92 	.word	0x080a3a92
 80a0294:	20000000 	.word	0x20000000
 80a0298:	2000007c 	.word	0x2000007c
 80a029c:	20000080 	.word	0x20000080
 80a02a0:	20000098 	.word	0x20000098
 80a02a4:	200000ac 	.word	0x200000ac
 80a02a8:	20000094 	.word	0x20000094
 80a02ac:	200000a8 	.word	0x200000a8
 80a02b0:	080a3a94 	.word	0x080a3a94
 80a02b4:	080a3a66 	.word	0x080a3a66

080a02b8 <_GLOBAL__sub_I_temp>:
    Serial.println(modeStr);
    mode = OFF;
    return -1;
  }
  return 1;
 80a02b8:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a02ba:	4b17      	ldr	r3, [pc, #92]	; (80a0318 <_GLOBAL__sub_I_temp+0x60>)
 80a02bc:	2400      	movs	r4, #0
 80a02be:	701c      	strb	r4, [r3, #0]

// Global vars
double temp = 0;
int TEMP_PIN = D7;
int LED_PIN = D4;
Adafruit_NeoPixel led = Adafruit_NeoPixel(1, LED_PIN, WS2811);
 80a02c0:	4d16      	ldr	r5, [pc, #88]	; (80a031c <_GLOBAL__sub_I_temp+0x64>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a02c2:	f001 f9d9 	bl	80a1678 <HAL_Pin_Map>
 80a02c6:	4a16      	ldr	r2, [pc, #88]	; (80a0320 <_GLOBAL__sub_I_temp+0x68>)
 80a02c8:	4623      	mov	r3, r4
 80a02ca:	7812      	ldrb	r2, [r2, #0]
 80a02cc:	2101      	movs	r1, #1
 80a02ce:	4628      	mov	r0, r5
 80a02d0:	f000 f885 	bl	80a03de <_ZN17Adafruit_NeoPixelC1Ethh>
 80a02d4:	4a13      	ldr	r2, [pc, #76]	; (80a0324 <_GLOBAL__sub_I_temp+0x6c>)
 80a02d6:	4914      	ldr	r1, [pc, #80]	; (80a0328 <_GLOBAL__sub_I_temp+0x70>)
 80a02d8:	4628      	mov	r0, r5
 80a02da:	f002 fd1f 	bl	80a2d1c <__aeabi_atexit>
enum thermode {COOLING, OFF, HEATING, REDALERT};
thermode mode = OFF;

int coolingColor = led.Color(0, 0, 100);
 80a02de:	2264      	movs	r2, #100	; 0x64
 80a02e0:	4621      	mov	r1, r4
 80a02e2:	4620      	mov	r0, r4
 80a02e4:	f001 f991 	bl	80a160a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a02e8:	4b10      	ldr	r3, [pc, #64]	; (80a032c <_GLOBAL__sub_I_temp+0x74>)
int heatingColor = led.Color(255,165,0);
 80a02ea:	4622      	mov	r2, r4
int LED_PIN = D4;
Adafruit_NeoPixel led = Adafruit_NeoPixel(1, LED_PIN, WS2811);
enum thermode {COOLING, OFF, HEATING, REDALERT};
thermode mode = OFF;

int coolingColor = led.Color(0, 0, 100);
 80a02ec:	6018      	str	r0, [r3, #0]
int heatingColor = led.Color(255,165,0);
 80a02ee:	21a5      	movs	r1, #165	; 0xa5
 80a02f0:	20ff      	movs	r0, #255	; 0xff
 80a02f2:	f001 f98a 	bl	80a160a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a02f6:	4b0e      	ldr	r3, [pc, #56]	; (80a0330 <_GLOBAL__sub_I_temp+0x78>)
int offColor = led.Color(100, 100, 100);
 80a02f8:	2264      	movs	r2, #100	; 0x64
Adafruit_NeoPixel led = Adafruit_NeoPixel(1, LED_PIN, WS2811);
enum thermode {COOLING, OFF, HEATING, REDALERT};
thermode mode = OFF;

int coolingColor = led.Color(0, 0, 100);
int heatingColor = led.Color(255,165,0);
 80a02fa:	6018      	str	r0, [r3, #0]
int offColor = led.Color(100, 100, 100);
 80a02fc:	4611      	mov	r1, r2
 80a02fe:	4610      	mov	r0, r2
 80a0300:	f001 f983 	bl	80a160a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0304:	4b0b      	ldr	r3, [pc, #44]	; (80a0334 <_GLOBAL__sub_I_temp+0x7c>)
int redAlertColor = led.Color(255, 0, 0);
 80a0306:	4622      	mov	r2, r4
enum thermode {COOLING, OFF, HEATING, REDALERT};
thermode mode = OFF;

int coolingColor = led.Color(0, 0, 100);
int heatingColor = led.Color(255,165,0);
int offColor = led.Color(100, 100, 100);
 80a0308:	6018      	str	r0, [r3, #0]
int redAlertColor = led.Color(255, 0, 0);
 80a030a:	4621      	mov	r1, r4
 80a030c:	20ff      	movs	r0, #255	; 0xff
 80a030e:	f001 f97c 	bl	80a160a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0312:	4b09      	ldr	r3, [pc, #36]	; (80a0338 <_GLOBAL__sub_I_temp+0x80>)
 80a0314:	6018      	str	r0, [r3, #0]
 80a0316:	bd38      	pop	{r3, r4, r5, pc}
 80a0318:	200000a8 	.word	0x200000a8
 80a031c:	20000080 	.word	0x20000080
 80a0320:	20000008 	.word	0x20000008
 80a0324:	20000078 	.word	0x20000078
 80a0328:	080a0341 	.word	0x080a0341
 80a032c:	2000007c 	.word	0x2000007c
 80a0330:	200000ac 	.word	0x200000ac
 80a0334:	20000098 	.word	0x20000098
 80a0338:	20000094 	.word	0x20000094

080a033c <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a033c:	f001 b98c 	b.w	80a1658 <HAL_Timer_Get_Micro_Seconds>

080a0340 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0340:	b510      	push	{r4, lr}
 80a0342:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0344:	68c0      	ldr	r0, [r0, #12]
 80a0346:	b108      	cbz	r0, 80a034c <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a0348:	f001 fb44 	bl	80a19d4 <free>
  if (begun) pinMode(pin, INPUT);
 80a034c:	7823      	ldrb	r3, [r4, #0]
 80a034e:	b11b      	cbz	r3, 80a0358 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0350:	2100      	movs	r1, #0
 80a0352:	79e0      	ldrb	r0, [r4, #7]
 80a0354:	f002 fc48 	bl	80a2be8 <pinMode>
}
 80a0358:	4620      	mov	r0, r4
 80a035a:	bd10      	pop	{r4, pc}

080a035c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a035c:	b538      	push	{r3, r4, r5, lr}
 80a035e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0360:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0362:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0364:	b108      	cbz	r0, 80a036a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0366:	f001 fb35 	bl	80a19d4 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a036a:	79a3      	ldrb	r3, [r4, #6]
 80a036c:	2b06      	cmp	r3, #6
 80a036e:	bf0c      	ite	eq
 80a0370:	2004      	moveq	r0, #4
 80a0372:	2003      	movne	r0, #3
 80a0374:	4368      	muls	r0, r5
 80a0376:	b280      	uxth	r0, r0
 80a0378:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a037a:	f001 fb23 	bl	80a19c4 <malloc>
 80a037e:	60e0      	str	r0, [r4, #12]
 80a0380:	b128      	cbz	r0, 80a038e <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0382:	88a2      	ldrh	r2, [r4, #4]
 80a0384:	2100      	movs	r1, #0
 80a0386:	f003 fafe 	bl	80a3986 <memset>
    numLEDs = n;
 80a038a:	8065      	strh	r5, [r4, #2]
 80a038c:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a038e:	80a0      	strh	r0, [r4, #4]
 80a0390:	8060      	strh	r0, [r4, #2]
 80a0392:	bd38      	pop	{r3, r4, r5, pc}

080a0394 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a0394:	b510      	push	{r4, lr}
 80a0396:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a0398:	2101      	movs	r1, #1
 80a039a:	79c0      	ldrb	r0, [r0, #7]
 80a039c:	f002 fc24 	bl	80a2be8 <pinMode>
  digitalWrite(pin, LOW);
 80a03a0:	2100      	movs	r1, #0
 80a03a2:	79e0      	ldrb	r0, [r4, #7]
 80a03a4:	f002 fc31 	bl	80a2c0a <digitalWrite>
  begun = true;
 80a03a8:	2301      	movs	r3, #1
 80a03aa:	7023      	strb	r3, [r4, #0]
 80a03ac:	bd10      	pop	{r4, pc}

080a03ae <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a03ae:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a03b0:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a03b2:	4605      	mov	r5, r0
 80a03b4:	460c      	mov	r4, r1
    if (begun) {
 80a03b6:	b11b      	cbz	r3, 80a03c0 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a03b8:	2100      	movs	r1, #0
 80a03ba:	79c0      	ldrb	r0, [r0, #7]
 80a03bc:	f002 fc14 	bl	80a2be8 <pinMode>
    }
    pin = p;
    if (begun) {
 80a03c0:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a03c2:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a03c4:	b153      	cbz	r3, 80a03dc <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a03c6:	b2a4      	uxth	r4, r4
 80a03c8:	4620      	mov	r0, r4
 80a03ca:	2101      	movs	r1, #1
 80a03cc:	f002 fc0c 	bl	80a2be8 <pinMode>
        digitalWrite(p, LOW);
 80a03d0:	4620      	mov	r0, r4
    }
}
 80a03d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a03d6:	2100      	movs	r1, #0
 80a03d8:	f002 bc17 	b.w	80a2c0a <digitalWrite>
 80a03dc:	bd38      	pop	{r3, r4, r5, pc}

080a03de <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a03de:	b570      	push	{r4, r5, r6, lr}
 80a03e0:	4604      	mov	r4, r0
 80a03e2:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a03e4:	2500      	movs	r5, #0
 80a03e6:	7183      	strb	r3, [r0, #6]
 80a03e8:	7005      	strb	r5, [r0, #0]
 80a03ea:	7205      	strb	r5, [r0, #8]
 80a03ec:	60c5      	str	r5, [r0, #12]
 80a03ee:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a03f0:	f7ff ffb4 	bl	80a035c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a03f4:	4620      	mov	r0, r4
 80a03f6:	4631      	mov	r1, r6
 80a03f8:	f7ff ffd9 	bl	80a03ae <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a03fc:	4620      	mov	r0, r4
 80a03fe:	bd70      	pop	{r4, r5, r6, pc}

080a0400 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0400:	68c3      	ldr	r3, [r0, #12]
 80a0402:	2b00      	cmp	r3, #0
 80a0404:	f000 858e 	beq.w	80a0f24 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a0408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a040c:	4604      	mov	r4, r0
 80a040e:	7983      	ldrb	r3, [r0, #6]
 80a0410:	b086      	sub	sp, #24
 80a0412:	3b02      	subs	r3, #2
 80a0414:	b2db      	uxtb	r3, r3
 80a0416:	2b04      	cmp	r3, #4
 80a0418:	bf96      	itet	ls
 80a041a:	4a29      	ldrls	r2, [pc, #164]	; (80a04c0 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a041c:	2532      	movhi	r5, #50	; 0x32
 80a041e:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0422:	f7ff ff8b 	bl	80a033c <micros>
 80a0426:	6923      	ldr	r3, [r4, #16]
 80a0428:	1ac0      	subs	r0, r0, r3
 80a042a:	42a8      	cmp	r0, r5
 80a042c:	d3f9      	bcc.n	80a0422 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a042e:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0430:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0432:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0434:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0436:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a043a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a043e:	f000 8272 	beq.w	80a0926 <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a0442:	2907      	cmp	r1, #7
 80a0444:	f000 826f 	beq.w	80a0926 <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0448:	2906      	cmp	r1, #6
 80a044a:	f000 8432 	beq.w	80a0cb2 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a044e:	2905      	cmp	r1, #5
 80a0450:	f000 83ab 	beq.w	80a0baa <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0454:	2908      	cmp	r1, #8
 80a0456:	f000 83a8 	beq.w	80a0baa <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a045a:	2900      	cmp	r1, #0
 80a045c:	f040 8563 	bne.w	80a0f26 <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a0460:	4a18      	ldr	r2, [pc, #96]	; (80a04c4 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0462:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0466:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a046a:	b29b      	uxth	r3, r3
 80a046c:	2b00      	cmp	r3, #0
 80a046e:	f000 8395 	beq.w	80a0b9c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0472:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0474:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0478:	f10e 0503 	add.w	r5, lr, #3
 80a047c:	3b03      	subs	r3, #3
 80a047e:	b29b      	uxth	r3, r3
 80a0480:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0484:	f89e 3000 	ldrb.w	r3, [lr]
 80a0488:	b2db      	uxtb	r3, r3
 80a048a:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a048e:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0492:	b2db      	uxtb	r3, r3
 80a0494:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0498:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a049c:	b2db      	uxtb	r3, r3
 80a049e:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a04a2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a04a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a04aa:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a04ae:	021b      	lsls	r3, r3, #8
 80a04b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a04b4:	4303      	orrs	r3, r0
 80a04b6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a04b8:	f88d 1005 	strb.w	r1, [sp, #5]
 80a04bc:	e11b      	b.n	80a06f6 <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a04be:	bf00      	nop
 80a04c0:	080a3a9c 	.word	0x080a3a9c
 80a04c4:	200000b0 	.word	0x200000b0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a04c8:	4600      	mov	r0, r0
 80a04ca:	bf00      	nop
 80a04cc:	bf00      	nop
 80a04ce:	bf00      	nop
 80a04d0:	bf00      	nop
 80a04d2:	bf00      	nop
 80a04d4:	bf00      	nop
 80a04d6:	bf00      	nop
 80a04d8:	bf00      	nop
 80a04da:	bf00      	nop
 80a04dc:	bf00      	nop
 80a04de:	bf00      	nop
 80a04e0:	bf00      	nop
 80a04e2:	bf00      	nop
 80a04e4:	bf00      	nop
 80a04e6:	bf00      	nop
 80a04e8:	bf00      	nop
 80a04ea:	bf00      	nop
 80a04ec:	bf00      	nop
 80a04ee:	bf00      	nop
 80a04f0:	bf00      	nop
 80a04f2:	bf00      	nop
 80a04f4:	bf00      	nop
 80a04f6:	bf00      	nop
 80a04f8:	bf00      	nop
 80a04fa:	bf00      	nop
 80a04fc:	bf00      	nop
 80a04fe:	bf00      	nop
 80a0500:	bf00      	nop
 80a0502:	bf00      	nop
 80a0504:	bf00      	nop
 80a0506:	bf00      	nop
 80a0508:	bf00      	nop
 80a050a:	bf00      	nop
 80a050c:	bf00      	nop
 80a050e:	bf00      	nop
 80a0510:	bf00      	nop
 80a0512:	bf00      	nop
 80a0514:	bf00      	nop
 80a0516:	bf00      	nop
 80a0518:	bf00      	nop
 80a051a:	bf00      	nop
 80a051c:	bf00      	nop
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
 80a0528:	bf00      	nop
 80a052a:	bf00      	nop
 80a052c:	bf00      	nop
 80a052e:	bf00      	nop
 80a0530:	bf00      	nop
 80a0532:	bf00      	nop
 80a0534:	bf00      	nop
 80a0536:	bf00      	nop
 80a0538:	bf00      	nop
 80a053a:	bf00      	nop
 80a053c:	bf00      	nop
 80a053e:	bf00      	nop
 80a0540:	bf00      	nop
 80a0542:	bf00      	nop
 80a0544:	bf00      	nop
 80a0546:	bf00      	nop
 80a0548:	bf00      	nop
 80a054a:	bf00      	nop
 80a054c:	bf00      	nop
 80a054e:	bf00      	nop
 80a0550:	bf00      	nop
 80a0552:	bf00      	nop
 80a0554:	bf00      	nop
 80a0556:	bf00      	nop
 80a0558:	bf00      	nop
 80a055a:	bf00      	nop
 80a055c:	bf00      	nop
 80a055e:	bf00      	nop
 80a0560:	bf00      	nop
 80a0562:	bf00      	nop
 80a0564:	bf00      	nop
 80a0566:	bf00      	nop
 80a0568:	bf00      	nop
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
 80a056e:	bf00      	nop
 80a0570:	bf00      	nop
 80a0572:	bf00      	nop
 80a0574:	bf00      	nop
 80a0576:	bf00      	nop
 80a0578:	bf00      	nop
 80a057a:	bf00      	nop
 80a057c:	bf00      	nop
 80a057e:	bf00      	nop
 80a0580:	bf00      	nop
 80a0582:	bf00      	nop
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
 80a058a:	bf00      	nop
 80a058c:	bf00      	nop
 80a058e:	bf00      	nop
 80a0590:	bf00      	nop
 80a0592:	bf00      	nop
 80a0594:	bf00      	nop
 80a0596:	bf00      	nop
 80a0598:	bf00      	nop
 80a059a:	bf00      	nop
 80a059c:	bf00      	nop
 80a059e:	bf00      	nop
 80a05a0:	bf00      	nop
 80a05a2:	bf00      	nop
 80a05a4:	bf00      	nop
 80a05a6:	bf00      	nop
 80a05a8:	bf00      	nop
 80a05aa:	bf00      	nop
 80a05ac:	bf00      	nop
 80a05ae:	bf00      	nop
 80a05b0:	bf00      	nop
 80a05b2:	bf00      	nop
 80a05b4:	bf00      	nop
 80a05b6:	bf00      	nop
 80a05b8:	bf00      	nop
 80a05ba:	bf00      	nop
 80a05bc:	bf00      	nop
 80a05be:	bf00      	nop
 80a05c0:	bf00      	nop
 80a05c2:	bf00      	nop
 80a05c4:	bf00      	nop
 80a05c6:	bf00      	nop
 80a05c8:	bf00      	nop
 80a05ca:	bf00      	nop
 80a05cc:	bf00      	nop
 80a05ce:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a05d0:	79e3      	ldrb	r3, [r4, #7]
 80a05d2:	6810      	ldr	r0, [r2, #0]
 80a05d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a05d8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a05dc:	88bf      	ldrh	r7, [r7, #4]
 80a05de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a05e2:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a05e4:	4600      	mov	r0, r0
 80a05e6:	bf00      	nop
 80a05e8:	bf00      	nop
 80a05ea:	bf00      	nop
 80a05ec:	bf00      	nop
 80a05ee:	bf00      	nop
 80a05f0:	bf00      	nop
 80a05f2:	bf00      	nop
 80a05f4:	bf00      	nop
 80a05f6:	bf00      	nop
 80a05f8:	bf00      	nop
 80a05fa:	bf00      	nop
 80a05fc:	bf00      	nop
 80a05fe:	bf00      	nop
 80a0600:	bf00      	nop
 80a0602:	bf00      	nop
 80a0604:	bf00      	nop
 80a0606:	bf00      	nop
 80a0608:	bf00      	nop
 80a060a:	bf00      	nop
 80a060c:	bf00      	nop
 80a060e:	bf00      	nop
 80a0610:	bf00      	nop
 80a0612:	bf00      	nop
 80a0614:	bf00      	nop
 80a0616:	bf00      	nop
 80a0618:	bf00      	nop
 80a061a:	bf00      	nop
 80a061c:	bf00      	nop
 80a061e:	bf00      	nop
 80a0620:	bf00      	nop
 80a0622:	bf00      	nop
 80a0624:	bf00      	nop
 80a0626:	bf00      	nop
 80a0628:	bf00      	nop
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
 80a0652:	bf00      	nop
 80a0654:	bf00      	nop
 80a0656:	bf00      	nop
 80a0658:	bf00      	nop
 80a065a:	bf00      	nop
 80a065c:	bf00      	nop
 80a065e:	bf00      	nop
 80a0660:	bf00      	nop
 80a0662:	bf00      	nop
 80a0664:	bf00      	nop
 80a0666:	bf00      	nop
 80a0668:	bf00      	nop
 80a066a:	bf00      	nop
 80a066c:	bf00      	nop
 80a066e:	bf00      	nop
 80a0670:	bf00      	nop
 80a0672:	bf00      	nop
 80a0674:	bf00      	nop
 80a0676:	bf00      	nop
 80a0678:	bf00      	nop
 80a067a:	bf00      	nop
 80a067c:	bf00      	nop
 80a067e:	bf00      	nop
 80a0680:	bf00      	nop
 80a0682:	bf00      	nop
 80a0684:	bf00      	nop
 80a0686:	bf00      	nop
 80a0688:	bf00      	nop
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
 80a06da:	bf00      	nop
 80a06dc:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a06de:	9b04      	ldr	r3, [sp, #16]
 80a06e0:	085b      	lsrs	r3, r3, #1
 80a06e2:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a06e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a06e8:	3301      	adds	r3, #1
 80a06ea:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a06ec:	2b17      	cmp	r3, #23
 80a06ee:	f88d 3005 	strb.w	r3, [sp, #5]
 80a06f2:	f200 82db 	bhi.w	80a0cac <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a06f6:	79e3      	ldrb	r3, [r4, #7]
 80a06f8:	6810      	ldr	r0, [r2, #0]
 80a06fa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a06fe:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0702:	88bf      	ldrh	r7, [r7, #4]
 80a0704:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0708:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a070a:	9803      	ldr	r0, [sp, #12]
 80a070c:	9b04      	ldr	r3, [sp, #16]
 80a070e:	4218      	tst	r0, r3
 80a0710:	f47f aeda 	bne.w	80a04c8 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0714:	4600      	mov	r0, r0
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	bf00      	nop
 80a072e:	bf00      	nop
 80a0730:	bf00      	nop
 80a0732:	bf00      	nop
 80a0734:	bf00      	nop
 80a0736:	bf00      	nop
 80a0738:	bf00      	nop
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
 80a074a:	bf00      	nop
 80a074c:	bf00      	nop
 80a074e:	bf00      	nop
 80a0750:	bf00      	nop
 80a0752:	bf00      	nop
 80a0754:	bf00      	nop
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a0766:	79e3      	ldrb	r3, [r4, #7]
 80a0768:	6810      	ldr	r0, [r2, #0]
 80a076a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a076e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0772:	88bf      	ldrh	r7, [r7, #4]
 80a0774:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0778:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a077a:	4600      	mov	r0, r0
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
 80a0870:	bf00      	nop
 80a0872:	bf00      	nop
 80a0874:	bf00      	nop
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	bf00      	nop
 80a087e:	bf00      	nop
 80a0880:	bf00      	nop
 80a0882:	bf00      	nop
 80a0884:	bf00      	nop
 80a0886:	bf00      	nop
 80a0888:	bf00      	nop
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
 80a0896:	bf00      	nop
 80a0898:	bf00      	nop
 80a089a:	bf00      	nop
 80a089c:	bf00      	nop
 80a089e:	bf00      	nop
 80a08a0:	bf00      	nop
 80a08a2:	bf00      	nop
 80a08a4:	bf00      	nop
 80a08a6:	bf00      	nop
 80a08a8:	bf00      	nop
 80a08aa:	bf00      	nop
 80a08ac:	bf00      	nop
 80a08ae:	bf00      	nop
 80a08b0:	bf00      	nop
 80a08b2:	bf00      	nop
 80a08b4:	bf00      	nop
 80a08b6:	bf00      	nop
 80a08b8:	bf00      	nop
 80a08ba:	bf00      	nop
 80a08bc:	bf00      	nop
 80a08be:	bf00      	nop
 80a08c0:	bf00      	nop
 80a08c2:	bf00      	nop
 80a08c4:	bf00      	nop
 80a08c6:	bf00      	nop
 80a08c8:	bf00      	nop
 80a08ca:	bf00      	nop
 80a08cc:	bf00      	nop
 80a08ce:	bf00      	nop
 80a08d0:	bf00      	nop
 80a08d2:	bf00      	nop
 80a08d4:	bf00      	nop
 80a08d6:	bf00      	nop
 80a08d8:	bf00      	nop
 80a08da:	bf00      	nop
 80a08dc:	bf00      	nop
 80a08de:	bf00      	nop
 80a08e0:	bf00      	nop
 80a08e2:	bf00      	nop
 80a08e4:	bf00      	nop
 80a08e6:	bf00      	nop
 80a08e8:	bf00      	nop
 80a08ea:	bf00      	nop
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
 80a0914:	bf00      	nop
 80a0916:	bf00      	nop
 80a0918:	bf00      	nop
 80a091a:	bf00      	nop
 80a091c:	bf00      	nop
 80a091e:	bf00      	nop
 80a0920:	bf00      	nop
 80a0922:	bf00      	nop
 80a0924:	e6db      	b.n	80a06de <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0926:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a092a:	4a17      	ldr	r2, [pc, #92]	; (80a0988 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a092c:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a092e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0932:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0934:	2b00      	cmp	r3, #0
 80a0936:	f000 8131 	beq.w	80a0b9c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a093a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a093c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0940:	f10e 0103 	add.w	r1, lr, #3
 80a0944:	3b03      	subs	r3, #3
 80a0946:	b29b      	uxth	r3, r3
 80a0948:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a094c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0950:	b2db      	uxtb	r3, r3
 80a0952:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0956:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a095a:	b2db      	uxtb	r3, r3
 80a095c:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0960:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0964:	b2db      	uxtb	r3, r3
 80a0966:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a096a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a096e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0972:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0976:	0200      	lsls	r0, r0, #8
 80a0978:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a097c:	433b      	orrs	r3, r7
 80a097e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0980:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0984:	e080      	b.n	80a0a88 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a0986:	bf00      	nop
 80a0988:	200000b0 	.word	0x200000b0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a098c:	4600      	mov	r0, r0
 80a098e:	bf00      	nop
 80a0990:	bf00      	nop
 80a0992:	bf00      	nop
 80a0994:	bf00      	nop
 80a0996:	bf00      	nop
 80a0998:	bf00      	nop
 80a099a:	bf00      	nop
 80a099c:	bf00      	nop
 80a099e:	bf00      	nop
 80a09a0:	bf00      	nop
 80a09a2:	bf00      	nop
 80a09a4:	bf00      	nop
 80a09a6:	bf00      	nop
 80a09a8:	bf00      	nop
 80a09aa:	bf00      	nop
 80a09ac:	bf00      	nop
 80a09ae:	bf00      	nop
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a0a26:	79e3      	ldrb	r3, [r4, #7]
 80a0a28:	6810      	ldr	r0, [r2, #0]
 80a0a2a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a2e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a32:	88bf      	ldrh	r7, [r7, #4]
 80a0a34:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a38:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a3a:	4600      	mov	r0, r0
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0a70:	9b04      	ldr	r3, [sp, #16]
 80a0a72:	085b      	lsrs	r3, r3, #1
 80a0a74:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0a76:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0a7a:	3301      	adds	r3, #1
 80a0a7c:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0a7e:	2b17      	cmp	r3, #23
 80a0a80:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0a84:	f200 8083 	bhi.w	80a0b8e <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a0a88:	79e3      	ldrb	r3, [r4, #7]
 80a0a8a:	6810      	ldr	r0, [r2, #0]
 80a0a8c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a90:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a94:	88bf      	ldrh	r7, [r7, #4]
 80a0a96:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a9a:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0a9c:	9803      	ldr	r0, [sp, #12]
 80a0a9e:	9b04      	ldr	r3, [sp, #16]
 80a0aa0:	4218      	tst	r0, r3
 80a0aa2:	f47f af73 	bne.w	80a098c <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0aa6:	4600      	mov	r0, r0
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
 80a0ab2:	bf00      	nop
 80a0ab4:	bf00      	nop
 80a0ab6:	bf00      	nop
 80a0ab8:	bf00      	nop
 80a0aba:	bf00      	nop
 80a0abc:	bf00      	nop
 80a0abe:	bf00      	nop
 80a0ac0:	bf00      	nop
 80a0ac2:	bf00      	nop
 80a0ac4:	bf00      	nop
 80a0ac6:	bf00      	nop
 80a0ac8:	bf00      	nop
 80a0aca:	bf00      	nop
 80a0acc:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0ace:	79e3      	ldrb	r3, [r4, #7]
 80a0ad0:	6810      	ldr	r0, [r2, #0]
 80a0ad2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0ad6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0ada:	88bf      	ldrh	r7, [r7, #4]
 80a0adc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ae0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ae2:	4600      	mov	r0, r0
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
 80a0b0e:	bf00      	nop
 80a0b10:	bf00      	nop
 80a0b12:	bf00      	nop
 80a0b14:	bf00      	nop
 80a0b16:	bf00      	nop
 80a0b18:	bf00      	nop
 80a0b1a:	bf00      	nop
 80a0b1c:	bf00      	nop
 80a0b1e:	bf00      	nop
 80a0b20:	bf00      	nop
 80a0b22:	bf00      	nop
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
 80a0b30:	bf00      	nop
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	e770      	b.n	80a0a70 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b8e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0b92:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b94:	b29b      	uxth	r3, r3
 80a0b96:	2b00      	cmp	r3, #0
 80a0b98:	f47f aecf 	bne.w	80a093a <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0b9c:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0b9e:	f7ff fbcd 	bl	80a033c <micros>
 80a0ba2:	6120      	str	r0, [r4, #16]
}
 80a0ba4:	b006      	add	sp, #24
 80a0ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0baa:	4b5e      	ldr	r3, [pc, #376]	; (80a0d24 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0bac:	4a5e      	ldr	r2, [pc, #376]	; (80a0d28 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0bae:	4618      	mov	r0, r3
 80a0bb0:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0bb2:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0bb6:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0bb8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0bbc:	b292      	uxth	r2, r2
 80a0bbe:	2a00      	cmp	r2, #0
 80a0bc0:	d0ec      	beq.n	80a0b9c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0bc2:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0bc6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0bca:	f10e 0503 	add.w	r5, lr, #3
 80a0bce:	3a03      	subs	r2, #3
 80a0bd0:	b292      	uxth	r2, r2
 80a0bd2:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0bd6:	f89e 2000 	ldrb.w	r2, [lr]
 80a0bda:	b2d2      	uxtb	r2, r2
 80a0bdc:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0be0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a0be4:	b2d2      	uxtb	r2, r2
 80a0be6:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0bea:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a0bee:	b2d2      	uxtb	r2, r2
 80a0bf0:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0bf4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0bf8:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0bfc:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a0c00:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a0c04:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a0c08:	ea42 020c 	orr.w	r2, r2, ip
 80a0c0c:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0c0e:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a0c12:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0c14:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0c16:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c1a:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c1e:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0c26:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0c28:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0c2c:	9e03      	ldr	r6, [sp, #12]
 80a0c2e:	9a04      	ldr	r2, [sp, #16]
 80a0c30:	4216      	tst	r6, r2
 80a0c32:	d023      	beq.n	80a0c7c <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0c34:	685a      	ldr	r2, [r3, #4]
 80a0c36:	9e05      	ldr	r6, [sp, #20]
 80a0c38:	1b92      	subs	r2, r2, r6
 80a0c3a:	2a4f      	cmp	r2, #79	; 0x4f
 80a0c3c:	d9fa      	bls.n	80a0c34 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a0c3e:	79e2      	ldrb	r2, [r4, #7]
 80a0c40:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c44:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c48:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c4c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0c50:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0c54:	6842      	ldr	r2, [r0, #4]
 80a0c56:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0c58:	685a      	ldr	r2, [r3, #4]
 80a0c5a:	9e05      	ldr	r6, [sp, #20]
 80a0c5c:	1b92      	subs	r2, r2, r6
 80a0c5e:	2a07      	cmp	r2, #7
 80a0c60:	d9fa      	bls.n	80a0c58 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a0c62:	9a04      	ldr	r2, [sp, #16]
 80a0c64:	0852      	lsrs	r2, r2, #1
 80a0c66:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0c68:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0c6c:	3201      	adds	r2, #1
 80a0c6e:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0c70:	2a17      	cmp	r2, #23
 80a0c72:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0c76:	d9cc      	bls.n	80a0c12 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0c78:	46ae      	mov	lr, r5
 80a0c7a:	e79d      	b.n	80a0bb8 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0c7c:	685a      	ldr	r2, [r3, #4]
 80a0c7e:	9e05      	ldr	r6, [sp, #20]
 80a0c80:	1b92      	subs	r2, r2, r6
 80a0c82:	2a18      	cmp	r2, #24
 80a0c84:	d9fa      	bls.n	80a0c7c <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a0c86:	79e2      	ldrb	r2, [r4, #7]
 80a0c88:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c8c:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c90:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c94:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0c98:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0c9c:	6842      	ldr	r2, [r0, #4]
 80a0c9e:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0ca0:	685a      	ldr	r2, [r3, #4]
 80a0ca2:	9e05      	ldr	r6, [sp, #20]
 80a0ca4:	1b92      	subs	r2, r2, r6
 80a0ca6:	2a45      	cmp	r2, #69	; 0x45
 80a0ca8:	d9fa      	bls.n	80a0ca0 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a0caa:	e7da      	b.n	80a0c62 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0cac:	46ae      	mov	lr, r5
 80a0cae:	f7ff bbda 	b.w	80a0466 <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a0cb2:	4a1d      	ldr	r2, [pc, #116]	; (80a0d28 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a0cb4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a0cb8:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0cba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0cbe:	b29b      	uxth	r3, r3
 80a0cc0:	2b00      	cmp	r3, #0
 80a0cc2:	f43f af6b 	beq.w	80a0b9c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a0cc6:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0cc8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0ccc:	f10e 0104 	add.w	r1, lr, #4
 80a0cd0:	3b04      	subs	r3, #4
 80a0cd2:	b29b      	uxth	r3, r3
 80a0cd4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0cd8:	f89e 3000 	ldrb.w	r3, [lr]
 80a0cdc:	b2db      	uxtb	r3, r3
 80a0cde:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0ce2:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0ce6:	b2db      	uxtb	r3, r3
 80a0ce8:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0cec:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0cf0:	b2db      	uxtb	r3, r3
 80a0cf2:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0cf6:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a0cfa:	b2db      	uxtb	r3, r3
 80a0cfc:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0d00:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0d04:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0d08:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a0d0c:	043f      	lsls	r7, r7, #16
 80a0d0e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a0d12:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a0d16:	4303      	orrs	r3, r0
 80a0d18:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a0d1c:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0d1e:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0d22:	e07e      	b.n	80a0e22 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a0d24:	e0001000 	.word	0xe0001000
 80a0d28:	200000b0 	.word	0x200000b0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d2c:	4600      	mov	r0, r0
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a0d9a:	79e3      	ldrb	r3, [r4, #7]
 80a0d9c:	6810      	ldr	r0, [r2, #0]
 80a0d9e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0da2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0da6:	88bf      	ldrh	r7, [r7, #4]
 80a0da8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0dac:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0dae:	4600      	mov	r0, r0
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0e0c:	9b04      	ldr	r3, [sp, #16]
 80a0e0e:	085b      	lsrs	r3, r3, #1
 80a0e10:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0e12:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0e16:	3301      	adds	r3, #1
 80a0e18:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a0e1a:	2b1f      	cmp	r3, #31
 80a0e1c:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0e20:	d87e      	bhi.n	80a0f20 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a0e22:	79e3      	ldrb	r3, [r4, #7]
 80a0e24:	6810      	ldr	r0, [r2, #0]
 80a0e26:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0e2a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0e2e:	88bf      	ldrh	r7, [r7, #4]
 80a0e30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0e34:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0e36:	9803      	ldr	r0, [sp, #12]
 80a0e38:	9b04      	ldr	r3, [sp, #16]
 80a0e3a:	4218      	tst	r0, r3
 80a0e3c:	f47f af76 	bne.w	80a0d2c <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0e40:	4600      	mov	r0, r0
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
 80a0e58:	bf00      	nop
 80a0e5a:	bf00      	nop
 80a0e5c:	bf00      	nop
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a0e68:	79e3      	ldrb	r3, [r4, #7]
 80a0e6a:	6810      	ldr	r0, [r2, #0]
 80a0e6c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0e70:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0e74:	88bf      	ldrh	r7, [r7, #4]
 80a0e76:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0e7a:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0e7c:	4600      	mov	r0, r0
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
 80a0eb8:	bf00      	nop
 80a0eba:	bf00      	nop
 80a0ebc:	bf00      	nop
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	e775      	b.n	80a0e0c <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a0f20:	468e      	mov	lr, r1
 80a0f22:	e6ca      	b.n	80a0cba <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a0f24:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0f26:	2903      	cmp	r1, #3
 80a0f28:	f000 812e 	beq.w	80a1188 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f2c:	4a1e      	ldr	r2, [pc, #120]	; (80a0fa8 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0f2e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0f32:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f34:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0f38:	b29b      	uxth	r3, r3
 80a0f3a:	2b00      	cmp	r3, #0
 80a0f3c:	f43f ae2e 	beq.w	80a0b9c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0f40:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0f42:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f46:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a0f48:	3b03      	subs	r3, #3
 80a0f4a:	b29b      	uxth	r3, r3
 80a0f4c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0f50:	f89e 3000 	ldrb.w	r3, [lr]
 80a0f54:	f10e 0103 	add.w	r1, lr, #3
 80a0f58:	b2db      	uxtb	r3, r3
 80a0f5a:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0f5e:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f62:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0f66:	b2db      	uxtb	r3, r3
 80a0f68:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0f6c:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f70:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a0f74:	b2db      	uxtb	r3, r3
 80a0f76:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f7a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0f7e:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f82:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f86:	021b      	lsls	r3, r3, #8
 80a0f88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0f8c:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f90:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a0f94:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f98:	433b      	orrs	r3, r7
 80a0f9a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0f9c:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0fa0:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a0fa4:	e07d      	b.n	80a10a2 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a0fa6:	bf00      	nop
 80a0fa8:	200000b0 	.word	0x200000b0
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a0fac:	9b04      	ldr	r3, [sp, #16]
 80a0fae:	085b      	lsrs	r3, r3, #1
 80a0fb0:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0fb2:	4600      	mov	r0, r0
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1038:	79e0      	ldrb	r0, [r4, #7]
 80a103a:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a103c:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1040:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1044:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a1048:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a104c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1050:	3301      	adds	r3, #1
 80a1052:	b2db      	uxtb	r3, r3
 80a1054:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1058:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a105c:	4600      	mov	r0, r0
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
          if(j==24) break;
 80a1086:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a108a:	2b18      	cmp	r3, #24
 80a108c:	d07a      	beq.n	80a1184 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a108e:	79e3      	ldrb	r3, [r4, #7]
 80a1090:	6810      	ldr	r0, [r2, #0]
 80a1092:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1096:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a109a:	88bf      	ldrh	r7, [r7, #4]
 80a109c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a10a0:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a10a2:	9803      	ldr	r0, [sp, #12]
 80a10a4:	9b04      	ldr	r3, [sp, #16]
 80a10a6:	4218      	tst	r0, r3
 80a10a8:	d180      	bne.n	80a0fac <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a10aa:	4600      	mov	r0, r0
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a10cc:	79e3      	ldrb	r3, [r4, #7]
 80a10ce:	6810      	ldr	r0, [r2, #0]
 80a10d0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a10d4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a10d8:	88bf      	ldrh	r7, [r7, #4]
 80a10da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a10de:	831f      	strh	r7, [r3, #24]
          j++;
 80a10e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a10e4:	3301      	adds	r3, #1
 80a10e6:	b2db      	uxtb	r3, r3
 80a10e8:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a10ec:	9b04      	ldr	r3, [sp, #16]
 80a10ee:	085b      	lsrs	r3, r3, #1
 80a10f0:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a10f2:	4600      	mov	r0, r0
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
          if(j==24) break;
 80a117c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1180:	2b18      	cmp	r3, #24
 80a1182:	d184      	bne.n	80a108e <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1184:	468e      	mov	lr, r1
 80a1186:	e6d5      	b.n	80a0f34 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a1188:	4a17      	ldr	r2, [pc, #92]	; (80a11e8 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a118a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a118e:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1190:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1194:	b29b      	uxth	r3, r3
 80a1196:	2b00      	cmp	r3, #0
 80a1198:	f43f ad00 	beq.w	80a0b9c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a119c:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a119e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a11a2:	f10e 0103 	add.w	r1, lr, #3
 80a11a6:	3b03      	subs	r3, #3
 80a11a8:	b29b      	uxth	r3, r3
 80a11aa:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a11ae:	f89e 3000 	ldrb.w	r3, [lr]
 80a11b2:	b2db      	uxtb	r3, r3
 80a11b4:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a11b8:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a11bc:	b2db      	uxtb	r3, r3
 80a11be:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a11c2:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a11c6:	b2db      	uxtb	r3, r3
 80a11c8:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a11cc:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a11d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a11d4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a11d8:	021b      	lsls	r3, r3, #8
 80a11da:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a11de:	4303      	orrs	r3, r0
 80a11e0:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a11e2:	f88d 6005 	strb.w	r6, [sp, #5]
 80a11e6:	e0e0      	b.n	80a13aa <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a11e8:	200000b0 	.word	0x200000b0
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a11ec:	4600      	mov	r0, r0
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a130e:	79e3      	ldrb	r3, [r4, #7]
 80a1310:	6810      	ldr	r0, [r2, #0]
 80a1312:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1316:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a131a:	88bf      	ldrh	r7, [r7, #4]
 80a131c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1320:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1322:	4600      	mov	r0, r0
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1392:	9b04      	ldr	r3, [sp, #16]
 80a1394:	085b      	lsrs	r3, r3, #1
 80a1396:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1398:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a139c:	3301      	adds	r3, #1
 80a139e:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a13a0:	2b17      	cmp	r3, #23
 80a13a2:	f88d 3005 	strb.w	r3, [sp, #5]
 80a13a6:	f200 80e3 	bhi.w	80a1570 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a13aa:	79e3      	ldrb	r3, [r4, #7]
 80a13ac:	6810      	ldr	r0, [r2, #0]
 80a13ae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13b2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13b6:	88bf      	ldrh	r7, [r7, #4]
 80a13b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13bc:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a13be:	9803      	ldr	r0, [sp, #12]
 80a13c0:	9b04      	ldr	r3, [sp, #16]
 80a13c2:	4218      	tst	r0, r3
 80a13c4:	f47f af12 	bne.w	80a11ec <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13c8:	4600      	mov	r0, r0
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a144a:	79e3      	ldrb	r3, [r4, #7]
 80a144c:	6810      	ldr	r0, [r2, #0]
 80a144e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1452:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1456:	88bf      	ldrh	r7, [r7, #4]
 80a1458:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a145c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a145e:	4600      	mov	r0, r0
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	bf00      	nop
 80a156c:	bf00      	nop
 80a156e:	e710      	b.n	80a1392 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1570:	468e      	mov	lr, r1
 80a1572:	e60d      	b.n	80a1190 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1574 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1574:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a1576:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1578:	428b      	cmp	r3, r1
 80a157a:	d945      	bls.n	80a1608 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a157c:	7a05      	ldrb	r5, [r0, #8]
 80a157e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1582:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a1586:	b2d6      	uxtb	r6, r2
 80a1588:	b145      	cbz	r5, 80a159c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a158a:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a158c:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a158e:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1590:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1594:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1598:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a159c:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a15a0:	68c7      	ldr	r7, [r0, #12]
 80a15a2:	f1bc 0f06 	cmp.w	ip, #6
 80a15a6:	bf0c      	ite	eq
 80a15a8:	2504      	moveq	r5, #4
 80a15aa:	2503      	movne	r5, #3
 80a15ac:	4369      	muls	r1, r5
 80a15ae:	f1bc 0f08 	cmp.w	ip, #8
 80a15b2:	eb07 0501 	add.w	r5, r7, r1
 80a15b6:	d824      	bhi.n	80a1602 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a15b8:	f04f 0e01 	mov.w	lr, #1
 80a15bc:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a15c0:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a15c4:	d10c      	bne.n	80a15e0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a15c6:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a15ca:	d10d      	bne.n	80a15e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a15cc:	f01e 0f10 	tst.w	lr, #16
 80a15d0:	d017      	beq.n	80a1602 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a15d2:	2bff      	cmp	r3, #255	; 0xff
 80a15d4:	bf08      	it	eq
 80a15d6:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a15d8:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a15da:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a15dc:	70ac      	strb	r4, [r5, #2]
        } break;
 80a15de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a15e0:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a15e2:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a15e4:	70ae      	strb	r6, [r5, #2]
        } break;
 80a15e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a15e8:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a15ea:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a15ec:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a15ee:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a15f0:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a15f2:	b90b      	cbnz	r3, 80a15f8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a15f4:	b2d2      	uxtb	r2, r2
 80a15f6:	e002      	b.n	80a15fe <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a15f8:	435a      	muls	r2, r3
 80a15fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a15fe:	70ea      	strb	r2, [r5, #3]
        } break;
 80a1600:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a1602:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1604:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a1606:	70ae      	strb	r6, [r5, #2]
 80a1608:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a160a <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a160a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a160e:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a1612:	4770      	bx	lr

080a1614 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1614:	b508      	push	{r3, lr}
 80a1616:	f000 f82f 	bl	80a1678 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a161a:	f000 f82d 	bl	80a1678 <HAL_Pin_Map>
 80a161e:	4b01      	ldr	r3, [pc, #4]	; (80a1624 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1620:	6018      	str	r0, [r3, #0]
 80a1622:	bd08      	pop	{r3, pc}
 80a1624:	200000b0 	.word	0x200000b0

080a1628 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1628:	b508      	push	{r3, lr}
 80a162a:	4b02      	ldr	r3, [pc, #8]	; (80a1634 <os_mutex_recursive_create+0xc>)
 80a162c:	681b      	ldr	r3, [r3, #0]
 80a162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1630:	9301      	str	r3, [sp, #4]
 80a1632:	bd08      	pop	{r3, pc}
 80a1634:	080601d0 	.word	0x080601d0

080a1638 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1638:	b508      	push	{r3, lr}
 80a163a:	4b02      	ldr	r3, [pc, #8]	; (80a1644 <os_mutex_recursive_destroy+0xc>)
 80a163c:	681b      	ldr	r3, [r3, #0]
 80a163e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1640:	9301      	str	r3, [sp, #4]
 80a1642:	bd08      	pop	{r3, pc}
 80a1644:	080601d0 	.word	0x080601d0

080a1648 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1648:	b508      	push	{r3, lr}
 80a164a:	4b02      	ldr	r3, [pc, #8]	; (80a1654 <HAL_RNG_GetRandomNumber+0xc>)
 80a164c:	681b      	ldr	r3, [r3, #0]
 80a164e:	685b      	ldr	r3, [r3, #4]
 80a1650:	9301      	str	r3, [sp, #4]
 80a1652:	bd08      	pop	{r3, pc}
 80a1654:	0806019c 	.word	0x0806019c

080a1658 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1658:	b508      	push	{r3, lr}
 80a165a:	4b02      	ldr	r3, [pc, #8]	; (80a1664 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a165c:	681b      	ldr	r3, [r3, #0]
 80a165e:	691b      	ldr	r3, [r3, #16]
 80a1660:	9301      	str	r3, [sp, #4]
 80a1662:	bd08      	pop	{r3, pc}
 80a1664:	0806019c 	.word	0x0806019c

080a1668 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1668:	b508      	push	{r3, lr}
 80a166a:	4b02      	ldr	r3, [pc, #8]	; (80a1674 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a166c:	681b      	ldr	r3, [r3, #0]
 80a166e:	695b      	ldr	r3, [r3, #20]
 80a1670:	9301      	str	r3, [sp, #4]
 80a1672:	bd08      	pop	{r3, pc}
 80a1674:	0806019c 	.word	0x0806019c

080a1678 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1678:	b508      	push	{r3, lr}
 80a167a:	4b02      	ldr	r3, [pc, #8]	; (80a1684 <HAL_Pin_Map+0xc>)
 80a167c:	681b      	ldr	r3, [r3, #0]
 80a167e:	681b      	ldr	r3, [r3, #0]
 80a1680:	9301      	str	r3, [sp, #4]
 80a1682:	bd08      	pop	{r3, pc}
 80a1684:	080601b0 	.word	0x080601b0

080a1688 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1688:	b508      	push	{r3, lr}
 80a168a:	4b02      	ldr	r3, [pc, #8]	; (80a1694 <HAL_Validate_Pin_Function+0xc>)
 80a168c:	681b      	ldr	r3, [r3, #0]
 80a168e:	685b      	ldr	r3, [r3, #4]
 80a1690:	9301      	str	r3, [sp, #4]
 80a1692:	bd08      	pop	{r3, pc}
 80a1694:	080601b0 	.word	0x080601b0

080a1698 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1698:	b508      	push	{r3, lr}
 80a169a:	4b02      	ldr	r3, [pc, #8]	; (80a16a4 <HAL_Pin_Mode+0xc>)
 80a169c:	681b      	ldr	r3, [r3, #0]
 80a169e:	689b      	ldr	r3, [r3, #8]
 80a16a0:	9301      	str	r3, [sp, #4]
 80a16a2:	bd08      	pop	{r3, pc}
 80a16a4:	080601b0 	.word	0x080601b0

080a16a8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a16a8:	b508      	push	{r3, lr}
 80a16aa:	4b02      	ldr	r3, [pc, #8]	; (80a16b4 <HAL_Get_Pin_Mode+0xc>)
 80a16ac:	681b      	ldr	r3, [r3, #0]
 80a16ae:	68db      	ldr	r3, [r3, #12]
 80a16b0:	9301      	str	r3, [sp, #4]
 80a16b2:	bd08      	pop	{r3, pc}
 80a16b4:	080601b0 	.word	0x080601b0

080a16b8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a16b8:	b508      	push	{r3, lr}
 80a16ba:	4b02      	ldr	r3, [pc, #8]	; (80a16c4 <HAL_GPIO_Write+0xc>)
 80a16bc:	681b      	ldr	r3, [r3, #0]
 80a16be:	691b      	ldr	r3, [r3, #16]
 80a16c0:	9301      	str	r3, [sp, #4]
 80a16c2:	bd08      	pop	{r3, pc}
 80a16c4:	080601b0 	.word	0x080601b0

080a16c8 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a16c8:	b508      	push	{r3, lr}
 80a16ca:	4b02      	ldr	r3, [pc, #8]	; (80a16d4 <HAL_ADC_Read+0xc>)
 80a16cc:	681b      	ldr	r3, [r3, #0]
 80a16ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a16d0:	9301      	str	r3, [sp, #4]
 80a16d2:	bd08      	pop	{r3, pc}
 80a16d4:	080601b0 	.word	0x080601b0

080a16d8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a16d8:	b508      	push	{r3, lr}
 80a16da:	4b02      	ldr	r3, [pc, #8]	; (80a16e4 <HAL_I2C_Write_Data+0xc>)
 80a16dc:	681b      	ldr	r3, [r3, #0]
 80a16de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a16e0:	9301      	str	r3, [sp, #4]
 80a16e2:	bd08      	pop	{r3, pc}
 80a16e4:	080601ac 	.word	0x080601ac

080a16e8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a16e8:	b508      	push	{r3, lr}
 80a16ea:	4b02      	ldr	r3, [pc, #8]	; (80a16f4 <HAL_I2C_Available_Data+0xc>)
 80a16ec:	681b      	ldr	r3, [r3, #0]
 80a16ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a16f0:	9301      	str	r3, [sp, #4]
 80a16f2:	bd08      	pop	{r3, pc}
 80a16f4:	080601ac 	.word	0x080601ac

080a16f8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a16f8:	b508      	push	{r3, lr}
 80a16fa:	4b02      	ldr	r3, [pc, #8]	; (80a1704 <HAL_I2C_Read_Data+0xc>)
 80a16fc:	681b      	ldr	r3, [r3, #0]
 80a16fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1700:	9301      	str	r3, [sp, #4]
 80a1702:	bd08      	pop	{r3, pc}
 80a1704:	080601ac 	.word	0x080601ac

080a1708 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1708:	b508      	push	{r3, lr}
 80a170a:	4b02      	ldr	r3, [pc, #8]	; (80a1714 <HAL_I2C_Peek_Data+0xc>)
 80a170c:	681b      	ldr	r3, [r3, #0]
 80a170e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1710:	9301      	str	r3, [sp, #4]
 80a1712:	bd08      	pop	{r3, pc}
 80a1714:	080601ac 	.word	0x080601ac

080a1718 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1718:	b508      	push	{r3, lr}
 80a171a:	4b02      	ldr	r3, [pc, #8]	; (80a1724 <HAL_I2C_Flush_Data+0xc>)
 80a171c:	681b      	ldr	r3, [r3, #0]
 80a171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1720:	9301      	str	r3, [sp, #4]
 80a1722:	bd08      	pop	{r3, pc}
 80a1724:	080601ac 	.word	0x080601ac

080a1728 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1728:	b508      	push	{r3, lr}
 80a172a:	4b02      	ldr	r3, [pc, #8]	; (80a1734 <HAL_I2C_Is_Enabled+0xc>)
 80a172c:	681b      	ldr	r3, [r3, #0]
 80a172e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1730:	9301      	str	r3, [sp, #4]
 80a1732:	bd08      	pop	{r3, pc}
 80a1734:	080601ac 	.word	0x080601ac

080a1738 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a1738:	b508      	push	{r3, lr}
 80a173a:	4b03      	ldr	r3, [pc, #12]	; (80a1748 <HAL_I2C_Init+0x10>)
 80a173c:	681b      	ldr	r3, [r3, #0]
 80a173e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1742:	9301      	str	r3, [sp, #4]
 80a1744:	bd08      	pop	{r3, pc}
 80a1746:	0000      	.short	0x0000
 80a1748:	080601ac 	.word	0x080601ac

080a174c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a174c:	b508      	push	{r3, lr}
 80a174e:	4b02      	ldr	r3, [pc, #8]	; (80a1758 <HAL_SPI_Init+0xc>)
 80a1750:	681b      	ldr	r3, [r3, #0]
 80a1752:	69db      	ldr	r3, [r3, #28]
 80a1754:	9301      	str	r3, [sp, #4]
 80a1756:	bd08      	pop	{r3, pc}
 80a1758:	080601b4 	.word	0x080601b4

080a175c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a175c:	b508      	push	{r3, lr}
 80a175e:	4b02      	ldr	r3, [pc, #8]	; (80a1768 <HAL_SPI_Is_Enabled+0xc>)
 80a1760:	681b      	ldr	r3, [r3, #0]
 80a1762:	6a1b      	ldr	r3, [r3, #32]
 80a1764:	9301      	str	r3, [sp, #4]
 80a1766:	bd08      	pop	{r3, pc}
 80a1768:	080601b4 	.word	0x080601b4

080a176c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a176c:	b508      	push	{r3, lr}
 80a176e:	4b02      	ldr	r3, [pc, #8]	; (80a1778 <HAL_USART_Init+0xc>)
 80a1770:	681b      	ldr	r3, [r3, #0]
 80a1772:	699b      	ldr	r3, [r3, #24]
 80a1774:	9301      	str	r3, [sp, #4]
 80a1776:	bd08      	pop	{r3, pc}
 80a1778:	080601c4 	.word	0x080601c4

080a177c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a177c:	b508      	push	{r3, lr}
 80a177e:	4b02      	ldr	r3, [pc, #8]	; (80a1788 <HAL_USART_Write_Data+0xc>)
 80a1780:	681b      	ldr	r3, [r3, #0]
 80a1782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1784:	9301      	str	r3, [sp, #4]
 80a1786:	bd08      	pop	{r3, pc}
 80a1788:	080601c4 	.word	0x080601c4

080a178c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a178c:	b508      	push	{r3, lr}
 80a178e:	4b02      	ldr	r3, [pc, #8]	; (80a1798 <HAL_USART_Available_Data+0xc>)
 80a1790:	681b      	ldr	r3, [r3, #0]
 80a1792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1794:	9301      	str	r3, [sp, #4]
 80a1796:	bd08      	pop	{r3, pc}
 80a1798:	080601c4 	.word	0x080601c4

080a179c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a179c:	b508      	push	{r3, lr}
 80a179e:	4b02      	ldr	r3, [pc, #8]	; (80a17a8 <HAL_USART_Read_Data+0xc>)
 80a17a0:	681b      	ldr	r3, [r3, #0]
 80a17a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a17a4:	9301      	str	r3, [sp, #4]
 80a17a6:	bd08      	pop	{r3, pc}
 80a17a8:	080601c4 	.word	0x080601c4

080a17ac <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a17ac:	b508      	push	{r3, lr}
 80a17ae:	4b02      	ldr	r3, [pc, #8]	; (80a17b8 <HAL_USART_Peek_Data+0xc>)
 80a17b0:	681b      	ldr	r3, [r3, #0]
 80a17b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a17b4:	9301      	str	r3, [sp, #4]
 80a17b6:	bd08      	pop	{r3, pc}
 80a17b8:	080601c4 	.word	0x080601c4

080a17bc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a17bc:	b508      	push	{r3, lr}
 80a17be:	4b02      	ldr	r3, [pc, #8]	; (80a17c8 <HAL_USART_Flush_Data+0xc>)
 80a17c0:	681b      	ldr	r3, [r3, #0]
 80a17c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a17c4:	9301      	str	r3, [sp, #4]
 80a17c6:	bd08      	pop	{r3, pc}
 80a17c8:	080601c4 	.word	0x080601c4

080a17cc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a17cc:	b508      	push	{r3, lr}
 80a17ce:	4b02      	ldr	r3, [pc, #8]	; (80a17d8 <HAL_USART_Is_Enabled+0xc>)
 80a17d0:	681b      	ldr	r3, [r3, #0]
 80a17d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a17d4:	9301      	str	r3, [sp, #4]
 80a17d6:	bd08      	pop	{r3, pc}
 80a17d8:	080601c4 	.word	0x080601c4

080a17dc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a17dc:	b508      	push	{r3, lr}
 80a17de:	4b02      	ldr	r3, [pc, #8]	; (80a17e8 <HAL_USART_Available_Data_For_Write+0xc>)
 80a17e0:	681b      	ldr	r3, [r3, #0]
 80a17e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a17e4:	9301      	str	r3, [sp, #4]
 80a17e6:	bd08      	pop	{r3, pc}
 80a17e8:	080601c4 	.word	0x080601c4

080a17ec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a17ec:	b508      	push	{r3, lr}
 80a17ee:	4b02      	ldr	r3, [pc, #8]	; (80a17f8 <HAL_USB_USART_Init+0xc>)
 80a17f0:	681b      	ldr	r3, [r3, #0]
 80a17f2:	681b      	ldr	r3, [r3, #0]
 80a17f4:	9301      	str	r3, [sp, #4]
 80a17f6:	bd08      	pop	{r3, pc}
 80a17f8:	080601d8 	.word	0x080601d8

080a17fc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a17fc:	b508      	push	{r3, lr}
 80a17fe:	4b02      	ldr	r3, [pc, #8]	; (80a1808 <HAL_USB_USART_Begin+0xc>)
 80a1800:	681b      	ldr	r3, [r3, #0]
 80a1802:	685b      	ldr	r3, [r3, #4]
 80a1804:	9301      	str	r3, [sp, #4]
 80a1806:	bd08      	pop	{r3, pc}
 80a1808:	080601d8 	.word	0x080601d8

080a180c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a180c:	b508      	push	{r3, lr}
 80a180e:	4b02      	ldr	r3, [pc, #8]	; (80a1818 <HAL_USB_USART_Available_Data+0xc>)
 80a1810:	681b      	ldr	r3, [r3, #0]
 80a1812:	691b      	ldr	r3, [r3, #16]
 80a1814:	9301      	str	r3, [sp, #4]
 80a1816:	bd08      	pop	{r3, pc}
 80a1818:	080601d8 	.word	0x080601d8

080a181c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a181c:	b508      	push	{r3, lr}
 80a181e:	4b02      	ldr	r3, [pc, #8]	; (80a1828 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1820:	681b      	ldr	r3, [r3, #0]
 80a1822:	695b      	ldr	r3, [r3, #20]
 80a1824:	9301      	str	r3, [sp, #4]
 80a1826:	bd08      	pop	{r3, pc}
 80a1828:	080601d8 	.word	0x080601d8

080a182c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a182c:	b508      	push	{r3, lr}
 80a182e:	4b02      	ldr	r3, [pc, #8]	; (80a1838 <HAL_USB_USART_Receive_Data+0xc>)
 80a1830:	681b      	ldr	r3, [r3, #0]
 80a1832:	699b      	ldr	r3, [r3, #24]
 80a1834:	9301      	str	r3, [sp, #4]
 80a1836:	bd08      	pop	{r3, pc}
 80a1838:	080601d8 	.word	0x080601d8

080a183c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a183c:	b508      	push	{r3, lr}
 80a183e:	4b02      	ldr	r3, [pc, #8]	; (80a1848 <HAL_USB_USART_Send_Data+0xc>)
 80a1840:	681b      	ldr	r3, [r3, #0]
 80a1842:	69db      	ldr	r3, [r3, #28]
 80a1844:	9301      	str	r3, [sp, #4]
 80a1846:	bd08      	pop	{r3, pc}
 80a1848:	080601d8 	.word	0x080601d8

080a184c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a184c:	b508      	push	{r3, lr}
 80a184e:	4b02      	ldr	r3, [pc, #8]	; (80a1858 <HAL_USB_USART_Flush_Data+0xc>)
 80a1850:	681b      	ldr	r3, [r3, #0]
 80a1852:	6a1b      	ldr	r3, [r3, #32]
 80a1854:	9301      	str	r3, [sp, #4]
 80a1856:	bd08      	pop	{r3, pc}
 80a1858:	080601d8 	.word	0x080601d8

080a185c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a185c:	b508      	push	{r3, lr}
 80a185e:	4b02      	ldr	r3, [pc, #8]	; (80a1868 <inet_gethostbyname+0xc>)
 80a1860:	681b      	ldr	r3, [r3, #0]
 80a1862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1864:	9301      	str	r3, [sp, #4]
 80a1866:	bd08      	pop	{r3, pc}
 80a1868:	080601c0 	.word	0x080601c0

080a186c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a186c:	b508      	push	{r3, lr}
 80a186e:	4b02      	ldr	r3, [pc, #8]	; (80a1878 <set_system_mode+0xc>)
 80a1870:	681b      	ldr	r3, [r3, #0]
 80a1872:	685b      	ldr	r3, [r3, #4]
 80a1874:	9301      	str	r3, [sp, #4]
 80a1876:	bd08      	pop	{r3, pc}
 80a1878:	080601a4 	.word	0x080601a4

080a187c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a187c:	b508      	push	{r3, lr}
 80a187e:	4b02      	ldr	r3, [pc, #8]	; (80a1888 <system_delay_ms+0xc>)
 80a1880:	681b      	ldr	r3, [r3, #0]
 80a1882:	695b      	ldr	r3, [r3, #20]
 80a1884:	9301      	str	r3, [sp, #4]
 80a1886:	bd08      	pop	{r3, pc}
 80a1888:	080601a4 	.word	0x080601a4

080a188c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a188c:	b508      	push	{r3, lr}
 80a188e:	4b02      	ldr	r3, [pc, #8]	; (80a1898 <application_thread_current+0xc>)
 80a1890:	681b      	ldr	r3, [r3, #0]
 80a1892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1894:	9301      	str	r3, [sp, #4]
 80a1896:	bd08      	pop	{r3, pc}
 80a1898:	080601a4 	.word	0x080601a4

080a189c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a189c:	b508      	push	{r3, lr}
 80a189e:	4b02      	ldr	r3, [pc, #8]	; (80a18a8 <application_thread_invoke+0xc>)
 80a18a0:	681b      	ldr	r3, [r3, #0]
 80a18a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a18a4:	9301      	str	r3, [sp, #4]
 80a18a6:	bd08      	pop	{r3, pc}
 80a18a8:	080601a4 	.word	0x080601a4

080a18ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a18ac:	b508      	push	{r3, lr}
 80a18ae:	4b03      	ldr	r3, [pc, #12]	; (80a18bc <system_ctrl_set_app_request_handler+0x10>)
 80a18b0:	681b      	ldr	r3, [r3, #0]
 80a18b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a18b6:	9301      	str	r3, [sp, #4]
 80a18b8:	bd08      	pop	{r3, pc}
 80a18ba:	0000      	.short	0x0000
 80a18bc:	080601a4 	.word	0x080601a4

080a18c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a18c0:	b508      	push	{r3, lr}
 80a18c2:	4b03      	ldr	r3, [pc, #12]	; (80a18d0 <system_ctrl_set_result+0x10>)
 80a18c4:	681b      	ldr	r3, [r3, #0]
 80a18c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a18ca:	9301      	str	r3, [sp, #4]
 80a18cc:	bd08      	pop	{r3, pc}
 80a18ce:	0000      	.short	0x0000
 80a18d0:	080601a4 	.word	0x080601a4

080a18d4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a18d4:	b508      	push	{r3, lr}
 80a18d6:	4b02      	ldr	r3, [pc, #8]	; (80a18e0 <spark_variable+0xc>)
 80a18d8:	681b      	ldr	r3, [r3, #0]
 80a18da:	681b      	ldr	r3, [r3, #0]
 80a18dc:	9301      	str	r3, [sp, #4]
 80a18de:	bd08      	pop	{r3, pc}
 80a18e0:	080601cc 	.word	0x080601cc

080a18e4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a18e4:	b508      	push	{r3, lr}
 80a18e6:	4b02      	ldr	r3, [pc, #8]	; (80a18f0 <spark_function+0xc>)
 80a18e8:	681b      	ldr	r3, [r3, #0]
 80a18ea:	685b      	ldr	r3, [r3, #4]
 80a18ec:	9301      	str	r3, [sp, #4]
 80a18ee:	bd08      	pop	{r3, pc}
 80a18f0:	080601cc 	.word	0x080601cc

080a18f4 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a18f4:	b508      	push	{r3, lr}
 80a18f6:	4b02      	ldr	r3, [pc, #8]	; (80a1900 <spark_cloud_flag_connected+0xc>)
 80a18f8:	681b      	ldr	r3, [r3, #0]
 80a18fa:	695b      	ldr	r3, [r3, #20]
 80a18fc:	9301      	str	r3, [sp, #4]
 80a18fe:	bd08      	pop	{r3, pc}
 80a1900:	080601cc 	.word	0x080601cc

080a1904 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1904:	b508      	push	{r3, lr}
 80a1906:	4b02      	ldr	r3, [pc, #8]	; (80a1910 <spark_send_event+0xc>)
 80a1908:	681b      	ldr	r3, [r3, #0]
 80a190a:	6a1b      	ldr	r3, [r3, #32]
 80a190c:	9301      	str	r3, [sp, #4]
 80a190e:	bd08      	pop	{r3, pc}
 80a1910:	080601cc 	.word	0x080601cc

080a1914 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1914:	b508      	push	{r3, lr}
 80a1916:	4b02      	ldr	r3, [pc, #8]	; (80a1920 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1918:	681b      	ldr	r3, [r3, #0]
 80a191a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a191c:	9301      	str	r3, [sp, #4]
 80a191e:	bd08      	pop	{r3, pc}
 80a1920:	080601cc 	.word	0x080601cc

080a1924 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1924:	b508      	push	{r3, lr}
 80a1926:	4b02      	ldr	r3, [pc, #8]	; (80a1930 <network_connect+0xc>)
 80a1928:	681b      	ldr	r3, [r3, #0]
 80a192a:	685b      	ldr	r3, [r3, #4]
 80a192c:	9301      	str	r3, [sp, #4]
 80a192e:	bd08      	pop	{r3, pc}
 80a1930:	080601c8 	.word	0x080601c8

080a1934 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1934:	b508      	push	{r3, lr}
 80a1936:	4b02      	ldr	r3, [pc, #8]	; (80a1940 <network_connecting+0xc>)
 80a1938:	681b      	ldr	r3, [r3, #0]
 80a193a:	689b      	ldr	r3, [r3, #8]
 80a193c:	9301      	str	r3, [sp, #4]
 80a193e:	bd08      	pop	{r3, pc}
 80a1940:	080601c8 	.word	0x080601c8

080a1944 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1944:	b508      	push	{r3, lr}
 80a1946:	4b02      	ldr	r3, [pc, #8]	; (80a1950 <network_disconnect+0xc>)
 80a1948:	681b      	ldr	r3, [r3, #0]
 80a194a:	68db      	ldr	r3, [r3, #12]
 80a194c:	9301      	str	r3, [sp, #4]
 80a194e:	bd08      	pop	{r3, pc}
 80a1950:	080601c8 	.word	0x080601c8

080a1954 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1954:	b508      	push	{r3, lr}
 80a1956:	4b02      	ldr	r3, [pc, #8]	; (80a1960 <network_ready+0xc>)
 80a1958:	681b      	ldr	r3, [r3, #0]
 80a195a:	691b      	ldr	r3, [r3, #16]
 80a195c:	9301      	str	r3, [sp, #4]
 80a195e:	bd08      	pop	{r3, pc}
 80a1960:	080601c8 	.word	0x080601c8

080a1964 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1964:	b508      	push	{r3, lr}
 80a1966:	4b02      	ldr	r3, [pc, #8]	; (80a1970 <network_on+0xc>)
 80a1968:	681b      	ldr	r3, [r3, #0]
 80a196a:	695b      	ldr	r3, [r3, #20]
 80a196c:	9301      	str	r3, [sp, #4]
 80a196e:	bd08      	pop	{r3, pc}
 80a1970:	080601c8 	.word	0x080601c8

080a1974 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1974:	b508      	push	{r3, lr}
 80a1976:	4b02      	ldr	r3, [pc, #8]	; (80a1980 <network_off+0xc>)
 80a1978:	681b      	ldr	r3, [r3, #0]
 80a197a:	699b      	ldr	r3, [r3, #24]
 80a197c:	9301      	str	r3, [sp, #4]
 80a197e:	bd08      	pop	{r3, pc}
 80a1980:	080601c8 	.word	0x080601c8

080a1984 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1984:	b508      	push	{r3, lr}
 80a1986:	4b02      	ldr	r3, [pc, #8]	; (80a1990 <network_listen+0xc>)
 80a1988:	681b      	ldr	r3, [r3, #0]
 80a198a:	69db      	ldr	r3, [r3, #28]
 80a198c:	9301      	str	r3, [sp, #4]
 80a198e:	bd08      	pop	{r3, pc}
 80a1990:	080601c8 	.word	0x080601c8

080a1994 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1994:	b508      	push	{r3, lr}
 80a1996:	4b02      	ldr	r3, [pc, #8]	; (80a19a0 <network_listening+0xc>)
 80a1998:	681b      	ldr	r3, [r3, #0]
 80a199a:	6a1b      	ldr	r3, [r3, #32]
 80a199c:	9301      	str	r3, [sp, #4]
 80a199e:	bd08      	pop	{r3, pc}
 80a19a0:	080601c8 	.word	0x080601c8

080a19a4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a19a4:	b508      	push	{r3, lr}
 80a19a6:	4b02      	ldr	r3, [pc, #8]	; (80a19b0 <network_set_listen_timeout+0xc>)
 80a19a8:	681b      	ldr	r3, [r3, #0]
 80a19aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a19ac:	9301      	str	r3, [sp, #4]
 80a19ae:	bd08      	pop	{r3, pc}
 80a19b0:	080601c8 	.word	0x080601c8

080a19b4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a19b4:	b508      	push	{r3, lr}
 80a19b6:	4b02      	ldr	r3, [pc, #8]	; (80a19c0 <network_get_listen_timeout+0xc>)
 80a19b8:	681b      	ldr	r3, [r3, #0]
 80a19ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a19bc:	9301      	str	r3, [sp, #4]
 80a19be:	bd08      	pop	{r3, pc}
 80a19c0:	080601c8 	.word	0x080601c8

080a19c4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a19c4:	b508      	push	{r3, lr}
 80a19c6:	4b02      	ldr	r3, [pc, #8]	; (80a19d0 <malloc+0xc>)
 80a19c8:	681b      	ldr	r3, [r3, #0]
 80a19ca:	681b      	ldr	r3, [r3, #0]
 80a19cc:	9301      	str	r3, [sp, #4]
 80a19ce:	bd08      	pop	{r3, pc}
 80a19d0:	080601a0 	.word	0x080601a0

080a19d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a19d4:	b508      	push	{r3, lr}
 80a19d6:	4b02      	ldr	r3, [pc, #8]	; (80a19e0 <free+0xc>)
 80a19d8:	681b      	ldr	r3, [r3, #0]
 80a19da:	685b      	ldr	r3, [r3, #4]
 80a19dc:	9301      	str	r3, [sp, #4]
 80a19de:	bd08      	pop	{r3, pc}
 80a19e0:	080601a0 	.word	0x080601a0

080a19e4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a19e4:	b508      	push	{r3, lr}
 80a19e6:	4b02      	ldr	r3, [pc, #8]	; (80a19f0 <realloc+0xc>)
 80a19e8:	681b      	ldr	r3, [r3, #0]
 80a19ea:	689b      	ldr	r3, [r3, #8]
 80a19ec:	9301      	str	r3, [sp, #4]
 80a19ee:	bd08      	pop	{r3, pc}
 80a19f0:	080601a0 	.word	0x080601a0

080a19f4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a19f4:	b508      	push	{r3, lr}
 80a19f6:	4b02      	ldr	r3, [pc, #8]	; (80a1a00 <abort+0xc>)
 80a19f8:	681b      	ldr	r3, [r3, #0]
 80a19fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a19fc:	9301      	str	r3, [sp, #4]
 80a19fe:	bd08      	pop	{r3, pc}
 80a1a00:	080601a0 	.word	0x080601a0

080a1a04 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1a04:	b508      	push	{r3, lr}
 80a1a06:	4b02      	ldr	r3, [pc, #8]	; (80a1a10 <_malloc_r+0xc>)
 80a1a08:	681b      	ldr	r3, [r3, #0]
 80a1a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1a0c:	9301      	str	r3, [sp, #4]
 80a1a0e:	bd08      	pop	{r3, pc}
 80a1a10:	080601a0 	.word	0x080601a0

080a1a14 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1a14:	2100      	movs	r1, #0
 80a1a16:	f7ff bf31 	b.w	80a187c <system_delay_ms>

080a1a1a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1a1a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1a1c:	6883      	ldr	r3, [r0, #8]
 80a1a1e:	4604      	mov	r4, r0
 80a1a20:	b90b      	cbnz	r3, 80a1a26 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1a22:	f001 f99c 	bl	80a2d5e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1a26:	68c3      	ldr	r3, [r0, #12]
 80a1a28:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a1a2a:	68a3      	ldr	r3, [r4, #8]
 80a1a2c:	b11b      	cbz	r3, 80a1a36 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1a2e:	2203      	movs	r2, #3
 80a1a30:	4621      	mov	r1, r4
 80a1a32:	4620      	mov	r0, r4
 80a1a34:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1a36:	4620      	mov	r0, r4
}
 80a1a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1a3c:	2110      	movs	r1, #16
 80a1a3e:	f001 b972 	b.w	80a2d26 <_ZdlPvj>

080a1a42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1a42:	4770      	bx	lr

080a1a44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a1a44:	2000      	movs	r0, #0
 80a1a46:	4770      	bx	lr

080a1a48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1a48:	b510      	push	{r4, lr}
 80a1a4a:	4604      	mov	r4, r0
 80a1a4c:	2110      	movs	r1, #16
 80a1a4e:	f001 f96a 	bl	80a2d26 <_ZdlPvj>
 80a1a52:	4620      	mov	r0, r4
 80a1a54:	bd10      	pop	{r4, pc}

080a1a56 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1a56:	b508      	push	{r3, lr}
      { delete this; }
 80a1a58:	b108      	cbz	r0, 80a1a5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a1a5a:	f7ff fff5 	bl	80a1a48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1a5e:	bd08      	pop	{r3, pc}

080a1a60 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1a60:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1a62:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1a64:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1a66:	b113      	cbz	r3, 80a1a6e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1a68:	2203      	movs	r2, #3
 80a1a6a:	4601      	mov	r1, r0
 80a1a6c:	4798      	blx	r3
    }
 80a1a6e:	4620      	mov	r0, r4
 80a1a70:	bd10      	pop	{r4, pc}

080a1a72 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1a72:	2200      	movs	r2, #0
 80a1a74:	6002      	str	r2, [r0, #0]
 80a1a76:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a1a7a:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a1a7c:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1a7e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a1a82:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1a84:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1a86:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a1a88:	680c      	ldr	r4, [r1, #0]
 80a1a8a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1a8c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a1a8e:	bd10      	pop	{r4, pc}

080a1a90 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a1a90:	b510      	push	{r4, lr}
 80a1a92:	4604      	mov	r4, r0
    free((void*)msg_);
 80a1a94:	6800      	ldr	r0, [r0, #0]
 80a1a96:	f7ff ff9d 	bl	80a19d4 <free>
}
 80a1a9a:	4620      	mov	r0, r4
 80a1a9c:	bd10      	pop	{r4, pc}

080a1a9e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a1a9e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1aa0:	68c4      	ldr	r4, [r0, #12]
 80a1aa2:	b1f4      	cbz	r4, 80a1ae2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a1aa4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1aa6:	2b02      	cmp	r3, #2
 80a1aa8:	d103      	bne.n	80a1ab2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1aaa:	f104 000c 	add.w	r0, r4, #12
 80a1aae:	f7ff ffef 	bl	80a1a90 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a1ab2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1ab4:	b135      	cbz	r5, 80a1ac4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1ab6:	4628      	mov	r0, r5
 80a1ab8:	f7ff ffd2 	bl	80a1a60 <_ZNSt14_Function_baseD1Ev>
 80a1abc:	2110      	movs	r1, #16
 80a1abe:	4628      	mov	r0, r5
 80a1ac0:	f001 f931 	bl	80a2d26 <_ZdlPvj>
 80a1ac4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1ac6:	b135      	cbz	r5, 80a1ad6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a1ac8:	4628      	mov	r0, r5
 80a1aca:	f7ff ffc9 	bl	80a1a60 <_ZNSt14_Function_baseD1Ev>
 80a1ace:	2110      	movs	r1, #16
 80a1ad0:	4628      	mov	r0, r5
 80a1ad2:	f001 f928 	bl	80a2d26 <_ZdlPvj>
 80a1ad6:	4620      	mov	r0, r4
 80a1ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1adc:	2114      	movs	r1, #20
 80a1ade:	f001 b922 	b.w	80a2d26 <_ZdlPvj>
 80a1ae2:	bd38      	pop	{r3, r4, r5, pc}

080a1ae4 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a1ae4:	b510      	push	{r4, lr}
 80a1ae6:	b088      	sub	sp, #32
 80a1ae8:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1aea:	4668      	mov	r0, sp
 80a1aec:	f000 fd73 	bl	80a25d6 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a1af0:	4669      	mov	r1, sp
 80a1af2:	a804      	add	r0, sp, #16
 80a1af4:	f000 fd91 	bl	80a261a <_ZN6StringC1ERKS_>
 80a1af8:	a804      	add	r0, sp, #16
 80a1afa:	47a0      	blx	r4
 80a1afc:	4604      	mov	r4, r0
 80a1afe:	a804      	add	r0, sp, #16
 80a1b00:	f000 fd22 	bl	80a2548 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1b04:	4668      	mov	r0, sp
 80a1b06:	f000 fd1f 	bl	80a2548 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a1b0a:	4620      	mov	r0, r4
 80a1b0c:	b008      	add	sp, #32
 80a1b0e:	bd10      	pop	{r4, pc}

080a1b10 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a1b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1b12:	4607      	mov	r7, r0
 80a1b14:	460e      	mov	r6, r1
 80a1b16:	4615      	mov	r5, r2
 80a1b18:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a1b1a:	2410      	movs	r4, #16
 80a1b1c:	4622      	mov	r2, r4
 80a1b1e:	2100      	movs	r1, #0
 80a1b20:	4668      	mov	r0, sp
 80a1b22:	f001 ff30 	bl	80a3986 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1b26:	2200      	movs	r2, #0
 80a1b28:	4669      	mov	r1, sp
 80a1b2a:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a1b2c:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a1b30:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a1b32:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a1b34:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1b36:	f7ff fed5 	bl	80a18e4 <spark_function>
}
 80a1b3a:	b005      	add	sp, #20
 80a1b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1b3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a1b3e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a1b40:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a1b42:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a1b44:	b17c      	cbz	r4, 80a1b66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1b46:	6863      	ldr	r3, [r4, #4]
 80a1b48:	3b01      	subs	r3, #1
 80a1b4a:	6063      	str	r3, [r4, #4]
 80a1b4c:	b95b      	cbnz	r3, 80a1b66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a1b4e:	6823      	ldr	r3, [r4, #0]
 80a1b50:	4620      	mov	r0, r4
 80a1b52:	689b      	ldr	r3, [r3, #8]
 80a1b54:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1b56:	68a3      	ldr	r3, [r4, #8]
 80a1b58:	3b01      	subs	r3, #1
 80a1b5a:	60a3      	str	r3, [r4, #8]
 80a1b5c:	b91b      	cbnz	r3, 80a1b66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a1b5e:	6823      	ldr	r3, [r4, #0]
 80a1b60:	4620      	mov	r0, r4
 80a1b62:	68db      	ldr	r3, [r3, #12]
 80a1b64:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a1b66:	4628      	mov	r0, r5
 80a1b68:	bd38      	pop	{r3, r4, r5, pc}

080a1b6a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a1b6a:	b513      	push	{r0, r1, r4, lr}
 80a1b6c:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1b6e:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a1b72:	2300      	movs	r3, #0
 80a1b74:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1b76:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1b78:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1b7a:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1b7c:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1b7e:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1b80:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1b82:	f7ff ffdc 	bl	80a1b3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1b86:	4620      	mov	r0, r4
 80a1b88:	b002      	add	sp, #8
 80a1b8a:	bd10      	pop	{r4, pc}

080a1b8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1b8c:	680b      	ldr	r3, [r1, #0]
 80a1b8e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a1b90:	b113      	cbz	r3, 80a1b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a1b92:	685a      	ldr	r2, [r3, #4]
 80a1b94:	3201      	adds	r2, #1
 80a1b96:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a1b98:	4770      	bx	lr

080a1b9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1b9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1b9c:	460c      	mov	r4, r1
 80a1b9e:	4606      	mov	r6, r0
 80a1ba0:	460f      	mov	r7, r1
 80a1ba2:	f854 3b04 	ldr.w	r3, [r4], #4
 80a1ba6:	ad02      	add	r5, sp, #8
 80a1ba8:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a1bac:	4621      	mov	r1, r4
 80a1bae:	a801      	add	r0, sp, #4
 80a1bb0:	f7ff ffec 	bl	80a1b8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a1bb4:	4629      	mov	r1, r5
 80a1bb6:	4630      	mov	r0, r6
 80a1bb8:	f7ff ffd7 	bl	80a1b6a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1bbc:	a801      	add	r0, sp, #4
 80a1bbe:	f7ff ffbe 	bl	80a1b3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1bc2:	4620      	mov	r0, r4
 80a1bc4:	f7ff ffbb 	bl	80a1b3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a1bc8:	4638      	mov	r0, r7
 80a1bca:	2108      	movs	r1, #8
 80a1bcc:	f001 f8ab 	bl	80a2d26 <_ZdlPvj>
        return p;
    }
 80a1bd0:	4630      	mov	r0, r6
 80a1bd2:	b003      	add	sp, #12
 80a1bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1bd6 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a1bd6:	b513      	push	{r0, r1, r4, lr}
 80a1bd8:	460b      	mov	r3, r1
 80a1bda:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1bdc:	c803      	ldmia	r0, {r0, r1}
 80a1bde:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1be2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1be6:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1bea:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a1bee:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1bf2:	b002      	add	sp, #8
 80a1bf4:	bd10      	pop	{r4, pc}
	...

080a1bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1bf8:	b538      	push	{r3, r4, r5, lr}
 80a1bfa:	2300      	movs	r3, #0
 80a1bfc:	4604      	mov	r4, r0
 80a1bfe:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1c00:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1c02:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1c04:	f7fe fa4b 	bl	80a009e <_Znwj>
 80a1c08:	b128      	cbz	r0, 80a1c16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1c0a:	2301      	movs	r3, #1
 80a1c0c:	6043      	str	r3, [r0, #4]
 80a1c0e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a1c10:	4b02      	ldr	r3, [pc, #8]	; (80a1c1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a1c12:	60c5      	str	r5, [r0, #12]
 80a1c14:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1c16:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a1c18:	4620      	mov	r0, r4
 80a1c1a:	bd38      	pop	{r3, r4, r5, pc}
 80a1c1c:	080a3ab8 	.word	0x080a3ab8

080a1c20 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1c20:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1c22:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1c24:	b90a      	cbnz	r2, 80a1c2a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1c26:	f001 f89a 	bl	80a2d5e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1c2a:	68c3      	ldr	r3, [r0, #12]
    }
 80a1c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1c30:	4718      	bx	r3

080a1c32 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1c32:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1c34:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1c36:	f100 0110 	add.w	r1, r0, #16
 80a1c3a:	f7ff fff1 	bl	80a1c20 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1c3e:	bd08      	pop	{r3, pc}

080a1c40 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1c40:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1c42:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1c44:	b90a      	cbnz	r2, 80a1c4a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a1c46:	f001 f88a 	bl	80a2d5e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1c4a:	68c3      	ldr	r3, [r0, #12]
    }
 80a1c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1c50:	4718      	bx	r3

080a1c52 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1c52:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1c54:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1c56:	f100 0110 	add.w	r1, r0, #16
 80a1c5a:	f7ff fff1 	bl	80a1c40 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1c5e:	bd08      	pop	{r3, pc}

080a1c60 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1c60:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1c62:	2300      	movs	r3, #0
 80a1c64:	6083      	str	r3, [r0, #8]
 80a1c66:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1c68:	4604      	mov	r4, r0
 80a1c6a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1c6c:	b12b      	cbz	r3, 80a1c7a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1c6e:	2202      	movs	r2, #2
 80a1c70:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1c72:	68eb      	ldr	r3, [r5, #12]
 80a1c74:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1c76:	68ab      	ldr	r3, [r5, #8]
 80a1c78:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1c7a:	4620      	mov	r0, r4
 80a1c7c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1c80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a1c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1c82:	b089      	sub	sp, #36	; 0x24
 80a1c84:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a1c86:	4668      	mov	r0, sp
 80a1c88:	f7ff fef3 	bl	80a1a72 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1c8c:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1c90:	2300      	movs	r3, #0
 80a1c92:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1c96:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a1c9a:	2b00      	cmp	r3, #0
 80a1c9c:	d103      	bne.n	80a1ca6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a1c9e:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a1ca2:	2900      	cmp	r1, #0
 80a1ca4:	d1f7      	bne.n	80a1c96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a1ca6:	d002      	beq.n	80a1cae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a1ca8:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1cac:	e063      	b.n	80a1d76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a1cae:	f114 050c 	adds.w	r5, r4, #12
 80a1cb2:	d003      	beq.n	80a1cbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a1cb4:	4669      	mov	r1, sp
 80a1cb6:	4628      	mov	r0, r5
 80a1cb8:	f7ff fedb 	bl	80a1a72 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1cbc:	f3bf 8f5f 	dmb	sy
 80a1cc0:	2301      	movs	r3, #1
 80a1cc2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1cc4:	f3bf 8f5f 	dmb	sy
 80a1cc8:	f104 0308 	add.w	r3, r4, #8
 80a1ccc:	2000      	movs	r0, #0
 80a1cce:	e853 6f00 	ldrex	r6, [r3]
 80a1cd2:	e843 0200 	strex	r2, r0, [r3]
 80a1cd6:	2a00      	cmp	r2, #0
 80a1cd8:	d1f9      	bne.n	80a1cce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a1cda:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1cde:	2e00      	cmp	r6, #0
 80a1ce0:	d049      	beq.n	80a1d76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1ce2:	f7ff fdd3 	bl	80a188c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1ce6:	b120      	cbz	r0, 80a1cf2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1ce8:	4629      	mov	r1, r5
 80a1cea:	4630      	mov	r0, r6
 80a1cec:	f7ff ff98 	bl	80a1c20 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1cf0:	e03a      	b.n	80a1d68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1cf2:	4631      	mov	r1, r6
 80a1cf4:	a802      	add	r0, sp, #8
 80a1cf6:	f7ff ffb3 	bl	80a1c60 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1cfa:	68e0      	ldr	r0, [r4, #12]
 80a1cfc:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1d00:	b108      	cbz	r0, 80a1d06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a1d02:	f001 fe7b 	bl	80a39fc <strdup>
 80a1d06:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1d08:	2010      	movs	r0, #16
 80a1d0a:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a1d0e:	f7fe f9c6 	bl	80a009e <_Znwj>
 80a1d12:	4605      	mov	r5, r0
 80a1d14:	b1e8      	cbz	r0, 80a1d52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1d16:	2700      	movs	r7, #0
 80a1d18:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1d1a:	2018      	movs	r0, #24
 80a1d1c:	f7fe f9bf 	bl	80a009e <_Znwj>
 80a1d20:	4604      	mov	r4, r0
 80a1d22:	b188      	cbz	r0, 80a1d48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1d24:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1d26:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1d28:	a802      	add	r0, sp, #8
 80a1d2a:	f7ff ff54 	bl	80a1bd6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1d2e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1d30:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1d32:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1d34:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1d36:	9204      	str	r2, [sp, #16]
 80a1d38:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1d3a:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1d3c:	60e3      	str	r3, [r4, #12]
 80a1d3e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1d42:	9205      	str	r2, [sp, #20]
 80a1d44:	f7ff fe95 	bl	80a1a72 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1d48:	4b0d      	ldr	r3, [pc, #52]	; (80a1d80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1d4a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1d4c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1d4e:	4b0d      	ldr	r3, [pc, #52]	; (80a1d84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a1d50:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a1d52:	a806      	add	r0, sp, #24
 80a1d54:	f7ff fe9c 	bl	80a1a90 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1d58:	a802      	add	r0, sp, #8
 80a1d5a:	f7ff fe81 	bl	80a1a60 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1d5e:	2200      	movs	r2, #0
 80a1d60:	4629      	mov	r1, r5
 80a1d62:	4809      	ldr	r0, [pc, #36]	; (80a1d88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a1d64:	f7ff fd9a 	bl	80a189c <application_thread_invoke>
 80a1d68:	4630      	mov	r0, r6
 80a1d6a:	f7ff fe79 	bl	80a1a60 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1d6e:	2110      	movs	r1, #16
 80a1d70:	4630      	mov	r0, r6
 80a1d72:	f000 ffd8 	bl	80a2d26 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a1d76:	4668      	mov	r0, sp
 80a1d78:	f7ff fe8a 	bl	80a1a90 <_ZN8particle5ErrorD1Ev>
    }
 80a1d7c:	b009      	add	sp, #36	; 0x24
 80a1d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1d80:	080a1c33 	.word	0x080a1c33
 80a1d84:	080a1ea9 	.word	0x080a1ea9
 80a1d88:	080a1a1b 	.word	0x080a1a1b

080a1d8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1d90:	b08b      	sub	sp, #44	; 0x2c
 80a1d92:	4606      	mov	r6, r0
 80a1d94:	460f      	mov	r7, r1
 80a1d96:	4690      	mov	r8, r2
 80a1d98:	4699      	mov	r9, r3
 80a1d9a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1d9e:	f7ff fda9 	bl	80a18f4 <spark_cloud_flag_connected>
 80a1da2:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80a1da4:	4683      	mov	fp, r0
 80a1da6:	bb30      	cbnz	r0, 80a1df6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1da8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a1dac:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1dae:	a905      	add	r1, sp, #20
 80a1db0:	4628      	mov	r0, r5
 80a1db2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1db6:	f7ff fe5c 	bl	80a1a72 <_ZN8particle5ErrorC1EOS0_>
 80a1dba:	2014      	movs	r0, #20
 80a1dbc:	f7fe f96f 	bl	80a009e <_Znwj>
 80a1dc0:	4604      	mov	r4, r0
 80a1dc2:	b158      	cbz	r0, 80a1ddc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1dc4:	2302      	movs	r3, #2
 80a1dc6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1dc8:	2301      	movs	r3, #1
 80a1dca:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1dcc:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1dd0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a1dd4:	4629      	mov	r1, r5
 80a1dd6:	300c      	adds	r0, #12
 80a1dd8:	f7ff fe4b 	bl	80a1a72 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a1ddc:	4630      	mov	r0, r6
 80a1dde:	4621      	mov	r1, r4
 80a1de0:	f840 4b04 	str.w	r4, [r0], #4
 80a1de4:	f7ff ff08 	bl	80a1bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1de8:	4628      	mov	r0, r5
 80a1dea:	f7ff fe51 	bl	80a1a90 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a1dee:	a805      	add	r0, sp, #20
 80a1df0:	f7ff fe4e 	bl	80a1a90 <_ZN8particle5ErrorD1Ev>
 80a1df4:	e052      	b.n	80a1e9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1df6:	2400      	movs	r4, #0
 80a1df8:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1dfa:	2014      	movs	r0, #20
 80a1dfc:	606c      	str	r4, [r5, #4]
 80a1dfe:	60ac      	str	r4, [r5, #8]
 80a1e00:	9307      	str	r3, [sp, #28]
 80a1e02:	f7fe f94c 	bl	80a009e <_Znwj>
 80a1e06:	4601      	mov	r1, r0
 80a1e08:	b118      	cbz	r0, 80a1e12 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a1e0a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1e0c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1e0e:	6044      	str	r4, [r0, #4]
 80a1e10:	6084      	str	r4, [r0, #8]
 80a1e12:	a804      	add	r0, sp, #16
 80a1e14:	9103      	str	r1, [sp, #12]
 80a1e16:	f7ff feef 	bl	80a1bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1e1a:	4b22      	ldr	r3, [pc, #136]	; (80a1ea4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1e1c:	2008      	movs	r0, #8
 80a1e1e:	9308      	str	r3, [sp, #32]
 80a1e20:	f7fe f93d 	bl	80a009e <_Znwj>
 80a1e24:	4604      	mov	r4, r0
 80a1e26:	b128      	cbz	r0, 80a1e34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1e28:	9b03      	ldr	r3, [sp, #12]
 80a1e2a:	a904      	add	r1, sp, #16
 80a1e2c:	f840 3b04 	str.w	r3, [r0], #4
 80a1e30:	f7ff feac 	bl	80a1b8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1e34:	9500      	str	r5, [sp, #0]
 80a1e36:	fa5f f38a 	uxtb.w	r3, sl
 80a1e3a:	464a      	mov	r2, r9
 80a1e3c:	4641      	mov	r1, r8
 80a1e3e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1e40:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1e42:	f7ff fd5f 	bl	80a1904 <spark_send_event>
 80a1e46:	b920      	cbnz	r0, 80a1e52 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1e48:	9b03      	ldr	r3, [sp, #12]
 80a1e4a:	785b      	ldrb	r3, [r3, #1]
 80a1e4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1e50:	b183      	cbz	r3, 80a1e74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a1e52:	9b03      	ldr	r3, [sp, #12]
 80a1e54:	a904      	add	r1, sp, #16
 80a1e56:	a806      	add	r0, sp, #24
 80a1e58:	9305      	str	r3, [sp, #20]
 80a1e5a:	f7ff fe97 	bl	80a1b8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1e5e:	a905      	add	r1, sp, #20
 80a1e60:	4630      	mov	r0, r6
 80a1e62:	f7ff fe82 	bl	80a1b6a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1e66:	a806      	add	r0, sp, #24
 80a1e68:	f7ff fe69 	bl	80a1b3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1e6c:	a804      	add	r0, sp, #16
 80a1e6e:	f7ff fe66 	bl	80a1b3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1e72:	e013      	b.n	80a1e9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a1e74:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1e78:	a905      	add	r1, sp, #20
 80a1e7a:	a803      	add	r0, sp, #12
 80a1e7c:	9205      	str	r2, [sp, #20]
 80a1e7e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1e82:	f7ff fefd 	bl	80a1c80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1e86:	a805      	add	r0, sp, #20
 80a1e88:	f7ff fe02 	bl	80a1a90 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1e8c:	a805      	add	r0, sp, #20
 80a1e8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1e90:	f7ff fe83 	bl	80a1b9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a1e94:	a806      	add	r0, sp, #24
 80a1e96:	f7ff fe52 	bl	80a1b3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1e9a:	e7da      	b.n	80a1e52 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80a1e9c:	4630      	mov	r0, r6
 80a1e9e:	b00b      	add	sp, #44	; 0x2c
 80a1ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1ea4:	080a2019 	.word	0x080a2019

080a1ea8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1ea8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1eac:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1eae:	d006      	beq.n	80a1ebe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1eb0:	2a03      	cmp	r2, #3
 80a1eb2:	d017      	beq.n	80a1ee4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a1eb4:	2a01      	cmp	r2, #1
 80a1eb6:	d122      	bne.n	80a1efe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1eb8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1eba:	6003      	str	r3, [r0, #0]
	      break;
 80a1ebc:	e01f      	b.n	80a1efe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1ebe:	2018      	movs	r0, #24
 80a1ec0:	680e      	ldr	r6, [r1, #0]
 80a1ec2:	f7fe f8ec 	bl	80a009e <_Znwj>
 80a1ec6:	4605      	mov	r5, r0
 80a1ec8:	b150      	cbz	r0, 80a1ee0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1eca:	4631      	mov	r1, r6
 80a1ecc:	f7ff fec8 	bl	80a1c60 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1ed0:	6930      	ldr	r0, [r6, #16]
 80a1ed2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1ed6:	b108      	cbz	r0, 80a1edc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a1ed8:	f001 fd90 	bl	80a39fc <strdup>
 80a1edc:	6128      	str	r0, [r5, #16]
 80a1ede:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1ee0:	6025      	str	r5, [r4, #0]
 80a1ee2:	e00c      	b.n	80a1efe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1ee4:	6804      	ldr	r4, [r0, #0]
 80a1ee6:	b154      	cbz	r4, 80a1efe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a1ee8:	f104 0010 	add.w	r0, r4, #16
 80a1eec:	f7ff fdd0 	bl	80a1a90 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1ef0:	4620      	mov	r0, r4
 80a1ef2:	f7ff fdb5 	bl	80a1a60 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1ef6:	2118      	movs	r1, #24
 80a1ef8:	4620      	mov	r0, r4
 80a1efa:	f000 ff14 	bl	80a2d26 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1efe:	2000      	movs	r0, #0
 80a1f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1f02 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1f02:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1f04:	2300      	movs	r3, #0
 80a1f06:	6083      	str	r3, [r0, #8]
 80a1f08:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1f0a:	4604      	mov	r4, r0
 80a1f0c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1f0e:	b12b      	cbz	r3, 80a1f1c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1f10:	2202      	movs	r2, #2
 80a1f12:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1f14:	68eb      	ldr	r3, [r5, #12]
 80a1f16:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1f18:	68ab      	ldr	r3, [r5, #8]
 80a1f1a:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1f1c:	4620      	mov	r0, r4
 80a1f1e:	bd38      	pop	{r3, r4, r5, pc}

080a1f20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1f20:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1f22:	b570      	push	{r4, r5, r6, lr}
 80a1f24:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1f26:	d006      	beq.n	80a1f36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1f28:	2a03      	cmp	r2, #3
 80a1f2a:	d011      	beq.n	80a1f50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1f2c:	2a01      	cmp	r2, #1
 80a1f2e:	d118      	bne.n	80a1f62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1f30:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1f32:	6003      	str	r3, [r0, #0]
	      break;
 80a1f34:	e015      	b.n	80a1f62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1f36:	2014      	movs	r0, #20
 80a1f38:	680e      	ldr	r6, [r1, #0]
 80a1f3a:	f7fe f8b0 	bl	80a009e <_Znwj>
 80a1f3e:	4605      	mov	r5, r0
 80a1f40:	b120      	cbz	r0, 80a1f4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1f42:	4631      	mov	r1, r6
 80a1f44:	f7ff ffdd 	bl	80a1f02 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1f48:	7c33      	ldrb	r3, [r6, #16]
 80a1f4a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1f4c:	6025      	str	r5, [r4, #0]
 80a1f4e:	e008      	b.n	80a1f62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1f50:	6804      	ldr	r4, [r0, #0]
 80a1f52:	b134      	cbz	r4, 80a1f62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1f54:	4620      	mov	r0, r4
 80a1f56:	f7ff fd83 	bl	80a1a60 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1f5a:	2114      	movs	r1, #20
 80a1f5c:	4620      	mov	r0, r4
 80a1f5e:	f000 fee2 	bl	80a2d26 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1f62:	2000      	movs	r0, #0
 80a1f64:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1f68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1f6a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1f6c:	f3bf 8f5f 	dmb	sy
 80a1f70:	b087      	sub	sp, #28
 80a1f72:	2300      	movs	r3, #0
 80a1f74:	e850 6f00 	ldrex	r6, [r0]
 80a1f78:	e840 3200 	strex	r2, r3, [r0]
 80a1f7c:	2a00      	cmp	r2, #0
 80a1f7e:	d1f9      	bne.n	80a1f74 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1f80:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1f84:	2e00      	cmp	r6, #0
 80a1f86:	d03f      	beq.n	80a2008 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1f88:	4618      	mov	r0, r3
 80a1f8a:	f7ff fc7f 	bl	80a188c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1f8e:	4607      	mov	r7, r0
 80a1f90:	b120      	cbz	r0, 80a1f9c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1f92:	4621      	mov	r1, r4
 80a1f94:	4630      	mov	r0, r6
 80a1f96:	f7ff fe53 	bl	80a1c40 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1f9a:	e02e      	b.n	80a1ffa <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1f9c:	4631      	mov	r1, r6
 80a1f9e:	a801      	add	r0, sp, #4
 80a1fa0:	f7ff ffaf 	bl	80a1f02 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1fa4:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1fa6:	2010      	movs	r0, #16
 80a1fa8:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1fac:	f7fe f877 	bl	80a009e <_Znwj>
 80a1fb0:	4605      	mov	r5, r0
 80a1fb2:	b1d0      	cbz	r0, 80a1fea <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1fb4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1fb6:	2014      	movs	r0, #20
 80a1fb8:	f7fe f871 	bl	80a009e <_Znwj>
 80a1fbc:	4604      	mov	r4, r0
 80a1fbe:	b178      	cbz	r0, 80a1fe0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1fc0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1fc2:	4601      	mov	r1, r0
 80a1fc4:	a801      	add	r0, sp, #4
 80a1fc6:	f7ff fe06 	bl	80a1bd6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1fca:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1fcc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1fce:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1fd0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1fd2:	9203      	str	r2, [sp, #12]
 80a1fd4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1fd6:	60e3      	str	r3, [r4, #12]
 80a1fd8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1fdc:	9204      	str	r2, [sp, #16]
 80a1fde:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1fe0:	4b0a      	ldr	r3, [pc, #40]	; (80a200c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1fe2:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1fe4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1fe6:	4b0a      	ldr	r3, [pc, #40]	; (80a2010 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1fe8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1fea:	a801      	add	r0, sp, #4
 80a1fec:	f7ff fd38 	bl	80a1a60 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1ff0:	2200      	movs	r2, #0
 80a1ff2:	4629      	mov	r1, r5
 80a1ff4:	4807      	ldr	r0, [pc, #28]	; (80a2014 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a1ff6:	f7ff fc51 	bl	80a189c <application_thread_invoke>
 80a1ffa:	4630      	mov	r0, r6
 80a1ffc:	f7ff fd30 	bl	80a1a60 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a2000:	2110      	movs	r1, #16
 80a2002:	4630      	mov	r0, r6
 80a2004:	f000 fe8f 	bl	80a2d26 <_ZdlPvj>
        }
    }
 80a2008:	b007      	add	sp, #28
 80a200a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a200c:	080a1c53 	.word	0x080a1c53
 80a2010:	080a1f21 	.word	0x080a1f21
 80a2014:	080a1a1b 	.word	0x080a1a1b

080a2018 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a2018:	b530      	push	{r4, r5, lr}
 80a201a:	4604      	mov	r4, r0
 80a201c:	b085      	sub	sp, #20
 80a201e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a2020:	4668      	mov	r0, sp
 80a2022:	4611      	mov	r1, r2
 80a2024:	f7ff fdb9 	bl	80a1b9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a2028:	b17c      	cbz	r4, 80a204a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a202a:	b224      	sxth	r4, r4
 80a202c:	4628      	mov	r0, r5
 80a202e:	b10d      	cbz	r5, 80a2034 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a2030:	f001 fce4 	bl	80a39fc <strdup>
 80a2034:	9002      	str	r0, [sp, #8]
 80a2036:	a902      	add	r1, sp, #8
 80a2038:	4668      	mov	r0, sp
 80a203a:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a203e:	f7ff fe1f 	bl	80a1c80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2042:	a802      	add	r0, sp, #8
 80a2044:	f7ff fd24 	bl	80a1a90 <_ZN8particle5ErrorD1Ev>
 80a2048:	e01d      	b.n	80a2086 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a204a:	f04f 0201 	mov.w	r2, #1
 80a204e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a2050:	f88d 4008 	strb.w	r4, [sp, #8]
 80a2054:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a2058:	42a3      	cmp	r3, r4
 80a205a:	d103      	bne.n	80a2064 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a205c:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a2060:	2900      	cmp	r1, #0
 80a2062:	d1f7      	bne.n	80a2054 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a2064:	d002      	beq.n	80a206c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a2066:	f88d 3008 	strb.w	r3, [sp, #8]
 80a206a:	e00c      	b.n	80a2086 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a206c:	f110 010c 	adds.w	r1, r0, #12
 80a2070:	f04f 0301 	mov.w	r3, #1
 80a2074:	bf18      	it	ne
 80a2076:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2078:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a207c:	3004      	adds	r0, #4
 80a207e:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a2082:	f7ff ff71 	bl	80a1f68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a2086:	a801      	add	r0, sp, #4
 80a2088:	f7ff fd59 	bl	80a1b3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a208c:	b005      	add	sp, #20
 80a208e:	bd30      	pop	{r4, r5, pc}

080a2090 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a2090:	4770      	bx	lr

080a2092 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2094:	4606      	mov	r6, r0
 80a2096:	4615      	mov	r5, r2
 80a2098:	460c      	mov	r4, r1
 80a209a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a209c:	42bc      	cmp	r4, r7
 80a209e:	d006      	beq.n	80a20ae <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a20a0:	6833      	ldr	r3, [r6, #0]
 80a20a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a20a6:	689b      	ldr	r3, [r3, #8]
 80a20a8:	4630      	mov	r0, r6
 80a20aa:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a20ac:	e7f6      	b.n	80a209c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a20ae:	4628      	mov	r0, r5
 80a20b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a20b2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a20b2:	2200      	movs	r2, #0
 80a20b4:	7c00      	ldrb	r0, [r0, #16]
 80a20b6:	f7ff bb0f 	b.w	80a16d8 <HAL_I2C_Write_Data>

080a20ba <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a20ba:	2100      	movs	r1, #0
 80a20bc:	7c00      	ldrb	r0, [r0, #16]
 80a20be:	f7ff bb13 	b.w	80a16e8 <HAL_I2C_Available_Data>

080a20c2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a20c2:	2100      	movs	r1, #0
 80a20c4:	7c00      	ldrb	r0, [r0, #16]
 80a20c6:	f7ff bb17 	b.w	80a16f8 <HAL_I2C_Read_Data>

080a20ca <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a20ca:	2100      	movs	r1, #0
 80a20cc:	7c00      	ldrb	r0, [r0, #16]
 80a20ce:	f7ff bb1b 	b.w	80a1708 <HAL_I2C_Peek_Data>

080a20d2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a20d2:	2100      	movs	r1, #0
 80a20d4:	7c00      	ldrb	r0, [r0, #16]
 80a20d6:	f7ff bb1f 	b.w	80a1718 <HAL_I2C_Flush_Data>

080a20da <_ZN7TwoWireD0Ev>:
 80a20da:	b510      	push	{r4, lr}
 80a20dc:	4604      	mov	r4, r0
 80a20de:	2114      	movs	r1, #20
 80a20e0:	f000 fe21 	bl	80a2d26 <_ZdlPvj>
 80a20e4:	4620      	mov	r0, r4
 80a20e6:	bd10      	pop	{r4, pc}

080a20e8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a20e8:	b510      	push	{r4, lr}
 80a20ea:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a20ec:	2300      	movs	r3, #0
 80a20ee:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a20f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a20f4:	60a3      	str	r3, [r4, #8]
 80a20f6:	4b04      	ldr	r3, [pc, #16]	; (80a2108 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a20f8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a20fa:	4608      	mov	r0, r1
 80a20fc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a20fe:	4611      	mov	r1, r2
 80a2100:	f7ff fb1a 	bl	80a1738 <HAL_I2C_Init>
}
 80a2104:	4620      	mov	r0, r4
 80a2106:	bd10      	pop	{r4, pc}
 80a2108:	080a3ad4 	.word	0x080a3ad4

080a210c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a210c:	2100      	movs	r1, #0
 80a210e:	7c00      	ldrb	r0, [r0, #16]
 80a2110:	f7ff bb0a 	b.w	80a1728 <HAL_I2C_Is_Enabled>

080a2114 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2114:	4770      	bx	lr

080a2116 <_ZN9IPAddressD0Ev>:
 80a2116:	b510      	push	{r4, lr}
 80a2118:	4604      	mov	r4, r0
 80a211a:	2118      	movs	r1, #24
 80a211c:	f000 fe03 	bl	80a2d26 <_ZdlPvj>
 80a2120:	4620      	mov	r0, r4
 80a2122:	bd10      	pop	{r4, pc}

080a2124 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2126:	460f      	mov	r7, r1
 80a2128:	f100 0608 	add.w	r6, r0, #8
 80a212c:	1d05      	adds	r5, r0, #4
 80a212e:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a2130:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2134:	220a      	movs	r2, #10
 80a2136:	4638      	mov	r0, r7
 80a2138:	f000 f901 	bl	80a233e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a213c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a213e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2140:	d007      	beq.n	80a2152 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2142:	2c00      	cmp	r4, #0
 80a2144:	d0f4      	beq.n	80a2130 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2146:	212e      	movs	r1, #46	; 0x2e
 80a2148:	4638      	mov	r0, r7
 80a214a:	f000 f8df 	bl	80a230c <_ZN5Print5printEc>
 80a214e:	4404      	add	r4, r0
 80a2150:	e7ee      	b.n	80a2130 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2152:	4620      	mov	r0, r4
 80a2154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2158 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2158:	b510      	push	{r4, lr}
 80a215a:	4604      	mov	r4, r0
 80a215c:	4b04      	ldr	r3, [pc, #16]	; (80a2170 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a215e:	2211      	movs	r2, #17
 80a2160:	f840 3b04 	str.w	r3, [r0], #4
 80a2164:	2100      	movs	r1, #0
 80a2166:	f001 fc0e 	bl	80a3986 <memset>
{
    clear();
}
 80a216a:	4620      	mov	r0, r4
 80a216c:	bd10      	pop	{r4, pc}
 80a216e:	bf00      	nop
 80a2170:	080a3afc 	.word	0x080a3afc

080a2174 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2174:	4603      	mov	r3, r0
 80a2176:	4a07      	ldr	r2, [pc, #28]	; (80a2194 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2178:	b510      	push	{r4, lr}
 80a217a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a217e:	f101 0210 	add.w	r2, r1, #16
 80a2182:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2186:	4291      	cmp	r1, r2
 80a2188:	f843 4b04 	str.w	r4, [r3], #4
 80a218c:	d1f9      	bne.n	80a2182 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a218e:	780a      	ldrb	r2, [r1, #0]
 80a2190:	701a      	strb	r2, [r3, #0]
}
 80a2192:	bd10      	pop	{r4, pc}
 80a2194:	080a3afc 	.word	0x080a3afc

080a2198 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2198:	4a02      	ldr	r2, [pc, #8]	; (80a21a4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a219a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a219c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a219e:	2204      	movs	r2, #4
 80a21a0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a21a2:	4770      	bx	lr
 80a21a4:	080a3afc 	.word	0x080a3afc

080a21a8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a21a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a21aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a21ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a21b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a21b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a21ba:	2304      	movs	r3, #4
 80a21bc:	6041      	str	r1, [r0, #4]
 80a21be:	7503      	strb	r3, [r0, #20]
 80a21c0:	bd10      	pop	{r4, pc}
	...

080a21c4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a21c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a21c6:	4d04      	ldr	r5, [pc, #16]	; (80a21d8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a21c8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a21ca:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a21ce:	9500      	str	r5, [sp, #0]
 80a21d0:	f7ff ffea 	bl	80a21a8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a21d4:	b003      	add	sp, #12
 80a21d6:	bd30      	pop	{r4, r5, pc}
 80a21d8:	080a3afc 	.word	0x080a3afc

080a21dc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a21dc:	4a01      	ldr	r2, [pc, #4]	; (80a21e4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a21de:	4b02      	ldr	r3, [pc, #8]	; (80a21e8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a21e0:	601a      	str	r2, [r3, #0]
 80a21e2:	4770      	bx	lr
 80a21e4:	080a3b7e 	.word	0x080a3b7e
 80a21e8:	200000b4 	.word	0x200000b4

080a21ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a21ec:	2300      	movs	r3, #0
 80a21ee:	461a      	mov	r2, r3
 80a21f0:	6840      	ldr	r0, [r0, #4]
 80a21f2:	f7ff bb97 	b.w	80a1924 <network_connect>

080a21f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a21f6:	2200      	movs	r2, #0
 80a21f8:	2102      	movs	r1, #2
 80a21fa:	6840      	ldr	r0, [r0, #4]
 80a21fc:	f7ff bba2 	b.w	80a1944 <network_disconnect>

080a2200 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2200:	2200      	movs	r2, #0
 80a2202:	4611      	mov	r1, r2
 80a2204:	6840      	ldr	r0, [r0, #4]
 80a2206:	f7ff bb95 	b.w	80a1934 <network_connecting>

080a220a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a220a:	2200      	movs	r2, #0
 80a220c:	4611      	mov	r1, r2
 80a220e:	6840      	ldr	r0, [r0, #4]
 80a2210:	f7ff bba0 	b.w	80a1954 <network_ready>

080a2214 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2214:	2300      	movs	r3, #0
 80a2216:	461a      	mov	r2, r3
 80a2218:	4619      	mov	r1, r3
 80a221a:	6840      	ldr	r0, [r0, #4]
 80a221c:	f7ff bba2 	b.w	80a1964 <network_on>

080a2220 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2220:	2300      	movs	r3, #0
 80a2222:	461a      	mov	r2, r3
 80a2224:	4619      	mov	r1, r3
 80a2226:	6840      	ldr	r0, [r0, #4]
 80a2228:	f7ff bba4 	b.w	80a1974 <network_off>

080a222c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a222c:	2200      	movs	r2, #0
 80a222e:	f081 0101 	eor.w	r1, r1, #1
 80a2232:	6840      	ldr	r0, [r0, #4]
 80a2234:	f7ff bba6 	b.w	80a1984 <network_listen>

080a2238 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2238:	2200      	movs	r2, #0
 80a223a:	6840      	ldr	r0, [r0, #4]
 80a223c:	f7ff bbb2 	b.w	80a19a4 <network_set_listen_timeout>

080a2240 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2240:	2200      	movs	r2, #0
 80a2242:	4611      	mov	r1, r2
 80a2244:	6840      	ldr	r0, [r0, #4]
 80a2246:	f7ff bbb5 	b.w	80a19b4 <network_get_listen_timeout>

080a224a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a224a:	2200      	movs	r2, #0
 80a224c:	4611      	mov	r1, r2
 80a224e:	6840      	ldr	r0, [r0, #4]
 80a2250:	f7ff bba0 	b.w	80a1994 <network_listening>

080a2254 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2254:	b570      	push	{r4, r5, r6, lr}
 80a2256:	4616      	mov	r6, r2
 80a2258:	b08e      	sub	sp, #56	; 0x38
 80a225a:	4604      	mov	r4, r0
    IPAddress addr;
 80a225c:	a808      	add	r0, sp, #32
 80a225e:	f7ff ff7b 	bl	80a2158 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2262:	2211      	movs	r2, #17
 80a2264:	2100      	movs	r1, #0
 80a2266:	a803      	add	r0, sp, #12
 80a2268:	f001 fb8d 	bl	80a3986 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a226c:	4630      	mov	r0, r6
 80a226e:	f001 fbe0 	bl	80a3a32 <strlen>
 80a2272:	2500      	movs	r5, #0
 80a2274:	4b0a      	ldr	r3, [pc, #40]	; (80a22a0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2276:	9500      	str	r5, [sp, #0]
 80a2278:	b281      	uxth	r1, r0
 80a227a:	685b      	ldr	r3, [r3, #4]
 80a227c:	aa03      	add	r2, sp, #12
 80a227e:	4630      	mov	r0, r6
 80a2280:	f7ff faec 	bl	80a185c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2284:	b120      	cbz	r0, 80a2290 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2286:	4629      	mov	r1, r5
 80a2288:	4620      	mov	r0, r4
 80a228a:	f7ff ff85 	bl	80a2198 <_ZN9IPAddressC1Em>
 80a228e:	e003      	b.n	80a2298 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2290:	a903      	add	r1, sp, #12
 80a2292:	4620      	mov	r0, r4
 80a2294:	f7ff ff6e 	bl	80a2174 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2298:	4620      	mov	r0, r4
 80a229a:	b00e      	add	sp, #56	; 0x38
 80a229c:	bd70      	pop	{r4, r5, r6, pc}
 80a229e:	bf00      	nop
 80a22a0:	2000053c 	.word	0x2000053c

080a22a4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a22a4:	4b02      	ldr	r3, [pc, #8]	; (80a22b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a22a6:	4a03      	ldr	r2, [pc, #12]	; (80a22b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a22a8:	601a      	str	r2, [r3, #0]
 80a22aa:	2200      	movs	r2, #0
 80a22ac:	605a      	str	r2, [r3, #4]
 80a22ae:	4770      	bx	lr
 80a22b0:	200000b8 	.word	0x200000b8
 80a22b4:	080a3bf4 	.word	0x080a3bf4

080a22b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a22b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a22ba:	4606      	mov	r6, r0
 80a22bc:	460d      	mov	r5, r1
 80a22be:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a22c0:	2400      	movs	r4, #0
  while (size--) {
 80a22c2:	42bd      	cmp	r5, r7
 80a22c4:	d00c      	beq.n	80a22e0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a22c6:	6833      	ldr	r3, [r6, #0]
 80a22c8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a22cc:	689b      	ldr	r3, [r3, #8]
 80a22ce:	4630      	mov	r0, r6
 80a22d0:	4798      	blx	r3
     if (chunk>=0)
 80a22d2:	2800      	cmp	r0, #0
 80a22d4:	db01      	blt.n	80a22da <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a22d6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a22d8:	e7f3      	b.n	80a22c2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a22da:	2c00      	cmp	r4, #0
 80a22dc:	bf08      	it	eq
 80a22de:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a22e0:	4620      	mov	r0, r4
 80a22e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a22e4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a22e4:	b570      	push	{r4, r5, r6, lr}
 80a22e6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a22e8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a22ea:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a22ec:	b149      	cbz	r1, 80a2302 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a22ee:	f001 fba0 	bl	80a3a32 <strlen>
 80a22f2:	682b      	ldr	r3, [r5, #0]
 80a22f4:	4602      	mov	r2, r0
 80a22f6:	4621      	mov	r1, r4
 80a22f8:	4628      	mov	r0, r5
    }
 80a22fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a22fe:	68db      	ldr	r3, [r3, #12]
 80a2300:	4718      	bx	r3
    }
 80a2302:	bd70      	pop	{r4, r5, r6, pc}

080a2304 <_ZN5Print5printEPKc>:
 80a2304:	b508      	push	{r3, lr}
 80a2306:	f7ff ffed 	bl	80a22e4 <_ZN5Print5writeEPKc>
 80a230a:	bd08      	pop	{r3, pc}

080a230c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a230c:	6803      	ldr	r3, [r0, #0]
 80a230e:	689b      	ldr	r3, [r3, #8]
 80a2310:	4718      	bx	r3

080a2312 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2312:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2314:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2316:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2318:	f7ff fff8 	bl	80a230c <_ZN5Print5printEc>
  n += print('\n');
 80a231c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a231e:	4604      	mov	r4, r0
  n += print('\n');
 80a2320:	4628      	mov	r0, r5
 80a2322:	f7ff fff3 	bl	80a230c <_ZN5Print5printEc>
  return n;
}
 80a2326:	4420      	add	r0, r4
 80a2328:	bd38      	pop	{r3, r4, r5, pc}

080a232a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a232a:	b538      	push	{r3, r4, r5, lr}
 80a232c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a232e:	f7ff ffd9 	bl	80a22e4 <_ZN5Print5writeEPKc>
 80a2332:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a2334:	4628      	mov	r0, r5
 80a2336:	f7ff ffec 	bl	80a2312 <_ZN5Print7printlnEv>
  return n;
}
 80a233a:	4420      	add	r0, r4
 80a233c:	bd38      	pop	{r3, r4, r5, pc}

080a233e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a233e:	2a01      	cmp	r2, #1
 80a2340:	bf98      	it	ls
 80a2342:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2344:	b530      	push	{r4, r5, lr}
 80a2346:	460b      	mov	r3, r1
 80a2348:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a234a:	2100      	movs	r1, #0
 80a234c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2350:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a2354:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a2358:	fb05 3312 	mls	r3, r5, r2, r3
 80a235c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a235e:	2b09      	cmp	r3, #9
 80a2360:	bf94      	ite	ls
 80a2362:	3330      	addls	r3, #48	; 0x30
 80a2364:	3337      	addhi	r3, #55	; 0x37
 80a2366:	b2db      	uxtb	r3, r3
 80a2368:	4621      	mov	r1, r4
 80a236a:	f804 3901 	strb.w	r3, [r4], #-1
 80a236e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2370:	2d00      	cmp	r5, #0
 80a2372:	d1ef      	bne.n	80a2354 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2374:	f7ff ffb6 	bl	80a22e4 <_ZN5Print5writeEPKc>
}
 80a2378:	b00b      	add	sp, #44	; 0x2c
 80a237a:	bd30      	pop	{r4, r5, pc}

080a237c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a237c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2380:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2382:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2384:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2386:	4617      	mov	r7, r2
 80a2388:	461e      	mov	r6, r3
 80a238a:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a238e:	f001 fa83 	bl	80a3898 <__aeabi_dcmpun>
 80a2392:	b108      	cbz	r0, 80a2398 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2394:	494d      	ldr	r1, [pc, #308]	; (80a24cc <_ZN5Print10printFloatEdh+0x150>)
 80a2396:	e012      	b.n	80a23be <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a2398:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a239c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a23a0:	4b4b      	ldr	r3, [pc, #300]	; (80a24d0 <_ZN5Print10printFloatEdh+0x154>)
 80a23a2:	4638      	mov	r0, r7
 80a23a4:	4621      	mov	r1, r4
 80a23a6:	f001 fa77 	bl	80a3898 <__aeabi_dcmpun>
 80a23aa:	b968      	cbnz	r0, 80a23c8 <_ZN5Print10printFloatEdh+0x4c>
 80a23ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a23b0:	4b47      	ldr	r3, [pc, #284]	; (80a24d0 <_ZN5Print10printFloatEdh+0x154>)
 80a23b2:	4638      	mov	r0, r7
 80a23b4:	4621      	mov	r1, r4
 80a23b6:	f001 fa51 	bl	80a385c <__aeabi_dcmple>
 80a23ba:	b928      	cbnz	r0, 80a23c8 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a23bc:	4945      	ldr	r1, [pc, #276]	; (80a24d4 <_ZN5Print10printFloatEdh+0x158>)
 80a23be:	4640      	mov	r0, r8
 80a23c0:	f7ff ff90 	bl	80a22e4 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a23c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a23c8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a23cc:	4b42      	ldr	r3, [pc, #264]	; (80a24d8 <_ZN5Print10printFloatEdh+0x15c>)
 80a23ce:	4638      	mov	r0, r7
 80a23d0:	4631      	mov	r1, r6
 80a23d2:	f001 fa57 	bl	80a3884 <__aeabi_dcmpgt>
 80a23d6:	b108      	cbz	r0, 80a23dc <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a23d8:	4940      	ldr	r1, [pc, #256]	; (80a24dc <_ZN5Print10printFloatEdh+0x160>)
 80a23da:	e7f0      	b.n	80a23be <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a23dc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a23e0:	4b3f      	ldr	r3, [pc, #252]	; (80a24e0 <_ZN5Print10printFloatEdh+0x164>)
 80a23e2:	4638      	mov	r0, r7
 80a23e4:	4631      	mov	r1, r6
 80a23e6:	f001 fa2f 	bl	80a3848 <__aeabi_dcmplt>
 80a23ea:	2800      	cmp	r0, #0
 80a23ec:	d1f4      	bne.n	80a23d8 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a23ee:	2200      	movs	r2, #0
 80a23f0:	2300      	movs	r3, #0
 80a23f2:	4638      	mov	r0, r7
 80a23f4:	4631      	mov	r1, r6
 80a23f6:	f001 fa27 	bl	80a3848 <__aeabi_dcmplt>
 80a23fa:	b138      	cbz	r0, 80a240c <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a23fc:	212d      	movs	r1, #45	; 0x2d
 80a23fe:	4640      	mov	r0, r8
 80a2400:	f7ff ff84 	bl	80a230c <_ZN5Print5printEc>
     number = -number;
 80a2404:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a2408:	4604      	mov	r4, r0
 80a240a:	e000      	b.n	80a240e <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a240c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a240e:	4935      	ldr	r1, [pc, #212]	; (80a24e4 <_ZN5Print10printFloatEdh+0x168>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a2410:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a2414:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a2416:	fa5f f389 	uxtb.w	r3, r9
 80a241a:	429d      	cmp	r5, r3
 80a241c:	d906      	bls.n	80a242c <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a241e:	2200      	movs	r2, #0
 80a2420:	4b31      	ldr	r3, [pc, #196]	; (80a24e8 <_ZN5Print10printFloatEdh+0x16c>)
 80a2422:	f001 f8c9 	bl	80a35b8 <__aeabi_ddiv>
 80a2426:	f109 0901 	add.w	r9, r9, #1
 80a242a:	e7f4      	b.n	80a2416 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a242c:	463a      	mov	r2, r7
 80a242e:	4633      	mov	r3, r6
 80a2430:	f000 fde6 	bl	80a3000 <__adddf3>
 80a2434:	460f      	mov	r7, r1
 80a2436:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a2438:	f001 fa6c 	bl	80a3914 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a243c:	220a      	movs	r2, #10
 80a243e:	4601      	mov	r1, r0
 80a2440:	4681      	mov	r9, r0
 80a2442:	4640      	mov	r0, r8
 80a2444:	f7ff ff7b 	bl	80a233e <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2448:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a244a:	b3e5      	cbz	r5, 80a24c6 <_ZN5Print10printFloatEdh+0x14a>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a244c:	4648      	mov	r0, r9
 80a244e:	f000 ff13 	bl	80a3278 <__aeabi_ui2d>
 80a2452:	4602      	mov	r2, r0
 80a2454:	460b      	mov	r3, r1
 80a2456:	4630      	mov	r0, r6
 80a2458:	4639      	mov	r1, r7
 80a245a:	f000 fdcf 	bl	80a2ffc <__aeabi_dsub>
 80a245e:	4606      	mov	r6, r0
 80a2460:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2462:	4640      	mov	r0, r8
 80a2464:	4921      	ldr	r1, [pc, #132]	; (80a24ec <_ZN5Print10printFloatEdh+0x170>)
 80a2466:	f7ff ff3d 	bl	80a22e4 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a246a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a246c:	2200      	movs	r2, #0
 80a246e:	4b1e      	ldr	r3, [pc, #120]	; (80a24e8 <_ZN5Print10printFloatEdh+0x16c>)
 80a2470:	4630      	mov	r0, r6
 80a2472:	4639      	mov	r1, r7
 80a2474:	f000 ff76 	bl	80a3364 <__aeabi_dmul>
 80a2478:	4606      	mov	r6, r0
 80a247a:	460f      	mov	r7, r1
    int toPrint = int(remainder);
 80a247c:	f001 fa22 	bl	80a38c4 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a2480:	f1b0 0a00 	subs.w	sl, r0, #0
 80a2484:	da07      	bge.n	80a2496 <_ZN5Print10printFloatEdh+0x11a>
            t = print('-');
 80a2486:	212d      	movs	r1, #45	; 0x2d
 80a2488:	4640      	mov	r0, r8
 80a248a:	f7ff ff3f 	bl	80a230c <_ZN5Print5printEc>
            val = -n;
 80a248e:	f1ca 0100 	rsb	r1, sl, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 80a2492:	4681      	mov	r9, r0
 80a2494:	e002      	b.n	80a249c <_ZN5Print10printFloatEdh+0x120>
            val = -n;
        } else {
            val = n;
 80a2496:	4651      	mov	r1, sl
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 80a2498:	f04f 0900 	mov.w	r9, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a249c:	220a      	movs	r2, #10
 80a249e:	4640      	mov	r0, r8
 80a24a0:	f7ff ff4d 	bl	80a233e <_ZN5Print11printNumberEmh>
    n += print(toPrint);
 80a24a4:	4448      	add	r0, r9
 80a24a6:	4404      	add	r4, r0
    remainder -= toPrint;
 80a24a8:	4650      	mov	r0, sl
 80a24aa:	f000 fef5 	bl	80a3298 <__aeabi_i2d>
 80a24ae:	4602      	mov	r2, r0
 80a24b0:	460b      	mov	r3, r1
 80a24b2:	4630      	mov	r0, r6
 80a24b4:	4639      	mov	r1, r7
 80a24b6:	f000 fda1 	bl	80a2ffc <__aeabi_dsub>
 80a24ba:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a24bc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a24c0:	4606      	mov	r6, r0
 80a24c2:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a24c4:	d1d2      	bne.n	80a246c <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a24c6:	4620      	mov	r0, r4
 80a24c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a24cc:	080a3c20 	.word	0x080a3c20
 80a24d0:	7fefffff 	.word	0x7fefffff
 80a24d4:	080a3c2a 	.word	0x080a3c2a
 80a24d8:	41efffff 	.word	0x41efffff
 80a24dc:	080a3c24 	.word	0x080a3c24
 80a24e0:	c1efffff 	.word	0xc1efffff
 80a24e4:	3fe00000 	.word	0x3fe00000
 80a24e8:	40240000 	.word	0x40240000
 80a24ec:	080a3c28 	.word	0x080a3c28

080a24f0 <_ZN5Print5printEdi>:
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a24f0:	f89d 1000 	ldrb.w	r1, [sp]
 80a24f4:	9100      	str	r1, [sp, #0]
 80a24f6:	f7ff bf41 	b.w	80a237c <_ZN5Print10printFloatEdh>

080a24fa <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a24fa:	b510      	push	{r4, lr}
 80a24fc:	4604      	mov	r4, r0
 80a24fe:	f7ff faaf 	bl	80a1a60 <_ZNSt14_Function_baseD1Ev>
 80a2502:	4620      	mov	r0, r4
 80a2504:	bd10      	pop	{r4, pc}
	...

080a2508 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2508:	4803      	ldr	r0, [pc, #12]	; (80a2518 <_GLOBAL__sub_I_RGB+0x10>)
 80a250a:	2300      	movs	r3, #0
 80a250c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a250e:	4a03      	ldr	r2, [pc, #12]	; (80a251c <_GLOBAL__sub_I_RGB+0x14>)
 80a2510:	4903      	ldr	r1, [pc, #12]	; (80a2520 <_GLOBAL__sub_I_RGB+0x18>)
 80a2512:	f000 bc03 	b.w	80a2d1c <__aeabi_atexit>
 80a2516:	bf00      	nop
 80a2518:	200000c0 	.word	0x200000c0
 80a251c:	20000078 	.word	0x20000078
 80a2520:	080a24fb 	.word	0x080a24fb

080a2524 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2524:	b570      	push	{r4, r5, r6, lr}
 80a2526:	4604      	mov	r4, r0
 80a2528:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a252a:	2500      	movs	r5, #0
 80a252c:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a2530:	f7ff f87a 	bl	80a1628 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a2534:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a2536:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a2538:	f7ff f908 	bl	80a174c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a253c:	6065      	str	r5, [r4, #4]
}
 80a253e:	4620      	mov	r0, r4
 80a2540:	bd70      	pop	{r4, r5, r6, pc}

080a2542 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a2542:	7800      	ldrb	r0, [r0, #0]
 80a2544:	f7ff b90a 	b.w	80a175c <HAL_SPI_Is_Enabled>

080a2548 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2548:	b510      	push	{r4, lr}
 80a254a:	4604      	mov	r4, r0
{
	free(buffer);
 80a254c:	6800      	ldr	r0, [r0, #0]
 80a254e:	f7ff fa41 	bl	80a19d4 <free>
}
 80a2552:	4620      	mov	r0, r4
 80a2554:	bd10      	pop	{r4, pc}

080a2556 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2556:	b510      	push	{r4, lr}
 80a2558:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a255a:	6800      	ldr	r0, [r0, #0]
 80a255c:	b108      	cbz	r0, 80a2562 <_ZN6String10invalidateEv+0xc>
 80a255e:	f7ff fa39 	bl	80a19d4 <free>
	buffer = NULL;
 80a2562:	2300      	movs	r3, #0
 80a2564:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a2566:	60a3      	str	r3, [r4, #8]
 80a2568:	6063      	str	r3, [r4, #4]
 80a256a:	bd10      	pop	{r4, pc}

080a256c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a256c:	b538      	push	{r3, r4, r5, lr}
 80a256e:	4604      	mov	r4, r0
 80a2570:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2572:	6800      	ldr	r0, [r0, #0]
 80a2574:	3101      	adds	r1, #1
 80a2576:	f7ff fa35 	bl	80a19e4 <realloc>
	if (newbuffer) {
 80a257a:	b110      	cbz	r0, 80a2582 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a257c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a2580:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2582:	bd38      	pop	{r3, r4, r5, pc}

080a2584 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2584:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2586:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2588:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a258a:	b113      	cbz	r3, 80a2592 <_ZN6String7reserveEj+0xe>
 80a258c:	6843      	ldr	r3, [r0, #4]
 80a258e:	428b      	cmp	r3, r1
 80a2590:	d207      	bcs.n	80a25a2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a2592:	4620      	mov	r0, r4
 80a2594:	f7ff ffea 	bl	80a256c <_ZN6String12changeBufferEj>
 80a2598:	b120      	cbz	r0, 80a25a4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a259a:	68a3      	ldr	r3, [r4, #8]
 80a259c:	b90b      	cbnz	r3, 80a25a2 <_ZN6String7reserveEj+0x1e>
 80a259e:	6822      	ldr	r2, [r4, #0]
 80a25a0:	7013      	strb	r3, [r2, #0]
 80a25a2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a25a4:	bd10      	pop	{r4, pc}

080a25a6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a25a6:	b570      	push	{r4, r5, r6, lr}
 80a25a8:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a25aa:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a25ac:	4604      	mov	r4, r0
 80a25ae:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a25b0:	f7ff ffe8 	bl	80a2584 <_ZN6String7reserveEj>
 80a25b4:	b918      	cbnz	r0, 80a25be <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a25b6:	4620      	mov	r0, r4
 80a25b8:	f7ff ffcd 	bl	80a2556 <_ZN6String10invalidateEv>
		return *this;
 80a25bc:	e009      	b.n	80a25d2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a25be:	462a      	mov	r2, r5
 80a25c0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a25c2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a25c4:	6820      	ldr	r0, [r4, #0]
 80a25c6:	f001 f9d3 	bl	80a3970 <memcpy>
	buffer[len] = 0;
 80a25ca:	6822      	ldr	r2, [r4, #0]
 80a25cc:	68a3      	ldr	r3, [r4, #8]
 80a25ce:	2100      	movs	r1, #0
 80a25d0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a25d2:	4620      	mov	r0, r4
 80a25d4:	bd70      	pop	{r4, r5, r6, pc}

080a25d6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a25d6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a25d8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a25da:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a25dc:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a25de:	6043      	str	r3, [r0, #4]
	len = 0;
 80a25e0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a25e2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a25e4:	460d      	mov	r5, r1
 80a25e6:	b139      	cbz	r1, 80a25f8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a25e8:	4608      	mov	r0, r1
 80a25ea:	f001 fa22 	bl	80a3a32 <strlen>
 80a25ee:	4629      	mov	r1, r5
 80a25f0:	4602      	mov	r2, r0
 80a25f2:	4620      	mov	r0, r4
 80a25f4:	f7ff ffd7 	bl	80a25a6 <_ZN6String4copyEPKcj>
}
 80a25f8:	4620      	mov	r0, r4
 80a25fa:	bd38      	pop	{r3, r4, r5, pc}

080a25fc <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a25fc:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a25fe:	b510      	push	{r4, lr}
 80a2600:	460b      	mov	r3, r1
 80a2602:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a2604:	d007      	beq.n	80a2616 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a2606:	6809      	ldr	r1, [r1, #0]
 80a2608:	b119      	cbz	r1, 80a2612 <_ZN6StringaSERKS_+0x16>
 80a260a:	689a      	ldr	r2, [r3, #8]
 80a260c:	f7ff ffcb 	bl	80a25a6 <_ZN6String4copyEPKcj>
 80a2610:	e001      	b.n	80a2616 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a2612:	f7ff ffa0 	bl	80a2556 <_ZN6String10invalidateEv>

	return *this;
}
 80a2616:	4620      	mov	r0, r4
 80a2618:	bd10      	pop	{r4, pc}

080a261a <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a261a:	b510      	push	{r4, lr}
 80a261c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a261e:	2300      	movs	r3, #0
 80a2620:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2622:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2624:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2626:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a2628:	f7ff ffe8 	bl	80a25fc <_ZN6StringaSERKS_>
}
 80a262c:	4620      	mov	r0, r4
 80a262e:	bd10      	pop	{r4, pc}

080a2630 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a2630:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2632:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a2634:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2636:	b912      	cbnz	r2, 80a263e <_ZNK6String6equalsEPKc+0xe>
 80a2638:	b919      	cbnz	r1, 80a2642 <_ZNK6String6equalsEPKc+0x12>
 80a263a:	2001      	movs	r0, #1
 80a263c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a263e:	b911      	cbnz	r1, 80a2646 <_ZNK6String6equalsEPKc+0x16>
 80a2640:	6803      	ldr	r3, [r0, #0]
 80a2642:	7818      	ldrb	r0, [r3, #0]
 80a2644:	e002      	b.n	80a264c <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a2646:	6800      	ldr	r0, [r0, #0]
 80a2648:	f001 f9ce 	bl	80a39e8 <strcmp>
 80a264c:	fab0 f080 	clz	r0, r0
 80a2650:	0940      	lsrs	r0, r0, #5
}
 80a2652:	bd08      	pop	{r3, pc}

080a2654 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a2654:	b510      	push	{r4, lr}
 80a2656:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a2658:	6800      	ldr	r0, [r0, #0]
 80a265a:	b118      	cbz	r0, 80a2664 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a265c:	f7ff f9ba 	bl	80a19d4 <free>
            wakeupSource_ = nullptr;
 80a2660:	2300      	movs	r3, #0
 80a2662:	6023      	str	r3, [r4, #0]
 80a2664:	bd10      	pop	{r4, pc}

080a2666 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a2666:	b510      	push	{r4, lr}
 80a2668:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a266a:	f7ff fff3 	bl	80a2654 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a266e:	4620      	mov	r0, r4
 80a2670:	bd10      	pop	{r4, pc}
	...

080a2674 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a2674:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a2678:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a267a:	4c08      	ldr	r4, [pc, #32]	; (80a269c <_GLOBAL__sub_I_System+0x28>)
 80a267c:	2000      	movs	r0, #0
 80a267e:	6020      	str	r0, [r4, #0]
 80a2680:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a2682:	71a0      	strb	r0, [r4, #6]
 80a2684:	8120      	strh	r0, [r4, #8]
 80a2686:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2688:	f7ff f8f0 	bl	80a186c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a268c:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a268e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a2692:	4a03      	ldr	r2, [pc, #12]	; (80a26a0 <_GLOBAL__sub_I_System+0x2c>)
 80a2694:	4903      	ldr	r1, [pc, #12]	; (80a26a4 <_GLOBAL__sub_I_System+0x30>)
 80a2696:	f000 bb41 	b.w	80a2d1c <__aeabi_atexit>
 80a269a:	bf00      	nop
 80a269c:	200000d0 	.word	0x200000d0
 80a26a0:	20000078 	.word	0x20000078
 80a26a4:	080a2667 	.word	0x080a2667

080a26a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a26a8:	4b02      	ldr	r3, [pc, #8]	; (80a26b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a26aa:	681a      	ldr	r2, [r3, #0]
 80a26ac:	4b02      	ldr	r3, [pc, #8]	; (80a26b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a26ae:	601a      	str	r2, [r3, #0]
 80a26b0:	4770      	bx	lr
 80a26b2:	bf00      	nop
 80a26b4:	2000000c 	.word	0x2000000c
 80a26b8:	200000dc 	.word	0x200000dc

080a26bc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a26bc:	4770      	bx	lr

080a26be <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a26be:	7441      	strb	r1, [r0, #17]
 80a26c0:	4770      	bx	lr

080a26c2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a26c2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a26c4:	7c00      	ldrb	r0, [r0, #16]
 80a26c6:	f7ff f889 	bl	80a17dc <HAL_USART_Available_Data_For_Write>
}
 80a26ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a26ce:	bd08      	pop	{r3, pc}

080a26d0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a26d0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a26d2:	7c00      	ldrb	r0, [r0, #16]
 80a26d4:	f7ff f85a 	bl	80a178c <HAL_USART_Available_Data>
}
 80a26d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a26dc:	bd08      	pop	{r3, pc}

080a26de <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a26de:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a26e0:	7c00      	ldrb	r0, [r0, #16]
 80a26e2:	f7ff f863 	bl	80a17ac <HAL_USART_Peek_Data>
}
 80a26e6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a26ea:	bf28      	it	cs
 80a26ec:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a26f0:	bd08      	pop	{r3, pc}

080a26f2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a26f2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a26f4:	7c00      	ldrb	r0, [r0, #16]
 80a26f6:	f7ff f851 	bl	80a179c <HAL_USART_Read_Data>
}
 80a26fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a26fe:	bf28      	it	cs
 80a2700:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2704:	bd08      	pop	{r3, pc}

080a2706 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2706:	7c00      	ldrb	r0, [r0, #16]
 80a2708:	f7ff b858 	b.w	80a17bc <HAL_USART_Flush_Data>

080a270c <_ZN11USARTSerialD0Ev>:
 80a270c:	b510      	push	{r4, lr}
 80a270e:	4604      	mov	r4, r0
 80a2710:	2114      	movs	r1, #20
 80a2712:	f000 fb08 	bl	80a2d26 <_ZdlPvj>
 80a2716:	4620      	mov	r0, r4
 80a2718:	bd10      	pop	{r4, pc}

080a271a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a271a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a271c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a271e:	4604      	mov	r4, r0
 80a2720:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2722:	b925      	cbnz	r5, 80a272e <_ZN11USARTSerial5writeEh+0x14>
 80a2724:	7c00      	ldrb	r0, [r0, #16]
 80a2726:	f7ff f859 	bl	80a17dc <HAL_USART_Available_Data_For_Write>
 80a272a:	2800      	cmp	r0, #0
 80a272c:	dd05      	ble.n	80a273a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a272e:	4631      	mov	r1, r6
 80a2730:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2736:	f7ff b821 	b.w	80a177c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a273a:	4628      	mov	r0, r5
 80a273c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2740 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2740:	b510      	push	{r4, lr}
 80a2742:	4604      	mov	r4, r0
 80a2744:	4608      	mov	r0, r1
 80a2746:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2748:	2200      	movs	r2, #0
 80a274a:	6062      	str	r2, [r4, #4]
 80a274c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2750:	60a2      	str	r2, [r4, #8]
 80a2752:	4a05      	ldr	r2, [pc, #20]	; (80a2768 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2754:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2756:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2758:	2201      	movs	r2, #1
 80a275a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a275c:	461a      	mov	r2, r3
 80a275e:	f7ff f805 	bl	80a176c <HAL_USART_Init>
}
 80a2762:	4620      	mov	r0, r4
 80a2764:	bd10      	pop	{r4, pc}
 80a2766:	bf00      	nop
 80a2768:	080a3c60 	.word	0x080a3c60

080a276c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a276c:	7c00      	ldrb	r0, [r0, #16]
 80a276e:	f7ff b82d 	b.w	80a17cc <HAL_USART_Is_Enabled>
	...

080a2774 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2774:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2776:	4d0c      	ldr	r5, [pc, #48]	; (80a27a8 <_Z22__fetch_global_Serial1v+0x34>)
 80a2778:	6829      	ldr	r1, [r5, #0]
 80a277a:	f011 0401 	ands.w	r4, r1, #1
 80a277e:	d111      	bne.n	80a27a4 <_Z22__fetch_global_Serial1v+0x30>
 80a2780:	4628      	mov	r0, r5
 80a2782:	f7fd fc90 	bl	80a00a6 <__cxa_guard_acquire>
 80a2786:	b168      	cbz	r0, 80a27a4 <_Z22__fetch_global_Serial1v+0x30>
 80a2788:	4a08      	ldr	r2, [pc, #32]	; (80a27ac <_Z22__fetch_global_Serial1v+0x38>)
 80a278a:	4621      	mov	r1, r4
 80a278c:	4b08      	ldr	r3, [pc, #32]	; (80a27b0 <_Z22__fetch_global_Serial1v+0x3c>)
 80a278e:	4809      	ldr	r0, [pc, #36]	; (80a27b4 <_Z22__fetch_global_Serial1v+0x40>)
 80a2790:	f7ff ffd6 	bl	80a2740 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2794:	4628      	mov	r0, r5
 80a2796:	f7fd fc8b 	bl	80a00b0 <__cxa_guard_release>
 80a279a:	4a07      	ldr	r2, [pc, #28]	; (80a27b8 <_Z22__fetch_global_Serial1v+0x44>)
 80a279c:	4907      	ldr	r1, [pc, #28]	; (80a27bc <_Z22__fetch_global_Serial1v+0x48>)
 80a279e:	4805      	ldr	r0, [pc, #20]	; (80a27b4 <_Z22__fetch_global_Serial1v+0x40>)
 80a27a0:	f000 fabc 	bl	80a2d1c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a27a4:	4803      	ldr	r0, [pc, #12]	; (80a27b4 <_Z22__fetch_global_Serial1v+0x40>)
 80a27a6:	bd38      	pop	{r3, r4, r5, pc}
 80a27a8:	20000178 	.word	0x20000178
 80a27ac:	2000017c 	.word	0x2000017c
 80a27b0:	200000f4 	.word	0x200000f4
 80a27b4:	200000e0 	.word	0x200000e0
 80a27b8:	20000078 	.word	0x20000078
 80a27bc:	080a26bd 	.word	0x080a26bd

080a27c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a27c0:	7441      	strb	r1, [r0, #17]
 80a27c2:	4770      	bx	lr

080a27c4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a27c4:	4770      	bx	lr

080a27c6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a27c6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a27c8:	2100      	movs	r1, #0
 80a27ca:	7c00      	ldrb	r0, [r0, #16]
 80a27cc:	f7ff f82e 	bl	80a182c <HAL_USB_USART_Receive_Data>
}
 80a27d0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a27d4:	bf28      	it	cs
 80a27d6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a27da:	bd08      	pop	{r3, pc}

080a27dc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a27dc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a27de:	2101      	movs	r1, #1
 80a27e0:	7c00      	ldrb	r0, [r0, #16]
 80a27e2:	f7ff f823 	bl	80a182c <HAL_USB_USART_Receive_Data>
}
 80a27e6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a27ea:	bf28      	it	cs
 80a27ec:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a27f0:	bd08      	pop	{r3, pc}

080a27f2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a27f2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a27f4:	7c00      	ldrb	r0, [r0, #16]
 80a27f6:	f7ff f811 	bl	80a181c <HAL_USB_USART_Available_Data_For_Write>
}
 80a27fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a27fe:	bd08      	pop	{r3, pc}

080a2800 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2800:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2802:	7c00      	ldrb	r0, [r0, #16]
 80a2804:	f7ff f802 	bl	80a180c <HAL_USB_USART_Available_Data>
}
 80a2808:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a280c:	bd08      	pop	{r3, pc}

080a280e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a280e:	7c00      	ldrb	r0, [r0, #16]
 80a2810:	f7ff b81c 	b.w	80a184c <HAL_USB_USART_Flush_Data>

080a2814 <_ZN9USBSerialD0Ev>:
 80a2814:	b510      	push	{r4, lr}
 80a2816:	4604      	mov	r4, r0
 80a2818:	2114      	movs	r1, #20
 80a281a:	f000 fa84 	bl	80a2d26 <_ZdlPvj>
 80a281e:	4620      	mov	r0, r4
 80a2820:	bd10      	pop	{r4, pc}

080a2822 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2822:	b538      	push	{r3, r4, r5, lr}
 80a2824:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2826:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2828:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a282a:	f7fe fff7 	bl	80a181c <HAL_USB_USART_Available_Data_For_Write>
 80a282e:	2800      	cmp	r0, #0
 80a2830:	dc01      	bgt.n	80a2836 <_ZN9USBSerial5writeEh+0x14>
 80a2832:	7c60      	ldrb	r0, [r4, #17]
 80a2834:	b128      	cbz	r0, 80a2842 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2836:	4629      	mov	r1, r5
 80a2838:	7c20      	ldrb	r0, [r4, #16]
 80a283a:	f7fe ffff 	bl	80a183c <HAL_USB_USART_Send_Data>
 80a283e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2842:	bd38      	pop	{r3, r4, r5, pc}

080a2844 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2844:	b510      	push	{r4, lr}
 80a2846:	4604      	mov	r4, r0
 80a2848:	2300      	movs	r3, #0
 80a284a:	6063      	str	r3, [r4, #4]
 80a284c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2850:	60a3      	str	r3, [r4, #8]
 80a2852:	4b05      	ldr	r3, [pc, #20]	; (80a2868 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2854:	4608      	mov	r0, r1
 80a2856:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2858:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a285a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a285c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a285e:	4611      	mov	r1, r2
 80a2860:	f7fe ffc4 	bl	80a17ec <HAL_USB_USART_Init>
}
 80a2864:	4620      	mov	r0, r4
 80a2866:	bd10      	pop	{r4, pc}
 80a2868:	080a3c90 	.word	0x080a3c90

080a286c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a286c:	2200      	movs	r2, #0
 80a286e:	7c00      	ldrb	r0, [r0, #16]
 80a2870:	f7fe bfc4 	b.w	80a17fc <HAL_USB_USART_Begin>

080a2874 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2874:	b510      	push	{r4, lr}
 80a2876:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2878:	2214      	movs	r2, #20
 80a287a:	2100      	movs	r1, #0
 80a287c:	f001 f883 	bl	80a3986 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2880:	4b05      	ldr	r3, [pc, #20]	; (80a2898 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2882:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2884:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2886:	4b05      	ldr	r3, [pc, #20]	; (80a289c <_Z19acquireSerialBufferv+0x28>)
 80a2888:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a288a:	f240 1301 	movw	r3, #257	; 0x101
 80a288e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2890:	2381      	movs	r3, #129	; 0x81
 80a2892:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2894:	bd10      	pop	{r4, pc}
 80a2896:	bf00      	nop
 80a2898:	20000285 	.word	0x20000285
 80a289c:	20000204 	.word	0x20000204

080a28a0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a28a0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a28a2:	4d0e      	ldr	r5, [pc, #56]	; (80a28dc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a28a4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a28a6:	a801      	add	r0, sp, #4
 80a28a8:	f7ff ffe4 	bl	80a2874 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a28ac:	6829      	ldr	r1, [r5, #0]
 80a28ae:	f011 0401 	ands.w	r4, r1, #1
 80a28b2:	d110      	bne.n	80a28d6 <_Z16_fetch_usbserialv+0x36>
 80a28b4:	4628      	mov	r0, r5
 80a28b6:	f7fd fbf6 	bl	80a00a6 <__cxa_guard_acquire>
 80a28ba:	b160      	cbz	r0, 80a28d6 <_Z16_fetch_usbserialv+0x36>
 80a28bc:	aa01      	add	r2, sp, #4
 80a28be:	4621      	mov	r1, r4
 80a28c0:	4807      	ldr	r0, [pc, #28]	; (80a28e0 <_Z16_fetch_usbserialv+0x40>)
 80a28c2:	f7ff ffbf 	bl	80a2844 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a28c6:	4628      	mov	r0, r5
 80a28c8:	f7fd fbf2 	bl	80a00b0 <__cxa_guard_release>
 80a28cc:	4a05      	ldr	r2, [pc, #20]	; (80a28e4 <_Z16_fetch_usbserialv+0x44>)
 80a28ce:	4906      	ldr	r1, [pc, #24]	; (80a28e8 <_Z16_fetch_usbserialv+0x48>)
 80a28d0:	4803      	ldr	r0, [pc, #12]	; (80a28e0 <_Z16_fetch_usbserialv+0x40>)
 80a28d2:	f000 fa23 	bl	80a2d1c <__aeabi_atexit>
	return _usbserial;
}
 80a28d6:	4802      	ldr	r0, [pc, #8]	; (80a28e0 <_Z16_fetch_usbserialv+0x40>)
 80a28d8:	b007      	add	sp, #28
 80a28da:	bd30      	pop	{r4, r5, pc}
 80a28dc:	20000200 	.word	0x20000200
 80a28e0:	20000388 	.word	0x20000388
 80a28e4:	20000078 	.word	0x20000078
 80a28e8:	080a27c5 	.word	0x080a27c5

080a28ec <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a28ec:	b510      	push	{r4, lr}
 80a28ee:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a28f0:	2214      	movs	r2, #20
 80a28f2:	2100      	movs	r1, #0
 80a28f4:	f001 f847 	bl	80a3986 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a28f8:	4b05      	ldr	r3, [pc, #20]	; (80a2910 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a28fa:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a28fc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a28fe:	4b05      	ldr	r3, [pc, #20]	; (80a2914 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2900:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2902:	f240 1301 	movw	r3, #257	; 0x101
 80a2906:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2908:	2381      	movs	r3, #129	; 0x81
 80a290a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a290c:	bd10      	pop	{r4, pc}
 80a290e:	bf00      	nop
 80a2910:	20000438 	.word	0x20000438
 80a2914:	200003a0 	.word	0x200003a0

080a2918 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2918:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a291a:	4c0e      	ldr	r4, [pc, #56]	; (80a2954 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a291c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a291e:	a801      	add	r0, sp, #4
 80a2920:	f7ff ffe4 	bl	80a28ec <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2924:	6823      	ldr	r3, [r4, #0]
 80a2926:	07db      	lsls	r3, r3, #31
 80a2928:	d410      	bmi.n	80a294c <_Z17_fetch_usbserial1v+0x34>
 80a292a:	4620      	mov	r0, r4
 80a292c:	f7fd fbbb 	bl	80a00a6 <__cxa_guard_acquire>
 80a2930:	b160      	cbz	r0, 80a294c <_Z17_fetch_usbserial1v+0x34>
 80a2932:	aa01      	add	r2, sp, #4
 80a2934:	2101      	movs	r1, #1
 80a2936:	4808      	ldr	r0, [pc, #32]	; (80a2958 <_Z17_fetch_usbserial1v+0x40>)
 80a2938:	f7ff ff84 	bl	80a2844 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a293c:	4620      	mov	r0, r4
 80a293e:	f7fd fbb7 	bl	80a00b0 <__cxa_guard_release>
 80a2942:	4a06      	ldr	r2, [pc, #24]	; (80a295c <_Z17_fetch_usbserial1v+0x44>)
 80a2944:	4906      	ldr	r1, [pc, #24]	; (80a2960 <_Z17_fetch_usbserial1v+0x48>)
 80a2946:	4804      	ldr	r0, [pc, #16]	; (80a2958 <_Z17_fetch_usbserial1v+0x40>)
 80a2948:	f000 f9e8 	bl	80a2d1c <__aeabi_atexit>
  return _usbserial1;
}
 80a294c:	4802      	ldr	r0, [pc, #8]	; (80a2958 <_Z17_fetch_usbserial1v+0x40>)
 80a294e:	b006      	add	sp, #24
 80a2950:	bd10      	pop	{r4, pc}
 80a2952:	bf00      	nop
 80a2954:	2000039c 	.word	0x2000039c
 80a2958:	20000424 	.word	0x20000424
 80a295c:	20000078 	.word	0x20000078
 80a2960:	080a27c5 	.word	0x080a27c5

080a2964 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2964:	2200      	movs	r2, #0
 80a2966:	4611      	mov	r1, r2
 80a2968:	6840      	ldr	r0, [r0, #4]
 80a296a:	f7fe bff3 	b.w	80a1954 <network_ready>

080a296e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a296e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2970:	4616      	mov	r6, r2
 80a2972:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2974:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2976:	460f      	mov	r7, r1
 80a2978:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a297a:	2100      	movs	r1, #0
 80a297c:	a803      	add	r0, sp, #12
 80a297e:	f001 f802 	bl	80a3986 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2982:	4630      	mov	r0, r6
 80a2984:	f001 f855 	bl	80a3a32 <strlen>
 80a2988:	2500      	movs	r5, #0
 80a298a:	9500      	str	r5, [sp, #0]
 80a298c:	b281      	uxth	r1, r0
 80a298e:	687b      	ldr	r3, [r7, #4]
 80a2990:	aa03      	add	r2, sp, #12
 80a2992:	4630      	mov	r0, r6
 80a2994:	f7fe ff62 	bl	80a185c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2998:	b120      	cbz	r0, 80a29a4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a299a:	4629      	mov	r1, r5
 80a299c:	4620      	mov	r0, r4
 80a299e:	f7ff fbfb 	bl	80a2198 <_ZN9IPAddressC1Em>
 80a29a2:	e003      	b.n	80a29ac <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a29a4:	a903      	add	r1, sp, #12
 80a29a6:	4620      	mov	r0, r4
 80a29a8:	f7ff fbe4 	bl	80a2174 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a29ac:	4620      	mov	r0, r4
 80a29ae:	b009      	add	sp, #36	; 0x24
 80a29b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a29b2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a29b2:	2200      	movs	r2, #0
 80a29b4:	4611      	mov	r1, r2
 80a29b6:	6840      	ldr	r0, [r0, #4]
 80a29b8:	f7fe bfec 	b.w	80a1994 <network_listening>

080a29bc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a29bc:	2200      	movs	r2, #0
 80a29be:	4611      	mov	r1, r2
 80a29c0:	6840      	ldr	r0, [r0, #4]
 80a29c2:	f7fe bff7 	b.w	80a19b4 <network_get_listen_timeout>

080a29c6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a29c6:	2200      	movs	r2, #0
 80a29c8:	6840      	ldr	r0, [r0, #4]
 80a29ca:	f7fe bfeb 	b.w	80a19a4 <network_set_listen_timeout>

080a29ce <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a29ce:	2200      	movs	r2, #0
 80a29d0:	f081 0101 	eor.w	r1, r1, #1
 80a29d4:	6840      	ldr	r0, [r0, #4]
 80a29d6:	f7fe bfd5 	b.w	80a1984 <network_listen>

080a29da <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a29da:	2300      	movs	r3, #0
 80a29dc:	461a      	mov	r2, r3
 80a29de:	4619      	mov	r1, r3
 80a29e0:	6840      	ldr	r0, [r0, #4]
 80a29e2:	f7fe bfc7 	b.w	80a1974 <network_off>

080a29e6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a29e6:	2300      	movs	r3, #0
 80a29e8:	461a      	mov	r2, r3
 80a29ea:	4619      	mov	r1, r3
 80a29ec:	6840      	ldr	r0, [r0, #4]
 80a29ee:	f7fe bfb9 	b.w	80a1964 <network_on>

080a29f2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a29f2:	2200      	movs	r2, #0
 80a29f4:	4611      	mov	r1, r2
 80a29f6:	6840      	ldr	r0, [r0, #4]
 80a29f8:	f7fe bf9c 	b.w	80a1934 <network_connecting>

080a29fc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a29fc:	2200      	movs	r2, #0
 80a29fe:	2102      	movs	r1, #2
 80a2a00:	6840      	ldr	r0, [r0, #4]
 80a2a02:	f7fe bf9f 	b.w	80a1944 <network_disconnect>

080a2a06 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2a06:	2300      	movs	r3, #0
 80a2a08:	461a      	mov	r2, r3
 80a2a0a:	6840      	ldr	r0, [r0, #4]
 80a2a0c:	f7fe bf8a 	b.w	80a1924 <network_connect>

080a2a10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2a10:	4b02      	ldr	r3, [pc, #8]	; (80a2a1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2a12:	2204      	movs	r2, #4
 80a2a14:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2a16:	4a02      	ldr	r2, [pc, #8]	; (80a2a20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2a18:	601a      	str	r2, [r3, #0]
 80a2a1a:	4770      	bx	lr
 80a2a1c:	2000053c 	.word	0x2000053c
 80a2a20:	080a3cc0 	.word	0x080a3cc0

080a2a24 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2a24:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2a26:	4b14      	ldr	r3, [pc, #80]	; (80a2a78 <serialEventRun+0x54>)
 80a2a28:	b133      	cbz	r3, 80a2a38 <serialEventRun+0x14>
 80a2a2a:	f7ff ff39 	bl	80a28a0 <_Z16_fetch_usbserialv>
 80a2a2e:	6803      	ldr	r3, [r0, #0]
 80a2a30:	691b      	ldr	r3, [r3, #16]
 80a2a32:	4798      	blx	r3
 80a2a34:	2800      	cmp	r0, #0
 80a2a36:	dc16      	bgt.n	80a2a66 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2a38:	4b10      	ldr	r3, [pc, #64]	; (80a2a7c <serialEventRun+0x58>)
 80a2a3a:	b133      	cbz	r3, 80a2a4a <serialEventRun+0x26>
 80a2a3c:	f7ff fe9a 	bl	80a2774 <_Z22__fetch_global_Serial1v>
 80a2a40:	6803      	ldr	r3, [r0, #0]
 80a2a42:	691b      	ldr	r3, [r3, #16]
 80a2a44:	4798      	blx	r3
 80a2a46:	2800      	cmp	r0, #0
 80a2a48:	dc10      	bgt.n	80a2a6c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2a4a:	4b0d      	ldr	r3, [pc, #52]	; (80a2a80 <serialEventRun+0x5c>)
 80a2a4c:	b10b      	cbz	r3, 80a2a52 <serialEventRun+0x2e>
 80a2a4e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2a52:	4b0c      	ldr	r3, [pc, #48]	; (80a2a84 <serialEventRun+0x60>)
 80a2a54:	b17b      	cbz	r3, 80a2a76 <serialEventRun+0x52>
 80a2a56:	f7ff ff5f 	bl	80a2918 <_Z17_fetch_usbserial1v>
 80a2a5a:	6803      	ldr	r3, [r0, #0]
 80a2a5c:	691b      	ldr	r3, [r3, #16]
 80a2a5e:	4798      	blx	r3
 80a2a60:	2800      	cmp	r0, #0
 80a2a62:	dc06      	bgt.n	80a2a72 <serialEventRun+0x4e>
 80a2a64:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2a66:	f3af 8000 	nop.w
 80a2a6a:	e7e5      	b.n	80a2a38 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2a6c:	f3af 8000 	nop.w
 80a2a70:	e7eb      	b.n	80a2a4a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2a72:	f3af 8000 	nop.w
 80a2a76:	bd08      	pop	{r3, pc}
	...

080a2a88 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2a88:	b508      	push	{r3, lr}
	serialEventRun();
 80a2a8a:	f7ff ffcb 	bl	80a2a24 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2a8e:	f7fe fdeb 	bl	80a1668 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2a92:	4b01      	ldr	r3, [pc, #4]	; (80a2a98 <_post_loop+0x10>)
 80a2a94:	6018      	str	r0, [r3, #0]
 80a2a96:	bd08      	pop	{r3, pc}
 80a2a98:	2000055c 	.word	0x2000055c

080a2a9c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2a9c:	4802      	ldr	r0, [pc, #8]	; (80a2aa8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2a9e:	4a03      	ldr	r2, [pc, #12]	; (80a2aac <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2aa0:	4903      	ldr	r1, [pc, #12]	; (80a2ab0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2aa2:	1a12      	subs	r2, r2, r0
 80a2aa4:	f000 bf64 	b.w	80a3970 <memcpy>
 80a2aa8:	40024000 	.word	0x40024000
 80a2aac:	40024004 	.word	0x40024004
 80a2ab0:	080a3d90 	.word	0x080a3d90

080a2ab4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2ab4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2ab6:	2300      	movs	r3, #0
 80a2ab8:	9300      	str	r3, [sp, #0]
 80a2aba:	461a      	mov	r2, r3
 80a2abc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2ac0:	f7fe fefe 	bl	80a18c0 <system_ctrl_set_result>
}
 80a2ac4:	b003      	add	sp, #12
 80a2ac6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2acc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2acc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2ace:	8843      	ldrh	r3, [r0, #2]
 80a2ad0:	2b0a      	cmp	r3, #10
 80a2ad2:	d008      	beq.n	80a2ae6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2ad4:	2b50      	cmp	r3, #80	; 0x50
 80a2ad6:	d109      	bne.n	80a2aec <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2ad8:	4b09      	ldr	r3, [pc, #36]	; (80a2b00 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2ada:	681b      	ldr	r3, [r3, #0]
 80a2adc:	b13b      	cbz	r3, 80a2aee <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2ade:	b003      	add	sp, #12
 80a2ae0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2ae4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2ae6:	f7ff ffe5 	bl	80a2ab4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2aea:	e006      	b.n	80a2afa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2aec:	2300      	movs	r3, #0
 80a2aee:	9300      	str	r3, [sp, #0]
 80a2af0:	461a      	mov	r2, r3
 80a2af2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2af6:	f7fe fee3 	bl	80a18c0 <system_ctrl_set_result>
        break;
    }
}
 80a2afa:	b003      	add	sp, #12
 80a2afc:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2b00:	20000544 	.word	0x20000544

080a2b04 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2b04:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2b06:	4c10      	ldr	r4, [pc, #64]	; (80a2b48 <module_user_init_hook+0x44>)
 80a2b08:	4d10      	ldr	r5, [pc, #64]	; (80a2b4c <module_user_init_hook+0x48>)
 80a2b0a:	6823      	ldr	r3, [r4, #0]
 80a2b0c:	42ab      	cmp	r3, r5
 80a2b0e:	4b10      	ldr	r3, [pc, #64]	; (80a2b50 <module_user_init_hook+0x4c>)
 80a2b10:	bf0c      	ite	eq
 80a2b12:	2201      	moveq	r2, #1
 80a2b14:	2200      	movne	r2, #0
 80a2b16:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2b18:	d002      	beq.n	80a2b20 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2b1a:	f7ff ffbf 	bl	80a2a9c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2b1e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2b20:	f7fe fd92 	bl	80a1648 <HAL_RNG_GetRandomNumber>
 80a2b24:	4604      	mov	r4, r0
    srand(seed);
 80a2b26:	f000 ff37 	bl	80a3998 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2b2a:	4b0a      	ldr	r3, [pc, #40]	; (80a2b54 <module_user_init_hook+0x50>)
 80a2b2c:	b113      	cbz	r3, 80a2b34 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2b2e:	4620      	mov	r0, r4
 80a2b30:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2b34:	2100      	movs	r1, #0
 80a2b36:	4807      	ldr	r0, [pc, #28]	; (80a2b54 <module_user_init_hook+0x50>)
 80a2b38:	f7fe feec 	bl	80a1914 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2b40:	2100      	movs	r1, #0
 80a2b42:	4805      	ldr	r0, [pc, #20]	; (80a2b58 <module_user_init_hook+0x54>)
 80a2b44:	f7fe beb2 	b.w	80a18ac <system_ctrl_set_app_request_handler>
 80a2b48:	40024000 	.word	0x40024000
 80a2b4c:	9a271c1e 	.word	0x9a271c1e
 80a2b50:	20000548 	.word	0x20000548
 80a2b54:	00000000 	.word	0x00000000
 80a2b58:	080a2acd 	.word	0x080a2acd

080a2b5c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a2b5c:	b510      	push	{r4, lr}
 80a2b5e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2b60:	6880      	ldr	r0, [r0, #8]
 80a2b62:	b108      	cbz	r0, 80a2b68 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a2b64:	f7fe fd68 	bl	80a1638 <os_mutex_recursive_destroy>
 80a2b68:	4620      	mov	r0, r4
 80a2b6a:	bd10      	pop	{r4, pc}

080a2b6c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2b6c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2b6e:	4e1a      	ldr	r6, [pc, #104]	; (80a2bd8 <pinAvailable+0x6c>)
 80a2b70:	4604      	mov	r4, r0
 80a2b72:	6831      	ldr	r1, [r6, #0]
 80a2b74:	f011 0501 	ands.w	r5, r1, #1
 80a2b78:	d10f      	bne.n	80a2b9a <pinAvailable+0x2e>
 80a2b7a:	4630      	mov	r0, r6
 80a2b7c:	f7fd fa93 	bl	80a00a6 <__cxa_guard_acquire>
 80a2b80:	b158      	cbz	r0, 80a2b9a <pinAvailable+0x2e>
 80a2b82:	4629      	mov	r1, r5
 80a2b84:	4815      	ldr	r0, [pc, #84]	; (80a2bdc <pinAvailable+0x70>)
 80a2b86:	f7ff fccd 	bl	80a2524 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2b8a:	4630      	mov	r0, r6
 80a2b8c:	f7fd fa90 	bl	80a00b0 <__cxa_guard_release>
 80a2b90:	4a13      	ldr	r2, [pc, #76]	; (80a2be0 <pinAvailable+0x74>)
 80a2b92:	4914      	ldr	r1, [pc, #80]	; (80a2be4 <pinAvailable+0x78>)
 80a2b94:	4811      	ldr	r0, [pc, #68]	; (80a2bdc <pinAvailable+0x70>)
 80a2b96:	f000 f8c1 	bl	80a2d1c <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a2b9a:	4810      	ldr	r0, [pc, #64]	; (80a2bdc <pinAvailable+0x70>)
 80a2b9c:	f7ff fcd1 	bl	80a2542 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2ba0:	b128      	cbz	r0, 80a2bae <pinAvailable+0x42>
 80a2ba2:	f1a4 030d 	sub.w	r3, r4, #13
 80a2ba6:	2b02      	cmp	r3, #2
 80a2ba8:	d801      	bhi.n	80a2bae <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a2baa:	2000      	movs	r0, #0
 80a2bac:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2bae:	f000 f877 	bl	80a2ca0 <_Z19__fetch_global_Wirev>
 80a2bb2:	f7ff faab 	bl	80a210c <_ZN7TwoWire9isEnabledEv>
 80a2bb6:	b108      	cbz	r0, 80a2bbc <pinAvailable+0x50>
 80a2bb8:	2c01      	cmp	r4, #1
 80a2bba:	d9f6      	bls.n	80a2baa <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2bbc:	f7ff fdda 	bl	80a2774 <_Z22__fetch_global_Serial1v>
 80a2bc0:	f7ff fdd4 	bl	80a276c <_ZN11USARTSerial9isEnabledEv>
 80a2bc4:	b118      	cbz	r0, 80a2bce <pinAvailable+0x62>
 80a2bc6:	f1a4 0312 	sub.w	r3, r4, #18
 80a2bca:	2b01      	cmp	r3, #1
 80a2bcc:	d9ed      	bls.n	80a2baa <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2bce:	2c17      	cmp	r4, #23
 80a2bd0:	bf8c      	ite	hi
 80a2bd2:	2000      	movhi	r0, #0
 80a2bd4:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2bd6:	bd70      	pop	{r4, r5, r6, pc}
 80a2bd8:	2000054c 	.word	0x2000054c
 80a2bdc:	20000550 	.word	0x20000550
 80a2be0:	20000078 	.word	0x20000078
 80a2be4:	080a2b5d 	.word	0x080a2b5d

080a2be8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2be8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2bea:	b538      	push	{r3, r4, r5, lr}
 80a2bec:	4604      	mov	r4, r0
 80a2bee:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2bf0:	d80a      	bhi.n	80a2c08 <pinMode+0x20>
 80a2bf2:	29ff      	cmp	r1, #255	; 0xff
 80a2bf4:	d008      	beq.n	80a2c08 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2bf6:	f7ff ffb9 	bl	80a2b6c <pinAvailable>
 80a2bfa:	b128      	cbz	r0, 80a2c08 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2bfc:	4629      	mov	r1, r5
 80a2bfe:	4620      	mov	r0, r4
}
 80a2c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2c04:	f7fe bd48 	b.w	80a1698 <HAL_Pin_Mode>
 80a2c08:	bd38      	pop	{r3, r4, r5, pc}

080a2c0a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2c0a:	b538      	push	{r3, r4, r5, lr}
 80a2c0c:	4604      	mov	r4, r0
 80a2c0e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2c10:	f7fe fd4a 	bl	80a16a8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2c14:	28ff      	cmp	r0, #255	; 0xff
 80a2c16:	d010      	beq.n	80a2c3a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2c18:	2806      	cmp	r0, #6
 80a2c1a:	d804      	bhi.n	80a2c26 <digitalWrite+0x1c>
 80a2c1c:	234d      	movs	r3, #77	; 0x4d
 80a2c1e:	fa23 f000 	lsr.w	r0, r3, r0
 80a2c22:	07c3      	lsls	r3, r0, #31
 80a2c24:	d409      	bmi.n	80a2c3a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2c26:	4620      	mov	r0, r4
 80a2c28:	f7ff ffa0 	bl	80a2b6c <pinAvailable>
 80a2c2c:	b128      	cbz	r0, 80a2c3a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2c2e:	4629      	mov	r1, r5
 80a2c30:	4620      	mov	r0, r4
}
 80a2c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2c36:	f7fe bd3f 	b.w	80a16b8 <HAL_GPIO_Write>
 80a2c3a:	bd38      	pop	{r3, r4, r5, pc}

080a2c3c <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a2c3c:	b510      	push	{r4, lr}
 80a2c3e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a2c40:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a2c42:	bf9c      	itt	ls
 80a2c44:	340a      	addls	r4, #10
 80a2c46:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2c48:	4620      	mov	r0, r4
 80a2c4a:	f7ff ff8f 	bl	80a2b6c <pinAvailable>
 80a2c4e:	b150      	cbz	r0, 80a2c66 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a2c50:	2103      	movs	r1, #3
 80a2c52:	4620      	mov	r0, r4
 80a2c54:	f7fe fd18 	bl	80a1688 <HAL_Validate_Pin_Function>
 80a2c58:	2803      	cmp	r0, #3
 80a2c5a:	d104      	bne.n	80a2c66 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2c5c:	4620      	mov	r0, r4
}
 80a2c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2c62:	f7fe bd31 	b.w	80a16c8 <HAL_ADC_Read>
}
 80a2c66:	2000      	movs	r0, #0
 80a2c68:	bd10      	pop	{r4, pc}
	...

080a2c6c <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a2c6c:	b570      	push	{r4, r5, r6, lr}
 80a2c6e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2c70:	2514      	movs	r5, #20
 80a2c72:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2c74:	4e09      	ldr	r6, [pc, #36]	; (80a2c9c <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2c76:	2100      	movs	r1, #0
 80a2c78:	f000 fe85 	bl	80a3986 <memset>
 80a2c7c:	8025      	strh	r5, [r4, #0]
 80a2c7e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2c80:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2c82:	60a5      	str	r5, [r4, #8]
 80a2c84:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2c86:	4628      	mov	r0, r5
 80a2c88:	f000 f867 	bl	80a2d5a <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2c8c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2c8e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2c90:	4628      	mov	r0, r5
 80a2c92:	f000 f862 	bl	80a2d5a <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2c96:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a2c98:	4620      	mov	r0, r4
 80a2c9a:	bd70      	pop	{r4, r5, r6, pc}
 80a2c9c:	080a3cec 	.word	0x080a3cec

080a2ca0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2ca0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2ca2:	4d0e      	ldr	r5, [pc, #56]	; (80a2cdc <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2ca4:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2ca6:	6829      	ldr	r1, [r5, #0]
 80a2ca8:	f011 0401 	ands.w	r4, r1, #1
 80a2cac:	d113      	bne.n	80a2cd6 <_Z19__fetch_global_Wirev+0x36>
 80a2cae:	4628      	mov	r0, r5
 80a2cb0:	f7fd f9f9 	bl	80a00a6 <__cxa_guard_acquire>
 80a2cb4:	b178      	cbz	r0, 80a2cd6 <_Z19__fetch_global_Wirev+0x36>
 80a2cb6:	a801      	add	r0, sp, #4
 80a2cb8:	f7ff ffd8 	bl	80a2c6c <_Z17acquireWireBufferv>
 80a2cbc:	aa01      	add	r2, sp, #4
 80a2cbe:	4621      	mov	r1, r4
 80a2cc0:	4807      	ldr	r0, [pc, #28]	; (80a2ce0 <_Z19__fetch_global_Wirev+0x40>)
 80a2cc2:	f7ff fa11 	bl	80a20e8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a2cc6:	4628      	mov	r0, r5
 80a2cc8:	f7fd f9f2 	bl	80a00b0 <__cxa_guard_release>
 80a2ccc:	4a05      	ldr	r2, [pc, #20]	; (80a2ce4 <_Z19__fetch_global_Wirev+0x44>)
 80a2cce:	4906      	ldr	r1, [pc, #24]	; (80a2ce8 <_Z19__fetch_global_Wirev+0x48>)
 80a2cd0:	4803      	ldr	r0, [pc, #12]	; (80a2ce0 <_Z19__fetch_global_Wirev+0x40>)
 80a2cd2:	f000 f823 	bl	80a2d1c <__aeabi_atexit>
	return wire;
}
 80a2cd6:	4802      	ldr	r0, [pc, #8]	; (80a2ce0 <_Z19__fetch_global_Wirev+0x40>)
 80a2cd8:	b007      	add	sp, #28
 80a2cda:	bd30      	pop	{r4, r5, pc}
 80a2cdc:	20000560 	.word	0x20000560
 80a2ce0:	20000564 	.word	0x20000564
 80a2ce4:	20000078 	.word	0x20000078
 80a2ce8:	080a2091 	.word	0x080a2091

080a2cec <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2cec:	b513      	push	{r0, r1, r4, lr}
 80a2cee:	4c08      	ldr	r4, [pc, #32]	; (80a2d10 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2cf0:	2300      	movs	r3, #0
 80a2cf2:	461a      	mov	r2, r3
 80a2cf4:	4619      	mov	r1, r3
 80a2cf6:	9300      	str	r3, [sp, #0]
 80a2cf8:	4620      	mov	r0, r4
 80a2cfa:	f7ff fa63 	bl	80a21c4 <_ZN9IPAddressC1Ehhhh>
 80a2cfe:	4620      	mov	r0, r4
 80a2d00:	4a04      	ldr	r2, [pc, #16]	; (80a2d14 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2d02:	4905      	ldr	r1, [pc, #20]	; (80a2d18 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2d04:	b002      	add	sp, #8
 80a2d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2d0a:	f000 b807 	b.w	80a2d1c <__aeabi_atexit>
 80a2d0e:	bf00      	nop
 80a2d10:	20000578 	.word	0x20000578
 80a2d14:	20000078 	.word	0x20000078
 80a2d18:	080a2115 	.word	0x080a2115

080a2d1c <__aeabi_atexit>:
 80a2d1c:	460b      	mov	r3, r1
 80a2d1e:	4601      	mov	r1, r0
 80a2d20:	4618      	mov	r0, r3
 80a2d22:	f000 be17 	b.w	80a3954 <__cxa_atexit>

080a2d26 <_ZdlPvj>:
 80a2d26:	f7fd b9bc 	b.w	80a00a2 <_ZdlPv>
	...

080a2d2c <_ZSt15get_new_handlerv>:
 80a2d2c:	4b02      	ldr	r3, [pc, #8]	; (80a2d38 <_ZSt15get_new_handlerv+0xc>)
 80a2d2e:	6818      	ldr	r0, [r3, #0]
 80a2d30:	f3bf 8f5f 	dmb	sy
 80a2d34:	4770      	bx	lr
 80a2d36:	bf00      	nop
 80a2d38:	20000590 	.word	0x20000590

080a2d3c <_ZnwjRKSt9nothrow_t>:
 80a2d3c:	b510      	push	{r4, lr}
 80a2d3e:	2800      	cmp	r0, #0
 80a2d40:	bf14      	ite	ne
 80a2d42:	4604      	movne	r4, r0
 80a2d44:	2401      	moveq	r4, #1
 80a2d46:	4620      	mov	r0, r4
 80a2d48:	f7fe fe3c 	bl	80a19c4 <malloc>
 80a2d4c:	b920      	cbnz	r0, 80a2d58 <_ZnwjRKSt9nothrow_t+0x1c>
 80a2d4e:	f7ff ffed 	bl	80a2d2c <_ZSt15get_new_handlerv>
 80a2d52:	b108      	cbz	r0, 80a2d58 <_ZnwjRKSt9nothrow_t+0x1c>
 80a2d54:	4780      	blx	r0
 80a2d56:	e7f6      	b.n	80a2d46 <_ZnwjRKSt9nothrow_t+0xa>
 80a2d58:	bd10      	pop	{r4, pc}

080a2d5a <_ZnajRKSt9nothrow_t>:
 80a2d5a:	f7ff bfef 	b.w	80a2d3c <_ZnwjRKSt9nothrow_t>

080a2d5e <_ZSt25__throw_bad_function_callv>:
 80a2d5e:	b508      	push	{r3, lr}
 80a2d60:	f7fe fe48 	bl	80a19f4 <abort>

080a2d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2d64:	4b24      	ldr	r3, [pc, #144]	; (80a2df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2d66:	681a      	ldr	r2, [r3, #0]
 80a2d68:	07d0      	lsls	r0, r2, #31
 80a2d6a:	bf5c      	itt	pl
 80a2d6c:	2201      	movpl	r2, #1
 80a2d6e:	601a      	strpl	r2, [r3, #0]
 80a2d70:	4b22      	ldr	r3, [pc, #136]	; (80a2dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2d72:	681a      	ldr	r2, [r3, #0]
 80a2d74:	07d1      	lsls	r1, r2, #31
 80a2d76:	bf5c      	itt	pl
 80a2d78:	2201      	movpl	r2, #1
 80a2d7a:	601a      	strpl	r2, [r3, #0]
 80a2d7c:	4b20      	ldr	r3, [pc, #128]	; (80a2e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2d7e:	681a      	ldr	r2, [r3, #0]
 80a2d80:	07d2      	lsls	r2, r2, #31
 80a2d82:	bf5c      	itt	pl
 80a2d84:	2201      	movpl	r2, #1
 80a2d86:	601a      	strpl	r2, [r3, #0]
 80a2d88:	4b1e      	ldr	r3, [pc, #120]	; (80a2e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2d8a:	681a      	ldr	r2, [r3, #0]
 80a2d8c:	07d0      	lsls	r0, r2, #31
 80a2d8e:	bf5c      	itt	pl
 80a2d90:	2201      	movpl	r2, #1
 80a2d92:	601a      	strpl	r2, [r3, #0]
 80a2d94:	4b1c      	ldr	r3, [pc, #112]	; (80a2e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2d96:	681a      	ldr	r2, [r3, #0]
 80a2d98:	07d1      	lsls	r1, r2, #31
 80a2d9a:	bf5c      	itt	pl
 80a2d9c:	2201      	movpl	r2, #1
 80a2d9e:	601a      	strpl	r2, [r3, #0]
 80a2da0:	4b1a      	ldr	r3, [pc, #104]	; (80a2e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2da2:	681a      	ldr	r2, [r3, #0]
 80a2da4:	07d2      	lsls	r2, r2, #31
 80a2da6:	bf5c      	itt	pl
 80a2da8:	2201      	movpl	r2, #1
 80a2daa:	601a      	strpl	r2, [r3, #0]
 80a2dac:	4b18      	ldr	r3, [pc, #96]	; (80a2e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2dae:	681a      	ldr	r2, [r3, #0]
 80a2db0:	07d0      	lsls	r0, r2, #31
 80a2db2:	bf5c      	itt	pl
 80a2db4:	2201      	movpl	r2, #1
 80a2db6:	601a      	strpl	r2, [r3, #0]
 80a2db8:	4b16      	ldr	r3, [pc, #88]	; (80a2e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2dba:	681a      	ldr	r2, [r3, #0]
 80a2dbc:	07d1      	lsls	r1, r2, #31
 80a2dbe:	bf5c      	itt	pl
 80a2dc0:	2201      	movpl	r2, #1
 80a2dc2:	601a      	strpl	r2, [r3, #0]
 80a2dc4:	4b14      	ldr	r3, [pc, #80]	; (80a2e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2dc6:	681a      	ldr	r2, [r3, #0]
 80a2dc8:	07d2      	lsls	r2, r2, #31
 80a2dca:	bf5c      	itt	pl
 80a2dcc:	2201      	movpl	r2, #1
 80a2dce:	601a      	strpl	r2, [r3, #0]
 80a2dd0:	4b12      	ldr	r3, [pc, #72]	; (80a2e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2dd2:	681a      	ldr	r2, [r3, #0]
 80a2dd4:	07d0      	lsls	r0, r2, #31
 80a2dd6:	bf5c      	itt	pl
 80a2dd8:	2201      	movpl	r2, #1
 80a2dda:	601a      	strpl	r2, [r3, #0]
 80a2ddc:	4b10      	ldr	r3, [pc, #64]	; (80a2e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2dde:	681a      	ldr	r2, [r3, #0]
 80a2de0:	07d1      	lsls	r1, r2, #31
 80a2de2:	bf5c      	itt	pl
 80a2de4:	2201      	movpl	r2, #1
 80a2de6:	601a      	strpl	r2, [r3, #0]
 80a2de8:	4b0e      	ldr	r3, [pc, #56]	; (80a2e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2dea:	681a      	ldr	r2, [r3, #0]
 80a2dec:	07d2      	lsls	r2, r2, #31
 80a2dee:	bf5c      	itt	pl
 80a2df0:	2201      	movpl	r2, #1
 80a2df2:	601a      	strpl	r2, [r3, #0]
 80a2df4:	4770      	bx	lr
 80a2df6:	bf00      	nop
 80a2df8:	200005c0 	.word	0x200005c0
 80a2dfc:	200005bc 	.word	0x200005bc
 80a2e00:	200005b8 	.word	0x200005b8
 80a2e04:	200005b4 	.word	0x200005b4
 80a2e08:	200005b0 	.word	0x200005b0
 80a2e0c:	200005ac 	.word	0x200005ac
 80a2e10:	200005a8 	.word	0x200005a8
 80a2e14:	200005a4 	.word	0x200005a4
 80a2e18:	200005a0 	.word	0x200005a0
 80a2e1c:	2000059c 	.word	0x2000059c
 80a2e20:	20000598 	.word	0x20000598
 80a2e24:	20000594 	.word	0x20000594

080a2e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2e28:	4b18      	ldr	r3, [pc, #96]	; (80a2e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2e2a:	681a      	ldr	r2, [r3, #0]
 80a2e2c:	07d1      	lsls	r1, r2, #31
 80a2e2e:	bf5c      	itt	pl
 80a2e30:	2201      	movpl	r2, #1
 80a2e32:	601a      	strpl	r2, [r3, #0]
 80a2e34:	4b16      	ldr	r3, [pc, #88]	; (80a2e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2e36:	681a      	ldr	r2, [r3, #0]
 80a2e38:	07d2      	lsls	r2, r2, #31
 80a2e3a:	bf5c      	itt	pl
 80a2e3c:	2201      	movpl	r2, #1
 80a2e3e:	601a      	strpl	r2, [r3, #0]
 80a2e40:	4b14      	ldr	r3, [pc, #80]	; (80a2e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2e42:	681a      	ldr	r2, [r3, #0]
 80a2e44:	07d0      	lsls	r0, r2, #31
 80a2e46:	bf5c      	itt	pl
 80a2e48:	2201      	movpl	r2, #1
 80a2e4a:	601a      	strpl	r2, [r3, #0]
 80a2e4c:	4b12      	ldr	r3, [pc, #72]	; (80a2e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2e4e:	681a      	ldr	r2, [r3, #0]
 80a2e50:	07d1      	lsls	r1, r2, #31
 80a2e52:	bf5c      	itt	pl
 80a2e54:	2201      	movpl	r2, #1
 80a2e56:	601a      	strpl	r2, [r3, #0]
 80a2e58:	4b10      	ldr	r3, [pc, #64]	; (80a2e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2e5a:	681a      	ldr	r2, [r3, #0]
 80a2e5c:	07d2      	lsls	r2, r2, #31
 80a2e5e:	bf5c      	itt	pl
 80a2e60:	2201      	movpl	r2, #1
 80a2e62:	601a      	strpl	r2, [r3, #0]
 80a2e64:	4b0e      	ldr	r3, [pc, #56]	; (80a2ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2e66:	681a      	ldr	r2, [r3, #0]
 80a2e68:	07d0      	lsls	r0, r2, #31
 80a2e6a:	bf5c      	itt	pl
 80a2e6c:	2201      	movpl	r2, #1
 80a2e6e:	601a      	strpl	r2, [r3, #0]
 80a2e70:	4b0c      	ldr	r3, [pc, #48]	; (80a2ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2e72:	681a      	ldr	r2, [r3, #0]
 80a2e74:	07d1      	lsls	r1, r2, #31
 80a2e76:	bf5c      	itt	pl
 80a2e78:	2201      	movpl	r2, #1
 80a2e7a:	601a      	strpl	r2, [r3, #0]
 80a2e7c:	4b0a      	ldr	r3, [pc, #40]	; (80a2ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2e7e:	681a      	ldr	r2, [r3, #0]
 80a2e80:	07d2      	lsls	r2, r2, #31
 80a2e82:	bf5c      	itt	pl
 80a2e84:	2201      	movpl	r2, #1
 80a2e86:	601a      	strpl	r2, [r3, #0]
 80a2e88:	4770      	bx	lr
 80a2e8a:	bf00      	nop
 80a2e8c:	200005e0 	.word	0x200005e0
 80a2e90:	200005dc 	.word	0x200005dc
 80a2e94:	200005d8 	.word	0x200005d8
 80a2e98:	200005d4 	.word	0x200005d4
 80a2e9c:	200005d0 	.word	0x200005d0
 80a2ea0:	200005cc 	.word	0x200005cc
 80a2ea4:	200005c8 	.word	0x200005c8
 80a2ea8:	200005c4 	.word	0x200005c4

080a2eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2eac:	4b18      	ldr	r3, [pc, #96]	; (80a2f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2eae:	681a      	ldr	r2, [r3, #0]
 80a2eb0:	07d1      	lsls	r1, r2, #31
 80a2eb2:	bf5c      	itt	pl
 80a2eb4:	2201      	movpl	r2, #1
 80a2eb6:	601a      	strpl	r2, [r3, #0]
 80a2eb8:	4b16      	ldr	r3, [pc, #88]	; (80a2f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2eba:	681a      	ldr	r2, [r3, #0]
 80a2ebc:	07d2      	lsls	r2, r2, #31
 80a2ebe:	bf5c      	itt	pl
 80a2ec0:	2201      	movpl	r2, #1
 80a2ec2:	601a      	strpl	r2, [r3, #0]
 80a2ec4:	4b14      	ldr	r3, [pc, #80]	; (80a2f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2ec6:	681a      	ldr	r2, [r3, #0]
 80a2ec8:	07d0      	lsls	r0, r2, #31
 80a2eca:	bf5c      	itt	pl
 80a2ecc:	2201      	movpl	r2, #1
 80a2ece:	601a      	strpl	r2, [r3, #0]
 80a2ed0:	4b12      	ldr	r3, [pc, #72]	; (80a2f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2ed2:	681a      	ldr	r2, [r3, #0]
 80a2ed4:	07d1      	lsls	r1, r2, #31
 80a2ed6:	bf5c      	itt	pl
 80a2ed8:	2201      	movpl	r2, #1
 80a2eda:	601a      	strpl	r2, [r3, #0]
 80a2edc:	4b10      	ldr	r3, [pc, #64]	; (80a2f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2ede:	681a      	ldr	r2, [r3, #0]
 80a2ee0:	07d2      	lsls	r2, r2, #31
 80a2ee2:	bf5c      	itt	pl
 80a2ee4:	2201      	movpl	r2, #1
 80a2ee6:	601a      	strpl	r2, [r3, #0]
 80a2ee8:	4b0e      	ldr	r3, [pc, #56]	; (80a2f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2eea:	681a      	ldr	r2, [r3, #0]
 80a2eec:	07d0      	lsls	r0, r2, #31
 80a2eee:	bf5c      	itt	pl
 80a2ef0:	2201      	movpl	r2, #1
 80a2ef2:	601a      	strpl	r2, [r3, #0]
 80a2ef4:	4b0c      	ldr	r3, [pc, #48]	; (80a2f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2ef6:	681a      	ldr	r2, [r3, #0]
 80a2ef8:	07d1      	lsls	r1, r2, #31
 80a2efa:	bf5c      	itt	pl
 80a2efc:	2201      	movpl	r2, #1
 80a2efe:	601a      	strpl	r2, [r3, #0]
 80a2f00:	4b0a      	ldr	r3, [pc, #40]	; (80a2f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2f02:	681a      	ldr	r2, [r3, #0]
 80a2f04:	07d2      	lsls	r2, r2, #31
 80a2f06:	bf5c      	itt	pl
 80a2f08:	2201      	movpl	r2, #1
 80a2f0a:	601a      	strpl	r2, [r3, #0]
 80a2f0c:	4770      	bx	lr
 80a2f0e:	bf00      	nop
 80a2f10:	20000600 	.word	0x20000600
 80a2f14:	200005fc 	.word	0x200005fc
 80a2f18:	200005f8 	.word	0x200005f8
 80a2f1c:	200005f4 	.word	0x200005f4
 80a2f20:	200005f0 	.word	0x200005f0
 80a2f24:	200005ec 	.word	0x200005ec
 80a2f28:	200005e8 	.word	0x200005e8
 80a2f2c:	200005e4 	.word	0x200005e4

080a2f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2f30:	4b24      	ldr	r3, [pc, #144]	; (80a2fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2f32:	681a      	ldr	r2, [r3, #0]
 80a2f34:	07d0      	lsls	r0, r2, #31
 80a2f36:	bf5c      	itt	pl
 80a2f38:	2201      	movpl	r2, #1
 80a2f3a:	601a      	strpl	r2, [r3, #0]
 80a2f3c:	4b22      	ldr	r3, [pc, #136]	; (80a2fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2f3e:	681a      	ldr	r2, [r3, #0]
 80a2f40:	07d1      	lsls	r1, r2, #31
 80a2f42:	bf5c      	itt	pl
 80a2f44:	2201      	movpl	r2, #1
 80a2f46:	601a      	strpl	r2, [r3, #0]
 80a2f48:	4b20      	ldr	r3, [pc, #128]	; (80a2fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2f4a:	681a      	ldr	r2, [r3, #0]
 80a2f4c:	07d2      	lsls	r2, r2, #31
 80a2f4e:	bf5c      	itt	pl
 80a2f50:	2201      	movpl	r2, #1
 80a2f52:	601a      	strpl	r2, [r3, #0]
 80a2f54:	4b1e      	ldr	r3, [pc, #120]	; (80a2fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2f56:	681a      	ldr	r2, [r3, #0]
 80a2f58:	07d0      	lsls	r0, r2, #31
 80a2f5a:	bf5c      	itt	pl
 80a2f5c:	2201      	movpl	r2, #1
 80a2f5e:	601a      	strpl	r2, [r3, #0]
 80a2f60:	4b1c      	ldr	r3, [pc, #112]	; (80a2fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2f62:	681a      	ldr	r2, [r3, #0]
 80a2f64:	07d1      	lsls	r1, r2, #31
 80a2f66:	bf5c      	itt	pl
 80a2f68:	2201      	movpl	r2, #1
 80a2f6a:	601a      	strpl	r2, [r3, #0]
 80a2f6c:	4b1a      	ldr	r3, [pc, #104]	; (80a2fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2f6e:	681a      	ldr	r2, [r3, #0]
 80a2f70:	07d2      	lsls	r2, r2, #31
 80a2f72:	bf5c      	itt	pl
 80a2f74:	2201      	movpl	r2, #1
 80a2f76:	601a      	strpl	r2, [r3, #0]
 80a2f78:	4b18      	ldr	r3, [pc, #96]	; (80a2fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2f7a:	681a      	ldr	r2, [r3, #0]
 80a2f7c:	07d0      	lsls	r0, r2, #31
 80a2f7e:	bf5c      	itt	pl
 80a2f80:	2201      	movpl	r2, #1
 80a2f82:	601a      	strpl	r2, [r3, #0]
 80a2f84:	4b16      	ldr	r3, [pc, #88]	; (80a2fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2f86:	681a      	ldr	r2, [r3, #0]
 80a2f88:	07d1      	lsls	r1, r2, #31
 80a2f8a:	bf5c      	itt	pl
 80a2f8c:	2201      	movpl	r2, #1
 80a2f8e:	601a      	strpl	r2, [r3, #0]
 80a2f90:	4b14      	ldr	r3, [pc, #80]	; (80a2fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2f92:	681a      	ldr	r2, [r3, #0]
 80a2f94:	07d2      	lsls	r2, r2, #31
 80a2f96:	bf5c      	itt	pl
 80a2f98:	2201      	movpl	r2, #1
 80a2f9a:	601a      	strpl	r2, [r3, #0]
 80a2f9c:	4b12      	ldr	r3, [pc, #72]	; (80a2fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2f9e:	681a      	ldr	r2, [r3, #0]
 80a2fa0:	07d0      	lsls	r0, r2, #31
 80a2fa2:	bf5c      	itt	pl
 80a2fa4:	2201      	movpl	r2, #1
 80a2fa6:	601a      	strpl	r2, [r3, #0]
 80a2fa8:	4b10      	ldr	r3, [pc, #64]	; (80a2fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2faa:	681a      	ldr	r2, [r3, #0]
 80a2fac:	07d1      	lsls	r1, r2, #31
 80a2fae:	bf5c      	itt	pl
 80a2fb0:	2201      	movpl	r2, #1
 80a2fb2:	601a      	strpl	r2, [r3, #0]
 80a2fb4:	4b0e      	ldr	r3, [pc, #56]	; (80a2ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2fb6:	681a      	ldr	r2, [r3, #0]
 80a2fb8:	07d2      	lsls	r2, r2, #31
 80a2fba:	bf5c      	itt	pl
 80a2fbc:	2201      	movpl	r2, #1
 80a2fbe:	601a      	strpl	r2, [r3, #0]
 80a2fc0:	4770      	bx	lr
 80a2fc2:	bf00      	nop
 80a2fc4:	20000630 	.word	0x20000630
 80a2fc8:	2000062c 	.word	0x2000062c
 80a2fcc:	20000628 	.word	0x20000628
 80a2fd0:	20000624 	.word	0x20000624
 80a2fd4:	20000620 	.word	0x20000620
 80a2fd8:	2000061c 	.word	0x2000061c
 80a2fdc:	20000618 	.word	0x20000618
 80a2fe0:	20000614 	.word	0x20000614
 80a2fe4:	20000610 	.word	0x20000610
 80a2fe8:	2000060c 	.word	0x2000060c
 80a2fec:	20000608 	.word	0x20000608
 80a2ff0:	20000604 	.word	0x20000604

080a2ff4 <__aeabi_drsub>:
 80a2ff4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2ff8:	e002      	b.n	80a3000 <__adddf3>
 80a2ffa:	bf00      	nop

080a2ffc <__aeabi_dsub>:
 80a2ffc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3000 <__adddf3>:
 80a3000:	b530      	push	{r4, r5, lr}
 80a3002:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3006:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a300a:	ea94 0f05 	teq	r4, r5
 80a300e:	bf08      	it	eq
 80a3010:	ea90 0f02 	teqeq	r0, r2
 80a3014:	bf1f      	itttt	ne
 80a3016:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a301a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a301e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a3022:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3026:	f000 80e2 	beq.w	80a31ee <__adddf3+0x1ee>
 80a302a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a302e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3032:	bfb8      	it	lt
 80a3034:	426d      	neglt	r5, r5
 80a3036:	dd0c      	ble.n	80a3052 <__adddf3+0x52>
 80a3038:	442c      	add	r4, r5
 80a303a:	ea80 0202 	eor.w	r2, r0, r2
 80a303e:	ea81 0303 	eor.w	r3, r1, r3
 80a3042:	ea82 0000 	eor.w	r0, r2, r0
 80a3046:	ea83 0101 	eor.w	r1, r3, r1
 80a304a:	ea80 0202 	eor.w	r2, r0, r2
 80a304e:	ea81 0303 	eor.w	r3, r1, r3
 80a3052:	2d36      	cmp	r5, #54	; 0x36
 80a3054:	bf88      	it	hi
 80a3056:	bd30      	pophi	{r4, r5, pc}
 80a3058:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a305c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3060:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3064:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3068:	d002      	beq.n	80a3070 <__adddf3+0x70>
 80a306a:	4240      	negs	r0, r0
 80a306c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3070:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3074:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3078:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a307c:	d002      	beq.n	80a3084 <__adddf3+0x84>
 80a307e:	4252      	negs	r2, r2
 80a3080:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3084:	ea94 0f05 	teq	r4, r5
 80a3088:	f000 80a7 	beq.w	80a31da <__adddf3+0x1da>
 80a308c:	f1a4 0401 	sub.w	r4, r4, #1
 80a3090:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3094:	db0d      	blt.n	80a30b2 <__adddf3+0xb2>
 80a3096:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a309a:	fa22 f205 	lsr.w	r2, r2, r5
 80a309e:	1880      	adds	r0, r0, r2
 80a30a0:	f141 0100 	adc.w	r1, r1, #0
 80a30a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80a30a8:	1880      	adds	r0, r0, r2
 80a30aa:	fa43 f305 	asr.w	r3, r3, r5
 80a30ae:	4159      	adcs	r1, r3
 80a30b0:	e00e      	b.n	80a30d0 <__adddf3+0xd0>
 80a30b2:	f1a5 0520 	sub.w	r5, r5, #32
 80a30b6:	f10e 0e20 	add.w	lr, lr, #32
 80a30ba:	2a01      	cmp	r2, #1
 80a30bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a30c0:	bf28      	it	cs
 80a30c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a30c6:	fa43 f305 	asr.w	r3, r3, r5
 80a30ca:	18c0      	adds	r0, r0, r3
 80a30cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a30d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a30d4:	d507      	bpl.n	80a30e6 <__adddf3+0xe6>
 80a30d6:	f04f 0e00 	mov.w	lr, #0
 80a30da:	f1dc 0c00 	rsbs	ip, ip, #0
 80a30de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a30e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a30e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a30ea:	d31b      	bcc.n	80a3124 <__adddf3+0x124>
 80a30ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a30f0:	d30c      	bcc.n	80a310c <__adddf3+0x10c>
 80a30f2:	0849      	lsrs	r1, r1, #1
 80a30f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a30f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a30fc:	f104 0401 	add.w	r4, r4, #1
 80a3100:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3104:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3108:	f080 809a 	bcs.w	80a3240 <__adddf3+0x240>
 80a310c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3110:	bf08      	it	eq
 80a3112:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3116:	f150 0000 	adcs.w	r0, r0, #0
 80a311a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a311e:	ea41 0105 	orr.w	r1, r1, r5
 80a3122:	bd30      	pop	{r4, r5, pc}
 80a3124:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3128:	4140      	adcs	r0, r0
 80a312a:	eb41 0101 	adc.w	r1, r1, r1
 80a312e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3132:	f1a4 0401 	sub.w	r4, r4, #1
 80a3136:	d1e9      	bne.n	80a310c <__adddf3+0x10c>
 80a3138:	f091 0f00 	teq	r1, #0
 80a313c:	bf04      	itt	eq
 80a313e:	4601      	moveq	r1, r0
 80a3140:	2000      	moveq	r0, #0
 80a3142:	fab1 f381 	clz	r3, r1
 80a3146:	bf08      	it	eq
 80a3148:	3320      	addeq	r3, #32
 80a314a:	f1a3 030b 	sub.w	r3, r3, #11
 80a314e:	f1b3 0220 	subs.w	r2, r3, #32
 80a3152:	da0c      	bge.n	80a316e <__adddf3+0x16e>
 80a3154:	320c      	adds	r2, #12
 80a3156:	dd08      	ble.n	80a316a <__adddf3+0x16a>
 80a3158:	f102 0c14 	add.w	ip, r2, #20
 80a315c:	f1c2 020c 	rsb	r2, r2, #12
 80a3160:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3164:	fa21 f102 	lsr.w	r1, r1, r2
 80a3168:	e00c      	b.n	80a3184 <__adddf3+0x184>
 80a316a:	f102 0214 	add.w	r2, r2, #20
 80a316e:	bfd8      	it	le
 80a3170:	f1c2 0c20 	rsble	ip, r2, #32
 80a3174:	fa01 f102 	lsl.w	r1, r1, r2
 80a3178:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a317c:	bfdc      	itt	le
 80a317e:	ea41 010c 	orrle.w	r1, r1, ip
 80a3182:	4090      	lslle	r0, r2
 80a3184:	1ae4      	subs	r4, r4, r3
 80a3186:	bfa2      	ittt	ge
 80a3188:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a318c:	4329      	orrge	r1, r5
 80a318e:	bd30      	popge	{r4, r5, pc}
 80a3190:	ea6f 0404 	mvn.w	r4, r4
 80a3194:	3c1f      	subs	r4, #31
 80a3196:	da1c      	bge.n	80a31d2 <__adddf3+0x1d2>
 80a3198:	340c      	adds	r4, #12
 80a319a:	dc0e      	bgt.n	80a31ba <__adddf3+0x1ba>
 80a319c:	f104 0414 	add.w	r4, r4, #20
 80a31a0:	f1c4 0220 	rsb	r2, r4, #32
 80a31a4:	fa20 f004 	lsr.w	r0, r0, r4
 80a31a8:	fa01 f302 	lsl.w	r3, r1, r2
 80a31ac:	ea40 0003 	orr.w	r0, r0, r3
 80a31b0:	fa21 f304 	lsr.w	r3, r1, r4
 80a31b4:	ea45 0103 	orr.w	r1, r5, r3
 80a31b8:	bd30      	pop	{r4, r5, pc}
 80a31ba:	f1c4 040c 	rsb	r4, r4, #12
 80a31be:	f1c4 0220 	rsb	r2, r4, #32
 80a31c2:	fa20 f002 	lsr.w	r0, r0, r2
 80a31c6:	fa01 f304 	lsl.w	r3, r1, r4
 80a31ca:	ea40 0003 	orr.w	r0, r0, r3
 80a31ce:	4629      	mov	r1, r5
 80a31d0:	bd30      	pop	{r4, r5, pc}
 80a31d2:	fa21 f004 	lsr.w	r0, r1, r4
 80a31d6:	4629      	mov	r1, r5
 80a31d8:	bd30      	pop	{r4, r5, pc}
 80a31da:	f094 0f00 	teq	r4, #0
 80a31de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a31e2:	bf06      	itte	eq
 80a31e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a31e8:	3401      	addeq	r4, #1
 80a31ea:	3d01      	subne	r5, #1
 80a31ec:	e74e      	b.n	80a308c <__adddf3+0x8c>
 80a31ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a31f2:	bf18      	it	ne
 80a31f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a31f8:	d029      	beq.n	80a324e <__adddf3+0x24e>
 80a31fa:	ea94 0f05 	teq	r4, r5
 80a31fe:	bf08      	it	eq
 80a3200:	ea90 0f02 	teqeq	r0, r2
 80a3204:	d005      	beq.n	80a3212 <__adddf3+0x212>
 80a3206:	ea54 0c00 	orrs.w	ip, r4, r0
 80a320a:	bf04      	itt	eq
 80a320c:	4619      	moveq	r1, r3
 80a320e:	4610      	moveq	r0, r2
 80a3210:	bd30      	pop	{r4, r5, pc}
 80a3212:	ea91 0f03 	teq	r1, r3
 80a3216:	bf1e      	ittt	ne
 80a3218:	2100      	movne	r1, #0
 80a321a:	2000      	movne	r0, #0
 80a321c:	bd30      	popne	{r4, r5, pc}
 80a321e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3222:	d105      	bne.n	80a3230 <__adddf3+0x230>
 80a3224:	0040      	lsls	r0, r0, #1
 80a3226:	4149      	adcs	r1, r1
 80a3228:	bf28      	it	cs
 80a322a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a322e:	bd30      	pop	{r4, r5, pc}
 80a3230:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3234:	bf3c      	itt	cc
 80a3236:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a323a:	bd30      	popcc	{r4, r5, pc}
 80a323c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3240:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3244:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3248:	f04f 0000 	mov.w	r0, #0
 80a324c:	bd30      	pop	{r4, r5, pc}
 80a324e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3252:	bf1a      	itte	ne
 80a3254:	4619      	movne	r1, r3
 80a3256:	4610      	movne	r0, r2
 80a3258:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a325c:	bf1c      	itt	ne
 80a325e:	460b      	movne	r3, r1
 80a3260:	4602      	movne	r2, r0
 80a3262:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3266:	bf06      	itte	eq
 80a3268:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a326c:	ea91 0f03 	teqeq	r1, r3
 80a3270:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3274:	bd30      	pop	{r4, r5, pc}
 80a3276:	bf00      	nop

080a3278 <__aeabi_ui2d>:
 80a3278:	f090 0f00 	teq	r0, #0
 80a327c:	bf04      	itt	eq
 80a327e:	2100      	moveq	r1, #0
 80a3280:	4770      	bxeq	lr
 80a3282:	b530      	push	{r4, r5, lr}
 80a3284:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3288:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a328c:	f04f 0500 	mov.w	r5, #0
 80a3290:	f04f 0100 	mov.w	r1, #0
 80a3294:	e750      	b.n	80a3138 <__adddf3+0x138>
 80a3296:	bf00      	nop

080a3298 <__aeabi_i2d>:
 80a3298:	f090 0f00 	teq	r0, #0
 80a329c:	bf04      	itt	eq
 80a329e:	2100      	moveq	r1, #0
 80a32a0:	4770      	bxeq	lr
 80a32a2:	b530      	push	{r4, r5, lr}
 80a32a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a32a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a32ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a32b0:	bf48      	it	mi
 80a32b2:	4240      	negmi	r0, r0
 80a32b4:	f04f 0100 	mov.w	r1, #0
 80a32b8:	e73e      	b.n	80a3138 <__adddf3+0x138>
 80a32ba:	bf00      	nop

080a32bc <__aeabi_f2d>:
 80a32bc:	0042      	lsls	r2, r0, #1
 80a32be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a32c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a32c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a32ca:	bf1f      	itttt	ne
 80a32cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a32d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a32d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a32d8:	4770      	bxne	lr
 80a32da:	f092 0f00 	teq	r2, #0
 80a32de:	bf14      	ite	ne
 80a32e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a32e4:	4770      	bxeq	lr
 80a32e6:	b530      	push	{r4, r5, lr}
 80a32e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a32ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a32f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a32f4:	e720      	b.n	80a3138 <__adddf3+0x138>
 80a32f6:	bf00      	nop

080a32f8 <__aeabi_ul2d>:
 80a32f8:	ea50 0201 	orrs.w	r2, r0, r1
 80a32fc:	bf08      	it	eq
 80a32fe:	4770      	bxeq	lr
 80a3300:	b530      	push	{r4, r5, lr}
 80a3302:	f04f 0500 	mov.w	r5, #0
 80a3306:	e00a      	b.n	80a331e <__aeabi_l2d+0x16>

080a3308 <__aeabi_l2d>:
 80a3308:	ea50 0201 	orrs.w	r2, r0, r1
 80a330c:	bf08      	it	eq
 80a330e:	4770      	bxeq	lr
 80a3310:	b530      	push	{r4, r5, lr}
 80a3312:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3316:	d502      	bpl.n	80a331e <__aeabi_l2d+0x16>
 80a3318:	4240      	negs	r0, r0
 80a331a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a331e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3322:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3326:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a332a:	f43f aedc 	beq.w	80a30e6 <__adddf3+0xe6>
 80a332e:	f04f 0203 	mov.w	r2, #3
 80a3332:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3336:	bf18      	it	ne
 80a3338:	3203      	addne	r2, #3
 80a333a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a333e:	bf18      	it	ne
 80a3340:	3203      	addne	r2, #3
 80a3342:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3346:	f1c2 0320 	rsb	r3, r2, #32
 80a334a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a334e:	fa20 f002 	lsr.w	r0, r0, r2
 80a3352:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3356:	ea40 000e 	orr.w	r0, r0, lr
 80a335a:	fa21 f102 	lsr.w	r1, r1, r2
 80a335e:	4414      	add	r4, r2
 80a3360:	e6c1      	b.n	80a30e6 <__adddf3+0xe6>
 80a3362:	bf00      	nop

080a3364 <__aeabi_dmul>:
 80a3364:	b570      	push	{r4, r5, r6, lr}
 80a3366:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a336a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a336e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3372:	bf1d      	ittte	ne
 80a3374:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3378:	ea94 0f0c 	teqne	r4, ip
 80a337c:	ea95 0f0c 	teqne	r5, ip
 80a3380:	f000 f8de 	bleq	80a3540 <__aeabi_dmul+0x1dc>
 80a3384:	442c      	add	r4, r5
 80a3386:	ea81 0603 	eor.w	r6, r1, r3
 80a338a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a338e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a3392:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a3396:	bf18      	it	ne
 80a3398:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a339c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a33a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a33a4:	d038      	beq.n	80a3418 <__aeabi_dmul+0xb4>
 80a33a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a33aa:	f04f 0500 	mov.w	r5, #0
 80a33ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a33b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a33b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a33ba:	f04f 0600 	mov.w	r6, #0
 80a33be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a33c2:	f09c 0f00 	teq	ip, #0
 80a33c6:	bf18      	it	ne
 80a33c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a33cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a33d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a33d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a33d8:	d204      	bcs.n	80a33e4 <__aeabi_dmul+0x80>
 80a33da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a33de:	416d      	adcs	r5, r5
 80a33e0:	eb46 0606 	adc.w	r6, r6, r6
 80a33e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a33e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a33ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a33f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a33f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a33f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a33fc:	bf88      	it	hi
 80a33fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3402:	d81e      	bhi.n	80a3442 <__aeabi_dmul+0xde>
 80a3404:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3408:	bf08      	it	eq
 80a340a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a340e:	f150 0000 	adcs.w	r0, r0, #0
 80a3412:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3416:	bd70      	pop	{r4, r5, r6, pc}
 80a3418:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a341c:	ea46 0101 	orr.w	r1, r6, r1
 80a3420:	ea40 0002 	orr.w	r0, r0, r2
 80a3424:	ea81 0103 	eor.w	r1, r1, r3
 80a3428:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a342c:	bfc2      	ittt	gt
 80a342e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3432:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3436:	bd70      	popgt	{r4, r5, r6, pc}
 80a3438:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a343c:	f04f 0e00 	mov.w	lr, #0
 80a3440:	3c01      	subs	r4, #1
 80a3442:	f300 80ab 	bgt.w	80a359c <__aeabi_dmul+0x238>
 80a3446:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a344a:	bfde      	ittt	le
 80a344c:	2000      	movle	r0, #0
 80a344e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3452:	bd70      	pople	{r4, r5, r6, pc}
 80a3454:	f1c4 0400 	rsb	r4, r4, #0
 80a3458:	3c20      	subs	r4, #32
 80a345a:	da35      	bge.n	80a34c8 <__aeabi_dmul+0x164>
 80a345c:	340c      	adds	r4, #12
 80a345e:	dc1b      	bgt.n	80a3498 <__aeabi_dmul+0x134>
 80a3460:	f104 0414 	add.w	r4, r4, #20
 80a3464:	f1c4 0520 	rsb	r5, r4, #32
 80a3468:	fa00 f305 	lsl.w	r3, r0, r5
 80a346c:	fa20 f004 	lsr.w	r0, r0, r4
 80a3470:	fa01 f205 	lsl.w	r2, r1, r5
 80a3474:	ea40 0002 	orr.w	r0, r0, r2
 80a3478:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a347c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3480:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3484:	fa21 f604 	lsr.w	r6, r1, r4
 80a3488:	eb42 0106 	adc.w	r1, r2, r6
 80a348c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3490:	bf08      	it	eq
 80a3492:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3496:	bd70      	pop	{r4, r5, r6, pc}
 80a3498:	f1c4 040c 	rsb	r4, r4, #12
 80a349c:	f1c4 0520 	rsb	r5, r4, #32
 80a34a0:	fa00 f304 	lsl.w	r3, r0, r4
 80a34a4:	fa20 f005 	lsr.w	r0, r0, r5
 80a34a8:	fa01 f204 	lsl.w	r2, r1, r4
 80a34ac:	ea40 0002 	orr.w	r0, r0, r2
 80a34b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a34b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a34b8:	f141 0100 	adc.w	r1, r1, #0
 80a34bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a34c0:	bf08      	it	eq
 80a34c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a34c6:	bd70      	pop	{r4, r5, r6, pc}
 80a34c8:	f1c4 0520 	rsb	r5, r4, #32
 80a34cc:	fa00 f205 	lsl.w	r2, r0, r5
 80a34d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a34d4:	fa20 f304 	lsr.w	r3, r0, r4
 80a34d8:	fa01 f205 	lsl.w	r2, r1, r5
 80a34dc:	ea43 0302 	orr.w	r3, r3, r2
 80a34e0:	fa21 f004 	lsr.w	r0, r1, r4
 80a34e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a34e8:	fa21 f204 	lsr.w	r2, r1, r4
 80a34ec:	ea20 0002 	bic.w	r0, r0, r2
 80a34f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a34f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a34f8:	bf08      	it	eq
 80a34fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a34fe:	bd70      	pop	{r4, r5, r6, pc}
 80a3500:	f094 0f00 	teq	r4, #0
 80a3504:	d10f      	bne.n	80a3526 <__aeabi_dmul+0x1c2>
 80a3506:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a350a:	0040      	lsls	r0, r0, #1
 80a350c:	eb41 0101 	adc.w	r1, r1, r1
 80a3510:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3514:	bf08      	it	eq
 80a3516:	3c01      	subeq	r4, #1
 80a3518:	d0f7      	beq.n	80a350a <__aeabi_dmul+0x1a6>
 80a351a:	ea41 0106 	orr.w	r1, r1, r6
 80a351e:	f095 0f00 	teq	r5, #0
 80a3522:	bf18      	it	ne
 80a3524:	4770      	bxne	lr
 80a3526:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a352a:	0052      	lsls	r2, r2, #1
 80a352c:	eb43 0303 	adc.w	r3, r3, r3
 80a3530:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3534:	bf08      	it	eq
 80a3536:	3d01      	subeq	r5, #1
 80a3538:	d0f7      	beq.n	80a352a <__aeabi_dmul+0x1c6>
 80a353a:	ea43 0306 	orr.w	r3, r3, r6
 80a353e:	4770      	bx	lr
 80a3540:	ea94 0f0c 	teq	r4, ip
 80a3544:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3548:	bf18      	it	ne
 80a354a:	ea95 0f0c 	teqne	r5, ip
 80a354e:	d00c      	beq.n	80a356a <__aeabi_dmul+0x206>
 80a3550:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3554:	bf18      	it	ne
 80a3556:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a355a:	d1d1      	bne.n	80a3500 <__aeabi_dmul+0x19c>
 80a355c:	ea81 0103 	eor.w	r1, r1, r3
 80a3560:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3564:	f04f 0000 	mov.w	r0, #0
 80a3568:	bd70      	pop	{r4, r5, r6, pc}
 80a356a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a356e:	bf06      	itte	eq
 80a3570:	4610      	moveq	r0, r2
 80a3572:	4619      	moveq	r1, r3
 80a3574:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3578:	d019      	beq.n	80a35ae <__aeabi_dmul+0x24a>
 80a357a:	ea94 0f0c 	teq	r4, ip
 80a357e:	d102      	bne.n	80a3586 <__aeabi_dmul+0x222>
 80a3580:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3584:	d113      	bne.n	80a35ae <__aeabi_dmul+0x24a>
 80a3586:	ea95 0f0c 	teq	r5, ip
 80a358a:	d105      	bne.n	80a3598 <__aeabi_dmul+0x234>
 80a358c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3590:	bf1c      	itt	ne
 80a3592:	4610      	movne	r0, r2
 80a3594:	4619      	movne	r1, r3
 80a3596:	d10a      	bne.n	80a35ae <__aeabi_dmul+0x24a>
 80a3598:	ea81 0103 	eor.w	r1, r1, r3
 80a359c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a35a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a35a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a35a8:	f04f 0000 	mov.w	r0, #0
 80a35ac:	bd70      	pop	{r4, r5, r6, pc}
 80a35ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a35b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a35b6:	bd70      	pop	{r4, r5, r6, pc}

080a35b8 <__aeabi_ddiv>:
 80a35b8:	b570      	push	{r4, r5, r6, lr}
 80a35ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a35be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a35c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a35c6:	bf1d      	ittte	ne
 80a35c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a35cc:	ea94 0f0c 	teqne	r4, ip
 80a35d0:	ea95 0f0c 	teqne	r5, ip
 80a35d4:	f000 f8a7 	bleq	80a3726 <__aeabi_ddiv+0x16e>
 80a35d8:	eba4 0405 	sub.w	r4, r4, r5
 80a35dc:	ea81 0e03 	eor.w	lr, r1, r3
 80a35e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a35e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a35e8:	f000 8088 	beq.w	80a36fc <__aeabi_ddiv+0x144>
 80a35ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a35f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a35f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a35f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a35fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3600:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3604:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3608:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a360c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3610:	429d      	cmp	r5, r3
 80a3612:	bf08      	it	eq
 80a3614:	4296      	cmpeq	r6, r2
 80a3616:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a361a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a361e:	d202      	bcs.n	80a3626 <__aeabi_ddiv+0x6e>
 80a3620:	085b      	lsrs	r3, r3, #1
 80a3622:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3626:	1ab6      	subs	r6, r6, r2
 80a3628:	eb65 0503 	sbc.w	r5, r5, r3
 80a362c:	085b      	lsrs	r3, r3, #1
 80a362e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3632:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3636:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a363a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a363e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3642:	bf22      	ittt	cs
 80a3644:	1ab6      	subcs	r6, r6, r2
 80a3646:	4675      	movcs	r5, lr
 80a3648:	ea40 000c 	orrcs.w	r0, r0, ip
 80a364c:	085b      	lsrs	r3, r3, #1
 80a364e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3652:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3656:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a365a:	bf22      	ittt	cs
 80a365c:	1ab6      	subcs	r6, r6, r2
 80a365e:	4675      	movcs	r5, lr
 80a3660:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3664:	085b      	lsrs	r3, r3, #1
 80a3666:	ea4f 0232 	mov.w	r2, r2, rrx
 80a366a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a366e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3672:	bf22      	ittt	cs
 80a3674:	1ab6      	subcs	r6, r6, r2
 80a3676:	4675      	movcs	r5, lr
 80a3678:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a367c:	085b      	lsrs	r3, r3, #1
 80a367e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3682:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3686:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a368a:	bf22      	ittt	cs
 80a368c:	1ab6      	subcs	r6, r6, r2
 80a368e:	4675      	movcs	r5, lr
 80a3690:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3694:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3698:	d018      	beq.n	80a36cc <__aeabi_ddiv+0x114>
 80a369a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a369e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a36a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a36a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a36aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a36ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a36b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a36b6:	d1c0      	bne.n	80a363a <__aeabi_ddiv+0x82>
 80a36b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a36bc:	d10b      	bne.n	80a36d6 <__aeabi_ddiv+0x11e>
 80a36be:	ea41 0100 	orr.w	r1, r1, r0
 80a36c2:	f04f 0000 	mov.w	r0, #0
 80a36c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a36ca:	e7b6      	b.n	80a363a <__aeabi_ddiv+0x82>
 80a36cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a36d0:	bf04      	itt	eq
 80a36d2:	4301      	orreq	r1, r0
 80a36d4:	2000      	moveq	r0, #0
 80a36d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a36da:	bf88      	it	hi
 80a36dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a36e0:	f63f aeaf 	bhi.w	80a3442 <__aeabi_dmul+0xde>
 80a36e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a36e8:	bf04      	itt	eq
 80a36ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a36ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a36f2:	f150 0000 	adcs.w	r0, r0, #0
 80a36f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a36fa:	bd70      	pop	{r4, r5, r6, pc}
 80a36fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3700:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3704:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3708:	bfc2      	ittt	gt
 80a370a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a370e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3712:	bd70      	popgt	{r4, r5, r6, pc}
 80a3714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3718:	f04f 0e00 	mov.w	lr, #0
 80a371c:	3c01      	subs	r4, #1
 80a371e:	e690      	b.n	80a3442 <__aeabi_dmul+0xde>
 80a3720:	ea45 0e06 	orr.w	lr, r5, r6
 80a3724:	e68d      	b.n	80a3442 <__aeabi_dmul+0xde>
 80a3726:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a372a:	ea94 0f0c 	teq	r4, ip
 80a372e:	bf08      	it	eq
 80a3730:	ea95 0f0c 	teqeq	r5, ip
 80a3734:	f43f af3b 	beq.w	80a35ae <__aeabi_dmul+0x24a>
 80a3738:	ea94 0f0c 	teq	r4, ip
 80a373c:	d10a      	bne.n	80a3754 <__aeabi_ddiv+0x19c>
 80a373e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3742:	f47f af34 	bne.w	80a35ae <__aeabi_dmul+0x24a>
 80a3746:	ea95 0f0c 	teq	r5, ip
 80a374a:	f47f af25 	bne.w	80a3598 <__aeabi_dmul+0x234>
 80a374e:	4610      	mov	r0, r2
 80a3750:	4619      	mov	r1, r3
 80a3752:	e72c      	b.n	80a35ae <__aeabi_dmul+0x24a>
 80a3754:	ea95 0f0c 	teq	r5, ip
 80a3758:	d106      	bne.n	80a3768 <__aeabi_ddiv+0x1b0>
 80a375a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a375e:	f43f aefd 	beq.w	80a355c <__aeabi_dmul+0x1f8>
 80a3762:	4610      	mov	r0, r2
 80a3764:	4619      	mov	r1, r3
 80a3766:	e722      	b.n	80a35ae <__aeabi_dmul+0x24a>
 80a3768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a376c:	bf18      	it	ne
 80a376e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3772:	f47f aec5 	bne.w	80a3500 <__aeabi_dmul+0x19c>
 80a3776:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a377a:	f47f af0d 	bne.w	80a3598 <__aeabi_dmul+0x234>
 80a377e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a3782:	f47f aeeb 	bne.w	80a355c <__aeabi_dmul+0x1f8>
 80a3786:	e712      	b.n	80a35ae <__aeabi_dmul+0x24a>

080a3788 <__gedf2>:
 80a3788:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a378c:	e006      	b.n	80a379c <__cmpdf2+0x4>
 80a378e:	bf00      	nop

080a3790 <__ledf2>:
 80a3790:	f04f 0c01 	mov.w	ip, #1
 80a3794:	e002      	b.n	80a379c <__cmpdf2+0x4>
 80a3796:	bf00      	nop

080a3798 <__cmpdf2>:
 80a3798:	f04f 0c01 	mov.w	ip, #1
 80a379c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a37a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a37a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a37a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a37ac:	bf18      	it	ne
 80a37ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a37b2:	d01b      	beq.n	80a37ec <__cmpdf2+0x54>
 80a37b4:	b001      	add	sp, #4
 80a37b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a37ba:	bf0c      	ite	eq
 80a37bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a37c0:	ea91 0f03 	teqne	r1, r3
 80a37c4:	bf02      	ittt	eq
 80a37c6:	ea90 0f02 	teqeq	r0, r2
 80a37ca:	2000      	moveq	r0, #0
 80a37cc:	4770      	bxeq	lr
 80a37ce:	f110 0f00 	cmn.w	r0, #0
 80a37d2:	ea91 0f03 	teq	r1, r3
 80a37d6:	bf58      	it	pl
 80a37d8:	4299      	cmppl	r1, r3
 80a37da:	bf08      	it	eq
 80a37dc:	4290      	cmpeq	r0, r2
 80a37de:	bf2c      	ite	cs
 80a37e0:	17d8      	asrcs	r0, r3, #31
 80a37e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a37e6:	f040 0001 	orr.w	r0, r0, #1
 80a37ea:	4770      	bx	lr
 80a37ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a37f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a37f4:	d102      	bne.n	80a37fc <__cmpdf2+0x64>
 80a37f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a37fa:	d107      	bne.n	80a380c <__cmpdf2+0x74>
 80a37fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3804:	d1d6      	bne.n	80a37b4 <__cmpdf2+0x1c>
 80a3806:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a380a:	d0d3      	beq.n	80a37b4 <__cmpdf2+0x1c>
 80a380c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3810:	4770      	bx	lr
 80a3812:	bf00      	nop

080a3814 <__aeabi_cdrcmple>:
 80a3814:	4684      	mov	ip, r0
 80a3816:	4610      	mov	r0, r2
 80a3818:	4662      	mov	r2, ip
 80a381a:	468c      	mov	ip, r1
 80a381c:	4619      	mov	r1, r3
 80a381e:	4663      	mov	r3, ip
 80a3820:	e000      	b.n	80a3824 <__aeabi_cdcmpeq>
 80a3822:	bf00      	nop

080a3824 <__aeabi_cdcmpeq>:
 80a3824:	b501      	push	{r0, lr}
 80a3826:	f7ff ffb7 	bl	80a3798 <__cmpdf2>
 80a382a:	2800      	cmp	r0, #0
 80a382c:	bf48      	it	mi
 80a382e:	f110 0f00 	cmnmi.w	r0, #0
 80a3832:	bd01      	pop	{r0, pc}

080a3834 <__aeabi_dcmpeq>:
 80a3834:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3838:	f7ff fff4 	bl	80a3824 <__aeabi_cdcmpeq>
 80a383c:	bf0c      	ite	eq
 80a383e:	2001      	moveq	r0, #1
 80a3840:	2000      	movne	r0, #0
 80a3842:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3846:	bf00      	nop

080a3848 <__aeabi_dcmplt>:
 80a3848:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a384c:	f7ff ffea 	bl	80a3824 <__aeabi_cdcmpeq>
 80a3850:	bf34      	ite	cc
 80a3852:	2001      	movcc	r0, #1
 80a3854:	2000      	movcs	r0, #0
 80a3856:	f85d fb08 	ldr.w	pc, [sp], #8
 80a385a:	bf00      	nop

080a385c <__aeabi_dcmple>:
 80a385c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3860:	f7ff ffe0 	bl	80a3824 <__aeabi_cdcmpeq>
 80a3864:	bf94      	ite	ls
 80a3866:	2001      	movls	r0, #1
 80a3868:	2000      	movhi	r0, #0
 80a386a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a386e:	bf00      	nop

080a3870 <__aeabi_dcmpge>:
 80a3870:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3874:	f7ff ffce 	bl	80a3814 <__aeabi_cdrcmple>
 80a3878:	bf94      	ite	ls
 80a387a:	2001      	movls	r0, #1
 80a387c:	2000      	movhi	r0, #0
 80a387e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3882:	bf00      	nop

080a3884 <__aeabi_dcmpgt>:
 80a3884:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3888:	f7ff ffc4 	bl	80a3814 <__aeabi_cdrcmple>
 80a388c:	bf34      	ite	cc
 80a388e:	2001      	movcc	r0, #1
 80a3890:	2000      	movcs	r0, #0
 80a3892:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3896:	bf00      	nop

080a3898 <__aeabi_dcmpun>:
 80a3898:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a389c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a38a0:	d102      	bne.n	80a38a8 <__aeabi_dcmpun+0x10>
 80a38a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a38a6:	d10a      	bne.n	80a38be <__aeabi_dcmpun+0x26>
 80a38a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a38ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a38b0:	d102      	bne.n	80a38b8 <__aeabi_dcmpun+0x20>
 80a38b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a38b6:	d102      	bne.n	80a38be <__aeabi_dcmpun+0x26>
 80a38b8:	f04f 0000 	mov.w	r0, #0
 80a38bc:	4770      	bx	lr
 80a38be:	f04f 0001 	mov.w	r0, #1
 80a38c2:	4770      	bx	lr

080a38c4 <__aeabi_d2iz>:
 80a38c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a38c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a38cc:	d215      	bcs.n	80a38fa <__aeabi_d2iz+0x36>
 80a38ce:	d511      	bpl.n	80a38f4 <__aeabi_d2iz+0x30>
 80a38d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a38d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a38d8:	d912      	bls.n	80a3900 <__aeabi_d2iz+0x3c>
 80a38da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a38de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a38e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a38e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a38ea:	fa23 f002 	lsr.w	r0, r3, r2
 80a38ee:	bf18      	it	ne
 80a38f0:	4240      	negne	r0, r0
 80a38f2:	4770      	bx	lr
 80a38f4:	f04f 0000 	mov.w	r0, #0
 80a38f8:	4770      	bx	lr
 80a38fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a38fe:	d105      	bne.n	80a390c <__aeabi_d2iz+0x48>
 80a3900:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3904:	bf08      	it	eq
 80a3906:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a390a:	4770      	bx	lr
 80a390c:	f04f 0000 	mov.w	r0, #0
 80a3910:	4770      	bx	lr
 80a3912:	bf00      	nop

080a3914 <__aeabi_d2uiz>:
 80a3914:	004a      	lsls	r2, r1, #1
 80a3916:	d211      	bcs.n	80a393c <__aeabi_d2uiz+0x28>
 80a3918:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a391c:	d211      	bcs.n	80a3942 <__aeabi_d2uiz+0x2e>
 80a391e:	d50d      	bpl.n	80a393c <__aeabi_d2uiz+0x28>
 80a3920:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3924:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3928:	d40e      	bmi.n	80a3948 <__aeabi_d2uiz+0x34>
 80a392a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a392e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3932:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3936:	fa23 f002 	lsr.w	r0, r3, r2
 80a393a:	4770      	bx	lr
 80a393c:	f04f 0000 	mov.w	r0, #0
 80a3940:	4770      	bx	lr
 80a3942:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3946:	d102      	bne.n	80a394e <__aeabi_d2uiz+0x3a>
 80a3948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a394c:	4770      	bx	lr
 80a394e:	f04f 0000 	mov.w	r0, #0
 80a3952:	4770      	bx	lr

080a3954 <__cxa_atexit>:
 80a3954:	b510      	push	{r4, lr}
 80a3956:	4c05      	ldr	r4, [pc, #20]	; (80a396c <__cxa_atexit+0x18>)
 80a3958:	4613      	mov	r3, r2
 80a395a:	b12c      	cbz	r4, 80a3968 <__cxa_atexit+0x14>
 80a395c:	460a      	mov	r2, r1
 80a395e:	4601      	mov	r1, r0
 80a3960:	2002      	movs	r0, #2
 80a3962:	f3af 8000 	nop.w
 80a3966:	bd10      	pop	{r4, pc}
 80a3968:	4620      	mov	r0, r4
 80a396a:	bd10      	pop	{r4, pc}
 80a396c:	00000000 	.word	0x00000000

080a3970 <memcpy>:
 80a3970:	b510      	push	{r4, lr}
 80a3972:	1e43      	subs	r3, r0, #1
 80a3974:	440a      	add	r2, r1
 80a3976:	4291      	cmp	r1, r2
 80a3978:	d004      	beq.n	80a3984 <memcpy+0x14>
 80a397a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a397e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3982:	e7f8      	b.n	80a3976 <memcpy+0x6>
 80a3984:	bd10      	pop	{r4, pc}

080a3986 <memset>:
 80a3986:	4603      	mov	r3, r0
 80a3988:	4402      	add	r2, r0
 80a398a:	4293      	cmp	r3, r2
 80a398c:	d002      	beq.n	80a3994 <memset+0xe>
 80a398e:	f803 1b01 	strb.w	r1, [r3], #1
 80a3992:	e7fa      	b.n	80a398a <memset+0x4>
 80a3994:	4770      	bx	lr
	...

080a3998 <srand>:
 80a3998:	b538      	push	{r3, r4, r5, lr}
 80a399a:	4b12      	ldr	r3, [pc, #72]	; (80a39e4 <srand+0x4c>)
 80a399c:	4605      	mov	r5, r0
 80a399e:	681c      	ldr	r4, [r3, #0]
 80a39a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a39a2:	b9d3      	cbnz	r3, 80a39da <srand+0x42>
 80a39a4:	2018      	movs	r0, #24
 80a39a6:	f7fe f80d 	bl	80a19c4 <malloc>
 80a39aa:	f243 330e 	movw	r3, #13070	; 0x330e
 80a39ae:	63a0      	str	r0, [r4, #56]	; 0x38
 80a39b0:	8003      	strh	r3, [r0, #0]
 80a39b2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a39b6:	8043      	strh	r3, [r0, #2]
 80a39b8:	f241 2334 	movw	r3, #4660	; 0x1234
 80a39bc:	8083      	strh	r3, [r0, #4]
 80a39be:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a39c2:	80c3      	strh	r3, [r0, #6]
 80a39c4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a39c8:	8103      	strh	r3, [r0, #8]
 80a39ca:	2305      	movs	r3, #5
 80a39cc:	8143      	strh	r3, [r0, #10]
 80a39ce:	230b      	movs	r3, #11
 80a39d0:	8183      	strh	r3, [r0, #12]
 80a39d2:	2201      	movs	r2, #1
 80a39d4:	2300      	movs	r3, #0
 80a39d6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a39da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a39dc:	2200      	movs	r2, #0
 80a39de:	611d      	str	r5, [r3, #16]
 80a39e0:	615a      	str	r2, [r3, #20]
 80a39e2:	bd38      	pop	{r3, r4, r5, pc}
 80a39e4:	20000070 	.word	0x20000070

080a39e8 <strcmp>:
 80a39e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a39ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a39f0:	2a01      	cmp	r2, #1
 80a39f2:	bf28      	it	cs
 80a39f4:	429a      	cmpcs	r2, r3
 80a39f6:	d0f7      	beq.n	80a39e8 <strcmp>
 80a39f8:	1ad0      	subs	r0, r2, r3
 80a39fa:	4770      	bx	lr

080a39fc <strdup>:
 80a39fc:	4b02      	ldr	r3, [pc, #8]	; (80a3a08 <strdup+0xc>)
 80a39fe:	4601      	mov	r1, r0
 80a3a00:	6818      	ldr	r0, [r3, #0]
 80a3a02:	f000 b803 	b.w	80a3a0c <_strdup_r>
 80a3a06:	bf00      	nop
 80a3a08:	20000070 	.word	0x20000070

080a3a0c <_strdup_r>:
 80a3a0c:	b570      	push	{r4, r5, r6, lr}
 80a3a0e:	4606      	mov	r6, r0
 80a3a10:	4608      	mov	r0, r1
 80a3a12:	460c      	mov	r4, r1
 80a3a14:	f000 f80d 	bl	80a3a32 <strlen>
 80a3a18:	1c45      	adds	r5, r0, #1
 80a3a1a:	4629      	mov	r1, r5
 80a3a1c:	4630      	mov	r0, r6
 80a3a1e:	f7fd fff1 	bl	80a1a04 <_malloc_r>
 80a3a22:	4606      	mov	r6, r0
 80a3a24:	b118      	cbz	r0, 80a3a2e <_strdup_r+0x22>
 80a3a26:	462a      	mov	r2, r5
 80a3a28:	4621      	mov	r1, r4
 80a3a2a:	f7ff ffa1 	bl	80a3970 <memcpy>
 80a3a2e:	4630      	mov	r0, r6
 80a3a30:	bd70      	pop	{r4, r5, r6, pc}

080a3a32 <strlen>:
 80a3a32:	4603      	mov	r3, r0
 80a3a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3a38:	2a00      	cmp	r2, #0
 80a3a3a:	d1fb      	bne.n	80a3a34 <strlen+0x2>
 80a3a3c:	1a18      	subs	r0, r3, r0
 80a3a3e:	3801      	subs	r0, #1
 80a3a40:	4770      	bx	lr

080a3a42 <link_code_end>:
	...

080a3a44 <dynalib_user>:
 80a3a44:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a3a54:	0000 0000 6f43 6c6f 4f00 6666 4800 6165     ....Cool.Off.Hea
 80a3a64:	0074 4552 4144 454c 5452 4900 766e 6c61     t.REDALERT.Inval
 80a3a74:	6469 6d20 646f 3a65 0020 6574 706d 7265     id mode: .temper
 80a3a84:	7461 7275 0065 6573 4d74 646f 0065 003b     ature.setMode.;.
 80a3a94:	4341 4954 4556 0000                         ACTIVE..

080a3a9c <CSWTCH.210>:
 80a3a9c:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a3aac:	0050 0000                                   P...

080a3ab0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a3ab8:	1a43 080a 1a49 080a 1a9f 080a 1a57 080a     C...I.......W...
 80a3ac8:	1a45 080a                                   E...

080a3acc <_ZTV7TwoWire>:
	...
 80a3ad4:	2091 080a 20db 080a 20b3 080a 2093 080a     . ... ... ... ..
 80a3ae4:	20bb 080a 20c3 080a 20cb 080a 20d3 080a     . ... ... ... ..

080a3af4 <_ZTV9IPAddress>:
	...
 80a3afc:	2125 080a 2115 080a 2117 080a 6162 6475     %!...!...!..baud
 80a3b0c:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a3b1c:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a3b2c:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a3b3c:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a3b4c:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a3b5c:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a3b6c:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a3b7c:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a3b8c:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a3b9c:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a3bac:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a3bbc:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a3bcc:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a3bdc:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a3bec <_ZTVN5spark12NetworkClassE>:
	...
 80a3bf4:	21ed 080a 21f7 080a 2201 080a 220b 080a     .!...!..."..."..
 80a3c04:	2215 080a 2221 080a 222d 080a 2239 080a     ."..!"..-"..9"..
 80a3c14:	2241 080a 224b 080a 2255 080a 616e 006e     A"..K"..U"..nan.
 80a3c24:	766f 0066 002e 6e69 0066 005a 2b25 3330     ovf...inf.Z.%+03
 80a3c34:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
 80a3c44:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
 80a3c54:	656d 0000                                   me..

080a3c58 <_ZTV11USARTSerial>:
	...
 80a3c60:	26bd 080a 270d 080a 271b 080a 22b9 080a     .&...'...'..."..
 80a3c70:	26d1 080a 26f3 080a 26df 080a 2707 080a     .&...&...&...'..
 80a3c80:	26bf 080a 26c3 080a                         .&...&..

080a3c88 <_ZTV9USBSerial>:
	...
 80a3c90:	27c5 080a 2815 080a 2823 080a 22b9 080a     .'...(..#(..."..
 80a3ca0:	2801 080a 27c7 080a 27dd 080a 280f 080a     .(...'...'...(..
 80a3cb0:	27f3 080a 27c1 080a                         .'...'..

080a3cb8 <_ZTVN5spark9WiFiClassE>:
	...
 80a3cc0:	2a07 080a 29fd 080a 29f3 080a 2965 080a     .*...)...)..e)..
 80a3cd0:	29e7 080a 29db 080a 29cf 080a 29c7 080a     .)...)...)...)..
 80a3ce0:	29bd 080a 29b3 080a 296f 080a               .)...)..o)..

080a3cec <_ZSt7nothrow>:
 80a3cec:	0000 0000                                   ....

080a3cf0 <__sf_fake_stdin>:
	...

080a3d10 <__sf_fake_stdout>:
	...

080a3d30 <__sf_fake_stderr>:
	...
 80a3d50:	0043                                        C.

080a3d52 <link_const_variable_data_end>:
	...

080a3d54 <link_constructors_location>:
 80a3d54:	080a02b9 	.word	0x080a02b9
 80a3d58:	080a1615 	.word	0x080a1615
 80a3d5c:	080a21dd 	.word	0x080a21dd
 80a3d60:	080a22a5 	.word	0x080a22a5
 80a3d64:	080a2509 	.word	0x080a2509
 80a3d68:	080a2675 	.word	0x080a2675
 80a3d6c:	080a26a9 	.word	0x080a26a9
 80a3d70:	080a2a11 	.word	0x080a2a11
 80a3d74:	080a2ced 	.word	0x080a2ced
 80a3d78:	080a2d65 	.word	0x080a2d65
 80a3d7c:	080a2e29 	.word	0x080a2e29
 80a3d80:	080a2ead 	.word	0x080a2ead
 80a3d84:	080a2f31 	.word	0x080a2f31

080a3d88 <link_constructors_end>:
	...
