
/Users/anseljohn/Documents/School/Freshman/Fall/ee1301Main/EE1301/Final_Main/Final/target/2.0.0/photon/Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000023d4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a23f0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a23f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000504  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a245c  080a245c  0002245c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2484  080a2484  00022484  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ef2e7  00000000  00000000  00022488  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011aef  00000000  00000000  0011176f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001697b  00000000  00000000  0012325e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001c60  00000000  00000000  00139bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004858  00000000  00000000  0013b839  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024b13  00000000  00000000  00140091  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00027265  00000000  00000000  00164ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b1535  00000000  00000000  0018be09  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000459c  00000000  00000000  0023d340  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 f8e1 	bl	80a21f4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 f8e9 	bl	80a2210 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a23f4 	.word	0x080a23f4
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	2000056c 	.word	0x2000056c
 80a0058:	2000056c 	.word	0x2000056c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 ff9b 	bl	80a1f98 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a23c8 	.word	0x080a23c8
 80a0080:	080a23ec 	.word	0x080a23ec

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b814 	b.w	80a00b0 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f861 	bl	80a0150 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 bf43 	b.w	80a1f1c <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f001 bb93 	b.w	80a17c0 <malloc>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f001 bb99 	b.w	80a17d0 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:
void updateButtonState(int pCurrent);
void updateSystemState(bool pButtonPressed, SYSTEM_STATUS pCurrentStatus);
void setStatusLED(int pColor);
unsigned long int mNextTime = 0;

void setup() {
 80a00b0:	b508      	push	{r3, lr}
    pinMode(BUTTON_PIN, INPUT_PULLDOWN);
 80a00b2:	2103      	movs	r1, #3
 80a00b4:	2002      	movs	r0, #2
 80a00b6:	f001 ffef 	bl	80a2098 <pinMode>

    mSystemStatusLED.begin();
 80a00ba:	4807      	ldr	r0, [pc, #28]	; (80a00d8 <setup+0x28>)
 80a00bc:	f000 f8c2 	bl	80a0244 <_ZN17Adafruit_NeoPixel5beginEv>
    mCurrentButtonState = NOT_PRESSED;
 80a00c0:	2301      	movs	r3, #1
 80a00c2:	4a06      	ldr	r2, [pc, #24]	; (80a00dc <setup+0x2c>)
 80a00c4:	7013      	strb	r3, [r2, #0]
    mPreviousButtonState = mCurrentButtonState;
 80a00c6:	4a06      	ldr	r2, [pc, #24]	; (80a00e0 <setup+0x30>)
 80a00c8:	7013      	strb	r3, [r2, #0]
    mCurrentSystemStatus = DISARMED;
 80a00ca:	4a06      	ldr	r2, [pc, #24]	; (80a00e4 <setup+0x34>)
 80a00cc:	7013      	strb	r3, [r2, #0]

    mJustPressed = false;
 80a00ce:	2200      	movs	r2, #0
 80a00d0:	4b05      	ldr	r3, [pc, #20]	; (80a00e8 <setup+0x38>)
 80a00d2:	701a      	strb	r2, [r3, #0]
}
 80a00d4:	bd08      	pop	{r3, pc}
 80a00d6:	bf00      	nop
 80a00d8:	20000078 	.word	0x20000078
 80a00dc:	20000074 	.word	0x20000074
 80a00e0:	20000077 	.word	0x20000077
 80a00e4:	20000075 	.word	0x20000075
 80a00e8:	20000076 	.word	0x20000076

080a00ec <_Z17updateButtonStatei>:
 * Updates the state of the button based on its current reading
 * Checks change in state to determine if it was just pressed
 * Updates previous state
 */
void updateButtonState(int pCurrent) {
    if (pCurrent == HIGH) {
 80a00ec:	2801      	cmp	r0, #1
        mCurrentButtonState = PRESSED;
 80a00ee:	bf14      	ite	ne
 80a00f0:	2101      	movne	r1, #1
 80a00f2:	2100      	moveq	r1, #0
 80a00f4:	4b08      	ldr	r3, [pc, #32]	; (80a0118 <_Z17updateButtonStatei+0x2c>)
 80a00f6:	4a09      	ldr	r2, [pc, #36]	; (80a011c <_Z17updateButtonStatei+0x30>)
 80a00f8:	7019      	strb	r1, [r3, #0]
    } else {
        mCurrentButtonState = NOT_PRESSED;
    }
    
    if (mCurrentButtonState == PRESSED && mPreviousButtonState == NOT_PRESSED) {
 80a00fa:	4b09      	ldr	r3, [pc, #36]	; (80a0120 <_Z17updateButtonStatei+0x34>)
 80a00fc:	d109      	bne.n	80a0112 <_Z17updateButtonStatei+0x26>
 80a00fe:	7810      	ldrb	r0, [r2, #0]
 80a0100:	2801      	cmp	r0, #1
 80a0102:	d106      	bne.n	80a0112 <_Z17updateButtonStatei+0x26>
        mJustPressed = true;
 80a0104:	7018      	strb	r0, [r3, #0]
        timesPressed++;
 80a0106:	4807      	ldr	r0, [pc, #28]	; (80a0124 <_Z17updateButtonStatei+0x38>)
 80a0108:	6803      	ldr	r3, [r0, #0]
 80a010a:	3301      	adds	r3, #1
 80a010c:	6003      	str	r3, [r0, #0]
    } else {
        mJustPressed = false;
    }

    mPreviousButtonState = mCurrentButtonState;
 80a010e:	7011      	strb	r1, [r2, #0]
}
 80a0110:	4770      	bx	lr
        mJustPressed = false;
 80a0112:	2000      	movs	r0, #0
 80a0114:	7018      	strb	r0, [r3, #0]
 80a0116:	e7fa      	b.n	80a010e <_Z17updateButtonStatei+0x22>
 80a0118:	20000074 	.word	0x20000074
 80a011c:	20000077 	.word	0x20000077
 80a0120:	20000076 	.word	0x20000076
 80a0124:	2000008c 	.word	0x2000008c

080a0128 <_Z17updateSystemStateb13SYSTEM_STATUS>:

void updateSystemState(bool pButtonPressed, SYSTEM_STATUS pCurrentStatus) {
    if (pButtonPressed) {
 80a0128:	b130      	cbz	r0, 80a0138 <_Z17updateSystemStateb13SYSTEM_STATUS+0x10>
        if (pCurrentStatus + 1 > 1) {
 80a012a:	4b04      	ldr	r3, [pc, #16]	; (80a013c <_Z17updateSystemStateb13SYSTEM_STATUS+0x14>)
 80a012c:	b111      	cbz	r1, 80a0134 <_Z17updateSystemStateb13SYSTEM_STATUS+0xc>
            mCurrentSystemStatus = (SYSTEM_STATUS) 0;
 80a012e:	2200      	movs	r2, #0
 80a0130:	701a      	strb	r2, [r3, #0]
 80a0132:	4770      	bx	lr
        } else {
            mCurrentSystemStatus = (SYSTEM_STATUS) 1;
 80a0134:	2201      	movs	r2, #1
 80a0136:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80a0138:	4770      	bx	lr
 80a013a:	bf00      	nop
 80a013c:	20000075 	.word	0x20000075

080a0140 <_Z12setStatusLEDi>:


// Setters
void setStatusLED(int pColor) {
 80a0140:	4602      	mov	r2, r0
    mSystemStatusLED.setPixelColor(0, pColor);
 80a0142:	2100      	movs	r1, #0
 80a0144:	4801      	ldr	r0, [pc, #4]	; (80a014c <_Z12setStatusLEDi+0xc>)
 80a0146:	f001 b963 	b.w	80a1410 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a014a:	bf00      	nop
 80a014c:	20000078 	.word	0x20000078

080a0150 <loop>:
void loop() {
 80a0150:	b510      	push	{r4, lr}
    updateButtonState(digitalRead(BUTTON_PIN));
 80a0152:	2002      	movs	r0, #2
 80a0154:	f001 ffca 	bl	80a20ec <digitalRead>
 80a0158:	f7ff ffc8 	bl	80a00ec <_Z17updateButtonStatei>
    updateSystemState(mJustPressed, mCurrentSystemStatus);
 80a015c:	4c0c      	ldr	r4, [pc, #48]	; (80a0190 <loop+0x40>)
 80a015e:	4b0d      	ldr	r3, [pc, #52]	; (80a0194 <loop+0x44>)
 80a0160:	7821      	ldrb	r1, [r4, #0]
 80a0162:	7818      	ldrb	r0, [r3, #0]
 80a0164:	f7ff ffe0 	bl	80a0128 <_Z17updateSystemStateb13SYSTEM_STATUS>
    switch (mCurrentSystemStatus) {
 80a0168:	7823      	ldrb	r3, [r4, #0]
 80a016a:	b133      	cbz	r3, 80a017a <loop+0x2a>
 80a016c:	2b01      	cmp	r3, #1
 80a016e:	d009      	beq.n	80a0184 <loop+0x34>
}
 80a0170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mSystemStatusLED.show();
 80a0174:	4808      	ldr	r0, [pc, #32]	; (80a0198 <loop+0x48>)
 80a0176:	f000 b89b 	b.w	80a02b0 <_ZN17Adafruit_NeoPixel4showEv>
            setStatusLED(COLOR_ARMED);
 80a017a:	4b08      	ldr	r3, [pc, #32]	; (80a019c <loop+0x4c>)
 80a017c:	6818      	ldr	r0, [r3, #0]
 80a017e:	f7ff ffdf 	bl	80a0140 <_Z12setStatusLEDi>
            break;
 80a0182:	e7f5      	b.n	80a0170 <loop+0x20>
            setStatusLED(COLOR_DISARMED);
 80a0184:	4b06      	ldr	r3, [pc, #24]	; (80a01a0 <loop+0x50>)
 80a0186:	6818      	ldr	r0, [r3, #0]
 80a0188:	f7ff ffda 	bl	80a0140 <_Z12setStatusLEDi>
            break;
 80a018c:	e7f0      	b.n	80a0170 <loop+0x20>
 80a018e:	bf00      	nop
 80a0190:	20000075 	.word	0x20000075
 80a0194:	20000076 	.word	0x20000076
 80a0198:	20000078 	.word	0x20000078
 80a019c:	2000006c 	.word	0x2000006c
 80a01a0:	20000070 	.word	0x20000070

080a01a4 <_GLOBAL__sub_I_mCurrentButtonState>:
Adafruit_NeoPixel mSystemStatusLED = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a01a4:	2300      	movs	r3, #0
 80a01a6:	b510      	push	{r4, lr}
Adafruit_NeoPixel mSystemStatusLED = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a01a8:	4c0c      	ldr	r4, [pc, #48]	; (80a01dc <_GLOBAL__sub_I_mCurrentButtonState+0x38>)
 80a01aa:	461a      	mov	r2, r3
 80a01ac:	2101      	movs	r1, #1
 80a01ae:	4620      	mov	r0, r4
 80a01b0:	f000 f86d 	bl	80a028e <_ZN17Adafruit_NeoPixelC1Ethh>
 80a01b4:	4a0a      	ldr	r2, [pc, #40]	; (80a01e0 <_GLOBAL__sub_I_mCurrentButtonState+0x3c>)
 80a01b6:	490b      	ldr	r1, [pc, #44]	; (80a01e4 <_GLOBAL__sub_I_mCurrentButtonState+0x40>)
 80a01b8:	4620      	mov	r0, r4
 80a01ba:	f002 f803 	bl	80a21c4 <__aeabi_atexit>
const int COLOR_ARMED = mSystemStatusLED.Color(40, 0, 0);
 80a01be:	2200      	movs	r2, #0
 80a01c0:	2028      	movs	r0, #40	; 0x28
 80a01c2:	4611      	mov	r1, r2
 80a01c4:	f001 f968 	bl	80a1498 <_ZN17Adafruit_NeoPixel5ColorEhhh>
const int COLOR_DISARMED = mSystemStatusLED.Color(0, 40, 0);
 80a01c8:	2200      	movs	r2, #0
const int COLOR_ARMED = mSystemStatusLED.Color(40, 0, 0);
 80a01ca:	4b07      	ldr	r3, [pc, #28]	; (80a01e8 <_GLOBAL__sub_I_mCurrentButtonState+0x44>)
const int COLOR_DISARMED = mSystemStatusLED.Color(0, 40, 0);
 80a01cc:	2128      	movs	r1, #40	; 0x28
const int COLOR_ARMED = mSystemStatusLED.Color(40, 0, 0);
 80a01ce:	6018      	str	r0, [r3, #0]
const int COLOR_DISARMED = mSystemStatusLED.Color(0, 40, 0);
 80a01d0:	4610      	mov	r0, r2
 80a01d2:	f001 f961 	bl	80a1498 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a01d6:	4b05      	ldr	r3, [pc, #20]	; (80a01ec <_GLOBAL__sub_I_mCurrentButtonState+0x48>)
 80a01d8:	6018      	str	r0, [r3, #0]
 80a01da:	bd10      	pop	{r4, pc}
 80a01dc:	20000078 	.word	0x20000078
 80a01e0:	20000068 	.word	0x20000068
 80a01e4:	080a01f1 	.word	0x080a01f1
 80a01e8:	2000006c 	.word	0x2000006c
 80a01ec:	20000070 	.word	0x20000070

080a01f0 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a01f0:	b510      	push	{r4, lr}
 80a01f2:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a01f4:	68c0      	ldr	r0, [r0, #12]
 80a01f6:	b108      	cbz	r0, 80a01fc <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a01f8:	f001 faea 	bl	80a17d0 <free>
  if (begun) pinMode(pin, INPUT);
 80a01fc:	7823      	ldrb	r3, [r4, #0]
 80a01fe:	b11b      	cbz	r3, 80a0208 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0200:	2100      	movs	r1, #0
 80a0202:	79e0      	ldrb	r0, [r4, #7]
 80a0204:	f001 ff48 	bl	80a2098 <pinMode>
}
 80a0208:	4620      	mov	r0, r4
 80a020a:	bd10      	pop	{r4, pc}

080a020c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a020c:	b538      	push	{r3, r4, r5, lr}
 80a020e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0210:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0212:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0214:	b108      	cbz	r0, 80a021a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0216:	f001 fadb 	bl	80a17d0 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a021a:	79a3      	ldrb	r3, [r4, #6]
 80a021c:	2b06      	cmp	r3, #6
 80a021e:	bf0c      	ite	eq
 80a0220:	2004      	moveq	r0, #4
 80a0222:	2003      	movne	r0, #3
 80a0224:	4368      	muls	r0, r5
 80a0226:	b280      	uxth	r0, r0
 80a0228:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a022a:	f001 fac9 	bl	80a17c0 <malloc>
 80a022e:	60e0      	str	r0, [r4, #12]
 80a0230:	b128      	cbz	r0, 80a023e <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0232:	2100      	movs	r1, #0
 80a0234:	88a2      	ldrh	r2, [r4, #4]
 80a0236:	f001 ffeb 	bl	80a2210 <memset>
    numLEDs = n;
 80a023a:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 80a023c:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 80a023e:	80a0      	strh	r0, [r4, #4]
 80a0240:	8060      	strh	r0, [r4, #2]
}
 80a0242:	e7fb      	b.n	80a023c <_ZN17Adafruit_NeoPixel12updateLengthEt+0x30>

080a0244 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
 80a0244:	b510      	push	{r4, lr}
 80a0246:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a0248:	2101      	movs	r1, #1
 80a024a:	79c0      	ldrb	r0, [r0, #7]
 80a024c:	f001 ff24 	bl	80a2098 <pinMode>
  digitalWrite(pin, LOW);
 80a0250:	2100      	movs	r1, #0
 80a0252:	79e0      	ldrb	r0, [r4, #7]
 80a0254:	f001 ff31 	bl	80a20ba <digitalWrite>
  begun = true;
 80a0258:	2301      	movs	r3, #1
 80a025a:	7023      	strb	r3, [r4, #0]
}
 80a025c:	bd10      	pop	{r4, pc}

080a025e <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a025e:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0260:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0262:	4605      	mov	r5, r0
 80a0264:	460c      	mov	r4, r1
    if (begun) {
 80a0266:	b11b      	cbz	r3, 80a0270 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a0268:	2100      	movs	r1, #0
 80a026a:	79c0      	ldrb	r0, [r0, #7]
 80a026c:	f001 ff14 	bl	80a2098 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0270:	782b      	ldrb	r3, [r5, #0]
    pin = p;
 80a0272:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0274:	b153      	cbz	r3, 80a028c <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a0276:	b2a4      	uxth	r4, r4
 80a0278:	4620      	mov	r0, r4
 80a027a:	2101      	movs	r1, #1
 80a027c:	f001 ff0c 	bl	80a2098 <pinMode>
        digitalWrite(p, LOW);
 80a0280:	4620      	mov	r0, r4
    }
}
 80a0282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(p, LOW);
 80a0286:	2100      	movs	r1, #0
 80a0288:	f001 bf17 	b.w	80a20ba <digitalWrite>
}
 80a028c:	bd38      	pop	{r3, r4, r5, pc}

080a028e <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a028e:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0290:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0292:	4604      	mov	r4, r0
 80a0294:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0296:	7183      	strb	r3, [r0, #6]
 80a0298:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80a029c:	7005      	strb	r5, [r0, #0]
 80a029e:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 80a02a0:	f7ff ffb4 	bl	80a020c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a02a4:	4620      	mov	r0, r4
 80a02a6:	4631      	mov	r1, r6
 80a02a8:	f7ff ffd9 	bl	80a025e <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a02ac:	4620      	mov	r0, r4
 80a02ae:	bd70      	pop	{r4, r5, r6, pc}

080a02b0 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a02b0:	68c3      	ldr	r3, [r0, #12]
 80a02b2:	2b00      	cmp	r3, #0
 80a02b4:	f000 8441 	beq.w	80a0b3a <_ZN17Adafruit_NeoPixel4showEv+0x88a>
void Adafruit_NeoPixel::show(void) {
 80a02b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a02ba:	7983      	ldrb	r3, [r0, #6]
 80a02bc:	4604      	mov	r4, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a02be:	3b02      	subs	r3, #2
 80a02c0:	b2db      	uxtb	r3, r3
 80a02c2:	2b04      	cmp	r3, #4
 80a02c4:	bf8c      	ite	hi
 80a02c6:	2532      	movhi	r5, #50	; 0x32
 80a02c8:	4a28      	ldrls	r2, [pc, #160]	; (80a036c <_ZN17Adafruit_NeoPixel4showEv+0xbc>)
void Adafruit_NeoPixel::show(void) {
 80a02ca:	b087      	sub	sp, #28
 80a02cc:	bf98      	it	ls
 80a02ce:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a02d2:	f001 f907 	bl	80a14e4 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a02d6:	6923      	ldr	r3, [r4, #16]
 80a02d8:	1ac0      	subs	r0, r0, r3
 80a02da:	42a8      	cmp	r0, r5
 80a02dc:	d3f9      	bcc.n	80a02d2 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a02de:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a02e0:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a02e2:	79a5      	ldrb	r5, [r4, #6]
  volatile uint16_t i = numBytes; // Output loop counter
 80a02e4:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a02e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a02ec:	2d02      	cmp	r5, #2
   *ptr = pixels,   // Pointer to next byte
 80a02ee:	68e1      	ldr	r1, [r4, #12]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a02f0:	b29b      	uxth	r3, r3
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a02f2:	f000 826e 	beq.w	80a07d2 <_ZN17Adafruit_NeoPixel4showEv+0x522>
 80a02f6:	2d07      	cmp	r5, #7
 80a02f8:	f000 826b 	beq.w	80a07d2 <_ZN17Adafruit_NeoPixel4showEv+0x522>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a02fc:	2d06      	cmp	r5, #6
 80a02fe:	f000 841d 	beq.w	80a0b3c <_ZN17Adafruit_NeoPixel4showEv+0x88c>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0302:	2d05      	cmp	r5, #5
 80a0304:	f000 83a1 	beq.w	80a0a4a <_ZN17Adafruit_NeoPixel4showEv+0x79a>
 80a0308:	2d08      	cmp	r5, #8
 80a030a:	f000 839e 	beq.w	80a0a4a <_ZN17Adafruit_NeoPixel4showEv+0x79a>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a030e:	2d00      	cmp	r5, #0
 80a0310:	f040 854f 	bne.w	80a0db2 <_ZN17Adafruit_NeoPixel4showEv+0xb02>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0314:	2b00      	cmp	r3, #0
 80a0316:	f000 8392 	beq.w	80a0a3e <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a031a:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a031e:	4a14      	ldr	r2, [pc, #80]	; (80a0370 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
 80a0320:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0322:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0326:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a0328:	3b03      	subs	r3, #3
 80a032a:	b29b      	uxth	r3, r3
 80a032c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0330:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0334:	b2db      	uxtb	r3, r3
 80a0336:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a033a:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a033e:	b2db      	uxtb	r3, r3
 80a0340:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0344:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a0348:	b2db      	uxtb	r3, r3
 80a034a:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a034e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0352:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0356:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a035a:	021b      	lsls	r3, r3, #8
 80a035c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0360:	4303      	orrs	r3, r0
 80a0362:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0364:	f88d 5005 	strb.w	r5, [sp, #5]
 80a0368:	e11b      	b.n	80a05a2 <_ZN17Adafruit_NeoPixel4showEv+0x2f2>
 80a036a:	bf00      	nop
 80a036c:	080a228c 	.word	0x080a228c
 80a0370:	20000090 	.word	0x20000090
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0374:	4600      	mov	r0, r0
 80a0376:	bf00      	nop
 80a0378:	bf00      	nop
 80a037a:	bf00      	nop
 80a037c:	bf00      	nop
 80a037e:	bf00      	nop
 80a0380:	bf00      	nop
 80a0382:	bf00      	nop
 80a0384:	bf00      	nop
 80a0386:	bf00      	nop
 80a0388:	bf00      	nop
 80a038a:	bf00      	nop
 80a038c:	bf00      	nop
 80a038e:	bf00      	nop
 80a0390:	bf00      	nop
 80a0392:	bf00      	nop
 80a0394:	bf00      	nop
 80a0396:	bf00      	nop
 80a0398:	bf00      	nop
 80a039a:	bf00      	nop
 80a039c:	bf00      	nop
 80a039e:	bf00      	nop
 80a03a0:	bf00      	nop
 80a03a2:	bf00      	nop
 80a03a4:	bf00      	nop
 80a03a6:	bf00      	nop
 80a03a8:	bf00      	nop
 80a03aa:	bf00      	nop
 80a03ac:	bf00      	nop
 80a03ae:	bf00      	nop
 80a03b0:	bf00      	nop
 80a03b2:	bf00      	nop
 80a03b4:	bf00      	nop
 80a03b6:	bf00      	nop
 80a03b8:	bf00      	nop
 80a03ba:	bf00      	nop
 80a03bc:	bf00      	nop
 80a03be:	bf00      	nop
 80a03c0:	bf00      	nop
 80a03c2:	bf00      	nop
 80a03c4:	bf00      	nop
 80a03c6:	bf00      	nop
 80a03c8:	bf00      	nop
 80a03ca:	bf00      	nop
 80a03cc:	bf00      	nop
 80a03ce:	bf00      	nop
 80a03d0:	bf00      	nop
 80a03d2:	bf00      	nop
 80a03d4:	bf00      	nop
 80a03d6:	bf00      	nop
 80a03d8:	bf00      	nop
 80a03da:	bf00      	nop
 80a03dc:	bf00      	nop
 80a03de:	bf00      	nop
 80a03e0:	bf00      	nop
 80a03e2:	bf00      	nop
 80a03e4:	bf00      	nop
 80a03e6:	bf00      	nop
 80a03e8:	bf00      	nop
 80a03ea:	bf00      	nop
 80a03ec:	bf00      	nop
 80a03ee:	bf00      	nop
 80a03f0:	bf00      	nop
 80a03f2:	bf00      	nop
 80a03f4:	bf00      	nop
 80a03f6:	bf00      	nop
 80a03f8:	bf00      	nop
 80a03fa:	bf00      	nop
 80a03fc:	bf00      	nop
 80a03fe:	bf00      	nop
 80a0400:	bf00      	nop
 80a0402:	bf00      	nop
 80a0404:	bf00      	nop
 80a0406:	bf00      	nop
 80a0408:	bf00      	nop
 80a040a:	bf00      	nop
 80a040c:	bf00      	nop
 80a040e:	bf00      	nop
 80a0410:	bf00      	nop
 80a0412:	bf00      	nop
 80a0414:	bf00      	nop
 80a0416:	bf00      	nop
 80a0418:	bf00      	nop
 80a041a:	bf00      	nop
 80a041c:	bf00      	nop
 80a041e:	bf00      	nop
 80a0420:	bf00      	nop
 80a0422:	bf00      	nop
 80a0424:	bf00      	nop
 80a0426:	bf00      	nop
 80a0428:	bf00      	nop
 80a042a:	bf00      	nop
 80a042c:	bf00      	nop
 80a042e:	bf00      	nop
 80a0430:	bf00      	nop
 80a0432:	bf00      	nop
 80a0434:	bf00      	nop
 80a0436:	bf00      	nop
 80a0438:	bf00      	nop
 80a043a:	bf00      	nop
 80a043c:	bf00      	nop
 80a043e:	bf00      	nop
 80a0440:	bf00      	nop
 80a0442:	bf00      	nop
 80a0444:	bf00      	nop
 80a0446:	bf00      	nop
 80a0448:	bf00      	nop
 80a044a:	bf00      	nop
 80a044c:	bf00      	nop
 80a044e:	bf00      	nop
 80a0450:	bf00      	nop
 80a0452:	bf00      	nop
 80a0454:	bf00      	nop
 80a0456:	bf00      	nop
 80a0458:	bf00      	nop
 80a045a:	bf00      	nop
 80a045c:	bf00      	nop
 80a045e:	bf00      	nop
 80a0460:	bf00      	nop
 80a0462:	bf00      	nop
 80a0464:	bf00      	nop
 80a0466:	bf00      	nop
 80a0468:	bf00      	nop
 80a046a:	bf00      	nop
 80a046c:	bf00      	nop
 80a046e:	bf00      	nop
 80a0470:	bf00      	nop
 80a0472:	bf00      	nop
 80a0474:	bf00      	nop
 80a0476:	bf00      	nop
 80a0478:	bf00      	nop
 80a047a:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a047c:	79e3      	ldrb	r3, [r4, #7]
 80a047e:	6810      	ldr	r0, [r2, #0]
 80a0480:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0484:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0488:	88bf      	ldrh	r7, [r7, #4]
 80a048a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a048e:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0490:	4600      	mov	r0, r0
 80a0492:	bf00      	nop
 80a0494:	bf00      	nop
 80a0496:	bf00      	nop
 80a0498:	bf00      	nop
 80a049a:	bf00      	nop
 80a049c:	bf00      	nop
 80a049e:	bf00      	nop
 80a04a0:	bf00      	nop
 80a04a2:	bf00      	nop
 80a04a4:	bf00      	nop
 80a04a6:	bf00      	nop
 80a04a8:	bf00      	nop
 80a04aa:	bf00      	nop
 80a04ac:	bf00      	nop
 80a04ae:	bf00      	nop
 80a04b0:	bf00      	nop
 80a04b2:	bf00      	nop
 80a04b4:	bf00      	nop
 80a04b6:	bf00      	nop
 80a04b8:	bf00      	nop
 80a04ba:	bf00      	nop
 80a04bc:	bf00      	nop
 80a04be:	bf00      	nop
 80a04c0:	bf00      	nop
 80a04c2:	bf00      	nop
 80a04c4:	bf00      	nop
 80a04c6:	bf00      	nop
 80a04c8:	bf00      	nop
 80a04ca:	bf00      	nop
 80a04cc:	bf00      	nop
 80a04ce:	bf00      	nop
 80a04d0:	bf00      	nop
 80a04d2:	bf00      	nop
 80a04d4:	bf00      	nop
 80a04d6:	bf00      	nop
 80a04d8:	bf00      	nop
 80a04da:	bf00      	nop
 80a04dc:	bf00      	nop
 80a04de:	bf00      	nop
 80a04e0:	bf00      	nop
 80a04e2:	bf00      	nop
 80a04e4:	bf00      	nop
 80a04e6:	bf00      	nop
 80a04e8:	bf00      	nop
 80a04ea:	bf00      	nop
 80a04ec:	bf00      	nop
 80a04ee:	bf00      	nop
 80a04f0:	bf00      	nop
 80a04f2:	bf00      	nop
 80a04f4:	bf00      	nop
 80a04f6:	bf00      	nop
 80a04f8:	bf00      	nop
 80a04fa:	bf00      	nop
 80a04fc:	bf00      	nop
 80a04fe:	bf00      	nop
 80a0500:	bf00      	nop
 80a0502:	bf00      	nop
 80a0504:	bf00      	nop
 80a0506:	bf00      	nop
 80a0508:	bf00      	nop
 80a050a:	bf00      	nop
 80a050c:	bf00      	nop
 80a050e:	bf00      	nop
 80a0510:	bf00      	nop
 80a0512:	bf00      	nop
 80a0514:	bf00      	nop
 80a0516:	bf00      	nop
 80a0518:	bf00      	nop
 80a051a:	bf00      	nop
 80a051c:	bf00      	nop
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
 80a0528:	bf00      	nop
 80a052a:	bf00      	nop
 80a052c:	bf00      	nop
 80a052e:	bf00      	nop
 80a0530:	bf00      	nop
 80a0532:	bf00      	nop
 80a0534:	bf00      	nop
 80a0536:	bf00      	nop
 80a0538:	bf00      	nop
 80a053a:	bf00      	nop
 80a053c:	bf00      	nop
 80a053e:	bf00      	nop
 80a0540:	bf00      	nop
 80a0542:	bf00      	nop
 80a0544:	bf00      	nop
 80a0546:	bf00      	nop
 80a0548:	bf00      	nop
 80a054a:	bf00      	nop
 80a054c:	bf00      	nop
 80a054e:	bf00      	nop
 80a0550:	bf00      	nop
 80a0552:	bf00      	nop
 80a0554:	bf00      	nop
 80a0556:	bf00      	nop
 80a0558:	bf00      	nop
 80a055a:	bf00      	nop
 80a055c:	bf00      	nop
 80a055e:	bf00      	nop
 80a0560:	bf00      	nop
 80a0562:	bf00      	nop
 80a0564:	bf00      	nop
 80a0566:	bf00      	nop
 80a0568:	bf00      	nop
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
 80a056e:	bf00      	nop
 80a0570:	bf00      	nop
 80a0572:	bf00      	nop
 80a0574:	bf00      	nop
 80a0576:	bf00      	nop
 80a0578:	bf00      	nop
 80a057a:	bf00      	nop
 80a057c:	bf00      	nop
 80a057e:	bf00      	nop
 80a0580:	bf00      	nop
 80a0582:	bf00      	nop
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a058a:	9b04      	ldr	r3, [sp, #16]
 80a058c:	085b      	lsrs	r3, r3, #1
 80a058e:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0590:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0594:	3301      	adds	r3, #1
 80a0596:	b2db      	uxtb	r3, r3
 80a0598:	2b17      	cmp	r3, #23
 80a059a:	f88d 3005 	strb.w	r3, [sp, #5]
 80a059e:	f200 8727 	bhi.w	80a13f0 <_ZN17Adafruit_NeoPixel4showEv+0x1140>
        pinSet(pin, HIGH); // HIGH
 80a05a2:	79e3      	ldrb	r3, [r4, #7]
 80a05a4:	6810      	ldr	r0, [r2, #0]
 80a05a6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a05aa:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a05ae:	88bf      	ldrh	r7, [r7, #4]
 80a05b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a05b4:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a05b6:	9803      	ldr	r0, [sp, #12]
 80a05b8:	9b04      	ldr	r3, [sp, #16]
 80a05ba:	4218      	tst	r0, r3
 80a05bc:	f47f aeda 	bne.w	80a0374 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
            ::: "r0", "cc", "memory");
 80a05c0:	4600      	mov	r0, r0
 80a05c2:	bf00      	nop
 80a05c4:	bf00      	nop
 80a05c6:	bf00      	nop
 80a05c8:	bf00      	nop
 80a05ca:	bf00      	nop
 80a05cc:	bf00      	nop
 80a05ce:	bf00      	nop
 80a05d0:	bf00      	nop
 80a05d2:	bf00      	nop
 80a05d4:	bf00      	nop
 80a05d6:	bf00      	nop
 80a05d8:	bf00      	nop
 80a05da:	bf00      	nop
 80a05dc:	bf00      	nop
 80a05de:	bf00      	nop
 80a05e0:	bf00      	nop
 80a05e2:	bf00      	nop
 80a05e4:	bf00      	nop
 80a05e6:	bf00      	nop
 80a05e8:	bf00      	nop
 80a05ea:	bf00      	nop
 80a05ec:	bf00      	nop
 80a05ee:	bf00      	nop
 80a05f0:	bf00      	nop
 80a05f2:	bf00      	nop
 80a05f4:	bf00      	nop
 80a05f6:	bf00      	nop
 80a05f8:	bf00      	nop
 80a05fa:	bf00      	nop
 80a05fc:	bf00      	nop
 80a05fe:	bf00      	nop
 80a0600:	bf00      	nop
 80a0602:	bf00      	nop
 80a0604:	bf00      	nop
 80a0606:	bf00      	nop
 80a0608:	bf00      	nop
 80a060a:	bf00      	nop
 80a060c:	bf00      	nop
 80a060e:	bf00      	nop
 80a0610:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0612:	79e3      	ldrb	r3, [r4, #7]
 80a0614:	6810      	ldr	r0, [r2, #0]
 80a0616:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a061a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a061e:	88bf      	ldrh	r7, [r7, #4]
 80a0620:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0624:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a0626:	4600      	mov	r0, r0
 80a0628:	bf00      	nop
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
 80a0652:	bf00      	nop
 80a0654:	bf00      	nop
 80a0656:	bf00      	nop
 80a0658:	bf00      	nop
 80a065a:	bf00      	nop
 80a065c:	bf00      	nop
 80a065e:	bf00      	nop
 80a0660:	bf00      	nop
 80a0662:	bf00      	nop
 80a0664:	bf00      	nop
 80a0666:	bf00      	nop
 80a0668:	bf00      	nop
 80a066a:	bf00      	nop
 80a066c:	bf00      	nop
 80a066e:	bf00      	nop
 80a0670:	bf00      	nop
 80a0672:	bf00      	nop
 80a0674:	bf00      	nop
 80a0676:	bf00      	nop
 80a0678:	bf00      	nop
 80a067a:	bf00      	nop
 80a067c:	bf00      	nop
 80a067e:	bf00      	nop
 80a0680:	bf00      	nop
 80a0682:	bf00      	nop
 80a0684:	bf00      	nop
 80a0686:	bf00      	nop
 80a0688:	bf00      	nop
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
 80a06da:	bf00      	nop
 80a06dc:	bf00      	nop
 80a06de:	bf00      	nop
 80a06e0:	bf00      	nop
 80a06e2:	bf00      	nop
 80a06e4:	bf00      	nop
 80a06e6:	bf00      	nop
 80a06e8:	bf00      	nop
 80a06ea:	bf00      	nop
 80a06ec:	bf00      	nop
 80a06ee:	bf00      	nop
 80a06f0:	bf00      	nop
 80a06f2:	bf00      	nop
 80a06f4:	bf00      	nop
 80a06f6:	bf00      	nop
 80a06f8:	bf00      	nop
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	bf00      	nop
 80a072e:	bf00      	nop
 80a0730:	bf00      	nop
 80a0732:	bf00      	nop
 80a0734:	bf00      	nop
 80a0736:	bf00      	nop
 80a0738:	bf00      	nop
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
 80a074a:	bf00      	nop
 80a074c:	bf00      	nop
 80a074e:	bf00      	nop
 80a0750:	bf00      	nop
 80a0752:	bf00      	nop
 80a0754:	bf00      	nop
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
 80a0774:	bf00      	nop
 80a0776:	bf00      	nop
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	e6db      	b.n	80a058a <_ZN17Adafruit_NeoPixel4showEv+0x2da>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a07d2:	2b00      	cmp	r3, #0
 80a07d4:	f000 8133 	beq.w	80a0a3e <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a07d8:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a07dc:	2600      	movs	r6, #0
 80a07de:	4a13      	ldr	r2, [pc, #76]	; (80a082c <_ZN17Adafruit_NeoPixel4showEv+0x57c>)
      mask = 0x800000; // reset the mask
 80a07e0:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a07e2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a07e6:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a07e8:	3b03      	subs	r3, #3
 80a07ea:	b29b      	uxth	r3, r3
 80a07ec:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a07f0:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a07f4:	b2db      	uxtb	r3, r3
 80a07f6:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a07fa:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a07fe:	b2db      	uxtb	r3, r3
 80a0800:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0804:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a0808:	b2db      	uxtb	r3, r3
 80a080a:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a080e:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0812:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0816:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a081a:	021b      	lsls	r3, r3, #8
 80a081c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0820:	4303      	orrs	r3, r0
 80a0822:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0824:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0828:	e080      	b.n	80a092c <_ZN17Adafruit_NeoPixel4showEv+0x67c>
 80a082a:	bf00      	nop
 80a082c:	20000090 	.word	0x20000090
            ::: "r0", "cc", "memory");
 80a0830:	4600      	mov	r0, r0
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
 80a0870:	bf00      	nop
 80a0872:	bf00      	nop
 80a0874:	bf00      	nop
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	bf00      	nop
 80a087e:	bf00      	nop
 80a0880:	bf00      	nop
 80a0882:	bf00      	nop
 80a0884:	bf00      	nop
 80a0886:	bf00      	nop
 80a0888:	bf00      	nop
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
 80a0896:	bf00      	nop
 80a0898:	bf00      	nop
 80a089a:	bf00      	nop
 80a089c:	bf00      	nop
 80a089e:	bf00      	nop
 80a08a0:	bf00      	nop
 80a08a2:	bf00      	nop
 80a08a4:	bf00      	nop
 80a08a6:	bf00      	nop
 80a08a8:	bf00      	nop
 80a08aa:	bf00      	nop
 80a08ac:	bf00      	nop
 80a08ae:	bf00      	nop
 80a08b0:	bf00      	nop
 80a08b2:	bf00      	nop
 80a08b4:	bf00      	nop
 80a08b6:	bf00      	nop
 80a08b8:	bf00      	nop
 80a08ba:	bf00      	nop
 80a08bc:	bf00      	nop
 80a08be:	bf00      	nop
 80a08c0:	bf00      	nop
 80a08c2:	bf00      	nop
 80a08c4:	bf00      	nop
 80a08c6:	bf00      	nop
 80a08c8:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a08ca:	79e3      	ldrb	r3, [r4, #7]
 80a08cc:	6810      	ldr	r0, [r2, #0]
 80a08ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a08d2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a08d6:	88bf      	ldrh	r7, [r7, #4]
 80a08d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a08dc:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a08de:	4600      	mov	r0, r0
 80a08e0:	bf00      	nop
 80a08e2:	bf00      	nop
 80a08e4:	bf00      	nop
 80a08e6:	bf00      	nop
 80a08e8:	bf00      	nop
 80a08ea:	bf00      	nop
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
        mask >>= 1;
 80a0914:	9b04      	ldr	r3, [sp, #16]
 80a0916:	085b      	lsrs	r3, r3, #1
 80a0918:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a091a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a091e:	3301      	adds	r3, #1
 80a0920:	b2db      	uxtb	r3, r3
 80a0922:	2b17      	cmp	r3, #23
 80a0924:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0928:	f200 8083 	bhi.w	80a0a32 <_ZN17Adafruit_NeoPixel4showEv+0x782>
        pinSet(pin, HIGH); // HIGH
 80a092c:	79e3      	ldrb	r3, [r4, #7]
 80a092e:	6810      	ldr	r0, [r2, #0]
 80a0930:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0934:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0938:	88bf      	ldrh	r7, [r7, #4]
 80a093a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a093e:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0940:	9803      	ldr	r0, [sp, #12]
 80a0942:	9b04      	ldr	r3, [sp, #16]
 80a0944:	4218      	tst	r0, r3
 80a0946:	f47f af73 	bne.w	80a0830 <_ZN17Adafruit_NeoPixel4showEv+0x580>
            ::: "r0", "cc", "memory");
 80a094a:	4600      	mov	r0, r0
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
 80a0956:	bf00      	nop
 80a0958:	bf00      	nop
 80a095a:	bf00      	nop
 80a095c:	bf00      	nop
 80a095e:	bf00      	nop
 80a0960:	bf00      	nop
 80a0962:	bf00      	nop
 80a0964:	bf00      	nop
 80a0966:	bf00      	nop
 80a0968:	bf00      	nop
 80a096a:	bf00      	nop
 80a096c:	bf00      	nop
 80a096e:	bf00      	nop
 80a0970:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0972:	79e3      	ldrb	r3, [r4, #7]
 80a0974:	6810      	ldr	r0, [r2, #0]
 80a0976:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a097a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a097e:	88bf      	ldrh	r7, [r7, #4]
 80a0980:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0984:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a0986:	4600      	mov	r0, r0
 80a0988:	bf00      	nop
 80a098a:	bf00      	nop
 80a098c:	bf00      	nop
 80a098e:	bf00      	nop
 80a0990:	bf00      	nop
 80a0992:	bf00      	nop
 80a0994:	bf00      	nop
 80a0996:	bf00      	nop
 80a0998:	bf00      	nop
 80a099a:	bf00      	nop
 80a099c:	bf00      	nop
 80a099e:	bf00      	nop
 80a09a0:	bf00      	nop
 80a09a2:	bf00      	nop
 80a09a4:	bf00      	nop
 80a09a6:	bf00      	nop
 80a09a8:	bf00      	nop
 80a09aa:	bf00      	nop
 80a09ac:	bf00      	nop
 80a09ae:	bf00      	nop
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	e770      	b.n	80a0914 <_ZN17Adafruit_NeoPixel4showEv+0x664>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0a32:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0a36:	b29b      	uxth	r3, r3
 80a0a38:	2b00      	cmp	r3, #0
 80a0a3a:	f47f aed1 	bne.w	80a07e0 <_ZN17Adafruit_NeoPixel4showEv+0x530>
  __ASM volatile ("cpsie i");
 80a0a3e:	b662      	cpsie	i
 80a0a40:	f000 fd50 	bl	80a14e4 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0a44:	6120      	str	r0, [r4, #16]
}
 80a0a46:	b007      	add	sp, #28
 80a0a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0a4a:	2b00      	cmp	r3, #0
 80a0a4c:	d0f7      	beq.n	80a0a3e <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0a4e:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0a52:	2600      	movs	r6, #0
        pinSet(pin, HIGH); // HIGH
 80a0a54:	4b54      	ldr	r3, [pc, #336]	; (80a0ba8 <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
 80a0a56:	6818      	ldr	r0, [r3, #0]
        cyc = DWT->CYCCNT;
 80a0a58:	4b54      	ldr	r3, [pc, #336]	; (80a0bac <_ZN17Adafruit_NeoPixel4showEv+0x8fc>)
      mask = 0x800000; // reset the mask
 80a0a5a:	f8cd e010 	str.w	lr, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0a5e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a0a62:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a0a64:	3a03      	subs	r2, #3
 80a0a66:	b292      	uxth	r2, r2
 80a0a68:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0a6c:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80a0a70:	b2d2      	uxtb	r2, r2
 80a0a72:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0a76:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 80a0a7a:	b2d2      	uxtb	r2, r2
 80a0a7c:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0a80:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80a0a84:	b2d2      	uxtb	r2, r2
 80a0a86:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0a8a:	f89d c006 	ldrb.w	ip, [sp, #6]
 80a0a8e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a0a92:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0a96:	0212      	lsls	r2, r2, #8
 80a0a98:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80a0a9c:	433a      	orrs	r2, r7
 80a0a9e:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0aa0:	f88d 6005 	strb.w	r6, [sp, #5]
        pinSet(pin, HIGH); // HIGH
 80a0aa4:	79e2      	ldrb	r2, [r4, #7]
        cyc = DWT->CYCCNT;
 80a0aa6:	685d      	ldr	r5, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0aa8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0aac:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a0ab0:	88bf      	ldrh	r7, [r7, #4]
 80a0ab2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a0ab6:	9505      	str	r5, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0ab8:	8317      	strh	r7, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0aba:	9f03      	ldr	r7, [sp, #12]
 80a0abc:	9a04      	ldr	r2, [sp, #16]
 80a0abe:	4217      	tst	r7, r2
 80a0ac0:	d025      	beq.n	80a0b0e <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0ac2:	685a      	ldr	r2, [r3, #4]
 80a0ac4:	9f05      	ldr	r7, [sp, #20]
 80a0ac6:	1bd2      	subs	r2, r2, r7
 80a0ac8:	2a4f      	cmp	r2, #79	; 0x4f
 80a0aca:	d9fa      	bls.n	80a0ac2 <_ZN17Adafruit_NeoPixel4showEv+0x812>
          pinSet(pin, LOW);
 80a0acc:	79e2      	ldrb	r2, [r4, #7]
 80a0ace:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0ad2:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a0ad6:	88bf      	ldrh	r7, [r7, #4]
 80a0ad8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a0adc:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0ade:	685a      	ldr	r2, [r3, #4]
 80a0ae0:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0ae2:	685a      	ldr	r2, [r3, #4]
 80a0ae4:	9f05      	ldr	r7, [sp, #20]
 80a0ae6:	1bd2      	subs	r2, r2, r7
 80a0ae8:	2a07      	cmp	r2, #7
 80a0aea:	d9fa      	bls.n	80a0ae2 <_ZN17Adafruit_NeoPixel4showEv+0x832>
        mask >>= 1;
 80a0aec:	9a04      	ldr	r2, [sp, #16]
 80a0aee:	0852      	lsrs	r2, r2, #1
 80a0af0:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0af2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0af6:	3201      	adds	r2, #1
 80a0af8:	b2d2      	uxtb	r2, r2
 80a0afa:	2a17      	cmp	r2, #23
 80a0afc:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0b00:	d9d0      	bls.n	80a0aa4 <_ZN17Adafruit_NeoPixel4showEv+0x7f4>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b02:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0b06:	b292      	uxth	r2, r2
 80a0b08:	2a00      	cmp	r2, #0
 80a0b0a:	d1a6      	bne.n	80a0a5a <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0b0c:	e797      	b.n	80a0a3e <_ZN17Adafruit_NeoPixel4showEv+0x78e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0b0e:	685a      	ldr	r2, [r3, #4]
 80a0b10:	9f05      	ldr	r7, [sp, #20]
 80a0b12:	1bd2      	subs	r2, r2, r7
 80a0b14:	2a18      	cmp	r2, #24
 80a0b16:	d9fa      	bls.n	80a0b0e <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          pinSet(pin, LOW);
 80a0b18:	79e2      	ldrb	r2, [r4, #7]
 80a0b1a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0b1e:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a0b22:	88bf      	ldrh	r7, [r7, #4]
 80a0b24:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a0b28:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0b2a:	685a      	ldr	r2, [r3, #4]
 80a0b2c:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0b2e:	685a      	ldr	r2, [r3, #4]
 80a0b30:	9f05      	ldr	r7, [sp, #20]
 80a0b32:	1bd2      	subs	r2, r2, r7
 80a0b34:	2a45      	cmp	r2, #69	; 0x45
 80a0b36:	d9fa      	bls.n	80a0b2e <_ZN17Adafruit_NeoPixel4showEv+0x87e>
 80a0b38:	e7d8      	b.n	80a0aec <_ZN17Adafruit_NeoPixel4showEv+0x83c>
 80a0b3a:	4770      	bx	lr
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0b3c:	2b00      	cmp	r3, #0
 80a0b3e:	f43f af7e 	beq.w	80a0a3e <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x80000000; // reset the mask
 80a0b42:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      j = 0;        // reset the 32-bit counter
 80a0b46:	2600      	movs	r6, #0
 80a0b48:	4a17      	ldr	r2, [pc, #92]	; (80a0ba8 <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
      mask = 0x80000000; // reset the mask
 80a0b4a:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0b4c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      w = *ptr++;   // Next white byte value
 80a0b50:	3104      	adds	r1, #4
      i = i-4;      // decrement bytes remaining
 80a0b52:	3b04      	subs	r3, #4
 80a0b54:	b29b      	uxth	r3, r3
 80a0b56:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0b5a:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80a0b5e:	b2db      	uxtb	r3, r3
 80a0b60:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0b64:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0b68:	b2db      	uxtb	r3, r3
 80a0b6a:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0b6e:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0b72:	b2db      	uxtb	r3, r3
 80a0b74:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0b78:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a0b7c:	b2db      	uxtb	r3, r3
 80a0b7e:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0b82:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a0b86:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0b8a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0b8e:	041b      	lsls	r3, r3, #16
 80a0b90:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a0b94:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80a0b98:	433b      	orrs	r3, r7
 80a0b9a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a0b9e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0ba0:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0ba4:	e07f      	b.n	80a0ca6 <_ZN17Adafruit_NeoPixel4showEv+0x9f6>
 80a0ba6:	bf00      	nop
 80a0ba8:	20000090 	.word	0x20000090
 80a0bac:	e0001000 	.word	0xe0001000
            ::: "r0", "cc", "memory");
 80a0bb0:	4600      	mov	r0, r0
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	bf00      	nop
 80a0bc6:	bf00      	nop
 80a0bc8:	bf00      	nop
 80a0bca:	bf00      	nop
 80a0bcc:	bf00      	nop
 80a0bce:	bf00      	nop
 80a0bd0:	bf00      	nop
 80a0bd2:	bf00      	nop
 80a0bd4:	bf00      	nop
 80a0bd6:	bf00      	nop
 80a0bd8:	bf00      	nop
 80a0bda:	bf00      	nop
 80a0bdc:	bf00      	nop
 80a0bde:	bf00      	nop
 80a0be0:	bf00      	nop
 80a0be2:	bf00      	nop
 80a0be4:	bf00      	nop
 80a0be6:	bf00      	nop
 80a0be8:	bf00      	nop
 80a0bea:	bf00      	nop
 80a0bec:	bf00      	nop
 80a0bee:	bf00      	nop
 80a0bf0:	bf00      	nop
 80a0bf2:	bf00      	nop
 80a0bf4:	bf00      	nop
 80a0bf6:	bf00      	nop
 80a0bf8:	bf00      	nop
 80a0bfa:	bf00      	nop
 80a0bfc:	bf00      	nop
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
 80a0c0c:	bf00      	nop
 80a0c0e:	bf00      	nop
 80a0c10:	bf00      	nop
 80a0c12:	bf00      	nop
 80a0c14:	bf00      	nop
 80a0c16:	bf00      	nop
 80a0c18:	bf00      	nop
 80a0c1a:	bf00      	nop
 80a0c1c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0c1e:	79e3      	ldrb	r3, [r4, #7]
 80a0c20:	6810      	ldr	r0, [r2, #0]
 80a0c22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c26:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c2a:	88bf      	ldrh	r7, [r7, #4]
 80a0c2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c30:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a0c32:	4600      	mov	r0, r0
 80a0c34:	bf00      	nop
 80a0c36:	bf00      	nop
 80a0c38:	bf00      	nop
 80a0c3a:	bf00      	nop
 80a0c3c:	bf00      	nop
 80a0c3e:	bf00      	nop
 80a0c40:	bf00      	nop
 80a0c42:	bf00      	nop
 80a0c44:	bf00      	nop
 80a0c46:	bf00      	nop
 80a0c48:	bf00      	nop
 80a0c4a:	bf00      	nop
 80a0c4c:	bf00      	nop
 80a0c4e:	bf00      	nop
 80a0c50:	bf00      	nop
 80a0c52:	bf00      	nop
 80a0c54:	bf00      	nop
 80a0c56:	bf00      	nop
 80a0c58:	bf00      	nop
 80a0c5a:	bf00      	nop
 80a0c5c:	bf00      	nop
 80a0c5e:	bf00      	nop
 80a0c60:	bf00      	nop
 80a0c62:	bf00      	nop
 80a0c64:	bf00      	nop
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
        mask >>= 1;
 80a0c90:	9b04      	ldr	r3, [sp, #16]
 80a0c92:	085b      	lsrs	r3, r3, #1
 80a0c94:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0c96:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0c9a:	3301      	adds	r3, #1
 80a0c9c:	b2db      	uxtb	r3, r3
 80a0c9e:	2b1f      	cmp	r3, #31
 80a0ca0:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0ca4:	d87e      	bhi.n	80a0da4 <_ZN17Adafruit_NeoPixel4showEv+0xaf4>
        pinSet(pin, HIGH); // HIGH
 80a0ca6:	79e3      	ldrb	r3, [r4, #7]
 80a0ca8:	6810      	ldr	r0, [r2, #0]
 80a0caa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0cae:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0cb2:	88bf      	ldrh	r7, [r7, #4]
 80a0cb4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0cb8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0cba:	9803      	ldr	r0, [sp, #12]
 80a0cbc:	9b04      	ldr	r3, [sp, #16]
 80a0cbe:	4218      	tst	r0, r3
 80a0cc0:	f47f af76 	bne.w	80a0bb0 <_ZN17Adafruit_NeoPixel4showEv+0x900>
            ::: "r0", "cc", "memory");
 80a0cc4:	4600      	mov	r0, r0
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0cec:	79e3      	ldrb	r3, [r4, #7]
 80a0cee:	6810      	ldr	r0, [r2, #0]
 80a0cf0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0cf4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0cf8:	88bf      	ldrh	r7, [r7, #4]
 80a0cfa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0cfe:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a0d00:	4600      	mov	r0, r0
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	e775      	b.n	80a0c90 <_ZN17Adafruit_NeoPixel4showEv+0x9e0>
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0da4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0da8:	b29b      	uxth	r3, r3
 80a0daa:	2b00      	cmp	r3, #0
 80a0dac:	f47f aecd 	bne.w	80a0b4a <_ZN17Adafruit_NeoPixel4showEv+0x89a>
 80a0db0:	e645      	b.n	80a0a3e <_ZN17Adafruit_NeoPixel4showEv+0x78e>
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0db2:	2d03      	cmp	r5, #3
 80a0db4:	f000 812b 	beq.w	80a100e <_ZN17Adafruit_NeoPixel4showEv+0xd5e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0db8:	2b00      	cmp	r3, #0
 80a0dba:	f43f ae40 	beq.w	80a0a3e <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0dbe:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0dc2:	2600      	movs	r6, #0
 80a0dc4:	4a17      	ldr	r2, [pc, #92]	; (80a0e24 <_ZN17Adafruit_NeoPixel4showEv+0xb74>)
      mask = 0x800000; // reset the mask
 80a0dc6:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0dc8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a0dcc:	79e0      	ldrb	r0, [r4, #7]
      i = i-3;      // decrement bytes remaining
 80a0dce:	3b03      	subs	r3, #3
 80a0dd0:	b29b      	uxth	r3, r3
 80a0dd2:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0dd6:	780b      	ldrb	r3, [r1, #0]
      pinSet(pin, LOW); // LOW
 80a0dd8:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a0dda:	b2db      	uxtb	r3, r3
 80a0ddc:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0de0:	784b      	ldrb	r3, [r1, #1]
      pinSet(pin, LOW); // LOW
 80a0de2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a0de6:	b2db      	uxtb	r3, r3
 80a0de8:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0dec:	788b      	ldrb	r3, [r1, #2]
      pinSet(pin, LOW); // LOW
 80a0dee:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      g = *ptr++;   // Next green byte value
 80a0df2:	b2db      	uxtb	r3, r3
 80a0df4:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0df8:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0dfc:	f89d 3008 	ldrb.w	r3, [sp, #8]
      pinSet(pin, LOW); // LOW
 80a0e00:	f8bc c004 	ldrh.w	ip, [ip, #4]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0e04:	021b      	lsls	r3, r3, #8
 80a0e06:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80a0e0a:	f89d e006 	ldrb.w	lr, [sp, #6]
      pinSet(pin, LOW); // LOW
 80a0e0e:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0e12:	ea43 030e 	orr.w	r3, r3, lr
 80a0e16:	9303      	str	r3, [sp, #12]
      g = *ptr++;   // Next green byte value
 80a0e18:	3103      	adds	r1, #3
      j = 0;        // reset the 24-bit counter
 80a0e1a:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0e1e:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a0e22:	e07c      	b.n	80a0f1e <_ZN17Adafruit_NeoPixel4showEv+0xc6e>
 80a0e24:	20000090 	.word	0x20000090
          mask >>= 1; // Do this task during the long delay of this bit
 80a0e28:	9b04      	ldr	r3, [sp, #16]
 80a0e2a:	085b      	lsrs	r3, r3, #1
 80a0e2c:	9304      	str	r3, [sp, #16]
            ::: "r0", "cc", "memory");
 80a0e2e:	4600      	mov	r0, r0
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
 80a0e58:	bf00      	nop
 80a0e5a:	bf00      	nop
 80a0e5c:	bf00      	nop
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
 80a0e68:	bf00      	nop
 80a0e6a:	bf00      	nop
 80a0e6c:	bf00      	nop
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a0eb4:	79e0      	ldrb	r0, [r4, #7]
 80a0eb6:	6817      	ldr	r7, [r2, #0]
          j++;
 80a0eb8:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a0ebc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a0ec0:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
 80a0ec4:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a0ec8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
          j++;
 80a0ecc:	3301      	adds	r3, #1
 80a0ece:	b2db      	uxtb	r3, r3
 80a0ed0:	f88d 3005 	strb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a0ed4:	f8a0 c018 	strh.w	ip, [r0, #24]
            ::: "r0", "cc", "memory");
 80a0ed8:	4600      	mov	r0, r0
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
          if(j==24) break;
 80a0f02:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0f06:	2b18      	cmp	r3, #24
 80a0f08:	d07a      	beq.n	80a1000 <_ZN17Adafruit_NeoPixel4showEv+0xd50>
          pinSet(pin, LOW); // LOW
 80a0f0a:	79e3      	ldrb	r3, [r4, #7]
 80a0f0c:	6810      	ldr	r0, [r2, #0]
 80a0f0e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f12:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f16:	88bf      	ldrh	r7, [r7, #4]
 80a0f18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f1c:	835f      	strh	r7, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a0f1e:	9803      	ldr	r0, [sp, #12]
 80a0f20:	9b04      	ldr	r3, [sp, #16]
 80a0f22:	4218      	tst	r0, r3
 80a0f24:	d180      	bne.n	80a0e28 <_ZN17Adafruit_NeoPixel4showEv+0xb78>
            ::: "r0", "cc", "memory");
 80a0f26:	4600      	mov	r0, r0
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a0f48:	79e3      	ldrb	r3, [r4, #7]
 80a0f4a:	6810      	ldr	r0, [r2, #0]
 80a0f4c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f50:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f54:	88bf      	ldrh	r7, [r7, #4]
 80a0f56:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f5a:	831f      	strh	r7, [r3, #24]
          j++;
 80a0f5c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0f60:	3301      	adds	r3, #1
 80a0f62:	b2db      	uxtb	r3, r3
 80a0f64:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a0f68:	9b04      	ldr	r3, [sp, #16]
 80a0f6a:	085b      	lsrs	r3, r3, #1
 80a0f6c:	9304      	str	r3, [sp, #16]
            ::: "r0", "cc", "memory");
 80a0f6e:	4600      	mov	r0, r0
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
          if(j==24) break;
 80a0ff8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0ffc:	2b18      	cmp	r3, #24
 80a0ffe:	d184      	bne.n	80a0f0a <_ZN17Adafruit_NeoPixel4showEv+0xc5a>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1000:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1004:	b29b      	uxth	r3, r3
 80a1006:	2b00      	cmp	r3, #0
 80a1008:	f47f aedd 	bne.w	80a0dc6 <_ZN17Adafruit_NeoPixel4showEv+0xb16>
 80a100c:	e517      	b.n	80a0a3e <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a100e:	2b00      	cmp	r3, #0
 80a1010:	f43f ad15 	beq.w	80a0a3e <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a1014:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a1018:	2600      	movs	r6, #0
 80a101a:	4a13      	ldr	r2, [pc, #76]	; (80a1068 <_ZN17Adafruit_NeoPixel4showEv+0xdb8>)
      mask = 0x800000; // reset the mask
 80a101c:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a101e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a1022:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a1024:	3b03      	subs	r3, #3
 80a1026:	b29b      	uxth	r3, r3
 80a1028:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a102c:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a1030:	b2db      	uxtb	r3, r3
 80a1032:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a1036:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a103a:	b2db      	uxtb	r3, r3
 80a103c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1040:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a1044:	b2db      	uxtb	r3, r3
 80a1046:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a104a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a104e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1052:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1056:	021b      	lsls	r3, r3, #8
 80a1058:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a105c:	4303      	orrs	r3, r0
 80a105e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1060:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1064:	e0e1      	b.n	80a122a <_ZN17Adafruit_NeoPixel4showEv+0xf7a>
 80a1066:	bf00      	nop
 80a1068:	20000090 	.word	0x20000090
            ::: "r0", "cc", "memory");
 80a106c:	4600      	mov	r0, r0
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
 80a10d6:	bf00      	nop
 80a10d8:	bf00      	nop
 80a10da:	bf00      	nop
 80a10dc:	bf00      	nop
 80a10de:	bf00      	nop
 80a10e0:	bf00      	nop
 80a10e2:	bf00      	nop
 80a10e4:	bf00      	nop
 80a10e6:	bf00      	nop
 80a10e8:	bf00      	nop
 80a10ea:	bf00      	nop
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a118e:	79e3      	ldrb	r3, [r4, #7]
 80a1190:	6810      	ldr	r0, [r2, #0]
 80a1192:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1196:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a119a:	88bf      	ldrh	r7, [r7, #4]
 80a119c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a11a0:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a11a2:	4600      	mov	r0, r0
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
 80a11dc:	bf00      	nop
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
        mask >>= 1;
 80a1212:	9b04      	ldr	r3, [sp, #16]
 80a1214:	085b      	lsrs	r3, r3, #1
 80a1216:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1218:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a121c:	3301      	adds	r3, #1
 80a121e:	b2db      	uxtb	r3, r3
 80a1220:	2b17      	cmp	r3, #23
 80a1222:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1226:	f200 80eb 	bhi.w	80a1400 <_ZN17Adafruit_NeoPixel4showEv+0x1150>
        pinSet(pin, HIGH); // HIGH
 80a122a:	79e3      	ldrb	r3, [r4, #7]
 80a122c:	6810      	ldr	r0, [r2, #0]
 80a122e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1232:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1236:	88bf      	ldrh	r7, [r7, #4]
 80a1238:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a123c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a123e:	9803      	ldr	r0, [sp, #12]
 80a1240:	9b04      	ldr	r3, [sp, #16]
 80a1242:	4218      	tst	r0, r3
 80a1244:	f47f af12 	bne.w	80a106c <_ZN17Adafruit_NeoPixel4showEv+0xdbc>
            ::: "r0", "cc", "memory");
 80a1248:	4600      	mov	r0, r0
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a12ca:	79e3      	ldrb	r3, [r4, #7]
 80a12cc:	6810      	ldr	r0, [r2, #0]
 80a12ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a12d2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a12d6:	88bf      	ldrh	r7, [r7, #4]
 80a12d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a12dc:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a12de:	4600      	mov	r0, r0
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	e710      	b.n	80a1212 <_ZN17Adafruit_NeoPixel4showEv+0xf62>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a13f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a13f4:	b29b      	uxth	r3, r3
 80a13f6:	2b00      	cmp	r3, #0
 80a13f8:	f47e af92 	bne.w	80a0320 <_ZN17Adafruit_NeoPixel4showEv+0x70>
 80a13fc:	f7ff bb1f 	b.w	80a0a3e <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1400:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1404:	b29b      	uxth	r3, r3
 80a1406:	2b00      	cmp	r3, #0
 80a1408:	f47f ae08 	bne.w	80a101c <_ZN17Adafruit_NeoPixel4showEv+0xd6c>
 80a140c:	f7ff bb17 	b.w	80a0a3e <_ZN17Adafruit_NeoPixel4showEv+0x78e>

080a1410 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1410:	8843      	ldrh	r3, [r0, #2]
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a1412:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1414:	428b      	cmp	r3, r1
 80a1416:	d926      	bls.n	80a1466 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a1418:	7a05      	ldrb	r5, [r0, #8]
 80a141a:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a141e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a1422:	b2d6      	uxtb	r6, r2
 80a1424:	b13d      	cbz	r5, 80a1436 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
 80a1426:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a1428:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a142a:	436e      	muls	r6, r5
      r = (r * brightness) >> 8;
 80a142c:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1430:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1434:	0a36      	lsrs	r6, r6, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1436:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a143a:	68c7      	ldr	r7, [r0, #12]
 80a143c:	f1bc 0f06 	cmp.w	ip, #6
 80a1440:	bf0c      	ite	eq
 80a1442:	2504      	moveq	r5, #4
 80a1444:	2503      	movne	r5, #3
 80a1446:	4369      	muls	r1, r5
 80a1448:	f1ac 0c02 	sub.w	ip, ip, #2
 80a144c:	187d      	adds	r5, r7, r1
    switch(type) {
 80a144e:	f1bc 0f06 	cmp.w	ip, #6
 80a1452:	d81d      	bhi.n	80a1490 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
 80a1454:	e8df f00c 	tbb	[pc, ip]
 80a1458:	04081c04 	.word	0x04081c04
 80a145c:	040f      	.short	0x040f
 80a145e:	04          	.byte	0x04
 80a145f:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1460:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a1462:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a1464:	70ae      	strb	r6, [r5, #2]
          *p++ = g;
          *p = b;
        } break;
    }
  }
}
 80a1466:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
 80a1468:	2bfe      	cmp	r3, #254	; 0xfe
 80a146a:	bf28      	it	cs
 80a146c:	23fe      	movcs	r3, #254	; 0xfe
 80a146e:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a1470:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a1472:	70ac      	strb	r4, [r5, #2]
        } break;
 80a1474:	e7f7      	b.n	80a1466 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
          *p++ = r;
 80a1476:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1478:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a147a:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a147c:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
 80a147e:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1480:	b913      	cbnz	r3, 80a1488 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
 80a1482:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1484:	70ea      	strb	r2, [r5, #3]
        } break;
 80a1486:	e7ee      	b.n	80a1466 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1488:	435a      	muls	r2, r3
 80a148a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a148e:	e7f9      	b.n	80a1484 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
 80a1490:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1492:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a1494:	70ae      	strb	r6, [r5, #2]
}
 80a1496:	e7e6      	b.n	80a1466 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>

080a1498 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a1498:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a149c:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a14a0:	4770      	bx	lr
	...

080a14a4 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a14a4:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a14a6:	f000 f82d 	bl	80a1504 <HAL_Pin_Map>
 80a14aa:	4b01      	ldr	r3, [pc, #4]	; (80a14b0 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a14ac:	6018      	str	r0, [r3, #0]
}
 80a14ae:	bd08      	pop	{r3, pc}
 80a14b0:	20000090 	.word	0x20000090

080a14b4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a14b4:	b508      	push	{r3, lr}
 80a14b6:	4b02      	ldr	r3, [pc, #8]	; (80a14c0 <os_mutex_recursive_create+0xc>)
 80a14b8:	681b      	ldr	r3, [r3, #0]
 80a14ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a14bc:	9301      	str	r3, [sp, #4]
 80a14be:	bd08      	pop	{r3, pc}
 80a14c0:	080601d0 	.word	0x080601d0

080a14c4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a14c4:	b508      	push	{r3, lr}
 80a14c6:	4b02      	ldr	r3, [pc, #8]	; (80a14d0 <os_mutex_recursive_destroy+0xc>)
 80a14c8:	681b      	ldr	r3, [r3, #0]
 80a14ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a14cc:	9301      	str	r3, [sp, #4]
 80a14ce:	bd08      	pop	{r3, pc}
 80a14d0:	080601d0 	.word	0x080601d0

080a14d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a14d4:	b508      	push	{r3, lr}
 80a14d6:	4b02      	ldr	r3, [pc, #8]	; (80a14e0 <HAL_RNG_GetRandomNumber+0xc>)
 80a14d8:	681b      	ldr	r3, [r3, #0]
 80a14da:	685b      	ldr	r3, [r3, #4]
 80a14dc:	9301      	str	r3, [sp, #4]
 80a14de:	bd08      	pop	{r3, pc}
 80a14e0:	0806019c 	.word	0x0806019c

080a14e4 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a14e4:	b508      	push	{r3, lr}
 80a14e6:	4b02      	ldr	r3, [pc, #8]	; (80a14f0 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a14e8:	681b      	ldr	r3, [r3, #0]
 80a14ea:	691b      	ldr	r3, [r3, #16]
 80a14ec:	9301      	str	r3, [sp, #4]
 80a14ee:	bd08      	pop	{r3, pc}
 80a14f0:	0806019c 	.word	0x0806019c

080a14f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a14f4:	b508      	push	{r3, lr}
 80a14f6:	4b02      	ldr	r3, [pc, #8]	; (80a1500 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a14f8:	681b      	ldr	r3, [r3, #0]
 80a14fa:	695b      	ldr	r3, [r3, #20]
 80a14fc:	9301      	str	r3, [sp, #4]
 80a14fe:	bd08      	pop	{r3, pc}
 80a1500:	0806019c 	.word	0x0806019c

080a1504 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1504:	b508      	push	{r3, lr}
 80a1506:	4b02      	ldr	r3, [pc, #8]	; (80a1510 <HAL_Pin_Map+0xc>)
 80a1508:	681b      	ldr	r3, [r3, #0]
 80a150a:	681b      	ldr	r3, [r3, #0]
 80a150c:	9301      	str	r3, [sp, #4]
 80a150e:	bd08      	pop	{r3, pc}
 80a1510:	080601b0 	.word	0x080601b0

080a1514 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1514:	b508      	push	{r3, lr}
 80a1516:	4b02      	ldr	r3, [pc, #8]	; (80a1520 <HAL_Pin_Mode+0xc>)
 80a1518:	681b      	ldr	r3, [r3, #0]
 80a151a:	689b      	ldr	r3, [r3, #8]
 80a151c:	9301      	str	r3, [sp, #4]
 80a151e:	bd08      	pop	{r3, pc}
 80a1520:	080601b0 	.word	0x080601b0

080a1524 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1524:	b508      	push	{r3, lr}
 80a1526:	4b02      	ldr	r3, [pc, #8]	; (80a1530 <HAL_Get_Pin_Mode+0xc>)
 80a1528:	681b      	ldr	r3, [r3, #0]
 80a152a:	68db      	ldr	r3, [r3, #12]
 80a152c:	9301      	str	r3, [sp, #4]
 80a152e:	bd08      	pop	{r3, pc}
 80a1530:	080601b0 	.word	0x080601b0

080a1534 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1534:	b508      	push	{r3, lr}
 80a1536:	4b02      	ldr	r3, [pc, #8]	; (80a1540 <HAL_GPIO_Write+0xc>)
 80a1538:	681b      	ldr	r3, [r3, #0]
 80a153a:	691b      	ldr	r3, [r3, #16]
 80a153c:	9301      	str	r3, [sp, #4]
 80a153e:	bd08      	pop	{r3, pc}
 80a1540:	080601b0 	.word	0x080601b0

080a1544 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1544:	b508      	push	{r3, lr}
 80a1546:	4b02      	ldr	r3, [pc, #8]	; (80a1550 <HAL_GPIO_Read+0xc>)
 80a1548:	681b      	ldr	r3, [r3, #0]
 80a154a:	695b      	ldr	r3, [r3, #20]
 80a154c:	9301      	str	r3, [sp, #4]
 80a154e:	bd08      	pop	{r3, pc}
 80a1550:	080601b0 	.word	0x080601b0

080a1554 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a1554:	b508      	push	{r3, lr}
 80a1556:	4b02      	ldr	r3, [pc, #8]	; (80a1560 <hal_i2c_write+0xc>)
 80a1558:	681b      	ldr	r3, [r3, #0]
 80a155a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a155c:	9301      	str	r3, [sp, #4]
 80a155e:	bd08      	pop	{r3, pc}
 80a1560:	080601ac 	.word	0x080601ac

080a1564 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a1564:	b508      	push	{r3, lr}
 80a1566:	4b02      	ldr	r3, [pc, #8]	; (80a1570 <hal_i2c_available+0xc>)
 80a1568:	681b      	ldr	r3, [r3, #0]
 80a156a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a156c:	9301      	str	r3, [sp, #4]
 80a156e:	bd08      	pop	{r3, pc}
 80a1570:	080601ac 	.word	0x080601ac

080a1574 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a1574:	b508      	push	{r3, lr}
 80a1576:	4b02      	ldr	r3, [pc, #8]	; (80a1580 <hal_i2c_read+0xc>)
 80a1578:	681b      	ldr	r3, [r3, #0]
 80a157a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a157c:	9301      	str	r3, [sp, #4]
 80a157e:	bd08      	pop	{r3, pc}
 80a1580:	080601ac 	.word	0x080601ac

080a1584 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a1584:	b508      	push	{r3, lr}
 80a1586:	4b02      	ldr	r3, [pc, #8]	; (80a1590 <hal_i2c_peek+0xc>)
 80a1588:	681b      	ldr	r3, [r3, #0]
 80a158a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a158c:	9301      	str	r3, [sp, #4]
 80a158e:	bd08      	pop	{r3, pc}
 80a1590:	080601ac 	.word	0x080601ac

080a1594 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a1594:	b508      	push	{r3, lr}
 80a1596:	4b02      	ldr	r3, [pc, #8]	; (80a15a0 <hal_i2c_flush+0xc>)
 80a1598:	681b      	ldr	r3, [r3, #0]
 80a159a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a159c:	9301      	str	r3, [sp, #4]
 80a159e:	bd08      	pop	{r3, pc}
 80a15a0:	080601ac 	.word	0x080601ac

080a15a4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a15a4:	b508      	push	{r3, lr}
 80a15a6:	4b02      	ldr	r3, [pc, #8]	; (80a15b0 <hal_i2c_is_enabled+0xc>)
 80a15a8:	681b      	ldr	r3, [r3, #0]
 80a15aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a15ac:	9301      	str	r3, [sp, #4]
 80a15ae:	bd08      	pop	{r3, pc}
 80a15b0:	080601ac 	.word	0x080601ac

080a15b4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a15b4:	b508      	push	{r3, lr}
 80a15b6:	4b03      	ldr	r3, [pc, #12]	; (80a15c4 <hal_i2c_init+0x10>)
 80a15b8:	681b      	ldr	r3, [r3, #0]
 80a15ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a15be:	9301      	str	r3, [sp, #4]
 80a15c0:	bd08      	pop	{r3, pc}
 80a15c2:	0000      	.short	0x0000
 80a15c4:	080601ac 	.word	0x080601ac

080a15c8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a15c8:	b508      	push	{r3, lr}
 80a15ca:	4b02      	ldr	r3, [pc, #8]	; (80a15d4 <hal_spi_init+0xc>)
 80a15cc:	681b      	ldr	r3, [r3, #0]
 80a15ce:	69db      	ldr	r3, [r3, #28]
 80a15d0:	9301      	str	r3, [sp, #4]
 80a15d2:	bd08      	pop	{r3, pc}
 80a15d4:	080601b4 	.word	0x080601b4

080a15d8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a15d8:	b508      	push	{r3, lr}
 80a15da:	4b02      	ldr	r3, [pc, #8]	; (80a15e4 <hal_spi_is_enabled+0xc>)
 80a15dc:	681b      	ldr	r3, [r3, #0]
 80a15de:	6a1b      	ldr	r3, [r3, #32]
 80a15e0:	9301      	str	r3, [sp, #4]
 80a15e2:	bd08      	pop	{r3, pc}
 80a15e4:	080601b4 	.word	0x080601b4

080a15e8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a15e8:	b508      	push	{r3, lr}
 80a15ea:	4b02      	ldr	r3, [pc, #8]	; (80a15f4 <hal_usart_init+0xc>)
 80a15ec:	681b      	ldr	r3, [r3, #0]
 80a15ee:	699b      	ldr	r3, [r3, #24]
 80a15f0:	9301      	str	r3, [sp, #4]
 80a15f2:	bd08      	pop	{r3, pc}
 80a15f4:	080601c4 	.word	0x080601c4

080a15f8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a15f8:	b508      	push	{r3, lr}
 80a15fa:	4b02      	ldr	r3, [pc, #8]	; (80a1604 <hal_usart_write+0xc>)
 80a15fc:	681b      	ldr	r3, [r3, #0]
 80a15fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1600:	9301      	str	r3, [sp, #4]
 80a1602:	bd08      	pop	{r3, pc}
 80a1604:	080601c4 	.word	0x080601c4

080a1608 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a1608:	b508      	push	{r3, lr}
 80a160a:	4b02      	ldr	r3, [pc, #8]	; (80a1614 <hal_usart_available+0xc>)
 80a160c:	681b      	ldr	r3, [r3, #0]
 80a160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1610:	9301      	str	r3, [sp, #4]
 80a1612:	bd08      	pop	{r3, pc}
 80a1614:	080601c4 	.word	0x080601c4

080a1618 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a1618:	b508      	push	{r3, lr}
 80a161a:	4b02      	ldr	r3, [pc, #8]	; (80a1624 <hal_usart_read+0xc>)
 80a161c:	681b      	ldr	r3, [r3, #0]
 80a161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1620:	9301      	str	r3, [sp, #4]
 80a1622:	bd08      	pop	{r3, pc}
 80a1624:	080601c4 	.word	0x080601c4

080a1628 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a1628:	b508      	push	{r3, lr}
 80a162a:	4b02      	ldr	r3, [pc, #8]	; (80a1634 <hal_usart_peek+0xc>)
 80a162c:	681b      	ldr	r3, [r3, #0]
 80a162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1630:	9301      	str	r3, [sp, #4]
 80a1632:	bd08      	pop	{r3, pc}
 80a1634:	080601c4 	.word	0x080601c4

080a1638 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a1638:	b508      	push	{r3, lr}
 80a163a:	4b02      	ldr	r3, [pc, #8]	; (80a1644 <hal_usart_flush+0xc>)
 80a163c:	681b      	ldr	r3, [r3, #0]
 80a163e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1640:	9301      	str	r3, [sp, #4]
 80a1642:	bd08      	pop	{r3, pc}
 80a1644:	080601c4 	.word	0x080601c4

080a1648 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a1648:	b508      	push	{r3, lr}
 80a164a:	4b02      	ldr	r3, [pc, #8]	; (80a1654 <hal_usart_is_enabled+0xc>)
 80a164c:	681b      	ldr	r3, [r3, #0]
 80a164e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1650:	9301      	str	r3, [sp, #4]
 80a1652:	bd08      	pop	{r3, pc}
 80a1654:	080601c4 	.word	0x080601c4

080a1658 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a1658:	b508      	push	{r3, lr}
 80a165a:	4b02      	ldr	r3, [pc, #8]	; (80a1664 <hal_usart_available_data_for_write+0xc>)
 80a165c:	681b      	ldr	r3, [r3, #0]
 80a165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1660:	9301      	str	r3, [sp, #4]
 80a1662:	bd08      	pop	{r3, pc}
 80a1664:	080601c4 	.word	0x080601c4

080a1668 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1668:	b508      	push	{r3, lr}
 80a166a:	4b02      	ldr	r3, [pc, #8]	; (80a1674 <HAL_USB_USART_Init+0xc>)
 80a166c:	681b      	ldr	r3, [r3, #0]
 80a166e:	681b      	ldr	r3, [r3, #0]
 80a1670:	9301      	str	r3, [sp, #4]
 80a1672:	bd08      	pop	{r3, pc}
 80a1674:	080601d8 	.word	0x080601d8

080a1678 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1678:	b508      	push	{r3, lr}
 80a167a:	4b02      	ldr	r3, [pc, #8]	; (80a1684 <HAL_USB_USART_Available_Data+0xc>)
 80a167c:	681b      	ldr	r3, [r3, #0]
 80a167e:	691b      	ldr	r3, [r3, #16]
 80a1680:	9301      	str	r3, [sp, #4]
 80a1682:	bd08      	pop	{r3, pc}
 80a1684:	080601d8 	.word	0x080601d8

080a1688 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1688:	b508      	push	{r3, lr}
 80a168a:	4b02      	ldr	r3, [pc, #8]	; (80a1694 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a168c:	681b      	ldr	r3, [r3, #0]
 80a168e:	695b      	ldr	r3, [r3, #20]
 80a1690:	9301      	str	r3, [sp, #4]
 80a1692:	bd08      	pop	{r3, pc}
 80a1694:	080601d8 	.word	0x080601d8

080a1698 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1698:	b508      	push	{r3, lr}
 80a169a:	4b02      	ldr	r3, [pc, #8]	; (80a16a4 <HAL_USB_USART_Receive_Data+0xc>)
 80a169c:	681b      	ldr	r3, [r3, #0]
 80a169e:	699b      	ldr	r3, [r3, #24]
 80a16a0:	9301      	str	r3, [sp, #4]
 80a16a2:	bd08      	pop	{r3, pc}
 80a16a4:	080601d8 	.word	0x080601d8

080a16a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a16a8:	b508      	push	{r3, lr}
 80a16aa:	4b02      	ldr	r3, [pc, #8]	; (80a16b4 <HAL_USB_USART_Send_Data+0xc>)
 80a16ac:	681b      	ldr	r3, [r3, #0]
 80a16ae:	69db      	ldr	r3, [r3, #28]
 80a16b0:	9301      	str	r3, [sp, #4]
 80a16b2:	bd08      	pop	{r3, pc}
 80a16b4:	080601d8 	.word	0x080601d8

080a16b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a16b8:	b508      	push	{r3, lr}
 80a16ba:	4b02      	ldr	r3, [pc, #8]	; (80a16c4 <HAL_USB_USART_Flush_Data+0xc>)
 80a16bc:	681b      	ldr	r3, [r3, #0]
 80a16be:	6a1b      	ldr	r3, [r3, #32]
 80a16c0:	9301      	str	r3, [sp, #4]
 80a16c2:	bd08      	pop	{r3, pc}
 80a16c4:	080601d8 	.word	0x080601d8

080a16c8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a16c8:	b508      	push	{r3, lr}
 80a16ca:	4b02      	ldr	r3, [pc, #8]	; (80a16d4 <inet_gethostbyname+0xc>)
 80a16cc:	681b      	ldr	r3, [r3, #0]
 80a16ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a16d0:	9301      	str	r3, [sp, #4]
 80a16d2:	bd08      	pop	{r3, pc}
 80a16d4:	080601c0 	.word	0x080601c0

080a16d8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a16d8:	b508      	push	{r3, lr}
 80a16da:	4b02      	ldr	r3, [pc, #8]	; (80a16e4 <set_system_mode+0xc>)
 80a16dc:	681b      	ldr	r3, [r3, #0]
 80a16de:	685b      	ldr	r3, [r3, #4]
 80a16e0:	9301      	str	r3, [sp, #4]
 80a16e2:	bd08      	pop	{r3, pc}
 80a16e4:	080601a4 	.word	0x080601a4

080a16e8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a16e8:	b508      	push	{r3, lr}
 80a16ea:	4b03      	ldr	r3, [pc, #12]	; (80a16f8 <system_ctrl_set_app_request_handler+0x10>)
 80a16ec:	681b      	ldr	r3, [r3, #0]
 80a16ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a16f2:	9301      	str	r3, [sp, #4]
 80a16f4:	bd08      	pop	{r3, pc}
 80a16f6:	0000      	.short	0x0000
 80a16f8:	080601a4 	.word	0x080601a4

080a16fc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a16fc:	b508      	push	{r3, lr}
 80a16fe:	4b03      	ldr	r3, [pc, #12]	; (80a170c <system_ctrl_set_result+0x10>)
 80a1700:	681b      	ldr	r3, [r3, #0]
 80a1702:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1706:	9301      	str	r3, [sp, #4]
 80a1708:	bd08      	pop	{r3, pc}
 80a170a:	0000      	.short	0x0000
 80a170c:	080601a4 	.word	0x080601a4

080a1710 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1710:	b508      	push	{r3, lr}
 80a1712:	4b02      	ldr	r3, [pc, #8]	; (80a171c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1714:	681b      	ldr	r3, [r3, #0]
 80a1716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1718:	9301      	str	r3, [sp, #4]
 80a171a:	bd08      	pop	{r3, pc}
 80a171c:	080601cc 	.word	0x080601cc

080a1720 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1720:	b508      	push	{r3, lr}
 80a1722:	4b02      	ldr	r3, [pc, #8]	; (80a172c <network_connect+0xc>)
 80a1724:	681b      	ldr	r3, [r3, #0]
 80a1726:	685b      	ldr	r3, [r3, #4]
 80a1728:	9301      	str	r3, [sp, #4]
 80a172a:	bd08      	pop	{r3, pc}
 80a172c:	080601c8 	.word	0x080601c8

080a1730 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1730:	b508      	push	{r3, lr}
 80a1732:	4b02      	ldr	r3, [pc, #8]	; (80a173c <network_connecting+0xc>)
 80a1734:	681b      	ldr	r3, [r3, #0]
 80a1736:	689b      	ldr	r3, [r3, #8]
 80a1738:	9301      	str	r3, [sp, #4]
 80a173a:	bd08      	pop	{r3, pc}
 80a173c:	080601c8 	.word	0x080601c8

080a1740 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1740:	b508      	push	{r3, lr}
 80a1742:	4b02      	ldr	r3, [pc, #8]	; (80a174c <network_disconnect+0xc>)
 80a1744:	681b      	ldr	r3, [r3, #0]
 80a1746:	68db      	ldr	r3, [r3, #12]
 80a1748:	9301      	str	r3, [sp, #4]
 80a174a:	bd08      	pop	{r3, pc}
 80a174c:	080601c8 	.word	0x080601c8

080a1750 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1750:	b508      	push	{r3, lr}
 80a1752:	4b02      	ldr	r3, [pc, #8]	; (80a175c <network_ready+0xc>)
 80a1754:	681b      	ldr	r3, [r3, #0]
 80a1756:	691b      	ldr	r3, [r3, #16]
 80a1758:	9301      	str	r3, [sp, #4]
 80a175a:	bd08      	pop	{r3, pc}
 80a175c:	080601c8 	.word	0x080601c8

080a1760 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1760:	b508      	push	{r3, lr}
 80a1762:	4b02      	ldr	r3, [pc, #8]	; (80a176c <network_on+0xc>)
 80a1764:	681b      	ldr	r3, [r3, #0]
 80a1766:	695b      	ldr	r3, [r3, #20]
 80a1768:	9301      	str	r3, [sp, #4]
 80a176a:	bd08      	pop	{r3, pc}
 80a176c:	080601c8 	.word	0x080601c8

080a1770 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1770:	b508      	push	{r3, lr}
 80a1772:	4b02      	ldr	r3, [pc, #8]	; (80a177c <network_off+0xc>)
 80a1774:	681b      	ldr	r3, [r3, #0]
 80a1776:	699b      	ldr	r3, [r3, #24]
 80a1778:	9301      	str	r3, [sp, #4]
 80a177a:	bd08      	pop	{r3, pc}
 80a177c:	080601c8 	.word	0x080601c8

080a1780 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1780:	b508      	push	{r3, lr}
 80a1782:	4b02      	ldr	r3, [pc, #8]	; (80a178c <network_listen+0xc>)
 80a1784:	681b      	ldr	r3, [r3, #0]
 80a1786:	69db      	ldr	r3, [r3, #28]
 80a1788:	9301      	str	r3, [sp, #4]
 80a178a:	bd08      	pop	{r3, pc}
 80a178c:	080601c8 	.word	0x080601c8

080a1790 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1790:	b508      	push	{r3, lr}
 80a1792:	4b02      	ldr	r3, [pc, #8]	; (80a179c <network_listening+0xc>)
 80a1794:	681b      	ldr	r3, [r3, #0]
 80a1796:	6a1b      	ldr	r3, [r3, #32]
 80a1798:	9301      	str	r3, [sp, #4]
 80a179a:	bd08      	pop	{r3, pc}
 80a179c:	080601c8 	.word	0x080601c8

080a17a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a17a0:	b508      	push	{r3, lr}
 80a17a2:	4b02      	ldr	r3, [pc, #8]	; (80a17ac <network_set_listen_timeout+0xc>)
 80a17a4:	681b      	ldr	r3, [r3, #0]
 80a17a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a17a8:	9301      	str	r3, [sp, #4]
 80a17aa:	bd08      	pop	{r3, pc}
 80a17ac:	080601c8 	.word	0x080601c8

080a17b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a17b0:	b508      	push	{r3, lr}
 80a17b2:	4b02      	ldr	r3, [pc, #8]	; (80a17bc <network_get_listen_timeout+0xc>)
 80a17b4:	681b      	ldr	r3, [r3, #0]
 80a17b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a17b8:	9301      	str	r3, [sp, #4]
 80a17ba:	bd08      	pop	{r3, pc}
 80a17bc:	080601c8 	.word	0x080601c8

080a17c0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a17c0:	b508      	push	{r3, lr}
 80a17c2:	4b02      	ldr	r3, [pc, #8]	; (80a17cc <malloc+0xc>)
 80a17c4:	681b      	ldr	r3, [r3, #0]
 80a17c6:	681b      	ldr	r3, [r3, #0]
 80a17c8:	9301      	str	r3, [sp, #4]
 80a17ca:	bd08      	pop	{r3, pc}
 80a17cc:	080601a0 	.word	0x080601a0

080a17d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a17d0:	b508      	push	{r3, lr}
 80a17d2:	4b02      	ldr	r3, [pc, #8]	; (80a17dc <free+0xc>)
 80a17d4:	681b      	ldr	r3, [r3, #0]
 80a17d6:	685b      	ldr	r3, [r3, #4]
 80a17d8:	9301      	str	r3, [sp, #4]
 80a17da:	bd08      	pop	{r3, pc}
 80a17dc:	080601a0 	.word	0x080601a0

080a17e0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a17e0:	b508      	push	{r3, lr}
 80a17e2:	4b02      	ldr	r3, [pc, #8]	; (80a17ec <newlib_impure_ptr_callback+0xc>)
 80a17e4:	681b      	ldr	r3, [r3, #0]
 80a17e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a17e8:	9301      	str	r3, [sp, #4]
 80a17ea:	bd08      	pop	{r3, pc}
 80a17ec:	080601a0 	.word	0x080601a0

080a17f0 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a17f0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a17f2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a17f4:	4604      	mov	r4, r0
      if (_M_manager)
 80a17f6:	b113      	cbz	r3, 80a17fe <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a17f8:	2203      	movs	r2, #3
 80a17fa:	4601      	mov	r1, r0
 80a17fc:	4798      	blx	r3
    }
 80a17fe:	4620      	mov	r0, r4
 80a1800:	bd10      	pop	{r4, pc}

080a1802 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1802:	4770      	bx	lr

080a1804 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1806:	4606      	mov	r6, r0
 80a1808:	4615      	mov	r5, r2
 80a180a:	460c      	mov	r4, r1
 80a180c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a180e:	42bc      	cmp	r4, r7
 80a1810:	d006      	beq.n	80a1820 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1812:	6833      	ldr	r3, [r6, #0]
 80a1814:	4630      	mov	r0, r6
 80a1816:	689b      	ldr	r3, [r3, #8]
 80a1818:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a181c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a181e:	e7f6      	b.n	80a180e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1820:	4628      	mov	r0, r5
 80a1822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1824 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1824:	2200      	movs	r2, #0
 80a1826:	7c00      	ldrb	r0, [r0, #16]
 80a1828:	f7ff be94 	b.w	80a1554 <hal_i2c_write>

080a182c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a182c:	2100      	movs	r1, #0
 80a182e:	7c00      	ldrb	r0, [r0, #16]
 80a1830:	f7ff be98 	b.w	80a1564 <hal_i2c_available>

080a1834 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1834:	2100      	movs	r1, #0
 80a1836:	7c00      	ldrb	r0, [r0, #16]
 80a1838:	f7ff be9c 	b.w	80a1574 <hal_i2c_read>

080a183c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a183c:	2100      	movs	r1, #0
 80a183e:	7c00      	ldrb	r0, [r0, #16]
 80a1840:	f7ff bea0 	b.w	80a1584 <hal_i2c_peek>

080a1844 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1844:	2100      	movs	r1, #0
 80a1846:	7c00      	ldrb	r0, [r0, #16]
 80a1848:	f7ff bea4 	b.w	80a1594 <hal_i2c_flush>

080a184c <_ZN7TwoWireD0Ev>:
 80a184c:	b510      	push	{r4, lr}
 80a184e:	4604      	mov	r4, r0
 80a1850:	2114      	movs	r1, #20
 80a1852:	f000 fcbc 	bl	80a21ce <_ZdlPvj>
 80a1856:	4620      	mov	r0, r4
 80a1858:	bd10      	pop	{r4, pc}
	...

080a185c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a185c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1862:	4604      	mov	r4, r0
 80a1864:	4608      	mov	r0, r1
 80a1866:	2100      	movs	r1, #0
 80a1868:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a186c:	4b03      	ldr	r3, [pc, #12]	; (80a187c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a186e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1870:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1872:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1874:	f7ff fe9e 	bl	80a15b4 <hal_i2c_init>
}
 80a1878:	4620      	mov	r0, r4
 80a187a:	bd10      	pop	{r4, pc}
 80a187c:	080a22a8 	.word	0x080a22a8

080a1880 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1880:	4770      	bx	lr

080a1882 <_ZN9IPAddressD0Ev>:
 80a1882:	b510      	push	{r4, lr}
 80a1884:	4604      	mov	r4, r0
 80a1886:	2118      	movs	r1, #24
 80a1888:	f000 fca1 	bl	80a21ce <_ZdlPvj>
 80a188c:	4620      	mov	r0, r4
 80a188e:	bd10      	pop	{r4, pc}

080a1890 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1892:	460e      	mov	r6, r1
 80a1894:	2400      	movs	r4, #0
 80a1896:	f100 0708 	add.w	r7, r0, #8
 80a189a:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a189c:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a18a0:	220a      	movs	r2, #10
 80a18a2:	4630      	mov	r0, r6
 80a18a4:	f000 f8e7 	bl	80a1a76 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a18a8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a18aa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a18ac:	d101      	bne.n	80a18b2 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a18ae:	4620      	mov	r0, r4
 80a18b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a18b2:	2c00      	cmp	r4, #0
 80a18b4:	d0f2      	beq.n	80a189c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a18b6:	212e      	movs	r1, #46	; 0x2e
 80a18b8:	4630      	mov	r0, r6
 80a18ba:	f000 f8d9 	bl	80a1a70 <_ZN5Print5printEc>
 80a18be:	4404      	add	r4, r0
 80a18c0:	e7ec      	b.n	80a189c <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a18c4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a18c4:	b510      	push	{r4, lr}
 80a18c6:	4604      	mov	r4, r0
 80a18c8:	4b04      	ldr	r3, [pc, #16]	; (80a18dc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a18ca:	2211      	movs	r2, #17
 80a18cc:	2100      	movs	r1, #0
 80a18ce:	f840 3b04 	str.w	r3, [r0], #4
 80a18d2:	f000 fc9d 	bl	80a2210 <memset>
}
 80a18d6:	4620      	mov	r0, r4
 80a18d8:	bd10      	pop	{r4, pc}
 80a18da:	bf00      	nop
 80a18dc:	080a22d0 	.word	0x080a22d0

080a18e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a18e0:	4603      	mov	r3, r0
 80a18e2:	4a07      	ldr	r2, [pc, #28]	; (80a1900 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a18e4:	b510      	push	{r4, lr}
 80a18e6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a18ea:	f101 0210 	add.w	r2, r1, #16
 80a18ee:	f851 4b04 	ldr.w	r4, [r1], #4
 80a18f2:	4291      	cmp	r1, r2
 80a18f4:	f843 4b04 	str.w	r4, [r3], #4
 80a18f8:	d1f9      	bne.n	80a18ee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a18fa:	780a      	ldrb	r2, [r1, #0]
 80a18fc:	701a      	strb	r2, [r3, #0]
}
 80a18fe:	bd10      	pop	{r4, pc}
 80a1900:	080a22d0 	.word	0x080a22d0

080a1904 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1904:	4a02      	ldr	r2, [pc, #8]	; (80a1910 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a1906:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a190a:	2204      	movs	r2, #4
 80a190c:	7502      	strb	r2, [r0, #20]
}
 80a190e:	4770      	bx	lr
 80a1910:	080a22d0 	.word	0x080a22d0

080a1914 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1914:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1916:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a191a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a191e:	2304      	movs	r3, #4
 80a1920:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1924:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1928:	6044      	str	r4, [r0, #4]
 80a192a:	7503      	strb	r3, [r0, #20]
}
 80a192c:	bd10      	pop	{r4, pc}
	...

080a1930 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1932:	4d04      	ldr	r5, [pc, #16]	; (80a1944 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1934:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1936:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a193a:	9500      	str	r5, [sp, #0]
 80a193c:	f7ff ffea 	bl	80a1914 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1940:	b003      	add	sp, #12
 80a1942:	bd30      	pop	{r4, r5, pc}
 80a1944:	080a22d0 	.word	0x080a22d0

080a1948 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1948:	4b01      	ldr	r3, [pc, #4]	; (80a1950 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a194a:	4a02      	ldr	r2, [pc, #8]	; (80a1954 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a194c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a194e:	4770      	bx	lr
 80a1950:	20000094 	.word	0x20000094
 80a1954:	080a22dc 	.word	0x080a22dc

080a1958 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1958:	2300      	movs	r3, #0
 80a195a:	6840      	ldr	r0, [r0, #4]
 80a195c:	461a      	mov	r2, r3
 80a195e:	f7ff bedf 	b.w	80a1720 <network_connect>

080a1962 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1962:	2200      	movs	r2, #0
 80a1964:	2102      	movs	r1, #2
 80a1966:	6840      	ldr	r0, [r0, #4]
 80a1968:	f7ff beea 	b.w	80a1740 <network_disconnect>

080a196c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a196c:	2200      	movs	r2, #0
 80a196e:	6840      	ldr	r0, [r0, #4]
 80a1970:	4611      	mov	r1, r2
 80a1972:	f7ff bedd 	b.w	80a1730 <network_connecting>

080a1976 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1976:	2200      	movs	r2, #0
 80a1978:	6840      	ldr	r0, [r0, #4]
 80a197a:	4611      	mov	r1, r2
 80a197c:	f7ff bee8 	b.w	80a1750 <network_ready>

080a1980 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1980:	2300      	movs	r3, #0
 80a1982:	6840      	ldr	r0, [r0, #4]
 80a1984:	461a      	mov	r2, r3
 80a1986:	4619      	mov	r1, r3
 80a1988:	f7ff beea 	b.w	80a1760 <network_on>

080a198c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a198c:	2300      	movs	r3, #0
 80a198e:	6840      	ldr	r0, [r0, #4]
 80a1990:	461a      	mov	r2, r3
 80a1992:	4619      	mov	r1, r3
 80a1994:	f7ff beec 	b.w	80a1770 <network_off>

080a1998 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1998:	2200      	movs	r2, #0
 80a199a:	6840      	ldr	r0, [r0, #4]
 80a199c:	f081 0101 	eor.w	r1, r1, #1
 80a19a0:	f7ff beee 	b.w	80a1780 <network_listen>

080a19a4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a19a4:	2200      	movs	r2, #0
 80a19a6:	6840      	ldr	r0, [r0, #4]
 80a19a8:	f7ff befa 	b.w	80a17a0 <network_set_listen_timeout>

080a19ac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a19ac:	2200      	movs	r2, #0
 80a19ae:	6840      	ldr	r0, [r0, #4]
 80a19b0:	4611      	mov	r1, r2
 80a19b2:	f7ff befd 	b.w	80a17b0 <network_get_listen_timeout>

080a19b6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a19b6:	2200      	movs	r2, #0
 80a19b8:	6840      	ldr	r0, [r0, #4]
 80a19ba:	4611      	mov	r1, r2
 80a19bc:	f7ff bee8 	b.w	80a1790 <network_listening>

080a19c0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a19c0:	b570      	push	{r4, r5, r6, lr}
 80a19c2:	4615      	mov	r5, r2
 80a19c4:	b08e      	sub	sp, #56	; 0x38
 80a19c6:	4604      	mov	r4, r0
    IPAddress addr;
 80a19c8:	a808      	add	r0, sp, #32
 80a19ca:	f7ff ff7b 	bl	80a18c4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a19ce:	2211      	movs	r2, #17
 80a19d0:	2100      	movs	r1, #0
 80a19d2:	a803      	add	r0, sp, #12
 80a19d4:	f000 fc1c 	bl	80a2210 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a19d8:	2600      	movs	r6, #0
 80a19da:	4628      	mov	r0, r5
 80a19dc:	f000 fc44 	bl	80a2268 <strlen>
 80a19e0:	4b0a      	ldr	r3, [pc, #40]	; (80a1a0c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a19e2:	9600      	str	r6, [sp, #0]
 80a19e4:	b281      	uxth	r1, r0
 80a19e6:	685b      	ldr	r3, [r3, #4]
 80a19e8:	4628      	mov	r0, r5
 80a19ea:	aa03      	add	r2, sp, #12
 80a19ec:	f7ff fe6c 	bl	80a16c8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a19f0:	b130      	cbz	r0, 80a1a00 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a19f2:	4631      	mov	r1, r6
 80a19f4:	4620      	mov	r0, r4
 80a19f6:	f7ff ff85 	bl	80a1904 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a19fa:	4620      	mov	r0, r4
 80a19fc:	b00e      	add	sp, #56	; 0x38
 80a19fe:	bd70      	pop	{r4, r5, r6, pc}
 80a1a00:	4620      	mov	r0, r4
 80a1a02:	a903      	add	r1, sp, #12
 80a1a04:	f7ff ff6c 	bl	80a18e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1a08:	e7f7      	b.n	80a19fa <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1a0a:	bf00      	nop
 80a1a0c:	20000518 	.word	0x20000518

080a1a10 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1a10:	4b02      	ldr	r3, [pc, #8]	; (80a1a1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1a12:	4a03      	ldr	r2, [pc, #12]	; (80a1a20 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1a14:	601a      	str	r2, [r3, #0]
 80a1a16:	2200      	movs	r2, #0
 80a1a18:	605a      	str	r2, [r3, #4]

} // spark
 80a1a1a:	4770      	bx	lr
 80a1a1c:	20000098 	.word	0x20000098
 80a1a20:	080a22e8 	.word	0x080a22e8

080a1a24 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a26:	4606      	mov	r6, r0
 80a1a28:	460d      	mov	r5, r1
  size_t n = 0;
 80a1a2a:	2400      	movs	r4, #0
 80a1a2c:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1a2e:	42bd      	cmp	r5, r7
 80a1a30:	d00c      	beq.n	80a1a4c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1a32:	6833      	ldr	r3, [r6, #0]
 80a1a34:	4630      	mov	r0, r6
 80a1a36:	689b      	ldr	r3, [r3, #8]
 80a1a38:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1a3c:	4798      	blx	r3
     if (chunk>=0)
 80a1a3e:	1e03      	subs	r3, r0, #0
 80a1a40:	db01      	blt.n	80a1a46 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1a42:	441c      	add	r4, r3
  while (size--) {
 80a1a44:	e7f3      	b.n	80a1a2e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1a46:	2c00      	cmp	r4, #0
 80a1a48:	bf08      	it	eq
 80a1a4a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1a4c:	4620      	mov	r0, r4
 80a1a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1a50 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a1a50:	b570      	push	{r4, r5, r6, lr}
 80a1a52:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1a54:	460c      	mov	r4, r1
    }
 80a1a56:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1a58:	b149      	cbz	r1, 80a1a6e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1a5a:	f000 fc05 	bl	80a2268 <strlen>
 80a1a5e:	682b      	ldr	r3, [r5, #0]
 80a1a60:	4602      	mov	r2, r0
 80a1a62:	4621      	mov	r1, r4
 80a1a64:	4628      	mov	r0, r5
    }
 80a1a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1a6a:	68db      	ldr	r3, [r3, #12]
 80a1a6c:	4718      	bx	r3
    }
 80a1a6e:	bd70      	pop	{r4, r5, r6, pc}

080a1a70 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1a70:	6803      	ldr	r3, [r0, #0]
 80a1a72:	689b      	ldr	r3, [r3, #8]
 80a1a74:	4718      	bx	r3

080a1a76 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1a76:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1a78:	2a01      	cmp	r2, #1
 80a1a7a:	bf98      	it	ls
 80a1a7c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1a7e:	b530      	push	{r4, r5, lr}
 80a1a80:	b08b      	sub	sp, #44	; 0x2c
 80a1a82:	460c      	mov	r4, r1
  *str = '\0';
 80a1a84:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1a88:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a1a8a:	4625      	mov	r5, r4
 80a1a8c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1a90:	fb04 5312 	mls	r3, r4, r2, r5
 80a1a94:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1a96:	2b09      	cmp	r3, #9
 80a1a98:	bf94      	ite	ls
 80a1a9a:	3330      	addls	r3, #48	; 0x30
 80a1a9c:	3337      	addhi	r3, #55	; 0x37
 80a1a9e:	b2db      	uxtb	r3, r3
  } while(n);
 80a1aa0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1aa2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1aa6:	d9f0      	bls.n	80a1a8a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1aa8:	f7ff ffd2 	bl	80a1a50 <_ZN5Print5writeEPKc>
}
 80a1aac:	b00b      	add	sp, #44	; 0x2c
 80a1aae:	bd30      	pop	{r4, r5, pc}

080a1ab0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1ab0:	b510      	push	{r4, lr}
 80a1ab2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1ab4:	f7ff fe9c 	bl	80a17f0 <_ZNSt14_Function_baseD1Ev>
 80a1ab8:	4620      	mov	r0, r4
 80a1aba:	bd10      	pop	{r4, pc}

080a1abc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a1abc:	2300      	movs	r3, #0
 80a1abe:	4803      	ldr	r0, [pc, #12]	; (80a1acc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1ac0:	4a03      	ldr	r2, [pc, #12]	; (80a1ad0 <_GLOBAL__sub_I_RGB+0x14>)
 80a1ac2:	4904      	ldr	r1, [pc, #16]	; (80a1ad4 <_GLOBAL__sub_I_RGB+0x18>)
 80a1ac4:	6083      	str	r3, [r0, #8]
 80a1ac6:	f000 bb7d 	b.w	80a21c4 <__aeabi_atexit>
 80a1aca:	bf00      	nop
 80a1acc:	200000a0 	.word	0x200000a0
 80a1ad0:	20000068 	.word	0x20000068
 80a1ad4:	080a1ab1 	.word	0x080a1ab1

080a1ad8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1ad8:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1ada:	2600      	movs	r6, #0
 80a1adc:	4604      	mov	r4, r0
 80a1ade:	460d      	mov	r5, r1
 80a1ae0:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1ae4:	f7ff fce6 	bl	80a14b4 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1ae8:	4628      	mov	r0, r5
    _spi = spi;
 80a1aea:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1aec:	f7ff fd6c 	bl	80a15c8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1af0:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1af2:	6066      	str	r6, [r4, #4]
}
 80a1af4:	bd70      	pop	{r4, r5, r6, pc}

080a1af6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a1af6:	b510      	push	{r4, lr}
 80a1af8:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a1afa:	6800      	ldr	r0, [r0, #0]
 80a1afc:	b118      	cbz	r0, 80a1b06 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a1afe:	f7ff fe67 	bl	80a17d0 <free>
            wakeupSource_ = nullptr;
 80a1b02:	2300      	movs	r3, #0
 80a1b04:	6023      	str	r3, [r4, #0]
        }
    }
 80a1b06:	bd10      	pop	{r4, pc}

080a1b08 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1b08:	b510      	push	{r4, lr}
 80a1b0a:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a1b0c:	f7ff fff3 	bl	80a1af6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a1b10:	4620      	mov	r0, r4
 80a1b12:	bd10      	pop	{r4, pc}

080a1b14 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1b14:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a1b16:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1b18:	b510      	push	{r4, lr}
 80a1b1a:	4b08      	ldr	r3, [pc, #32]	; (80a1b3c <_GLOBAL__sub_I_System+0x28>)
 80a1b1c:	4c08      	ldr	r4, [pc, #32]	; (80a1b40 <_GLOBAL__sub_I_System+0x2c>)
 80a1b1e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a1b20:	4b08      	ldr	r3, [pc, #32]	; (80a1b44 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a1b22:	6020      	str	r0, [r4, #0]
 80a1b24:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a1b26:	71a0      	strb	r0, [r4, #6]
 80a1b28:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1b2a:	f7ff fdd5 	bl	80a16d8 <set_system_mode>
SystemClass System;
 80a1b2e:	4620      	mov	r0, r4
 80a1b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a1b34:	4a04      	ldr	r2, [pc, #16]	; (80a1b48 <_GLOBAL__sub_I_System+0x34>)
 80a1b36:	4905      	ldr	r1, [pc, #20]	; (80a1b4c <_GLOBAL__sub_I_System+0x38>)
 80a1b38:	f000 bb44 	b.w	80a21c4 <__aeabi_atexit>
 80a1b3c:	200000bc 	.word	0x200000bc
 80a1b40:	200000b0 	.word	0x200000b0
 80a1b44:	ffff0000 	.word	0xffff0000
 80a1b48:	20000068 	.word	0x20000068
 80a1b4c:	080a1b09 	.word	0x080a1b09

080a1b50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1b50:	4b02      	ldr	r3, [pc, #8]	; (80a1b5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1b52:	681a      	ldr	r2, [r3, #0]
 80a1b54:	4b02      	ldr	r3, [pc, #8]	; (80a1b60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1b56:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1b58:	4770      	bx	lr
 80a1b5a:	bf00      	nop
 80a1b5c:	20000000 	.word	0x20000000
 80a1b60:	200000c0 	.word	0x200000c0

080a1b64 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1b64:	4770      	bx	lr

080a1b66 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1b66:	7441      	strb	r1, [r0, #17]
}
 80a1b68:	4770      	bx	lr

080a1b6a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a1b6a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1b6c:	7c00      	ldrb	r0, [r0, #16]
 80a1b6e:	f7ff fd73 	bl	80a1658 <hal_usart_available_data_for_write>
}
 80a1b72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1b76:	bd08      	pop	{r3, pc}

080a1b78 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1b78:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1b7a:	7c00      	ldrb	r0, [r0, #16]
 80a1b7c:	f7ff fd44 	bl	80a1608 <hal_usart_available>
}
 80a1b80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1b84:	bd08      	pop	{r3, pc}

080a1b86 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1b86:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1b88:	7c00      	ldrb	r0, [r0, #16]
 80a1b8a:	f7ff fd4d 	bl	80a1628 <hal_usart_peek>
}
 80a1b8e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1b92:	bd08      	pop	{r3, pc}

080a1b94 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1b94:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1b96:	7c00      	ldrb	r0, [r0, #16]
 80a1b98:	f7ff fd3e 	bl	80a1618 <hal_usart_read>
}
 80a1b9c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1ba0:	bd08      	pop	{r3, pc}

080a1ba2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a1ba2:	7c00      	ldrb	r0, [r0, #16]
 80a1ba4:	f7ff bd48 	b.w	80a1638 <hal_usart_flush>

080a1ba8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1ba8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1baa:	7c46      	ldrb	r6, [r0, #17]
{
 80a1bac:	4604      	mov	r4, r0
 80a1bae:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1bb0:	b12e      	cbz	r6, 80a1bbe <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a1bb2:	4629      	mov	r1, r5
 80a1bb4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1bb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1bba:	f7ff bd1d 	b.w	80a15f8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1bbe:	7c00      	ldrb	r0, [r0, #16]
 80a1bc0:	f7ff fd4a 	bl	80a1658 <hal_usart_available_data_for_write>
 80a1bc4:	2800      	cmp	r0, #0
 80a1bc6:	dcf4      	bgt.n	80a1bb2 <_ZN11USARTSerial5writeEh+0xa>
}
 80a1bc8:	4630      	mov	r0, r6
 80a1bca:	bd70      	pop	{r4, r5, r6, pc}

080a1bcc <_ZN11USARTSerialD0Ev>:
 80a1bcc:	b510      	push	{r4, lr}
 80a1bce:	4604      	mov	r4, r0
 80a1bd0:	2114      	movs	r1, #20
 80a1bd2:	f000 fafc 	bl	80a21ce <_ZdlPvj>
 80a1bd6:	4620      	mov	r0, r4
 80a1bd8:	bd10      	pop	{r4, pc}
	...

080a1bdc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1bdc:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1be0:	b510      	push	{r4, lr}
 80a1be2:	4604      	mov	r4, r0
 80a1be4:	4608      	mov	r0, r1
 80a1be6:	4611      	mov	r1, r2
 80a1be8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1bec:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1bf0:	4a04      	ldr	r2, [pc, #16]	; (80a1c04 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1bf2:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1bf4:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1bf6:	2201      	movs	r2, #1
 80a1bf8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1bfa:	461a      	mov	r2, r3
 80a1bfc:	f7ff fcf4 	bl	80a15e8 <hal_usart_init>
}
 80a1c00:	4620      	mov	r0, r4
 80a1c02:	bd10      	pop	{r4, pc}
 80a1c04:	080a2338 	.word	0x080a2338

080a1c08 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1c08:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1c0a:	4d0d      	ldr	r5, [pc, #52]	; (80a1c40 <_Z22__fetch_global_Serial1v+0x38>)
 80a1c0c:	7829      	ldrb	r1, [r5, #0]
 80a1c0e:	f3bf 8f5b 	dmb	ish
 80a1c12:	f011 0401 	ands.w	r4, r1, #1
 80a1c16:	d111      	bne.n	80a1c3c <_Z22__fetch_global_Serial1v+0x34>
 80a1c18:	4628      	mov	r0, r5
 80a1c1a:	f7fe fa40 	bl	80a009e <__cxa_guard_acquire>
 80a1c1e:	b168      	cbz	r0, 80a1c3c <_Z22__fetch_global_Serial1v+0x34>
 80a1c20:	4621      	mov	r1, r4
 80a1c22:	4a08      	ldr	r2, [pc, #32]	; (80a1c44 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1c24:	4b08      	ldr	r3, [pc, #32]	; (80a1c48 <_Z22__fetch_global_Serial1v+0x40>)
 80a1c26:	4809      	ldr	r0, [pc, #36]	; (80a1c4c <_Z22__fetch_global_Serial1v+0x44>)
 80a1c28:	f7ff ffd8 	bl	80a1bdc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1c2c:	4628      	mov	r0, r5
 80a1c2e:	f7fe fa3b 	bl	80a00a8 <__cxa_guard_release>
 80a1c32:	4a07      	ldr	r2, [pc, #28]	; (80a1c50 <_Z22__fetch_global_Serial1v+0x48>)
 80a1c34:	4907      	ldr	r1, [pc, #28]	; (80a1c54 <_Z22__fetch_global_Serial1v+0x4c>)
 80a1c36:	4805      	ldr	r0, [pc, #20]	; (80a1c4c <_Z22__fetch_global_Serial1v+0x44>)
 80a1c38:	f000 fac4 	bl	80a21c4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1c3c:	4803      	ldr	r0, [pc, #12]	; (80a1c4c <_Z22__fetch_global_Serial1v+0x44>)
 80a1c3e:	bd38      	pop	{r3, r4, r5, pc}
 80a1c40:	200000c4 	.word	0x200000c4
 80a1c44:	200000c8 	.word	0x200000c8
 80a1c48:	2000014c 	.word	0x2000014c
 80a1c4c:	200001d0 	.word	0x200001d0
 80a1c50:	20000068 	.word	0x20000068
 80a1c54:	080a1b65 	.word	0x080a1b65

080a1c58 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1c58:	7441      	strb	r1, [r0, #17]
}
 80a1c5a:	4770      	bx	lr

080a1c5c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1c5c:	4770      	bx	lr

080a1c5e <_ZN9USBSerial4readEv>:
{
 80a1c5e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1c60:	2100      	movs	r1, #0
 80a1c62:	7c00      	ldrb	r0, [r0, #16]
 80a1c64:	f7ff fd18 	bl	80a1698 <HAL_USB_USART_Receive_Data>
}
 80a1c68:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1c6c:	bd08      	pop	{r3, pc}

080a1c6e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a1c6e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1c70:	2101      	movs	r1, #1
 80a1c72:	7c00      	ldrb	r0, [r0, #16]
 80a1c74:	f7ff fd10 	bl	80a1698 <HAL_USB_USART_Receive_Data>
}
 80a1c78:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1c7c:	bd08      	pop	{r3, pc}

080a1c7e <_ZN9USBSerial17availableForWriteEv>:
{
 80a1c7e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1c80:	7c00      	ldrb	r0, [r0, #16]
 80a1c82:	f7ff fd01 	bl	80a1688 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1c86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1c8a:	bd08      	pop	{r3, pc}

080a1c8c <_ZN9USBSerial9availableEv>:
{
 80a1c8c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1c8e:	7c00      	ldrb	r0, [r0, #16]
 80a1c90:	f7ff fcf2 	bl	80a1678 <HAL_USB_USART_Available_Data>
}
 80a1c94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1c98:	bd08      	pop	{r3, pc}

080a1c9a <_ZN9USBSerial5writeEh>:
{
 80a1c9a:	b538      	push	{r3, r4, r5, lr}
 80a1c9c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1c9e:	7c00      	ldrb	r0, [r0, #16]
{
 80a1ca0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1ca2:	f7ff fcf1 	bl	80a1688 <HAL_USB_USART_Available_Data_For_Write>
 80a1ca6:	2800      	cmp	r0, #0
 80a1ca8:	dc01      	bgt.n	80a1cae <_ZN9USBSerial5writeEh+0x14>
 80a1caa:	7c60      	ldrb	r0, [r4, #17]
 80a1cac:	b128      	cbz	r0, 80a1cba <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1cae:	4629      	mov	r1, r5
 80a1cb0:	7c20      	ldrb	r0, [r4, #16]
 80a1cb2:	f7ff fcf9 	bl	80a16a8 <HAL_USB_USART_Send_Data>
 80a1cb6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1cba:	bd38      	pop	{r3, r4, r5, pc}

080a1cbc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1cbc:	7c00      	ldrb	r0, [r0, #16]
 80a1cbe:	f7ff bcfb 	b.w	80a16b8 <HAL_USB_USART_Flush_Data>

080a1cc2 <_ZN9USBSerialD0Ev>:
 80a1cc2:	b510      	push	{r4, lr}
 80a1cc4:	4604      	mov	r4, r0
 80a1cc6:	2114      	movs	r1, #20
 80a1cc8:	f000 fa81 	bl	80a21ce <_ZdlPvj>
 80a1ccc:	4620      	mov	r0, r4
 80a1cce:	bd10      	pop	{r4, pc}

080a1cd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1cd0:	b510      	push	{r4, lr}
 80a1cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1cd6:	4604      	mov	r4, r0
 80a1cd8:	4608      	mov	r0, r1
 80a1cda:	2100      	movs	r1, #0
 80a1cdc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1ce0:	4b04      	ldr	r3, [pc, #16]	; (80a1cf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a1ce2:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1ce4:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1ce6:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1ce8:	4611      	mov	r1, r2
  _blocking = true;
 80a1cea:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1cec:	f7ff fcbc 	bl	80a1668 <HAL_USB_USART_Init>
}
 80a1cf0:	4620      	mov	r0, r4
 80a1cf2:	bd10      	pop	{r4, pc}
 80a1cf4:	080a2368 	.word	0x080a2368

080a1cf8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1cf8:	b510      	push	{r4, lr}
 80a1cfa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1cfc:	2214      	movs	r2, #20
 80a1cfe:	2100      	movs	r1, #0
 80a1d00:	f000 fa86 	bl	80a2210 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1d04:	4b05      	ldr	r3, [pc, #20]	; (80a1d1c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1d06:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a1d08:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1d0a:	4b05      	ldr	r3, [pc, #20]	; (80a1d20 <_Z19acquireSerialBufferv+0x28>)
 80a1d0c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1d0e:	f240 1301 	movw	r3, #257	; 0x101
 80a1d12:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1d14:	2381      	movs	r3, #129	; 0x81
 80a1d16:	8223      	strh	r3, [r4, #16]
}
 80a1d18:	bd10      	pop	{r4, pc}
 80a1d1a:	bf00      	nop
 80a1d1c:	20000214 	.word	0x20000214
 80a1d20:	20000315 	.word	0x20000315

080a1d24 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1d24:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1d26:	4d0f      	ldr	r5, [pc, #60]	; (80a1d64 <_Z16_fetch_usbserialv+0x40>)
{
 80a1d28:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1d2a:	a801      	add	r0, sp, #4
 80a1d2c:	f7ff ffe4 	bl	80a1cf8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1d30:	7829      	ldrb	r1, [r5, #0]
 80a1d32:	f3bf 8f5b 	dmb	ish
 80a1d36:	f011 0401 	ands.w	r4, r1, #1
 80a1d3a:	d110      	bne.n	80a1d5e <_Z16_fetch_usbserialv+0x3a>
 80a1d3c:	4628      	mov	r0, r5
 80a1d3e:	f7fe f9ae 	bl	80a009e <__cxa_guard_acquire>
 80a1d42:	b160      	cbz	r0, 80a1d5e <_Z16_fetch_usbserialv+0x3a>
 80a1d44:	4621      	mov	r1, r4
 80a1d46:	aa01      	add	r2, sp, #4
 80a1d48:	4807      	ldr	r0, [pc, #28]	; (80a1d68 <_Z16_fetch_usbserialv+0x44>)
 80a1d4a:	f7ff ffc1 	bl	80a1cd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1d4e:	4628      	mov	r0, r5
 80a1d50:	f7fe f9aa 	bl	80a00a8 <__cxa_guard_release>
 80a1d54:	4a05      	ldr	r2, [pc, #20]	; (80a1d6c <_Z16_fetch_usbserialv+0x48>)
 80a1d56:	4906      	ldr	r1, [pc, #24]	; (80a1d70 <_Z16_fetch_usbserialv+0x4c>)
 80a1d58:	4803      	ldr	r0, [pc, #12]	; (80a1d68 <_Z16_fetch_usbserialv+0x44>)
 80a1d5a:	f000 fa33 	bl	80a21c4 <__aeabi_atexit>
	return _usbserial;
}
 80a1d5e:	4802      	ldr	r0, [pc, #8]	; (80a1d68 <_Z16_fetch_usbserialv+0x44>)
 80a1d60:	b007      	add	sp, #28
 80a1d62:	bd30      	pop	{r4, r5, pc}
 80a1d64:	200001e4 	.word	0x200001e4
 80a1d68:	200001ec 	.word	0x200001ec
 80a1d6c:	20000068 	.word	0x20000068
 80a1d70:	080a1c5d 	.word	0x080a1c5d

080a1d74 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1d74:	b510      	push	{r4, lr}
 80a1d76:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1d78:	2214      	movs	r2, #20
 80a1d7a:	2100      	movs	r1, #0
 80a1d7c:	f000 fa48 	bl	80a2210 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1d80:	4b05      	ldr	r3, [pc, #20]	; (80a1d98 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1d82:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1d84:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1d86:	4b05      	ldr	r3, [pc, #20]	; (80a1d9c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1d88:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1d8a:	f240 1301 	movw	r3, #257	; 0x101
 80a1d8e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1d90:	2381      	movs	r3, #129	; 0x81
 80a1d92:	8223      	strh	r3, [r4, #16]
}
 80a1d94:	bd10      	pop	{r4, pc}
 80a1d96:	bf00      	nop
 80a1d98:	20000396 	.word	0x20000396
 80a1d9c:	20000497 	.word	0x20000497

080a1da0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1da0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1da2:	4c0f      	ldr	r4, [pc, #60]	; (80a1de0 <_Z17_fetch_usbserial1v+0x40>)
{
 80a1da4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1da6:	a801      	add	r0, sp, #4
 80a1da8:	f7ff ffe4 	bl	80a1d74 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1dac:	7823      	ldrb	r3, [r4, #0]
 80a1dae:	f3bf 8f5b 	dmb	ish
 80a1db2:	07db      	lsls	r3, r3, #31
 80a1db4:	d410      	bmi.n	80a1dd8 <_Z17_fetch_usbserial1v+0x38>
 80a1db6:	4620      	mov	r0, r4
 80a1db8:	f7fe f971 	bl	80a009e <__cxa_guard_acquire>
 80a1dbc:	b160      	cbz	r0, 80a1dd8 <_Z17_fetch_usbserial1v+0x38>
 80a1dbe:	2101      	movs	r1, #1
 80a1dc0:	aa01      	add	r2, sp, #4
 80a1dc2:	4808      	ldr	r0, [pc, #32]	; (80a1de4 <_Z17_fetch_usbserial1v+0x44>)
 80a1dc4:	f7ff ff84 	bl	80a1cd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1dc8:	4620      	mov	r0, r4
 80a1dca:	f7fe f96d 	bl	80a00a8 <__cxa_guard_release>
 80a1dce:	4a06      	ldr	r2, [pc, #24]	; (80a1de8 <_Z17_fetch_usbserial1v+0x48>)
 80a1dd0:	4906      	ldr	r1, [pc, #24]	; (80a1dec <_Z17_fetch_usbserial1v+0x4c>)
 80a1dd2:	4804      	ldr	r0, [pc, #16]	; (80a1de4 <_Z17_fetch_usbserial1v+0x44>)
 80a1dd4:	f000 f9f6 	bl	80a21c4 <__aeabi_atexit>
  return _usbserial1;
}
 80a1dd8:	4802      	ldr	r0, [pc, #8]	; (80a1de4 <_Z17_fetch_usbserial1v+0x44>)
 80a1dda:	b006      	add	sp, #24
 80a1ddc:	bd10      	pop	{r4, pc}
 80a1dde:	bf00      	nop
 80a1de0:	200001e8 	.word	0x200001e8
 80a1de4:	20000200 	.word	0x20000200
 80a1de8:	20000068 	.word	0x20000068
 80a1dec:	080a1c5d 	.word	0x080a1c5d

080a1df0 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a1df0:	2200      	movs	r2, #0
 80a1df2:	6840      	ldr	r0, [r0, #4]
 80a1df4:	4611      	mov	r1, r2
 80a1df6:	f7ff bcab 	b.w	80a1750 <network_ready>

080a1dfa <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a1dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1dfc:	4615      	mov	r5, r2
 80a1dfe:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a1e00:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a1e02:	460e      	mov	r6, r1
 80a1e04:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a1e06:	2100      	movs	r1, #0
 80a1e08:	a803      	add	r0, sp, #12
 80a1e0a:	f000 fa01 	bl	80a2210 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1e0e:	4628      	mov	r0, r5
 80a1e10:	f000 fa2a 	bl	80a2268 <strlen>
 80a1e14:	2700      	movs	r7, #0
 80a1e16:	b281      	uxth	r1, r0
 80a1e18:	6873      	ldr	r3, [r6, #4]
 80a1e1a:	4628      	mov	r0, r5
 80a1e1c:	9700      	str	r7, [sp, #0]
 80a1e1e:	aa03      	add	r2, sp, #12
 80a1e20:	f7ff fc52 	bl	80a16c8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1e24:	b130      	cbz	r0, 80a1e34 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a1e26:	4639      	mov	r1, r7
 80a1e28:	4620      	mov	r0, r4
 80a1e2a:	f7ff fd6b 	bl	80a1904 <_ZN9IPAddressC1Em>
    }
 80a1e2e:	4620      	mov	r0, r4
 80a1e30:	b009      	add	sp, #36	; 0x24
 80a1e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1e34:	4620      	mov	r0, r4
 80a1e36:	a903      	add	r1, sp, #12
 80a1e38:	f7ff fd52 	bl	80a18e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a1e3c:	e7f7      	b.n	80a1e2e <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a1e3e <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a1e3e:	2200      	movs	r2, #0
 80a1e40:	6840      	ldr	r0, [r0, #4]
 80a1e42:	4611      	mov	r1, r2
 80a1e44:	f7ff bca4 	b.w	80a1790 <network_listening>

080a1e48 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1e48:	2200      	movs	r2, #0
 80a1e4a:	6840      	ldr	r0, [r0, #4]
 80a1e4c:	4611      	mov	r1, r2
 80a1e4e:	f7ff bcaf 	b.w	80a17b0 <network_get_listen_timeout>

080a1e52 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a1e52:	2200      	movs	r2, #0
 80a1e54:	6840      	ldr	r0, [r0, #4]
 80a1e56:	f7ff bca3 	b.w	80a17a0 <network_set_listen_timeout>

080a1e5a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1e5a:	2200      	movs	r2, #0
 80a1e5c:	6840      	ldr	r0, [r0, #4]
 80a1e5e:	f081 0101 	eor.w	r1, r1, #1
 80a1e62:	f7ff bc8d 	b.w	80a1780 <network_listen>

080a1e66 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a1e66:	2300      	movs	r3, #0
 80a1e68:	6840      	ldr	r0, [r0, #4]
 80a1e6a:	461a      	mov	r2, r3
 80a1e6c:	4619      	mov	r1, r3
 80a1e6e:	f7ff bc7f 	b.w	80a1770 <network_off>

080a1e72 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a1e72:	2300      	movs	r3, #0
 80a1e74:	6840      	ldr	r0, [r0, #4]
 80a1e76:	461a      	mov	r2, r3
 80a1e78:	4619      	mov	r1, r3
 80a1e7a:	f7ff bc71 	b.w	80a1760 <network_on>

080a1e7e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1e7e:	2200      	movs	r2, #0
 80a1e80:	6840      	ldr	r0, [r0, #4]
 80a1e82:	4611      	mov	r1, r2
 80a1e84:	f7ff bc54 	b.w	80a1730 <network_connecting>

080a1e88 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1e88:	2200      	movs	r2, #0
 80a1e8a:	2102      	movs	r1, #2
 80a1e8c:	6840      	ldr	r0, [r0, #4]
 80a1e8e:	f7ff bc57 	b.w	80a1740 <network_disconnect>

080a1e92 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a1e92:	2300      	movs	r3, #0
 80a1e94:	6840      	ldr	r0, [r0, #4]
 80a1e96:	461a      	mov	r2, r3
 80a1e98:	f7ff bc42 	b.w	80a1720 <network_connect>

080a1e9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1e9c:	2204      	movs	r2, #4
 80a1e9e:	4b02      	ldr	r3, [pc, #8]	; (80a1ea8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1ea0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1ea2:	4a02      	ldr	r2, [pc, #8]	; (80a1eac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1ea4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a1ea6:	4770      	bx	lr
 80a1ea8:	20000518 	.word	0x20000518
 80a1eac:	080a2398 	.word	0x080a2398

080a1eb0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a1eb0:	4b01      	ldr	r3, [pc, #4]	; (80a1eb8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a1eb2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a1eb4:	4770      	bx	lr
 80a1eb6:	bf00      	nop
 80a1eb8:	20000004 	.word	0x20000004

080a1ebc <serialEventRun>:
{
 80a1ebc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1ebe:	4b13      	ldr	r3, [pc, #76]	; (80a1f0c <serialEventRun+0x50>)
 80a1ec0:	b143      	cbz	r3, 80a1ed4 <serialEventRun+0x18>
 80a1ec2:	f7ff ff2f 	bl	80a1d24 <_Z16_fetch_usbserialv>
 80a1ec6:	6803      	ldr	r3, [r0, #0]
 80a1ec8:	691b      	ldr	r3, [r3, #16]
 80a1eca:	4798      	blx	r3
 80a1ecc:	2800      	cmp	r0, #0
 80a1ece:	dd01      	ble.n	80a1ed4 <serialEventRun+0x18>
        serialEvent();
 80a1ed0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a1ed4:	4b0e      	ldr	r3, [pc, #56]	; (80a1f10 <serialEventRun+0x54>)
 80a1ed6:	b143      	cbz	r3, 80a1eea <serialEventRun+0x2e>
 80a1ed8:	f7ff fe96 	bl	80a1c08 <_Z22__fetch_global_Serial1v>
 80a1edc:	6803      	ldr	r3, [r0, #0]
 80a1ede:	691b      	ldr	r3, [r3, #16]
 80a1ee0:	4798      	blx	r3
 80a1ee2:	2800      	cmp	r0, #0
 80a1ee4:	dd01      	ble.n	80a1eea <serialEventRun+0x2e>
        serialEvent1();
 80a1ee6:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a1eea:	4b0a      	ldr	r3, [pc, #40]	; (80a1f14 <serialEventRun+0x58>)
 80a1eec:	b10b      	cbz	r3, 80a1ef2 <serialEventRun+0x36>
 80a1eee:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1ef2:	4b09      	ldr	r3, [pc, #36]	; (80a1f18 <serialEventRun+0x5c>)
 80a1ef4:	b143      	cbz	r3, 80a1f08 <serialEventRun+0x4c>
 80a1ef6:	f7ff ff53 	bl	80a1da0 <_Z17_fetch_usbserial1v>
 80a1efa:	6803      	ldr	r3, [r0, #0]
 80a1efc:	691b      	ldr	r3, [r3, #16]
 80a1efe:	4798      	blx	r3
 80a1f00:	2800      	cmp	r0, #0
 80a1f02:	dd01      	ble.n	80a1f08 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1f04:	f3af 8000 	nop.w
}
 80a1f08:	bd08      	pop	{r3, pc}
 80a1f0a:	bf00      	nop
	...

080a1f1c <_post_loop>:
{
 80a1f1c:	b508      	push	{r3, lr}
	serialEventRun();
 80a1f1e:	f7ff ffcd 	bl	80a1ebc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1f22:	f7ff fae7 	bl	80a14f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1f26:	4b01      	ldr	r3, [pc, #4]	; (80a1f2c <_post_loop+0x10>)
 80a1f28:	6018      	str	r0, [r3, #0]
}
 80a1f2a:	bd08      	pop	{r3, pc}
 80a1f2c:	20000538 	.word	0x20000538

080a1f30 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1f30:	4802      	ldr	r0, [pc, #8]	; (80a1f3c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1f32:	4a03      	ldr	r2, [pc, #12]	; (80a1f40 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1f34:	4903      	ldr	r1, [pc, #12]	; (80a1f44 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1f36:	1a12      	subs	r2, r2, r0
 80a1f38:	f000 b95c 	b.w	80a21f4 <memcpy>
 80a1f3c:	40024000 	.word	0x40024000
 80a1f40:	40024004 	.word	0x40024004
 80a1f44:	080a23f0 	.word	0x080a23f0

080a1f48 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1f48:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1f4a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1f4c:	461a      	mov	r2, r3
 80a1f4e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1f52:	9300      	str	r3, [sp, #0]
 80a1f54:	f7ff fbd2 	bl	80a16fc <system_ctrl_set_result>
}
 80a1f58:	b003      	add	sp, #12
 80a1f5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1f60 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1f60:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1f62:	8843      	ldrh	r3, [r0, #2]
 80a1f64:	2b0a      	cmp	r3, #10
 80a1f66:	d008      	beq.n	80a1f7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1f68:	2b50      	cmp	r3, #80	; 0x50
 80a1f6a:	d10b      	bne.n	80a1f84 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1f6c:	4b09      	ldr	r3, [pc, #36]	; (80a1f94 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1f6e:	681b      	ldr	r3, [r3, #0]
 80a1f70:	b14b      	cbz	r3, 80a1f86 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a1f72:	b003      	add	sp, #12
 80a1f74:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a1f78:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a1f7a:	f7ff ffe5 	bl	80a1f48 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a1f7e:	b003      	add	sp, #12
 80a1f80:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1f84:	2300      	movs	r3, #0
 80a1f86:	461a      	mov	r2, r3
 80a1f88:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1f8c:	9300      	str	r3, [sp, #0]
 80a1f8e:	f7ff fbb5 	bl	80a16fc <system_ctrl_set_result>
}
 80a1f92:	e7f4      	b.n	80a1f7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a1f94:	20000524 	.word	0x20000524

080a1f98 <module_user_init_hook>:
{
 80a1f98:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1f9a:	4c12      	ldr	r4, [pc, #72]	; (80a1fe4 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1f9c:	2100      	movs	r1, #0
 80a1f9e:	4812      	ldr	r0, [pc, #72]	; (80a1fe8 <module_user_init_hook+0x50>)
 80a1fa0:	f7ff fc1e 	bl	80a17e0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1fa4:	4d11      	ldr	r5, [pc, #68]	; (80a1fec <module_user_init_hook+0x54>)
 80a1fa6:	6823      	ldr	r3, [r4, #0]
 80a1fa8:	42ab      	cmp	r3, r5
 80a1faa:	bf0c      	ite	eq
 80a1fac:	2201      	moveq	r2, #1
 80a1fae:	2200      	movne	r2, #0
 80a1fb0:	4b0f      	ldr	r3, [pc, #60]	; (80a1ff0 <module_user_init_hook+0x58>)
 80a1fb2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1fb4:	d002      	beq.n	80a1fbc <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a1fb6:	f7ff ffbb 	bl	80a1f30 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1fba:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1fbc:	f7ff fa8a 	bl	80a14d4 <HAL_RNG_GetRandomNumber>
 80a1fc0:	4604      	mov	r4, r0
    srand(seed);
 80a1fc2:	f000 f92d 	bl	80a2220 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1fc6:	4b0b      	ldr	r3, [pc, #44]	; (80a1ff4 <module_user_init_hook+0x5c>)
 80a1fc8:	b113      	cbz	r3, 80a1fd0 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a1fca:	4620      	mov	r0, r4
 80a1fcc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1fd0:	2100      	movs	r1, #0
 80a1fd2:	4808      	ldr	r0, [pc, #32]	; (80a1ff4 <module_user_init_hook+0x5c>)
 80a1fd4:	f7ff fb9c 	bl	80a1710 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1fdc:	2100      	movs	r1, #0
 80a1fde:	4806      	ldr	r0, [pc, #24]	; (80a1ff8 <module_user_init_hook+0x60>)
 80a1fe0:	f7ff bb82 	b.w	80a16e8 <system_ctrl_set_app_request_handler>
 80a1fe4:	40024000 	.word	0x40024000
 80a1fe8:	080a1eb1 	.word	0x080a1eb1
 80a1fec:	9a271c1e 	.word	0x9a271c1e
 80a1ff0:	20000520 	.word	0x20000520
 80a1ff4:	00000000 	.word	0x00000000
 80a1ff8:	080a1f61 	.word	0x080a1f61

080a1ffc <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a1ffc:	b510      	push	{r4, lr}
 80a1ffe:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2000:	6880      	ldr	r0, [r0, #8]
 80a2002:	b108      	cbz	r0, 80a2008 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a2004:	f7ff fa5e 	bl	80a14c4 <os_mutex_recursive_destroy>
 80a2008:	4620      	mov	r0, r4
 80a200a:	bd10      	pop	{r4, pc}

080a200c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a200c:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a200e:	b570      	push	{r4, r5, r6, lr}
 80a2010:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2012:	d901      	bls.n	80a2018 <pinAvailable+0xc>
    return false;
 80a2014:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2016:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2018:	f1a0 030d 	sub.w	r3, r0, #13
 80a201c:	2b02      	cmp	r3, #2
 80a201e:	d90b      	bls.n	80a2038 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2020:	2801      	cmp	r0, #1
 80a2022:	d826      	bhi.n	80a2072 <pinAvailable+0x66>
 80a2024:	f000 f88e 	bl	80a2144 <_Z19__fetch_global_Wirev>
 80a2028:	2100      	movs	r1, #0
 80a202a:	7c00      	ldrb	r0, [r0, #16]
 80a202c:	f7ff faba 	bl	80a15a4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2030:	f080 0001 	eor.w	r0, r0, #1
 80a2034:	b2c0      	uxtb	r0, r0
 80a2036:	e7ee      	b.n	80a2016 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2038:	4e13      	ldr	r6, [pc, #76]	; (80a2088 <pinAvailable+0x7c>)
 80a203a:	7831      	ldrb	r1, [r6, #0]
 80a203c:	f3bf 8f5b 	dmb	ish
 80a2040:	f011 0501 	ands.w	r5, r1, #1
 80a2044:	d10f      	bne.n	80a2066 <pinAvailable+0x5a>
 80a2046:	4630      	mov	r0, r6
 80a2048:	f7fe f829 	bl	80a009e <__cxa_guard_acquire>
 80a204c:	b158      	cbz	r0, 80a2066 <pinAvailable+0x5a>
 80a204e:	4629      	mov	r1, r5
 80a2050:	480e      	ldr	r0, [pc, #56]	; (80a208c <pinAvailable+0x80>)
 80a2052:	f7ff fd41 	bl	80a1ad8 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2056:	4630      	mov	r0, r6
 80a2058:	f7fe f826 	bl	80a00a8 <__cxa_guard_release>
 80a205c:	4a0c      	ldr	r2, [pc, #48]	; (80a2090 <pinAvailable+0x84>)
 80a205e:	490d      	ldr	r1, [pc, #52]	; (80a2094 <pinAvailable+0x88>)
 80a2060:	480a      	ldr	r0, [pc, #40]	; (80a208c <pinAvailable+0x80>)
 80a2062:	f000 f8af 	bl	80a21c4 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2066:	4b09      	ldr	r3, [pc, #36]	; (80a208c <pinAvailable+0x80>)
 80a2068:	7818      	ldrb	r0, [r3, #0]
 80a206a:	f7ff fab5 	bl	80a15d8 <hal_spi_is_enabled>
 80a206e:	2800      	cmp	r0, #0
 80a2070:	d1d0      	bne.n	80a2014 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2072:	3c12      	subs	r4, #18
 80a2074:	2c01      	cmp	r4, #1
 80a2076:	d805      	bhi.n	80a2084 <pinAvailable+0x78>
 80a2078:	f7ff fdc6 	bl	80a1c08 <_Z22__fetch_global_Serial1v>
 80a207c:	7c00      	ldrb	r0, [r0, #16]
 80a207e:	f7ff fae3 	bl	80a1648 <hal_usart_is_enabled>
 80a2082:	e7d5      	b.n	80a2030 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2084:	2001      	movs	r0, #1
 80a2086:	e7c6      	b.n	80a2016 <pinAvailable+0xa>
 80a2088:	20000528 	.word	0x20000528
 80a208c:	2000052c 	.word	0x2000052c
 80a2090:	20000068 	.word	0x20000068
 80a2094:	080a1ffd 	.word	0x080a1ffd

080a2098 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2098:	2817      	cmp	r0, #23
{
 80a209a:	b538      	push	{r3, r4, r5, lr}
 80a209c:	4604      	mov	r4, r0
 80a209e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a20a0:	d80a      	bhi.n	80a20b8 <pinMode+0x20>
 80a20a2:	29ff      	cmp	r1, #255	; 0xff
 80a20a4:	d008      	beq.n	80a20b8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a20a6:	f7ff ffb1 	bl	80a200c <pinAvailable>
 80a20aa:	b128      	cbz	r0, 80a20b8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a20ac:	4629      	mov	r1, r5
 80a20ae:	4620      	mov	r0, r4
}
 80a20b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a20b4:	f7ff ba2e 	b.w	80a1514 <HAL_Pin_Mode>
}
 80a20b8:	bd38      	pop	{r3, r4, r5, pc}

080a20ba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a20ba:	b538      	push	{r3, r4, r5, lr}
 80a20bc:	4604      	mov	r4, r0
 80a20be:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a20c0:	f7ff fa30 	bl	80a1524 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a20c4:	28ff      	cmp	r0, #255	; 0xff
 80a20c6:	d010      	beq.n	80a20ea <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a20c8:	2806      	cmp	r0, #6
 80a20ca:	d804      	bhi.n	80a20d6 <digitalWrite+0x1c>
 80a20cc:	234d      	movs	r3, #77	; 0x4d
 80a20ce:	fa23 f000 	lsr.w	r0, r3, r0
 80a20d2:	07c3      	lsls	r3, r0, #31
 80a20d4:	d409      	bmi.n	80a20ea <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a20d6:	4620      	mov	r0, r4
 80a20d8:	f7ff ff98 	bl	80a200c <pinAvailable>
 80a20dc:	b128      	cbz	r0, 80a20ea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a20de:	4629      	mov	r1, r5
 80a20e0:	4620      	mov	r0, r4
}
 80a20e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a20e6:	f7ff ba25 	b.w	80a1534 <HAL_GPIO_Write>
}
 80a20ea:	bd38      	pop	{r3, r4, r5, pc}

080a20ec <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a20ec:	b510      	push	{r4, lr}
 80a20ee:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a20f0:	f7ff fa18 	bl	80a1524 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a20f4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a20f6:	b2db      	uxtb	r3, r3
 80a20f8:	2b01      	cmp	r3, #1
 80a20fa:	d908      	bls.n	80a210e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a20fc:	4620      	mov	r0, r4
 80a20fe:	f7ff ff85 	bl	80a200c <pinAvailable>
 80a2102:	b120      	cbz	r0, 80a210e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2104:	4620      	mov	r0, r4
}
 80a2106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a210a:	f7ff ba1b 	b.w	80a1544 <HAL_GPIO_Read>
}
 80a210e:	2000      	movs	r0, #0
 80a2110:	bd10      	pop	{r4, pc}
	...

080a2114 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a2114:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a2116:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2118:	2520      	movs	r5, #32
 80a211a:	8043      	strh	r3, [r0, #2]
 80a211c:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a211e:	4e08      	ldr	r6, [pc, #32]	; (80a2140 <_Z17acquireWireBufferv+0x2c>)
{
 80a2120:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2122:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2124:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2126:	6085      	str	r5, [r0, #8]
 80a2128:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a212a:	4628      	mov	r0, r5
 80a212c:	f000 f851 	bl	80a21d2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2130:	4631      	mov	r1, r6
	};
 80a2132:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2134:	4628      	mov	r0, r5
 80a2136:	f000 f84c 	bl	80a21d2 <_ZnajRKSt9nothrow_t>
	};
 80a213a:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a213c:	4620      	mov	r0, r4
 80a213e:	bd70      	pop	{r4, r5, r6, pc}
 80a2140:	080a23c4 	.word	0x080a23c4

080a2144 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2144:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2146:	4d0f      	ldr	r5, [pc, #60]	; (80a2184 <_Z19__fetch_global_Wirev+0x40>)
{
 80a2148:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a214a:	7829      	ldrb	r1, [r5, #0]
 80a214c:	f3bf 8f5b 	dmb	ish
 80a2150:	f011 0401 	ands.w	r4, r1, #1
 80a2154:	d113      	bne.n	80a217e <_Z19__fetch_global_Wirev+0x3a>
 80a2156:	4628      	mov	r0, r5
 80a2158:	f7fd ffa1 	bl	80a009e <__cxa_guard_acquire>
 80a215c:	b178      	cbz	r0, 80a217e <_Z19__fetch_global_Wirev+0x3a>
 80a215e:	a801      	add	r0, sp, #4
 80a2160:	f7ff ffd8 	bl	80a2114 <_Z17acquireWireBufferv>
 80a2164:	4621      	mov	r1, r4
 80a2166:	aa01      	add	r2, sp, #4
 80a2168:	4807      	ldr	r0, [pc, #28]	; (80a2188 <_Z19__fetch_global_Wirev+0x44>)
 80a216a:	f7ff fb77 	bl	80a185c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a216e:	4628      	mov	r0, r5
 80a2170:	f7fd ff9a 	bl	80a00a8 <__cxa_guard_release>
 80a2174:	4a05      	ldr	r2, [pc, #20]	; (80a218c <_Z19__fetch_global_Wirev+0x48>)
 80a2176:	4906      	ldr	r1, [pc, #24]	; (80a2190 <_Z19__fetch_global_Wirev+0x4c>)
 80a2178:	4803      	ldr	r0, [pc, #12]	; (80a2188 <_Z19__fetch_global_Wirev+0x44>)
 80a217a:	f000 f823 	bl	80a21c4 <__aeabi_atexit>
	return wire;
}
 80a217e:	4802      	ldr	r0, [pc, #8]	; (80a2188 <_Z19__fetch_global_Wirev+0x44>)
 80a2180:	b007      	add	sp, #28
 80a2182:	bd30      	pop	{r4, r5, pc}
 80a2184:	2000053c 	.word	0x2000053c
 80a2188:	20000540 	.word	0x20000540
 80a218c:	20000068 	.word	0x20000068
 80a2190:	080a1803 	.word	0x080a1803

080a2194 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2194:	2300      	movs	r3, #0
 80a2196:	b513      	push	{r0, r1, r4, lr}
 80a2198:	4c07      	ldr	r4, [pc, #28]	; (80a21b8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a219a:	461a      	mov	r2, r3
 80a219c:	4619      	mov	r1, r3
 80a219e:	4620      	mov	r0, r4
 80a21a0:	9300      	str	r3, [sp, #0]
 80a21a2:	f7ff fbc5 	bl	80a1930 <_ZN9IPAddressC1Ehhhh>
 80a21a6:	4620      	mov	r0, r4
 80a21a8:	4a04      	ldr	r2, [pc, #16]	; (80a21bc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a21aa:	4905      	ldr	r1, [pc, #20]	; (80a21c0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a21ac:	b002      	add	sp, #8
 80a21ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a21b2:	f000 b807 	b.w	80a21c4 <__aeabi_atexit>
 80a21b6:	bf00      	nop
 80a21b8:	20000554 	.word	0x20000554
 80a21bc:	20000068 	.word	0x20000068
 80a21c0:	080a1881 	.word	0x080a1881

080a21c4 <__aeabi_atexit>:
 80a21c4:	460b      	mov	r3, r1
 80a21c6:	4601      	mov	r1, r0
 80a21c8:	4618      	mov	r0, r3
 80a21ca:	f000 b805 	b.w	80a21d8 <__cxa_atexit>

080a21ce <_ZdlPvj>:
 80a21ce:	f7fd bf64 	b.w	80a009a <_ZdlPv>

080a21d2 <_ZnajRKSt9nothrow_t>:
 80a21d2:	f7fd bf60 	b.w	80a0096 <_Znaj>
	...

080a21d8 <__cxa_atexit>:
 80a21d8:	b510      	push	{r4, lr}
 80a21da:	4604      	mov	r4, r0
 80a21dc:	4804      	ldr	r0, [pc, #16]	; (80a21f0 <__cxa_atexit+0x18>)
 80a21de:	4613      	mov	r3, r2
 80a21e0:	b120      	cbz	r0, 80a21ec <__cxa_atexit+0x14>
 80a21e2:	460a      	mov	r2, r1
 80a21e4:	2002      	movs	r0, #2
 80a21e6:	4621      	mov	r1, r4
 80a21e8:	f3af 8000 	nop.w
 80a21ec:	bd10      	pop	{r4, pc}
 80a21ee:	bf00      	nop
 80a21f0:	00000000 	.word	0x00000000

080a21f4 <memcpy>:
 80a21f4:	440a      	add	r2, r1
 80a21f6:	4291      	cmp	r1, r2
 80a21f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a21fc:	d100      	bne.n	80a2200 <memcpy+0xc>
 80a21fe:	4770      	bx	lr
 80a2200:	b510      	push	{r4, lr}
 80a2202:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2206:	4291      	cmp	r1, r2
 80a2208:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a220c:	d1f9      	bne.n	80a2202 <memcpy+0xe>
 80a220e:	bd10      	pop	{r4, pc}

080a2210 <memset>:
 80a2210:	4603      	mov	r3, r0
 80a2212:	4402      	add	r2, r0
 80a2214:	4293      	cmp	r3, r2
 80a2216:	d100      	bne.n	80a221a <memset+0xa>
 80a2218:	4770      	bx	lr
 80a221a:	f803 1b01 	strb.w	r1, [r3], #1
 80a221e:	e7f9      	b.n	80a2214 <memset+0x4>

080a2220 <srand>:
 80a2220:	b538      	push	{r3, r4, r5, lr}
 80a2222:	4b0d      	ldr	r3, [pc, #52]	; (80a2258 <srand+0x38>)
 80a2224:	4604      	mov	r4, r0
 80a2226:	681d      	ldr	r5, [r3, #0]
 80a2228:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a222a:	b97b      	cbnz	r3, 80a224c <srand+0x2c>
 80a222c:	2018      	movs	r0, #24
 80a222e:	f7ff fac7 	bl	80a17c0 <malloc>
 80a2232:	4a0a      	ldr	r2, [pc, #40]	; (80a225c <srand+0x3c>)
 80a2234:	4b0a      	ldr	r3, [pc, #40]	; (80a2260 <srand+0x40>)
 80a2236:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2238:	e9c0 2300 	strd	r2, r3, [r0]
 80a223c:	4b09      	ldr	r3, [pc, #36]	; (80a2264 <srand+0x44>)
 80a223e:	2201      	movs	r2, #1
 80a2240:	6083      	str	r3, [r0, #8]
 80a2242:	230b      	movs	r3, #11
 80a2244:	8183      	strh	r3, [r0, #12]
 80a2246:	2300      	movs	r3, #0
 80a2248:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a224c:	2200      	movs	r2, #0
 80a224e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2250:	611c      	str	r4, [r3, #16]
 80a2252:	615a      	str	r2, [r3, #20]
 80a2254:	bd38      	pop	{r3, r4, r5, pc}
 80a2256:	bf00      	nop
 80a2258:	20000004 	.word	0x20000004
 80a225c:	abcd330e 	.word	0xabcd330e
 80a2260:	e66d1234 	.word	0xe66d1234
 80a2264:	0005deec 	.word	0x0005deec

080a2268 <strlen>:
 80a2268:	4603      	mov	r3, r0
 80a226a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a226e:	2a00      	cmp	r2, #0
 80a2270:	d1fb      	bne.n	80a226a <strlen+0x2>
 80a2272:	1a18      	subs	r0, r3, r0
 80a2274:	3801      	subs	r0, #1
 80a2276:	4770      	bx	lr

080a2278 <dynalib_user>:
 80a2278:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a2288:	0000 0000                                   ....

080a228c <CSWTCH.189>:
 80a228c:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a229c:	0050 0000                                   P...

080a22a0 <_ZTV7TwoWire>:
	...
 80a22a8:	1803 080a 184d 080a 1825 080a 1805 080a     ....M...%.......
 80a22b8:	182d 080a 1835 080a 183d 080a 1845 080a     -...5...=...E...

080a22c8 <_ZTV9IPAddress>:
	...
 80a22d0:	1891 080a 1881 080a 1883 080a 7061 0070     ............app.

080a22e0 <_ZTVN5spark12NetworkClassE>:
	...
 80a22e8:	1959 080a 1963 080a 196d 080a 1977 080a     Y...c...m...w...
 80a22f8:	1981 080a 198d 080a 1999 080a 19a5 080a     ................
 80a2308:	19ad 080a 19b7 080a 19c1 080a 5925 252d     ............%Y-%
 80a2318:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a2328:	7361 7463 6d69 0065                         asctime.

080a2330 <_ZTV11USARTSerial>:
	...
 80a2338:	1b65 080a 1bcd 080a 1ba9 080a 1a25 080a     e...........%...
 80a2348:	1b79 080a 1b95 080a 1b87 080a 1ba3 080a     y...............
 80a2358:	1b67 080a 1b6b 080a                         g...k...

080a2360 <_ZTV9USBSerial>:
	...
 80a2368:	1c5d 080a 1cc3 080a 1c9b 080a 1a25 080a     ]...........%...
 80a2378:	1c8d 080a 1c5f 080a 1c6f 080a 1cbd 080a     ...._...o.......
 80a2388:	1c7f 080a 1c59 080a                         ....Y...

080a2390 <_ZTVN5spark9WiFiClassE>:
	...
 80a2398:	1e93 080a 1e89 080a 1e7f 080a 1df1 080a     ................
 80a23a8:	1e73 080a 1e67 080a 1e5b 080a 1e53 080a     s...g...[...S...
 80a23b8:	1e49 080a 1e3f 080a 1dfb 080a               I...?.......

080a23c4 <_ZSt7nothrow>:
	...

080a23c5 <link_const_variable_data_end>:
 80a23c5:	00          	.byte	0x00
	...

080a23c8 <link_constructors_location>:
 80a23c8:	080a01a5 	.word	0x080a01a5
 80a23cc:	080a14a5 	.word	0x080a14a5
 80a23d0:	080a1949 	.word	0x080a1949
 80a23d4:	080a1a11 	.word	0x080a1a11
 80a23d8:	080a1abd 	.word	0x080a1abd
 80a23dc:	080a1b15 	.word	0x080a1b15
 80a23e0:	080a1b51 	.word	0x080a1b51
 80a23e4:	080a1e9d 	.word	0x080a1e9d
 80a23e8:	080a2195 	.word	0x080a2195

080a23ec <link_constructors_end>:
 80a23ec:	00000000 	.word	0x00000000
